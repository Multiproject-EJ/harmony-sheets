  for (var n = 0; n < t.length; n++) {
    const r = t[n];
    if (typeof r != "string" && !Array.isArray(r)) {
      for (const o in r)
        if (o !== "default" && !(o in e)) {
          const s = Object.getOwnPropertyDescriptor(r, o);
          s && Object.defineProperty(e, o, s.get ? s : {
            enumerable: !0,
            get: () => r[o]
          });
        }
    }
  }
  return Object.freeze(Object.defineProperty(e, Symbol.toStringTag, { value: "Module" }));
}
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
  if (e.__esModule) return e;
  var t = e.default;
  if (typeof t == "function") {
    var n = function r() {
      return this instanceof r ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    n.prototype = t.prototype;
  } else n = {};
  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(e).forEach(function(r) {
    var o = Object.getOwnPropertyDescriptor(e, r);
    Object.defineProperty(n, r, o.get ? o : {
      enumerable: !0,
      get: function() {
        return e[r];
      }
    });
  }), n;
}
/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  }
  var C = { isMounted: function() {
    return !1;
  }, enqueueForceUpdate: function() {
  }, enqueueReplaceState: function() {
  }, enqueueSetState: function() {
  } }, T = Object.assign, E = {};
  };
  }
  }
  M.constructor = I, T(M, O.prototype), M.isPureReactComponent = !0;
    var ue, he = {}, ge = null, fe = null;
    var pe = arguments.length - 2;
    if (pe === 1) he.children = de;
    else if (1 < pe) {
      for (var be = Array(pe), we = 0; we < pe; we++) be[we] = arguments[we + 2];
      he.children = be;
    }
  }
  }
  }
    var ie = { "=": "=0", ":": "=2" };
      return ie[de];
    });
  }
  }
    var fe = !1;
    else switch (ge) {
      case "string":
      case "number":
        fe = !0;
        break;
      case "object":
          case e:
          case t:
            fe = !0;
        }
    }
      return we;
      fe += ee(ge, ie, de, be, he);
    }
    return fe;
  }
    var ue = [], he = 0;
      return ie.call(de, ge, he++);
    }), ue;
  }
      ie = ie(), ie.then(function(de) {
      }, function(de) {
    }
  }
  function Q() {
    throw Error("act(...) is not supported in production builds of React.");
  }
      ie.apply(this, arguments);
    }, de);
    var ie = 0;
      ie++;
    }), ie;
      return ie;
    }) || [];
    if (ie != null) {
    }
    var be = arguments.length - 2;
    if (be === 1) ue.children = de;
    else if (1 < be) {
      pe = Array(be);
      for (var we = 0; we < be; we++) pe[we] = arguments[we + 2];
      ue.children = pe;
    }
    return { current: null };
    var ie = te.transition;
    te.transition = {};
    try {
    } finally {
      te.transition = ie;
    }
    return X.current.useId();
    return X.current.useTransition();
}
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      function I(ne) {
        if (ne === null || typeof ne != "object")
          return null;
        return typeof ve == "function" ? ve : null;
      }
      var M = {
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
        transition: null
        current: null,
        // Used to reproduce behavior of `batchedUpdates` in legacy mode.
        isBatchingLegacy: !1,
        didScheduleLegacyUpdate: !1
        /**
         * @internal
         * @type {ReactComponent}
         */
        current: null
      }
        var ne = "";
        return ve && (ne += ve() || ""), ne;
      };
        ReactCurrentDispatcher: M,
      };
        {
          for (var ve = arguments.length, je = new Array(ve > 1 ? ve - 1 : 0), Ve = 1; Ve < ve; Ve++)
            je[Ve - 1] = arguments[Ve];
          te("warn", ne, je);
        }
      }
      function X(ne) {
        {
          for (var ve = arguments.length, je = new Array(ve > 1 ? ve - 1 : 0), Ve = 1; Ve < ve; Ve++)
            je[Ve - 1] = arguments[Ve];
          te("error", ne, je);
        }
      }
      function te(ne, ve, je) {
        {
          var Ve = G.ReactDebugCurrentFrame, ht = Ve.getStackAddendum();
          ht !== "" && (ve += "%s", je = je.concat([ht]));
          var tn = je.map(function(_t) {
            return String(_t);
          });
          tn.unshift("Warning: " + ve), Function.prototype.apply.call(console[ne], console, tn);
        }
      }
      var re = {};
      function Q(ne, ve) {
        {
          var je = ne.constructor, Ve = je && (je.displayName || je.name) || "ReactClass", ht = Ve + "." + ve;
          if (re[ht])
            return;
          X("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", ve, Ve), re[ht] = !0;
        }
      }
        /**
         * Checks whether or not this composite component is mounted.
         * @param {ReactClass} publicInstance The instance we want to test.
         * @return {boolean} True if mounted, false otherwise.
         * @protected
         * @final
         */
        isMounted: function(ne) {
          return !1;
        },
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueForceUpdate: function(ne, ve, je) {
          Q(ne, "forceUpdate");
        },
        /**
         * Replaces all of the state. Always use this or `setState` to mutate state.
         * You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} completeState Next state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} callerName name of the calling function in the public API.
         * @internal
         */
        enqueueReplaceState: function(ne, ve, je, Ve) {
          Q(ne, "replaceState");
        },
        /**
         * Sets a subset of the state. This only exists because _pendingState is
         * internal. This provides a merging strategy that is not available to deep
         * properties which is confusing. TODO: Expose pendingState or don't use it
         * during the merge.
         *
         * @param {ReactClass} publicInstance The instance that should rerender.
         * @param {object} partialState Next partial state to be merged with state.
         * @param {?function} callback Called after component is updated.
         * @param {?string} Name of the calling function in the public API.
         * @internal
         */
        enqueueSetState: function(ne, ve, je, Ve) {
          Q(ne, "setState");
        }
      }, ie = Object.assign, de = {};
      Object.freeze(de);
      function ue(ne, ve, je) {
      }
      ue.prototype.isReactComponent = {}, ue.prototype.setState = function(ne, ve) {
        if (typeof ne != "object" && typeof ne != "function" && ne != null)
          throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, ne, ve, "setState");
      }, ue.prototype.forceUpdate = function(ne) {
        this.updater.enqueueForceUpdate(this, ne, "forceUpdate");
      };
      {
        var he = {
          isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
          replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
        }, ge = function(ne, ve) {
          Object.defineProperty(ue.prototype, ne, {
            get: function() {
            }
          });
        };
        for (var fe in he)
          he.hasOwnProperty(fe) && ge(fe, he[fe]);
      }
      function pe() {
      }
      pe.prototype = ue.prototype;
      function be(ne, ve, je) {
      }
      var we = be.prototype = new pe();
      we.constructor = be, ie(we, ue.prototype), we.isPureReactComponent = !0;
      function _e() {
        var ne = {
          current: null
        };
        return Object.seal(ne), ne;
      }
      var ce = Array.isArray;
      function Ce(ne) {
        return ce(ne);
      }
      function Ne(ne) {
        {
          var ve = typeof Symbol == "function" && Symbol.toStringTag, je = ve && ne[Symbol.toStringTag] || ne.constructor.name || "Object";
          return je;
        }
      }
      function Be(ne) {
        try {
          return tt(ne), !1;
        } catch {
          return !0;
        }
      }
      function tt(ne) {
        return "" + ne;
      }
        if (Be(ne))
          return X("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Ne(ne)), tt(ne);
      }
      function rt(ne, ve, je) {
        var Ve = ne.displayName;
        if (Ve)
          return Ve;
        var ht = ve.displayName || ve.name || "";
        return ht !== "" ? je + "(" + ht + ")" : je;
      }
      function ot(ne) {
        return ne.displayName || "Context";
      }
      function wt(ne) {
        if (ne == null)
          return null;
        if (typeof ne.tag == "number" && X("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof ne == "function")
          return ne.displayName || ne.name || null;
        if (typeof ne == "string")
          return ne;
        switch (ne) {
          case s:
            return "Fragment";
          case o:
            return "Portal";
          case c:
            return "Profiler";
          case a:
            return "StrictMode";
            return "Suspense";
          case w:
            return "SuspenseList";
        }
        if (typeof ne == "object")
          switch (ne.$$typeof) {
              var ve = ne;
              return ot(ve) + ".Consumer";
            case f:
              var je = ne;
              return ot(je._context) + ".Provider";
            case g:
              return rt(ne, ne.render, "ForwardRef");
            case C:
              var Ve = ne.displayName || null;
              return Ve !== null ? Ve : wt(ne.type) || "Memo";
            case T: {
              var ht = ne, tn = ht._payload, _t = ht._init;
              try {
                return wt(_t(tn));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var gt = Object.prototype.hasOwnProperty, nt = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, Ft, ut, Et;
      Et = {};
      function Tt(ne) {
        if (gt.call(ne, "ref")) {
          var ve = Object.getOwnPropertyDescriptor(ne, "ref").get;
          if (ve && ve.isReactWarning)
            return !1;
        }
        return ne.ref !== void 0;
      }
      function At(ne) {
        if (gt.call(ne, "key")) {
          var ve = Object.getOwnPropertyDescriptor(ne, "key").get;
          if (ve && ve.isReactWarning)
            return !1;
        }
        return ne.key !== void 0;
      }
      function vt(ne, ve) {
        var je = function() {
          Ft || (Ft = !0, X("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ve));
        };
        je.isReactWarning = !0, Object.defineProperty(ne, "key", {
          get: je,
          configurable: !0
        });
      }
      function Xe(ne, ve) {
        var je = function() {
          ut || (ut = !0, X("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", ve));
        };
        je.isReactWarning = !0, Object.defineProperty(ne, "ref", {
          get: je,
          configurable: !0
        });
      }
      function Oe(ne) {
          Et[ve] || (X('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', ve, ne.ref), Et[ve] = !0);
        }
      }
      var Ie = function(ne, ve, je, Ve, ht, tn, _t) {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: r,
          // Built-in properties that belong on the element
          type: ne,
          key: ve,
          ref: je,
          props: _t,
          // Record the component responsible for creating this element.
          _owner: tn
        };
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: Ve
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: ht
      };
      function pt(ne, ve, je) {
        if (ve != null) {
          for (Ve in ve)
            gt.call(ve, Ve) && !nt.hasOwnProperty(Ve) && (ht[Ve] = ve[Ve]);
        }
          ht.children = je;
        }
        if (ne && ne.defaultProps) {
        }
        if (tn || _t) {
        }
      }
      function yt(ne, ve) {
        var je = Ie(ne.type, ve, ne.ref, ne._self, ne._source, ne._owner, ne.props);
        return je;
      }
      function zt(ne, ve, je) {
        if (ne == null)
          throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + ne + ".");
        if (ve != null) {
          for (Ve in ve)
        }
          ht.children = je;
        }
      }
      function bt(ne) {
        return typeof ne == "object" && ne !== null && ne.$$typeof === r;
      }
      var We = ".", St = ":";
        var ve = /[=:]/g, je = {
          "=": "=0",
          ":": "=2"
        }, Ve = ne.replace(ve, function(ht) {
          return je[ht];
        });
        return "$" + Ve;
      }
      }
      }
        var tn = typeof ne;
        (tn === "undefined" || tn === "boolean") && (ne = null);
        var _t = !1;
        if (ne === null)
          _t = !0;
        else
          switch (tn) {
            case "string":
            case "number":
              _t = !0;
              break;
            case "object":
              switch (ne.$$typeof) {
                case r:
                case o:
                  _t = !0;
              }
          }
        if (_t) {
            });
            // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            je + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
              // eslint-disable-next-line react-internal/safe-string-coercion
          return 1;
        }
        if (Ce(ne))
        else {
          } else if (tn === "object") {
          }
        }
      }
        if (ne == null)
          return ne;
        var Ve = [], ht = 0;
          return ve.call(je, tn, ht++);
        }), Ve;
      }
        var ve = 0;
          ve++;
        }), ve;
      }
          ve.apply(this, arguments);
        }, je);
      }
      function Wt(ne) {
          return ve;
        }) || [];
      }
        if (!bt(ne))
          throw new Error("React.Children.only expected to receive a single React element child.");
        return ne;
      }
        var ve = {
          // As a workaround to support multiple concurrent renderers, we categorize
          // some renderers as primary and others as secondary. We only expect
          // there to be two concurrent renderers at most: React Native (primary) and
          // Fabric (secondary); React DOM (primary) and React ART (secondary).
          // Secondary renderers store their context values on separate fields.
          _currentValue: ne,
          _currentValue2: ne,
          // Used to track how many concurrent renderers this context currently
          // supports within in a single renderer. Such as parallel server rendering.
          _threadCount: 0,
          // These are circular
          Provider: null,
          Consumer: null,
          // Add these to use same hidden class in VM as ServerContext
          _defaultValue: null,
          _globalName: null
        };
        ve.Provider = {
          $$typeof: f,
          _context: ve
        };
        var je = !1, Ve = !1, ht = !1;
        {
          var tn = {
            _context: ve
          };
          Object.defineProperties(tn, {
            Provider: {
              get: function() {
                return Ve || (Ve = !0, X("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")), ve.Provider;
              },
              set: function(_t) {
                ve.Provider = _t;
              }
            },
            _currentValue: {
              get: function() {
                return ve._currentValue;
              },
              set: function(_t) {
                ve._currentValue = _t;
              }
            },
            _currentValue2: {
              get: function() {
                return ve._currentValue2;
              },
              set: function(_t) {
                ve._currentValue2 = _t;
              }
            },
            _threadCount: {
              get: function() {
                return ve._threadCount;
              },
              set: function(_t) {
                ve._threadCount = _t;
              }
            },
            Consumer: {
              get: function() {
                return je || (je = !0, X("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")), ve.Consumer;
              }
            },
            displayName: {
              get: function() {
                return ve.displayName;
              },
              set: function(_t) {
              }
            }
          }), ve.Consumer = tn;
        }
        return ve._currentRenderer = null, ve._currentRenderer2 = null, ve;
      }
          var ve = ne._result, je = ve();
          if (je.then(function(tn) {
              var _t = ne;
            }
          }, function(tn) {
              var _t = ne;
            }
            var Ve = ne;
          }
        }
          var ht = ne._result;
          return ht === void 0 && X(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`, ht), "default" in ht || X(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`, ht), ht.default;
        } else
          throw ne._result;
      }
        var ve = {
          // We use these fields to store the result.
          _result: ne
        }, je = {
          $$typeof: T,
          _payload: ve,
        };
        {
          var Ve, ht;
          Object.defineProperties(je, {
            defaultProps: {
              configurable: !0,
              get: function() {
                return Ve;
              },
              set: function(tn) {
                X("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), Ve = tn, Object.defineProperty(je, "defaultProps", {
                  enumerable: !0
                });
              }
            },
            propTypes: {
              configurable: !0,
              get: function() {
                return ht;
              },
              set: function(tn) {
                X("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."), ht = tn, Object.defineProperty(je, "propTypes", {
                  enumerable: !0
                });
              }
            }
          });
        }
        return je;
      }
        ne != null && ne.$$typeof === C ? X("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).") : typeof ne != "function" ? X("forwardRef requires a render function but was given %s.", ne === null ? "null" : typeof ne) : ne.length !== 0 && ne.length !== 2 && X("forwardRef render functions accept exactly two parameters: props and ref. %s", ne.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined."), ne != null && (ne.defaultProps != null || ne.propTypes != null) && X("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        var ve = {
          $$typeof: g,
          render: ne
        };
        {
          var je;
          Object.defineProperty(ve, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return je;
            },
            set: function(Ve) {
              je = Ve, !ne.name && !ne.displayName && (ne.displayName = Ve);
            }
          });
        }
        return ve;
      }
      var ye;
      ye = Symbol.for("react.module.reference");
      function Ye(ne) {
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        ne.$$typeof === ye || ne.getModuleId !== void 0));
      }
      function ft(ne, ve) {
        Ye(ne) || X("memo: The first argument must be a component. Instead received: %s", ne === null ? "null" : typeof ne);
        var je = {
          $$typeof: C,
          type: ne,
          compare: ve === void 0 ? null : ve
        };
        {
          var Ve;
          Object.defineProperty(je, "displayName", {
            enumerable: !1,
            configurable: !0,
            get: function() {
              return Ve;
            },
            set: function(ht) {
              Ve = ht, !ne.name && !ne.displayName && (ne.displayName = ht);
            }
          });
        }
        return je;
      }
      function Ct() {
        var ne = M.current;
        return ne === null && X(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`), ne;
      }
        var ve = Ct();
        if (ne._context !== void 0) {
          var je = ne._context;
          je.Consumer === ne ? X("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?") : je.Provider === ne && X("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return ve.useContext(ne);
      }
      function De(ne) {
        var ve = Ct();
        return ve.useState(ne);
      }
      function Re(ne, ve, je) {
        var Ve = Ct();
        return Ve.useReducer(ne, ve, je);
      }
      function Je(ne) {
        var ve = Ct();
        return ve.useRef(ne);
      }
      function Bt(ne, ve) {
        var je = Ct();
        return je.useEffect(ne, ve);
      }
      function jt(ne, ve) {
        var je = Ct();
        return je.useInsertionEffect(ne, ve);
      }
      function Kt(ne, ve) {
        var je = Ct();
        return je.useLayoutEffect(ne, ve);
      }
      function Ln(ne, ve) {
        var je = Ct();
        return je.useCallback(ne, ve);
      }
        var je = Ct();
        return je.useMemo(ne, ve);
      }
        var Ve = Ct();
        return Ve.useImperativeHandle(ne, ve, je);
      }
        {
          var je = Ct();
          return je.useDebugValue(ne, ve);
        }
      }
        var ne = Ct();
        return ne.useTransition();
      }
        var ve = Ct();
        return ve.useDeferredValue(ne);
      }
        var ne = Ct();
        return ne.useId();
      }
        var Ve = Ct();
        return Ve.useSyncExternalStore(ne, ve, je);
      }
      }
        {
            var ne = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              info: ne,
              log: ne,
              warn: ne,
              error: ne,
              group: ne,
              groupCollapsed: ne,
              groupEnd: ne
            });
          }
        }
      }
        {
            var ne = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: ie({}, ne, {
              }),
              info: ie({}, ne, {
              }),
              warn: ie({}, ne, {
              }),
              error: ie({}, ne, {
              }),
              group: ie({}, ne, {
              }),
              groupCollapsed: ie({}, ne, {
              }),
              groupEnd: ie({}, ne, {
              })
            });
          }
        }
      }
        {
            try {
              throw Error();
            } catch (ht) {
              var Ve = ht.stack.trim().match(/\n( *(at )?)/);
            }
          return `
        }
      }
      {
      }
          return "";
        {
          if (je !== void 0)
            return je;
        }
        var Ve;
        var ht = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var tn;
        try {
          if (ve) {
            var _t = function() {
              throw Error();
            };
            if (Object.defineProperty(_t.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(_t, []);
              }
              Reflect.construct(ne, [], _t);
            } else {
              try {
                _t.call();
              }
              ne.call(_t.prototype);
            }
          } else {
            try {
              throw Error();
            }
            ne();
          }
                  do
                    }
                break;
              }
          }
        } finally {
        }
      }
      }
        var ve = ne.prototype;
        return !!(ve && ve.isReactComponent);
      }
        if (ne == null)
          return "";
        if (typeof ne == "function")
        if (typeof ne == "string")
        switch (ne) {
          case w:
        }
        if (typeof ne == "object")
          switch (ne.$$typeof) {
            case g:
            case C:
            case T: {
              var Ve = ne, ht = Ve._payload, tn = Ve._init;
              try {
              } catch {
              }
            }
          }
        return "";
      }
        if (ne) {
        } else
      }
        {
          var tn = Function.call.bind(gt);
          for (var _t in ne)
            if (tn(ne, _t)) {
              try {
                if (typeof ne[_t] != "function") {
                }
              }
            }
        }
      }
        if (ne) {
        } else
      }
          if (ne)
            return `

Check the render method of \`` + ne + "`.";
        }
        return "";
      }
        if (ne !== void 0) {
          var ve = ne.fileName.replace(/^.*[\\\/]/, ""), je = ne.lineNumber;
          return `

Check your code at ` + ve + ":" + je + ".";
        }
        return "";
      }
      }
        if (!ve) {
          var je = typeof ne == "string" ? ne : ne.displayName || ne.name;
          je && (ve = `

Check the top-level render call using <` + je + ">.");
        }
        return ve;
      }
        if (!(!ne._store || ne._store.validated || ne.key != null)) {
          ne._store.validated = !0;
            var Ve = "";
          }
        }
      }
        if (typeof ne == "object") {
          if (Ce(ne))
            for (var je = 0; je < ne.length; je++) {
              var Ve = ne[je];
            }
          else if (bt(ne))
            ne._store && (ne._store.validated = !0);
          else if (ne) {
            var ht = I(ne);
            if (typeof ht == "function" && ht !== ne.entries)
              for (var tn = ht.call(ne), _t; !(_t = tn.next()).done; )
          }
        }
      }
        {
          var ve = ne.type;
          if (ve == null || typeof ve == "string")
            return;
          var je;
          if (typeof ve == "function")
            je = ve.propTypes;
          else if (typeof ve == "object" && (ve.$$typeof === g || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          ve.$$typeof === C))
            je = ve.propTypes;
          else
            return;
          if (je) {
            var Ve = wt(ve);
            var ht = wt(ve);
            X("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", ht || "Unknown");
          }
          typeof ve.getDefaultProps == "function" && !ve.getDefaultProps.isReactClassApproved && X("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
        {
          for (var ve = Object.keys(ne.props), je = 0; je < ve.length; je++) {
            var Ve = ve[je];
            if (Ve !== "children" && Ve !== "key") {
              break;
            }
          }
        }
      }
        var Ve = Ye(ne);
        if (!Ve) {
          var ht = "";
          (ne === void 0 || typeof ne == "object" && ne !== null && Object.keys(ne).length === 0) && (ht += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var _t;
          ne === null ? _t = "null" : Ce(ne) ? _t = "array" : ne !== void 0 && ne.$$typeof === r ? (_t = "<" + (wt(ne.type) || "Unknown") + " />", ht = " Did you accidentally export a JSX literal instead of a component?") : _t = typeof ne, X("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", _t, ht);
        }
        if (Ve)
          enumerable: !1,
          get: function() {
              value: ne
            }), ne;
          }
        }), ve;
      }
        for (var Ve = zt.apply(this, arguments), ht = 2; ht < arguments.length; ht++)
        try {
          ne();
        } finally {
            var ht = Ve._updatedFibers.size;
          }
        }
      }
          try {
            var ve = ("require" + Math.random()).slice(0, 7), je = e && e[ve];
          } catch {
              var tn = new MessageChannel();
              tn.port1.onmessage = ht, tn.port2.postMessage(void 0);
            };
          }
      }
        {
          try {
            }
          } finally {
          }
          if (Ve !== null && typeof Ve == "object" && typeof Ve.then == "function") {
                });
              }
            };
            }).then(function() {
          } else {
                }
              };
            } else {
                }
              };
            }
          }
        }
      }
      function Ls(ne) {
      }
        {
          if (Ve !== null)
            try {
              });
            } catch (ht) {
              je(ht);
            }
          else
            ve(ne);
        }
      }
          var ve = 0;
          try {
            for (; ve < ne.length; ve++) {
              var je = ne[ve];
              do
                je = je(!0);
              while (je !== null);
            }
            ne.length = 0;
          } catch (Ve) {
            throw ne = ne.slice(ve + 1), Ve;
          } finally {
          }
        }
      }
        toArray: Wt,
      };
    }();
}
  __proto__: null,
}, [x]);
/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  var e = x, t = Symbol.for("react.element"), n = Symbol.for("react.fragment"), r = Object.prototype.hasOwnProperty, o = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = { key: !0, ref: !0, __self: !0, __source: !0 };
  }
}
/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function O(ye) {
      if (ye === null || typeof ye != "object")
        return null;
      var Ye = T && ye[T] || ye[E];
      return typeof Ye == "function" ? Ye : null;
    }
    function I(ye) {
      {
        for (var Ye = arguments.length, ft = new Array(Ye > 1 ? Ye - 1 : 0), Ct = 1; Ct < Ye; Ct++)
          ft[Ct - 1] = arguments[Ct];
        M("error", ye, ft);
      }
    }
    function M(ye, Ye, ft) {
      {
        var De = ft.map(function(Re) {
          return String(Re);
        });
        De.unshift("Warning: " + Ye), Function.prototype.apply.call(console[ye], console, De);
      }
    }
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
    }
    function q(ye, Ye, ft) {
      var Ct = ye.displayName;
      if (Ct)
        return Ct;
    }
      return ye.displayName || "Context";
    }
      if (ye == null)
        return null;
      if (typeof ye.tag == "number" && I("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof ye == "function")
        return ye.displayName || ye.name || null;
      if (typeof ye == "string")
        return ye;
      switch (ye) {
        case r:
          return "Fragment";
        case n:
          return "Portal";
        case s:
          return "Profiler";
        case o:
          return "StrictMode";
          return "Suspense";
        case g:
          return "SuspenseList";
      }
      if (typeof ye == "object")
        switch (ye.$$typeof) {
          case c:
            var Ye = ye;
          case a:
            var ft = ye;
          case f:
            return q(ye, ye.render, "ForwardRef");
            var Ct = ye.displayName || null;
          case w: {
            try {
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function de() {
    }
    de.__reactDisabledLog = !0;
    function ue() {
      {
        if (G === 0) {
          var ye = {
            configurable: !0,
            enumerable: !0,
            value: de,
            writable: !0
          };
          Object.defineProperties(console, {
            info: ye,
            log: ye,
            warn: ye,
            error: ye,
            group: ye,
            groupCollapsed: ye,
            groupEnd: ye
          });
        }
        G++;
      }
    }
    function he() {
      {
        if (G--, G === 0) {
          var ye = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: ee({}, ye, {
            }),
            info: ee({}, ye, {
              value: X
            }),
            warn: ee({}, ye, {
              value: te
            }),
            error: ee({}, ye, {
              value: re
            }),
            group: ee({}, ye, {
              value: Q
            }),
            groupCollapsed: ee({}, ye, {
            }),
            groupEnd: ee({}, ye, {
              value: ie
            })
          });
        }
        G < 0 && I("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    function pe(ye, Ye, ft) {
      {
        if (fe === void 0)
          try {
            throw Error();
            fe = Ct && Ct[1] || "";
          }
        return `
` + fe + ye;
      }
    }
    var be = !1, we;
    {
      var _e = typeof WeakMap == "function" ? WeakMap : Map;
      we = new _e();
    }
    function ce(ye, Ye) {
      if (!ye || be)
        return "";
      {
        var ft = we.get(ye);
        if (ft !== void 0)
          return ft;
      }
      var Ct;
      be = !0;
      Error.prepareStackTrace = void 0;
      var De;
      De = ge.current, ge.current = null, ue();
      try {
        if (Ye) {
          var Re = function() {
            throw Error();
          };
          if (Object.defineProperty(Re.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(Re, []);
            }
            Reflect.construct(ye, [], Re);
          } else {
            try {
              Re.call();
            }
            ye.call(Re.prototype);
          }
        } else {
          try {
            throw Error();
          }
          ye();
        }
`), Bt = Ct.stack.split(`
`), jt = Je.length - 1, Kt = Bt.length - 1; jt >= 1 && Kt >= 0 && Je[jt] !== Bt[Kt]; )
            Kt--;
          for (; jt >= 1 && Kt >= 0; jt--, Kt--)
            if (Je[jt] !== Bt[Kt]) {
              if (jt !== 1 || Kt !== 1)
                do
                  if (jt--, Kt--, Kt < 0 || Je[jt] !== Bt[Kt]) {
                    var Ln = `
` + Je[jt].replace(" at new ", " at ");
                    return ye.displayName && Ln.includes("<anonymous>") && (Ln = Ln.replace("<anonymous>", ye.displayName)), typeof ye == "function" && we.set(ye, Ln), Ln;
                  }
                while (jt >= 1 && Kt >= 0);
              break;
            }
        }
      } finally {
      }
    }
    function Ce(ye, Ye, ft) {
      return ce(ye, !1);
    }
    function Ne(ye) {
      var Ye = ye.prototype;
      return !!(Ye && Ye.isReactComponent);
    }
    function Be(ye, Ye, ft) {
      if (ye == null)
        return "";
      if (typeof ye == "function")
        return ce(ye, Ne(ye));
      if (typeof ye == "string")
        return pe(ye);
      switch (ye) {
          return pe("Suspense");
        case g:
          return pe("SuspenseList");
      }
      if (typeof ye == "object")
        switch (ye.$$typeof) {
          case f:
            return Ce(ye.render);
            return Be(ye.type, Ye, ft);
          case w: {
            try {
            } catch {
            }
          }
        }
      return "";
    }
    function ot(ye) {
      if (ye) {
        var Ye = ye._owner, ft = Be(ye.type, ye._source, Ye ? Ye.type : null);
        rt.setExtraStackFrame(ft);
      } else
        rt.setExtraStackFrame(null);
    }
      {
        var De = Function.call.bind(tt);
        for (var Re in ye)
          if (De(ye, Re)) {
            var Je = void 0;
            try {
              if (typeof ye[Re] != "function") {
                var Bt = Error((Ct || "React class") + ": " + ft + " type `" + Re + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof ye[Re] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw Bt.name = "Invariant Violation", Bt;
              }
              Je = ye[Re](Ye, Re, Ct, ft, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (jt) {
              Je = jt;
            }
          }
      }
    }
    var gt = Array.isArray;
    function nt(ye) {
      return gt(ye);
    }
    function Ft(ye) {
      {
        var Ye = typeof Symbol == "function" && Symbol.toStringTag, ft = Ye && ye[Symbol.toStringTag] || ye.constructor.name || "Object";
        return ft;
      }
    }
    function ut(ye) {
      try {
        return Et(ye), !1;
      } catch {
        return !0;
      }
    }
    function Et(ye) {
      return "" + ye;
    }
    function Tt(ye) {
      if (ut(ye))
        return I("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Ft(ye)), Et(ye);
    }
      key: !0,
      ref: !0,
      __self: !0,
      __source: !0
    }, Xe, Oe;
    function Ie(ye) {
      if (tt.call(ye, "ref")) {
        var Ye = Object.getOwnPropertyDescriptor(ye, "ref").get;
        if (Ye && Ye.isReactWarning)
          return !1;
      }
      return ye.ref !== void 0;
    }
    function pt(ye) {
      if (tt.call(ye, "key")) {
        var Ye = Object.getOwnPropertyDescriptor(ye, "key").get;
        if (Ye && Ye.isReactWarning)
          return !1;
      }
      return ye.key !== void 0;
    }
    function yt(ye, Ye) {
      typeof ye.ref == "string" && At.current;
    }
    function zt(ye, Ye) {
      {
        var ft = function() {
          Xe || (Xe = !0, I("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Ye));
        };
        ft.isReactWarning = !0, Object.defineProperty(ye, "key", {
          get: ft,
          configurable: !0
        });
      }
    }
    function bt(ye, Ye) {
      {
        var ft = function() {
          Oe || (Oe = !0, I("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", Ye));
        };
        ft.isReactWarning = !0, Object.defineProperty(ye, "ref", {
          get: ft,
          configurable: !0
        });
      }
    }
      var Je = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: t,
        // Built-in properties that belong on the element
        type: ye,
        key: Ye,
        ref: ft,
        props: Re,
        // Record the component responsible for creating this element.
        _owner: De
      };
      return Je._store = {}, Object.defineProperty(Je._store, "validated", {
        configurable: !1,
        enumerable: !1,
        writable: !0,
        value: !1
      }), Object.defineProperty(Je, "_self", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
        value: Ct
      }), Object.defineProperty(Je, "_source", {
        configurable: !1,
        enumerable: !1,
        writable: !1,
      }), Object.freeze && (Object.freeze(Je.props), Object.freeze(Je)), Je;
    };
      {
        var De, Re = {}, Je = null, Bt = null;
        for (De in Ye)
          tt.call(Ye, De) && !vt.hasOwnProperty(De) && (Re[De] = Ye[De]);
        if (ye && ye.defaultProps) {
          var jt = ye.defaultProps;
          for (De in jt)
            Re[De] === void 0 && (Re[De] = jt[De]);
        }
        if (Je || Bt) {
          var Kt = typeof ye == "function" ? ye.displayName || ye.name || "Unknown" : ye;
          Je && zt(Re, Kt), Bt && bt(Re, Kt);
        }
      }
    }
      if (ye) {
        var Ye = ye._owner, ft = Be(ye.type, ye._source, Ye ? Ye.type : null);
      } else
    }
      return typeof ye == "object" && ye !== null && ye.$$typeof === t;
    }
      {
          if (ye)
            return `

Check the render method of \`` + ye + "`.";
        }
        return "";
      }
    }
      return "";
    }
      {
        if (!Ye) {
          var ft = typeof ye == "string" ? ye : ye.displayName || ye.name;
          ft && (Ye = `

Check the top-level render call using <` + ft + ">.");
        }
        return Ye;
      }
    }
    function Wt(ye, Ye) {
      {
        if (!ye._store || ye._store.validated || ye.key != null)
          return;
        ye._store.validated = !0;
          return;
        var Ct = "";
      }
    }
      {
        if (typeof ye != "object")
          return;
        if (nt(ye))
          for (var ft = 0; ft < ye.length; ft++) {
            var Ct = ye[ft];
          }
          ye._store && (ye._store.validated = !0);
        else if (ye) {
        }
      }
    }
      {
        var Ye = ye.type;
        if (Ye == null || typeof Ye == "string")
          return;
        var ft;
        if (typeof Ye == "function")
          ft = Ye.propTypes;
        else if (typeof Ye == "object" && (Ye.$$typeof === f || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
          ft = Ye.propTypes;
        else
          return;
        if (ft) {
          wt(ft, ye.props, "prop", Ct, ye);
        }
        typeof Ye.getDefaultProps == "function" && !Ye.getDefaultProps.isReactClassApproved && I("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
      {
        for (var Ye = Object.keys(ye.props), ft = 0; ft < Ye.length; ft++) {
          var Ct = Ye[ft];
          if (Ct !== "children" && Ct !== "key") {
            break;
          }
        }
      }
    }
      {
        if (!Re) {
          var Je = "";
          (ye === void 0 || typeof ye == "object" && ye !== null && Object.keys(ye).length === 0) && (Je += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var jt;
        }
        if (Kt == null)
          return Kt;
        if (Re) {
          var Ln = Ye.children;
          if (Ln !== void 0)
            if (Ct)
              if (nt(Ln)) {
                Object.freeze && Object.freeze(Ln);
              } else
                I("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
        }
        if (tt.call(Ye, "key")) {
            I(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
          }
        }
      }
    }
    }
    }
}
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function t(te, re) {
      var Q = te.length;
      te.push(re);
      e: for (; 0 < Q; ) {
        else break e;
      }
    }
    function n(te) {
      return te.length === 0 ? null : te[0];
    }
    function r(te) {
      if (te.length === 0) return null;
      var re = te[0], Q = te.pop();
      if (Q !== re) {
        te[0] = Q;
          else break e;
        }
      }
      return re;
    }
    function o(te, re) {
      var Q = te.sortIndex - re.sortIndex;
      return Q !== 0 ? Q : te.id - re.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var s = performance;
      e.unstable_now = function() {
        return s.now();
      };
    } else {
      var a = Date, c = a.now();
      e.unstable_now = function() {
        return a.now() - c;
      };
    }
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function M(te) {
        else break;
      }
    }
      else {
      }
    }
      var Q = w;
      try {
          } else r(f);
        }
        else {
        }
        return de;
      } finally {
      }
    }
    function q() {
    }
        var te = e.unstable_now();
        var re = !0;
        try {
        } finally {
        }
    }
    };
    else if (typeof MessageChannel < "u") {
      var ee = new MessageChannel(), G = ee.port2;
        G.postMessage(null);
      };
    };
    }
    function X(te, re) {
        te(e.unstable_now());
      }, re);
    }
    e.unstable_IdlePriority = 5, e.unstable_ImmediatePriority = 1, e.unstable_LowPriority = 4, e.unstable_NormalPriority = 3, e.unstable_Profiling = null, e.unstable_UserBlockingPriority = 2, e.unstable_cancelCallback = function(te) {
      te.callback = null;
    }, e.unstable_continueExecution = function() {
    }, e.unstable_forceFrameRate = function(te) {
    }, e.unstable_getCurrentPriorityLevel = function() {
      return w;
    }, e.unstable_getFirstCallbackNode = function() {
      return n(f);
    }, e.unstable_next = function(te) {
      switch (w) {
        case 1:
        case 2:
        case 3:
          var re = 3;
          break;
        default:
          re = w;
      }
      var Q = w;
      w = re;
      try {
        return te();
      } finally {
        w = Q;
      }
    }, e.unstable_pauseExecution = function() {
    }, e.unstable_requestPaint = function() {
    }, e.unstable_runWithPriority = function(te, re) {
      switch (te) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          te = 3;
      }
      var Q = w;
      w = te;
      try {
        return re();
      } finally {
        w = Q;
      }
    }, e.unstable_scheduleCallback = function(te, re, Q) {
        case 1:
          var ie = -1;
          break;
        case 2:
          ie = 250;
          break;
        case 5:
          ie = 1073741823;
          break;
        case 4:
          ie = 1e4;
          break;
        default:
          ie = 5e3;
      }
    }, e.unstable_shouldYield = q, e.unstable_wrapCallback = function(te) {
      var re = w;
      return function() {
        var Q = w;
        w = re;
        try {
          return te.apply(this, arguments);
        } finally {
          w = Q;
        }
      };
    };
}
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var t = !1, n = 5;
      function r(Oe, Ie) {
        var pt = Oe.length;
        Oe.push(Ie), a(Oe, Ie, pt);
      }
      function o(Oe) {
        return Oe.length === 0 ? null : Oe[0];
      }
      function s(Oe) {
        if (Oe.length === 0)
          return null;
        var Ie = Oe[0], pt = Oe.pop();
        return pt !== Ie && (Oe[0] = pt, c(Oe, pt, 0)), Ie;
      }
      function a(Oe, Ie, pt) {
        for (var yt = pt; yt > 0; ) {
          var zt = yt - 1 >>> 1, bt = Oe[zt];
          if (f(bt, Ie) > 0)
            Oe[zt] = Ie, Oe[yt] = bt, yt = zt;
          else
            return;
        }
      }
      function c(Oe, Ie, pt) {
        for (var yt = pt, zt = Oe.length, bt = zt >>> 1; yt < bt; ) {
          if (f(St, Ie) < 0)
          else
            return;
        }
      }
      function f(Oe, Ie) {
        var pt = Oe.sortIndex - Ie.sortIndex;
        return pt !== 0 ? pt : Oe.id - Ie.id;
      }
      function T(Oe, Ie) {
      }
      var E = typeof performance == "object" && typeof performance.now == "function";
      if (E) {
        var O = performance;
        e.unstable_now = function() {
          return O.now();
        };
      } else {
        e.unstable_now = function() {
        };
      }
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function Q(Oe) {
          if (Ie.callback === null)
          else if (Ie.startTime <= Oe)
          else
            return;
        }
      }
            G = !0, Et(ie);
          else {
          }
      }
      function ie(Oe, Ie) {
        try {
          var yt;
          if (!t) return de(Oe, Ie);
        } finally {
        }
      }
      function de(Oe, Ie) {
        var pt = Ie;
          if (typeof yt == "function") {
          } else
        }
          return !0;
      }
      function ue(Oe, Ie) {
        switch (Oe) {
          case g:
          case w:
          case C:
            break;
          default:
        }
        try {
          return Ie();
        } finally {
        }
      }
      function he(Oe) {
        var Ie;
          case g:
            break;
          default:
            break;
        }
        try {
          return Oe();
        } finally {
        }
      }
      function ge(Oe) {
        return function() {
          try {
            return Oe.apply(this, arguments);
          } finally {
          }
        };
      }
      function fe(Oe, Ie, pt) {
        var yt = e.unstable_now(), zt;
        if (typeof pt == "object" && pt !== null) {
          var bt = pt.delay;
          typeof bt == "number" && bt > 0 ? zt = yt + bt : zt = yt;
        } else
          zt = yt;
        var We;
        switch (Oe) {
            break;
          case g:
            break;
          case C:
            break;
          case w:
            break;
          default:
            break;
        }
          id: q++,
          callback: Ie,
          priorityLevel: Oe,
          startTime: zt,
          expirationTime: St,
          sortIndex: -1
        };
      }
      function pe() {
      }
      function be() {
        !G && !ee && (G = !0, Et(ie));
      }
      function we() {
      }
      function _e(Oe) {
        Oe.callback = null;
      }
      function ce() {
      }
      function rt() {
        return !(Oe < tt);
      }
      function ot() {
      }
      function wt(Oe) {
        if (Oe < 0 || Oe > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        Oe > 0 ? tt = Math.floor(1e3 / Oe) : tt = n;
      }
      var gt = function() {
        if (Ne !== null) {
          var Oe = e.unstable_now();
          var Ie = !0, pt = !0;
          try {
            pt = Ne(Ie, Oe);
          } finally {
            pt ? nt() : (Ce = !1, Ne = null);
          }
        } else
          Ce = !1;
      }, nt;
      if (typeof re == "function")
        nt = function() {
          re(gt);
        };
      else if (typeof MessageChannel < "u") {
        var Ft = new MessageChannel(), ut = Ft.port2;
        Ft.port1.onmessage = gt, nt = function() {
          ut.postMessage(null);
        };
      } else
        nt = function() {
          X(gt, 0);
        };
      function Et(Oe) {
        Ne = Oe, Ce || (Ce = !0, nt());
      }
      function Tt(Oe, Ie) {
        Be = X(function() {
          Oe(e.unstable_now());
        }, Ie);
      }
      function At() {
        te(Be), Be = -1;
      }
      var vt = ot, Xe = null;
    }();
}
}
/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  function n(d) {
    for (var p = "https://reactjs.org/docs/error-decoder.html?invariant=" + d, b = 1; b < arguments.length; b++) p += "&args[]=" + encodeURIComponent(arguments[b]);
    return "Minified React error #" + d + "; visit " + p + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  var r = /* @__PURE__ */ new Set(), o = {};
  function s(d, p) {
    a(d, p), a(d + "Capture", p);
  }
  function a(d, p) {
    for (o[d] = p, d = 0; d < p.length; d++) r.add(p[d]);
  }
  function w(d) {
  }
  function C(d, p, b, _) {
    if (b !== null && b.type === 0) return !1;
    switch (typeof p) {
      case "function":
      case "symbol":
        return !0;
      case "boolean":
        return _ ? !1 : b !== null ? !b.acceptsBooleans : (d = d.toLowerCase().slice(0, 5), d !== "data-" && d !== "aria-");
      default:
        return !1;
    }
  }
  function T(d, p, b, _) {
    if (p === null || typeof p > "u" || C(d, p, b, _)) return !0;
    if (_) return !1;
    if (b !== null) switch (b.type) {
      case 3:
        return !p;
      case 4:
        return p === !1;
      case 5:
        return isNaN(p);
      case 6:
        return isNaN(p) || 1 > p;
    }
    return !1;
  }
  function E(d, p, b, _, N, z, oe) {
    this.acceptsBooleans = p === 2 || p === 3 || p === 4, this.attributeName = _, this.attributeNamespace = N, this.mustUseProperty = b, this.propertyName = d, this.type = p, this.sanitizeURL = z, this.removeEmptyString = oe;
  }
  var O = {};
  "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(d) {
    O[d] = new E(d, 0, !1, d, null, !1, !1);
  }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(d) {
    var p = d[0];
    O[p] = new E(p, 1, !1, d[1], null, !1, !1);
  }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(d) {
    O[d] = new E(d, 2, !1, d.toLowerCase(), null, !1, !1);
  }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(d) {
    O[d] = new E(d, 2, !1, d, null, !1, !1);
  }), "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(d) {
    O[d] = new E(d, 3, !1, d.toLowerCase(), null, !1, !1);
  }), ["checked", "multiple", "muted", "selected"].forEach(function(d) {
    O[d] = new E(d, 3, !0, d, null, !1, !1);
  }), ["capture", "download"].forEach(function(d) {
    O[d] = new E(d, 4, !1, d, null, !1, !1);
  }), ["cols", "rows", "size", "span"].forEach(function(d) {
    O[d] = new E(d, 6, !1, d, null, !1, !1);
  }), ["rowSpan", "start"].forEach(function(d) {
    O[d] = new E(d, 5, !1, d.toLowerCase(), null, !1, !1);
  });
  var P = /[\-:]([a-z])/g;
  function I(d) {
    return d[1].toUpperCase();
  }
  "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(d) {
    var p = d.replace(
      I
    );
    O[p] = new E(p, 1, !1, d, null, !1, !1);
  }), "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(d) {
    O[p] = new E(p, 1, !1, d, "http://www.w3.org/1999/xlink", !1, !1);
  }), ["xml:base", "xml:lang", "xml:space"].forEach(function(d) {
    O[p] = new E(p, 1, !1, d, "http://www.w3.org/XML/1998/namespace", !1, !1);
  }), ["tabIndex", "crossOrigin"].forEach(function(d) {
    O[d] = new E(d, 1, !1, d.toLowerCase(), null, !1, !1);
  }), O.xlinkHref = new E("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1), ["src", "href", "action", "formAction"].forEach(function(d) {
    O[d] = new E(d, 1, !1, d.toLowerCase(), null, !0, !0);
  });
  function M(d, p, b, _) {
  }
  function re(d) {
    return d === null || typeof d != "object" ? null : (d = te && d[te] || d["@@iterator"], typeof d == "function" ? d : null);
  }
  function ie(d) {
      throw Error();
    } catch (b) {
      var p = b.stack.trim().match(/\n( *(at )?)/);
    }
    return `
  }
  var de = !1;
  function ue(d, p) {
    if (!d || de) return "";
    de = !0;
    var b = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      if (p) if (p = function() {
        throw Error();
      }, Object.defineProperty(p.prototype, "props", { set: function() {
        throw Error();
      } }), typeof Reflect == "object" && Reflect.construct) {
        try {
          Reflect.construct(p, []);
        } catch (Fe) {
          var _ = Fe;
        }
        Reflect.construct(d, [], p);
      } else {
        try {
          p.call();
        } catch (Fe) {
          _ = Fe;
        }
        d.call(p.prototype);
      }
      else {
        try {
          throw Error();
        } catch (Fe) {
          _ = Fe;
        }
        d();
      }
    } catch (Fe) {
      if (Fe && _ && typeof Fe.stack == "string") {
          if (oe !== 1 || me !== 1)
            do
                var Se = `
                return d.displayName && Se.includes("<anonymous>") && (Se = Se.replace("<anonymous>", d.displayName)), Se;
              }
            while (1 <= oe && 0 <= me);
          break;
        }
      }
    } finally {
      de = !1, Error.prepareStackTrace = b;
    }
    return (d = d ? d.displayName || d.name : "") ? ie(d) : "";
  }
  function he(d) {
    switch (d.tag) {
      case 5:
        return ie(d.type);
      case 16:
        return ie("Lazy");
      case 13:
        return ie("Suspense");
      case 19:
        return ie("SuspenseList");
      case 0:
      case 2:
      case 15:
        return d = ue(d.type, !1), d;
      case 11:
        return d = ue(d.type.render, !1), d;
      case 1:
        return d = ue(d.type, !0), d;
      default:
        return "";
    }
  }
  function ge(d) {
    if (d == null) return null;
    if (typeof d == "function") return d.displayName || d.name || null;
    if (typeof d == "string") return d;
    switch (d) {
        return "Fragment";
        return "Portal";
        return "Profiler";
        return "StrictMode";
        return "Suspense";
      case ee:
        return "SuspenseList";
    }
    if (typeof d == "object") switch (d.$$typeof) {
      case q:
        return (d.displayName || "Context") + ".Consumer";
        return (d._context.displayName || "Context") + ".Provider";
        var p = d.render;
        return d = d.displayName, d || (d = p.displayName || p.name || "", d = d !== "" ? "ForwardRef(" + d + ")" : "ForwardRef"), d;
      case G:
        return p = d.displayName || null, p !== null ? p : ge(d.type) || "Memo";
        p = d._payload, d = d._init;
        try {
          return ge(d(p));
        } catch {
        }
    }
    return null;
  }
  function fe(d) {
    var p = d.type;
    switch (d.tag) {
      case 24:
        return "Cache";
      case 9:
        return (p.displayName || "Context") + ".Consumer";
      case 10:
        return (p._context.displayName || "Context") + ".Provider";
      case 18:
        return "DehydratedFragment";
      case 11:
        return d = p.render, d = d.displayName || d.name || "", p.displayName || (d !== "" ? "ForwardRef(" + d + ")" : "ForwardRef");
      case 7:
        return "Fragment";
      case 5:
        return p;
      case 4:
        return "Portal";
      case 3:
        return "Root";
      case 6:
        return "Text";
      case 16:
        return ge(p);
      case 8:
      case 22:
        return "Offscreen";
      case 12:
        return "Profiler";
      case 21:
        return "Scope";
      case 13:
        return "Suspense";
      case 19:
        return "SuspenseList";
      case 25:
        return "TracingMarker";
      case 1:
      case 0:
      case 17:
      case 2:
      case 14:
      case 15:
        if (typeof p == "function") return p.displayName || p.name || null;
        if (typeof p == "string") return p;
    }
    return null;
  }
  function pe(d) {
    switch (typeof d) {
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return d;
      case "object":
        return d;
      default:
        return "";
    }
  }
  function be(d) {
    var p = d.type;
    return (d = d.nodeName) && d.toLowerCase() === "input" && (p === "checkbox" || p === "radio");
  }
  function we(d) {
    var p = be(d) ? "checked" : "value", b = Object.getOwnPropertyDescriptor(d.constructor.prototype, p), _ = "" + d[p];
    if (!d.hasOwnProperty(p) && typeof b < "u" && typeof b.get == "function" && typeof b.set == "function") {
      return Object.defineProperty(d, p, { configurable: !0, get: function() {
      }, set: function(oe) {
      } }), Object.defineProperty(d, p, { enumerable: b.enumerable }), { getValue: function() {
        return _;
      }, setValue: function(oe) {
        _ = "" + oe;
      }, stopTracking: function() {
        d._valueTracker = null, delete d[p];
      } };
    }
  }
  function _e(d) {
    d._valueTracker || (d._valueTracker = we(d));
  }
  function ce(d) {
    if (!d) return !1;
    var p = d._valueTracker;
    if (!p) return !0;
    var b = p.getValue(), _ = "";
    return d && (_ = be(d) ? d.checked ? "true" : "false" : d.value), d = _, d !== b ? (p.setValue(d), !0) : !1;
  }
  function Ce(d) {
    if (d = d || (typeof document < "u" ? document : void 0), typeof d > "u") return null;
    try {
      return d.activeElement || d.body;
    } catch {
      return d.body;
    }
  }
  function Ne(d, p) {
    var b = p.checked;
    return Q({}, p, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: b ?? d._wrapperState.initialChecked });
  }
  function Be(d, p) {
    var b = p.defaultValue == null ? "" : p.defaultValue, _ = p.checked != null ? p.checked : p.defaultChecked;
    b = pe(p.value != null ? p.value : b), d._wrapperState = { initialChecked: _, initialValue: b, controlled: p.type === "checkbox" || p.type === "radio" ? p.checked != null : p.value != null };
  }
  function tt(d, p) {
    p = p.checked, p != null && M(d, "checked", p, !1);
  }
    tt(d, p);
    var b = pe(p.value), _ = p.type;
    if (b != null) _ === "number" ? (b === 0 && d.value === "" || d.value != b) && (d.value = "" + b) : d.value !== "" + b && (d.value = "" + b);
    else if (_ === "submit" || _ === "reset") {
      d.removeAttribute("value");
      return;
    }
    p.hasOwnProperty("value") ? ot(d, p.type, b) : p.hasOwnProperty("defaultValue") && ot(d, p.type, pe(p.defaultValue)), p.checked == null && p.defaultChecked != null && (d.defaultChecked = !!p.defaultChecked);
  }
  function rt(d, p, b) {
    if (p.hasOwnProperty("value") || p.hasOwnProperty("defaultValue")) {
      var _ = p.type;
      if (!(_ !== "submit" && _ !== "reset" || p.value !== void 0 && p.value !== null)) return;
      p = "" + d._wrapperState.initialValue, b || p === d.value || (d.value = p), d.defaultValue = p;
    }
    b = d.name, b !== "" && (d.name = ""), d.defaultChecked = !!d._wrapperState.initialChecked, b !== "" && (d.name = b);
  }
  function ot(d, p, b) {
    (p !== "number" || Ce(d.ownerDocument) !== d) && (b == null ? d.defaultValue = "" + d._wrapperState.initialValue : d.defaultValue !== "" + b && (d.defaultValue = "" + b));
  }
  var wt = Array.isArray;
  function gt(d, p, b, _) {
    if (d = d.options, p) {
      p = {};
    } else {
          return;
        }
      }
      p !== null && (p.selected = !0);
    }
  }
  function nt(d, p) {
    if (p.dangerouslySetInnerHTML != null) throw Error(n(91));
    return Q({}, p, { value: void 0, defaultValue: void 0, children: "" + d._wrapperState.initialValue });
  }
  function Ft(d, p) {
    var b = p.value;
    if (b == null) {
      if (b = p.children, p = p.defaultValue, b != null) {
        if (p != null) throw Error(n(92));
        if (wt(b)) {
          if (1 < b.length) throw Error(n(93));
          b = b[0];
        }
        p = b;
      }
      p == null && (p = ""), b = p;
    }
    d._wrapperState = { initialValue: pe(b) };
  }
  function ut(d, p) {
    var b = pe(p.value), _ = pe(p.defaultValue);
    b != null && (b = "" + b, b !== d.value && (d.value = b), p.defaultValue == null && d.defaultValue !== b && (d.defaultValue = b)), _ != null && (d.defaultValue = "" + _);
  }
  function Et(d) {
    var p = d.textContent;
    p === d._wrapperState.initialValue && p !== "" && p !== null && (d.value = p);
  }
  function Tt(d) {
    switch (d) {
      case "svg":
        return "http://www.w3.org/2000/svg";
      case "math":
        return "http://www.w3.org/1998/Math/MathML";
      default:
        return "http://www.w3.org/1999/xhtml";
    }
  }
  function At(d, p) {
    return d == null || d === "http://www.w3.org/1999/xhtml" ? Tt(p) : d === "http://www.w3.org/2000/svg" && p === "foreignObject" ? "http://www.w3.org/1999/xhtml" : d;
  }
  var vt, Xe = function(d) {
      MSApp.execUnsafeLocalFunction(function() {
      });
    } : d;
  }(function(d, p) {
    if (d.namespaceURI !== "http://www.w3.org/2000/svg" || "innerHTML" in d) d.innerHTML = p;
    else {
      for (vt = vt || document.createElement("div"), vt.innerHTML = "<svg>" + p.valueOf().toString() + "</svg>", p = vt.firstChild; d.firstChild; ) d.removeChild(d.firstChild);
      for (; p.firstChild; ) d.appendChild(p.firstChild);
    }
  });
  function Oe(d, p) {
    if (p) {
      var b = d.firstChild;
      if (b && b === d.lastChild && b.nodeType === 3) {
        b.nodeValue = p;
        return;
      }
    }
    d.textContent = p;
  }
  var Ie = {
    animationIterationCount: !0,
    aspectRatio: !0,
    borderImageOutset: !0,
    borderImageSlice: !0,
    borderImageWidth: !0,
    boxFlex: !0,
    boxFlexGroup: !0,
    boxOrdinalGroup: !0,
    columnCount: !0,
    columns: !0,
    flex: !0,
    flexGrow: !0,
    flexPositive: !0,
    flexShrink: !0,
    flexNegative: !0,
    flexOrder: !0,
    gridArea: !0,
    gridRow: !0,
    gridRowEnd: !0,
    gridRowSpan: !0,
    gridRowStart: !0,
    gridColumn: !0,
    gridColumnEnd: !0,
    gridColumnSpan: !0,
    gridColumnStart: !0,
    fontWeight: !0,
    lineClamp: !0,
    lineHeight: !0,
    opacity: !0,
    order: !0,
    orphans: !0,
    tabSize: !0,
    widows: !0,
    zIndex: !0,
    zoom: !0,
    fillOpacity: !0,
    floodOpacity: !0,
    stopOpacity: !0,
    strokeDasharray: !0,
    strokeDashoffset: !0,
    strokeMiterlimit: !0,
    strokeOpacity: !0,
    strokeWidth: !0
  }, pt = ["Webkit", "ms", "Moz", "O"];
  Object.keys(Ie).forEach(function(d) {
    pt.forEach(function(p) {
      p = p + d.charAt(0).toUpperCase() + d.substring(1), Ie[p] = Ie[d];
    });
  });
  function yt(d, p, b) {
    return p == null || typeof p == "boolean" || p === "" ? "" : b || typeof p != "number" || p === 0 || Ie.hasOwnProperty(d) && Ie[d] ? ("" + p).trim() : p + "px";
  }
  function zt(d, p) {
    d = d.style;
    for (var b in p) if (p.hasOwnProperty(b)) {
    }
  }
  var bt = Q({ menuitem: !0 }, { area: !0, base: !0, br: !0, col: !0, embed: !0, hr: !0, img: !0, input: !0, keygen: !0, link: !0, meta: !0, param: !0, source: !0, track: !0, wbr: !0 });
  function We(d, p) {
    if (p) {
      if (bt[d] && (p.children != null || p.dangerouslySetInnerHTML != null)) throw Error(n(137, d));
      if (p.dangerouslySetInnerHTML != null) {
        if (p.children != null) throw Error(n(60));
        if (typeof p.dangerouslySetInnerHTML != "object" || !("__html" in p.dangerouslySetInnerHTML)) throw Error(n(61));
      }
      if (p.style != null && typeof p.style != "object") throw Error(n(62));
    }
  }
  function St(d, p) {
    if (d.indexOf("-") === -1) return typeof p.is == "string";
    switch (d) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;
      default:
        return !0;
    }
  }
    return d = d.target || d.srcElement || window, d.correspondingUseElement && (d = d.correspondingUseElement), d.nodeType === 3 ? d.parentNode : d;
  }
    if (d = Qt(d)) {
      var p = d.stateNode;
    }
  }
  }
    }
  }
    return d(p);
  }
  function Wt() {
  }
    try {
    } finally {
    }
  }
    var b = d.stateNode;
    if (b === null) return null;
    if (_ === null) return null;
    b = _[p];
    e: switch (p) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (_ = !_.disabled) || (d = d.type, _ = !(d === "button" || d === "input" || d === "select" || d === "textarea")), d = !_;
        break e;
      default:
        d = !1;
    }
    if (d) return null;
    if (b && typeof b != "function") throw Error(n(231, p, typeof b));
    return b;
  }
  if (c) try {
  } catch {
  }
    var Fe = Array.prototype.slice.call(arguments, 3);
    try {
      p.apply(b, Fe);
    } catch (at) {
      this.onError(at);
    }
  }
  } };
      } else throw Error(n(198));
    }
  }
    var p = d, b = d;
    if (d.alternate) for (; p.return; ) p = p.return;
    else {
      d = p;
      do
        p = d, p.flags & 4098 && (b = p.return), d = p.return;
      while (d);
    }
    return p.tag === 3 ? b : null;
  }
  function De(d) {
    if (d.tag === 13) {
      var p = d.memoizedState;
      if (p === null && (d = d.alternate, d !== null && (p = d.memoizedState)), p !== null) return p.dehydrated;
    }
    return null;
  }
  function Re(d) {
  }
  function Je(d) {
    var p = d.alternate;
    if (!p) {
      return p !== d ? null : d;
    }
    for (var b = d, _ = p; ; ) {
          b = _;
          continue;
        }
        break;
      }
        }
        throw Error(n(188));
      }
      else {
          if (me === b) {
            break;
          }
          if (me === _) {
            break;
          }
          me = me.sibling;
        }
        if (!oe) {
            if (me === b) {
              break;
            }
            if (me === _) {
              break;
            }
            me = me.sibling;
          }
          if (!oe) throw Error(n(189));
        }
      }
      if (b.alternate !== _) throw Error(n(190));
    }
    if (b.tag !== 3) throw Error(n(188));
    return b.stateNode.current === b ? d : p;
  }
  function Bt(d) {
    return d = Je(d), d !== null ? jt(d) : null;
  }
  function jt(d) {
    if (d.tag === 5 || d.tag === 6) return d;
    for (d = d.child; d !== null; ) {
      var p = jt(d);
      if (p !== null) return p;
      d = d.sibling;
    }
    return null;
  }
    } catch {
    }
  }
  }
    switch (d & -d) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return d & 4194240;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return d & 130023424;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 1073741824;
      default:
        return d;
    }
  }
    var b = d.pendingLanes;
    if (b === 0) return 0;
    if (oe !== 0) {
    if (_ === 0) return 0;
    return _;
  }
    switch (d) {
      case 1:
      case 2:
      case 4:
        return p + 250;
      case 8:
      case 16:
      case 32:
      case 64:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return p + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
      case 67108864:
        return -1;
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
    }
  }
    return d = d.pendingLanes & -1073741825, d !== 0 ? d : d & 1073741824 ? 1073741824 : 0;
  }
  }
    for (var p = [], b = 0; 31 > b; b++) p.push(d);
    return p;
  }
  }
    var b = d.pendingLanes & ~p;
    d.pendingLanes = p, d.suspendedLanes = 0, d.pingedLanes = 0, d.expiredLanes &= p, d.mutableReadLanes &= p, d.entangledLanes &= p, p = d.entanglements;
    var _ = d.eventTimes;
    for (d = d.expirationTimes; 0 < b; ) {
    }
  }
    var b = d.entangledLanes |= p;
    for (d = d.entanglements; b; ) {
    }
  }
    return d &= -d, 1 < d ? 4 < d ? d & 268435455 ? 16 : 536870912 : 4 : 1;
  }
    switch (d) {
      case "focusin":
      case "focusout":
        break;
      case "dragenter":
      case "dragleave":
        break;
      case "mouseover":
      case "mouseout":
        break;
      case "pointerover":
      case "pointerout":
        break;
      case "gotpointercapture":
      case "lostpointercapture":
    }
  }
  }
    switch (p) {
      case "focusin":
      case "dragenter":
      case "mouseover":
      case "pointerover":
      case "gotpointercapture":
    }
    return !1;
  }
    if (p !== null) {
      if (b !== null) {
        if (p = b.tag, p === 13) {
          if (p = De(b), p !== null) {
            });
            return;
          }
        } else if (p === 3 && b.stateNode.current.memoizedState.isDehydrated) {
          d.blockedOn = b.tag === 3 ? b.stateNode.containerInfo : null;
          return;
        }
      }
    }
    d.blockedOn = null;
  }
    if (d.blockedOn !== null) return !1;
    for (var p = d.targetContainers; 0 < p.length; ) {
      if (b === null) {
        b = d.nativeEvent;
        var _ = new b.constructor(b.type, b);
      p.shift();
    }
    return !0;
  }
  }
  }
  }
    }
        _.blockedOn === d && (_.blockedOn = null);
      }
    }
  }
    try {
    } finally {
    }
  }
    try {
    } finally {
    }
  }
    if (Ls) {
    else if (b = p.tag, b === 13) {
      if (d = De(p), d !== null) return d;
      d = null;
    } else if (b === 3) {
      if (p.stateNode.current.memoizedState.isDehydrated) return p.tag === 3 ? p.stateNode.containerInfo : null;
      d = null;
    } else p !== d && (d = null);
  }
    switch (d) {
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 1;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "toggle":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 4;
      case "message":
            return 1;
            return 4;
            return 16;
            return 536870912;
          default:
            return 16;
        }
      default:
        return 16;
    }
  }
  function je() {
    if (ve) return ve;
    var oe = b - d;
  }
  function Ve(d) {
    var p = d.keyCode;
    return "charCode" in d ? (d = d.charCode, d === 0 && p === 13 && (d = 13)) : d = p, d === 10 && (d = 13), 32 <= d || d === 13 ? d : 0;
  }
  function ht() {
    return !0;
  }
  function tn() {
    return !1;
  }
  function _t(d) {
    }
    return Q(p.prototype, { preventDefault: function() {
      this.defaultPrevented = !0;
      var b = this.nativeEvent;
      b && (b.preventDefault ? b.preventDefault() : typeof b.returnValue != "unknown" && (b.returnValue = !1), this.isDefaultPrevented = ht);
    }, stopPropagation: function() {
      var b = this.nativeEvent;
      b && (b.stopPropagation ? b.stopPropagation() : typeof b.cancelBubble != "unknown" && (b.cancelBubble = !0), this.isPropagationStopped = ht);
    }, persist: function() {
    }, isPersistent: ht }), p;
  }
    return d.timeStamp || Date.now();
    return d.relatedTarget === void 0 ? d.fromElement === d.srcElement ? d.toElement : d.fromElement : d.relatedTarget;
  }, movementX: function(d) {
  }, movementY: function(d) {
    return "clipboardData" in d ? d.clipboardData : window.clipboardData;
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
    var p = this.nativeEvent;
  }
  }
    if (d.key) {
      if (p !== "Unidentified") return p;
    }
    return d.type === "keypress" ? Ve(d) : 0;
  }, keyCode: function(d) {
    return d.type === "keydown" || d.type === "keyup" ? d.keyCode : 0;
  }, which: function(d) {
    return d.type === "keypress" ? Ve(d) : d.type === "keydown" || d.type === "keyup" ? d.keyCode : 0;
    deltaX: function(d) {
      return "deltaX" in d ? d.deltaX : "wheelDeltaX" in d ? -d.wheelDeltaX : 0;
    },
    deltaY: function(d) {
      return "deltaY" in d ? d.deltaY : "wheelDeltaY" in d ? -d.wheelDeltaY : "wheelDelta" in d ? -d.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
    switch (d) {
      case "keyup":
      case "keydown":
        return p.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;
      default:
        return !1;
    }
  }
    return d = d.detail, typeof d == "object" && "data" in d ? d.data : null;
  }
    switch (d) {
      case "compositionend":
      case "keypress":
      case "textInput":
      default:
        return null;
    }
  }
    switch (d) {
      case "paste":
        return null;
      case "keypress":
        if (!(p.ctrlKey || p.altKey || p.metaKey) || p.ctrlKey && p.altKey) {
          if (p.char && 1 < p.char.length) return p.char;
          if (p.which) return String.fromCharCode(p.which);
        }
        return null;
      case "compositionend":
      default:
        return null;
    }
  }
    var p = d && d.nodeName && d.nodeName.toLowerCase();
  }
  }
  }
    if (ce(p)) return d;
  }
    if (d === "change") return p;
  }
  if (c) {
    if (c) {
      }
  }
  }
      var p = [];
    }
  }
  }
  }
  }
  }
    return d === p && (d !== 0 || 1 / d === 1 / p) || d !== d && p !== p;
  }
    if (typeof d != "object" || d === null || typeof p != "object" || p === null) return !1;
    var b = Object.keys(d), _ = Object.keys(p);
    if (b.length !== _.length) return !1;
    for (_ = 0; _ < b.length; _++) {
    }
    return !0;
  }
    for (; d && d.firstChild; ) d = d.firstChild;
    return d;
  }
    d = 0;
    for (var _; b; ) {
      if (b.nodeType === 3) {
        if (_ = d + b.textContent.length, d <= p && _ >= p) return { node: b, offset: p - d };
        d = _;
      }
      e: {
        for (; b; ) {
          if (b.nextSibling) {
            b = b.nextSibling;
            break e;
          }
          b = b.parentNode;
        }
        b = void 0;
      }
    }
  }
  }
    for (var d = window, p = Ce(); p instanceof d.HTMLIFrameElement; ) {
      try {
        var b = typeof p.contentWindow.location.href == "string";
      } catch {
        b = !1;
      }
      if (b) d = p.contentWindow;
      else break;
      p = Ce(d.document);
    }
    return p;
  }
    var p = d && d.nodeName && d.nodeName.toLowerCase();
    return p && (p === "input" && (d.type === "text" || d.type === "search" || d.type === "tel" || d.type === "url" || d.type === "password") || p === "textarea" || d.contentEditable === "true");
  }
        if (p = _.start, d = _.end, d === void 0 && (d = p), "selectionStart" in b) b.selectionStart = p, b.selectionEnd = Math.min(d, b.value.length);
        else if (d = (p = b.ownerDocument || document) && p.defaultView || window, d.getSelection) {
          d = d.getSelection();
            b,
            _
          );
        }
      }
      for (p = [], d = b; d = d.parentNode; ) d.nodeType === 1 && p.push({ element: d, left: d.scrollLeft, top: d.scrollTop });
      for (typeof b.focus == "function" && b.focus(), b = 0; b < p.length; b++) d = p[b], d.element.scrollLeft = d.left, d.element.scrollTop = d.top;
    }
  }
    var _ = b.window === b ? b.document : b.nodeType === 9 ? b : b.ownerDocument;
  }
    var b = {};
    return b[d.toLowerCase()] = p.toLowerCase(), b["Webkit" + d] = "webkit" + p, b["Moz" + d] = "moz" + p, b;
  }
    return d;
  }
  }
  }
    var _ = d.type || "unknown-event";
    d.currentTarget = b, Ct(_, p, void 0, d), d.currentTarget = null;
  }
    p = (p & 4) !== 0;
    for (var b = 0; b < d.length; b++) {
      _ = _.listeners;
      e: {
        if (p) for (var oe = _.length - 1; 0 <= oe; oe--) {
          var me = _[oe], Se = me.instance, Fe = me.currentTarget;
        }
        else for (oe = 0; oe < _.length; oe++) {
        }
      }
    }
  }
    var _ = d + "__bubble";
  }
    var _ = 0;
  }
      });
      var p = d.nodeType === 9 ? d : d.ownerDocument;
    }
  }
      case 1:
        break;
      case 4:
        break;
      default:
    }
  }
    if (!(p & 1) && !(p & 2) && _ !== null) e: for (; ; ) {
      if (_ === null) return;
      var oe = _.tag;
      if (oe === 3 || oe === 4) {
        var me = _.stateNode.containerInfo;
        if (oe === 4) for (oe = _.return; oe !== null; ) {
          var Se = oe.tag;
          oe = oe.return;
        }
        for (; me !== null; ) {
          if (Se = oe.tag, Se === 5 || Se === 6) {
            continue e;
          }
          me = me.parentNode;
        }
      }
      _ = _.return;
    }
      e: {
        if (st !== void 0) {
          switch (d) {
            case "keypress":
              if (Ve(b) === 0) break e;
            case "keydown":
            case "keyup":
              break;
            case "focusin":
              break;
            case "focusout":
              break;
            case "beforeblur":
            case "afterblur":
              break;
            case "click":
              if (b.button === 2) break e;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              break;
              break;
              break;
            case "scroll":
              break;
            case "wheel":
              break;
            case "copy":
            case "cut":
            case "paste":
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
          }
          Gt = [];
          for (var Ee = Fe, Ae; Ee !== null; ) {
            Ae = Ee;
            var lt = Ae.stateNode;
            Ee = Ee.return;
          }
          0 < Gt.length && (st = new Mt(st, Ht, null, b, at), ct.push({ event: st, listeners: Gt }));
        }
      }
      if (!(p & 7)) {
        e: {
              for (; Ee--; ) {
                if (Gt === ke || ke !== null && Gt === ke.alternate) break t;
              }
              Gt = null;
            }
            else Gt = null;
          }
        }
        e: {
          else {
          }
          if (Vt && (Vt = Vt(d, Fe))) {
            break e;
          }
        }
          case "focusin":
            break;
          case "focusout":
            break;
          case "mousedown":
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            break;
          case "selectionchange":
          case "keydown":
          case "keyup":
        }
          switch (d) {
            case "compositionstart":
              break e;
            case "compositionend":
              break e;
            case "compositionupdate":
              break e;
          }
        }
      }
    });
  }
    return { instance: d, listener: p, currentTarget: b };
  }
    for (var b = p + "Capture", _ = []; d !== null; ) {
    }
    return _;
  }
    if (d === null) return null;
    do
      d = d.return;
    while (d && d.tag !== 5);
    return d || null;
  }
      var me = b, Se = me.alternate, Fe = me.stateNode;
      if (Se !== null && Se === _) break;
    }
    oe.length !== 0 && d.push({ event: p, listeners: oe });
  }
  }
  }
  }
    return d === "textarea" || d === "noscript" || typeof p.children == "string" || typeof p.children == "number" || typeof p.dangerouslySetInnerHTML == "object" && p.dangerouslySetInnerHTML !== null && p.dangerouslySetInnerHTML.__html != null;
  }
    setTimeout(function() {
      throw d;
    });
  }
    var b = p, _ = 0;
    do {
        if (_ === 0) {
          return;
        }
        _--;
      } else b !== "$" && b !== "$?" && b !== "$!" || _++;
    } while (b);
  }
    for (; d != null; d = d.nextSibling) {
      var p = d.nodeType;
      if (p === 1 || p === 3) break;
      if (p === 8) {
        if (p = d.data, p === "$" || p === "$!" || p === "$?") break;
        if (p === "/$") return null;
      }
    }
    return d;
  }
    d = d.previousSibling;
    for (var p = 0; d; ) {
      if (d.nodeType === 8) {
        var b = d.data;
        if (b === "$" || b === "$!" || b === "$?") {
          if (p === 0) return d;
          p--;
        } else b === "/$" && p++;
      }
      d = d.previousSibling;
    }
    return null;
  }
    if (p) return p;
    for (var b = d.parentNode; b; ) {
        }
        return p;
      }
      d = b, b = d.parentNode;
    }
    return null;
  }
  function Qt(d) {
  }
    if (d.tag === 5 || d.tag === 6) return d.stateNode;
    throw Error(n(33));
  }
  }
    return { current: d };
  }
  }
  function Xt(d, p) {
  }
    var b = d.type.contextTypes;
    var _ = d.stateNode;
    if (_ && _.__reactInternalMemoizedUnmaskedChildContext === p) return _.__reactInternalMemoizedMaskedChildContext;
  }
    return d = d.childContextTypes, d != null;
  }
  }
  }
    var _ = d.stateNode;
    if (p = p.childContextTypes, typeof _.getChildContext != "function") return b;
    _ = _.getChildContext();
    return Q({}, b, _);
  }
  }
    var _ = d.stateNode;
    if (!_) throw Error(n(169));
  }
  }
  }
      try {
          var _ = b[d];
          do
            _ = _(!0);
          while (_ !== null);
        }
      } finally {
      }
    }
    return null;
  }
  }
  }
    b.elementType = "DELETED", b.stateNode = p, b.return = d, p = d.deletions, p === null ? (d.deletions = [b], d.flags |= 16) : p.push(b);
  }
    switch (d.tag) {
      case 5:
        var b = d.type;
      case 6:
      case 13:
      default:
        return !1;
    }
  }
    return (d.mode & 1) !== 0 && (d.flags & 128) === 0;
  }
      if (p) {
        var b = p;
        }
      } else {
      }
    }
  }
    for (d = d.return; d !== null && d.tag !== 5 && d.tag !== 3 && d.tag !== 13; ) d = d.return;
  }
    var p;
    }
      if (d = d.memoizedState, d = d !== null ? d.dehydrated : null, !d) throw Error(n(317));
      e: {
        for (d = d.nextSibling, p = 0; d; ) {
          if (d.nodeType === 8) {
            var b = d.data;
            if (b === "/$") {
              if (p === 0) {
                break e;
              }
              p--;
            } else b !== "$" && b !== "$!" && b !== "$?" || p++;
          }
          d = d.nextSibling;
        }
      }
    return !0;
  }
  }
  }
  }
    if (d = b.ref, d !== null && typeof d != "function" && typeof d != "object") {
      if (b._owner) {
        if (b = b._owner, b) {
          if (b.tag !== 1) throw Error(n(309));
          var _ = b.stateNode;
        }
        if (!_) throw Error(n(147, d));
      }
      if (typeof d != "string") throw Error(n(284));
      if (!b._owner) throw Error(n(290, d));
    }
    return d;
  }
    throw d = Object.prototype.toString.call(p), Error(n(31, d === "[object Object]" ? "object with keys {" + Object.keys(p).join(", ") + "}" : d));
  }
    var p = d._init;
    return p(d._payload);
  }
    function p(ke, Ee) {
      if (d) {
        var Ae = ke.deletions;
        Ae === null ? (ke.deletions = [Ee], ke.flags |= 16) : Ae.push(Ee);
      }
    }
    function b(ke, Ee) {
      if (!d) return null;
      for (; Ee !== null; ) p(ke, Ee), Ee = Ee.sibling;
      return null;
    }
    function _(ke, Ee) {
      for (ke = /* @__PURE__ */ new Map(); Ee !== null; ) Ee.key !== null ? ke.set(Ee.key, Ee) : ke.set(Ee.index, Ee), Ee = Ee.sibling;
      return ke;
    }
    }
      return ke.index = Ae, d ? (Ae = ke.alternate, Ae !== null ? (Ae = Ae.index, Ae < Ee ? (ke.flags |= 2, Ee) : Ae) : (ke.flags |= 2, Ee)) : (ke.flags |= 1048576, Ee);
    }
    function oe(ke) {
      return d && ke.alternate === null && (ke.flags |= 2), ke;
    }
    function me(ke, Ee, Ae, lt) {
    }
    function Se(ke, Ee, Ae, lt) {
      var Vt = Ae.type;
    }
    function Fe(ke, Ee, Ae, lt) {
    }
    function at(ke, Ee, Ae, lt, Vt) {
    }
    function ct(ke, Ee, Ae) {
      if (typeof Ee == "object" && Ee !== null) {
        switch (Ee.$$typeof) {
            var lt = Ee._init;
            return ct(ke, lt(Ee._payload), Ae);
        }
      }
      return null;
    }
    function st(ke, Ee, Ae, lt) {
      var Vt = Ee !== null ? Ee.key : null;
      if (typeof Ae == "string" && Ae !== "" || typeof Ae == "number") return Vt !== null ? null : me(ke, Ee, "" + Ae, lt);
      if (typeof Ae == "object" && Ae !== null) {
        switch (Ae.$$typeof) {
            return Ae.key === Vt ? Se(ke, Ee, Ae, lt) : null;
            return Ae.key === Vt ? Fe(ke, Ee, Ae, lt) : null;
            return Vt = Ae._init, st(
              ke,
              Ee,
              Vt(Ae._payload),
              lt
            );
        }
        if (wt(Ae) || re(Ae)) return Vt !== null ? null : at(ke, Ee, Ae, lt, null);
      }
      return null;
    }
    function Mt(ke, Ee, Ae, lt, Vt) {
      if (typeof lt == "string" && lt !== "" || typeof lt == "number") return ke = ke.get(Ae) || null, me(Ee, ke, "" + lt, Vt);
      if (typeof lt == "object" && lt !== null) {
        switch (lt.$$typeof) {
            return ke = ke.get(lt.key === null ? Ae : lt.key) || null, Se(Ee, ke, lt, Vt);
            return ke = ke.get(lt.key === null ? Ae : lt.key) || null, Fe(Ee, ke, lt, Vt);
        }
        if (wt(lt) || re(lt)) return ke = ke.get(Ae) || null, at(Ee, ke, lt, Vt, null);
      }
      return null;
    }
    function Ht(ke, Ee, Ae, lt) {
          break;
        }
      }
      }
    }
    function Gt(ke, Ee, Ae, lt) {
      var Vt = re(Ae);
      if (typeof Vt != "function") throw Error(n(150));
      if (Ae = Vt.call(Ae), Ae == null) throw Error(n(151));
          break;
        }
      }
        ke,
        switch (Ae.$$typeof) {
            e: {
                      break e;
                    }
                    break e;
                  }
                  break;
              }
            }
            return oe(ke);
            e: {
                  break e;
                } else {
                  b(ke, Ee);
                  break;
                }
                else p(ke, Ee);
                Ee = Ee.sibling;
              }
            }
            return oe(ke);
        }
        if (wt(Ae)) return Ht(ke, Ee, Ae, lt);
        if (re(Ae)) return Gt(ke, Ee, Ae, lt);
      }
    }
  }
  }
  }
    for (; d !== null; ) {
      var _ = d.alternate;
      if ((d.childLanes & p) !== p ? (d.childLanes |= p, _ !== null && (_.childLanes |= p)) : _ !== null && (_.childLanes & p) !== p && (_.childLanes |= p), d === b) break;
      d = d.return;
    }
  }
  }
    var p = d._currentValue;
    return p;
  }
  }
  }
    d.lanes |= p;
    var b = d.alternate;
    for (b !== null && (b.lanes |= p), b = d, d = d.return; d !== null; ) d.childLanes |= p, b = d.alternate, b !== null && (b.childLanes |= p), b = d, d = d.return;
    return b.tag === 3 ? b.stateNode : null;
  }
    d.updateQueue = { baseState: d.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
  }
    d = d.updateQueue, p.updateQueue === d && (p.updateQueue = { baseState: d.baseState, firstBaseUpdate: d.firstBaseUpdate, lastBaseUpdate: d.lastBaseUpdate, shared: d.shared, effects: d.effects });
  }
    return { eventTime: d, lane: p, tag: 0, payload: null, callback: null, next: null };
  }
    var _ = d.updateQueue;
    if (_ === null) return null;
    }
  }
    if (p = p.updateQueue, p !== null && (p = p.shared, (b & 4194240) !== 0)) {
      var _ = p.lanes;
    }
  }
    var b = d.updateQueue, _ = d.alternate;
    if (_ !== null && (_ = _.updateQueue, b === _)) {
      if (b = b.firstBaseUpdate, b !== null) {
        do {
          var oe = { eventTime: b.eventTime, lane: b.lane, tag: b.tag, payload: b.payload, callback: b.callback, next: null };
        } while (b !== null);
      return;
    }
    d = b.lastBaseUpdate, d === null ? b.firstBaseUpdate = p : d.next = p, b.lastBaseUpdate = p;
  }
    if (me !== null) {
      var Se = me, Fe = Se.next;
      var at = d.alternate;
      at !== null && (at = at.updateQueue, me = at.lastBaseUpdate, me !== oe && (me === null ? at.firstBaseUpdate = Fe : me.next = Fe, at.lastBaseUpdate = Se));
    }
      do {
        var st = me.lane, Mt = me.eventTime;
        if ((_ & st) === st) {
          at !== null && (at = at.next = {
            eventTime: Mt,
            lane: 0,
            tag: me.tag,
            payload: me.payload,
            callback: me.callback,
            next: null
          });
          e: {
            var Ht = d, Gt = me;
            switch (st = p, Mt = b, Gt.tag) {
              case 1:
                if (Ht = Gt.payload, typeof Ht == "function") {
                  ct = Ht.call(Mt, ct, st);
                  break e;
                }
                ct = Ht;
                break e;
              case 3:
                Ht.flags = Ht.flags & -65537 | 128;
              case 0:
                if (Ht = Gt.payload, st = typeof Ht == "function" ? Ht.call(Mt, ct, st) : Ht, st == null) break e;
                ct = Q({}, ct, st);
                break e;
              case 2:
            }
          }
        } else Mt = { eventTime: Mt, lane: st, tag: me.tag, payload: me.payload, callback: me.callback, next: null }, at === null ? (Fe = at = Mt, Se = ct) : at = at.next = Mt, oe |= st;
        if (me = me.next, me === null) {
        }
      } while (!0);
        do
    }
  }
    if (d = p.effects, p.effects = null, d !== null) for (p = 0; p < d.length; p++) {
      }
    }
  }
    return d;
  }
      case 9:
      case 11:
        p = (p = p.documentElement) ? p.namespaceURI : At(null, "");
        break;
      default:
        d = d === 8 ? p.parentNode : p, p = d.namespaceURI || null, d = d.tagName, p = At(p, d);
    }
  }
  }
  }
  }
    for (var p = d; p !== null; ) {
      if (p.tag === 13) {
        var b = p.memoizedState;
        if (b !== null && (b = b.dehydrated, b === null || b.data === "$?" || b.data === "$!")) return p;
      } else if (p.tag === 19 && p.memoizedProps.revealOrder !== void 0) {
        if (p.flags & 128) return p;
      } else if (p.child !== null) {
        p.child.return = p, p = p.child;
        continue;
      }
      if (p === d) break;
      for (; p.sibling === null; ) {
        if (p.return === null || p.return === d) return null;
        p = p.return;
      }
      p.sibling.return = p.return, p = p.sibling;
    }
    return null;
  }
  function Jt() {
  }
    throw Error(n(321));
  }
    if (p === null) return !1;
    return !0;
  }
      do {
    }
    return d;
  }
  }
    var d = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
  }
      d = d !== null ? d.memoizedState : null;
    else {
      if (d === null) throw Error(n(310));
    }
  }
    return typeof p == "function" ? p(d) : p;
  }
    if (b === null) throw Error(n(311));
    b.lastRenderedReducer = d;
      }
    }
      do {
        var at = Fe.lane;
        else {
          var ct = {
            lane: at,
            action: Fe.action,
            hasEagerState: Fe.hasEagerState,
            eagerState: Fe.eagerState,
            next: null
          };
        }
        Fe = Fe.next;
    }
    if (d = b.interleaved, d !== null) {
      do
    return [p.memoizedState, b.dispatch];
  }
    if (b === null) throw Error(n(311));
    b.lastRenderedReducer = d;
      b.pending = null;
      do
    }
  }
  }
    }
  }
  }
  }
    return b(function() {
    });
  }
    var p = d.getSnapshot;
    d = d.value;
    try {
      var b = p();
    } catch {
      return !0;
    }
  }
    p !== null && Li(p, d, 1, -1);
  }
  }
  }
  }
  }
    _ = _ === void 0 ? null : _;
        return;
      }
    }
  }
  }
  }
  }
  }
    if (typeof p == "function") return d = d(), p(d), function() {
      p(null);
    };
    if (p != null) return d = d(), p.current = d, function() {
      p.current = null;
    };
  }
  }
  }
    p = p === void 0 ? null : p;
    var _ = b.memoizedState;
  }
    p = p === void 0 ? null : p;
    var _ = b.memoizedState;
  }
  }
    try {
      d(!1), p();
    } finally {
    }
  }
  }
    }
  }
    else {
          var Se = p.interleaved;
          return;
        }
      } catch {
      } finally {
      }
    }
  }
    var p = d.alternate;
  }
    var b = d.pending;
    b === null ? p.next = p : (p.next = b.next, b.next = p), d.pending = p;
  }
    if (b & 4194240) {
      var _ = p.lanes;
    }
  }
      4194308,
      4,
      b
    );
  }, useLayoutEffect: function(d, p) {
  }, useInsertionEffect: function(d, p) {
  }, useMemo: function(d, p) {
    return p = p === void 0 ? null : p, d = d(), b.memoizedState = [d, p], d;
  }, useReducer: function(d, p, b) {
  }, useRef: function(d) {
    return d = { current: d }, p.memoizedState = d;
  }, useTransition: function() {
  }, useMutableSource: function() {
  }, useSyncExternalStore: function(d, p, b) {
      if (b === void 0) throw Error(n(407));
      b = b();
    } else {
    }
      null,
      _,
      d
  }, useId: function() {
    } else b = it++, p = ":" + p + "r" + b.toString(32) + ":";
    return d.memoizedState = p;
    useState: function() {
    },
    useDeferredValue: function(d) {
    },
    useTransition: function() {
      return [d, p];
    },
    unstable_isNewReconciler: !1
  }, useTransition: function() {
    return [d, p];
    if (d && d.defaultProps) {
      p = Q({}, p), d = d.defaultProps;
      for (var b in d) p[b] === void 0 && (p[b] = d[b]);
      return p;
    }
    return p;
  }
    p = d.memoizedState, b = b(_, p), b = b == null ? p : Q({}, p, b), d.memoizedState = b, d.lanes === 0 && (d.updateQueue.baseState = b);
  }
  }, enqueueSetState: function(d, p, b) {
    d = d._reactInternals;
  }, enqueueReplaceState: function(d, p, b) {
    d = d._reactInternals;
  }, enqueueForceUpdate: function(d, p) {
    d = d._reactInternals;
  } };
  }
  }
  }
  }
    try {
      var b = "", _ = p;
      do
        b += he(_), _ = _.return;
      while (_);
    }
  }
    return { value: d, source: null, stack: b ?? null, digest: p ?? null };
  }
    try {
      console.error(p.value);
    } catch (b) {
      setTimeout(function() {
        throw b;
      });
    }
  }
    var _ = p.value;
    return b.callback = function() {
    }, b;
  }
    var _ = d.type.getDerivedStateFromError;
    if (typeof _ == "function") {
      b.payload = function() {
      }, b.callback = function() {
      };
    }
      var oe = p.stack;
      this.componentDidCatch(p.value, { componentStack: oe !== null ? oe : "" });
    }), b;
  }
    var _ = d.pingCache;
    if (_ === null) {
  }
    do {
      var p;
      if ((p = d.tag === 13) && (p = d.memoizedState, p = p !== null ? p.dehydrated !== null : !0), p) return d;
      d = d.return;
    } while (d !== null);
    return null;
  }
  }
  }
    b = b.render;
  }
    if (d === null) {
    }
    }
  }
    if (d !== null) {
    }
  }
    else {
    }
  }
    var b = p.ref;
    (d === null && b !== null || d !== null && d.ref !== b) && (p.flags |= 512, p.flags |= 2097152);
  }
  }
    else if (d === null) {
      var oe = p.stateNode, me = p.memoizedProps;
      oe.props = me;
      var Se = oe.context, Fe = b.contextType;
      var at = b.getDerivedStateFromProps, ct = typeof at == "function" || typeof oe.getSnapshotBeforeUpdate == "function";
      var st = p.memoizedState;
    } else {
      var Mt = b.getDerivedStateFromProps;
      var Ht = p.memoizedState;
    }
  }
    var oe = (p.flags & 128) !== 0;
    var me = oe && typeof b.getDerivedStateFromError != "function" ? null : _.render();
  }
    var p = d.stateNode;
  }
  }
    return { baseLanes: d, cachePool: null, transitions: null };
  }
      var Se = { mode: "hidden", children: _.children };
    }
  }
  }
  }
    if (b)
        switch (oe & -oe) {
          case 4:
            break;
          case 16:
            break;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            break;
          case 536870912:
            break;
          default:
        }
      }
    }
  }
    d.lanes |= p;
    var _ = d.alternate;
  }
  }
    else {
      if (d !== null && d.flags & 128) e: for (d = p.child; d !== null; ) {
        else if (d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === p) break e;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === p) break e;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
      _ &= 1;
    }
      case "forwards":
        break;
      case "backwards":
            break;
          }
        }
        break;
      case "together":
        break;
      default:
        p.memoizedState = null;
    }
    return p.child;
  }
    !(p.mode & 1) && d !== null && (d.alternate = null, p.alternate = null, p.flags |= 2);
  }
    if (d !== null && p.child !== d.child) throw Error(n(153));
    if (p.child !== null) {
      b.sibling = null;
    }
    return p.child;
  }
    switch (p.tag) {
      case 3:
        break;
      case 5:
        break;
      case 1:
        break;
      case 4:
        break;
      case 10:
        break;
      case 13:
        if (_ = p.memoizedState, _ !== null)
        break;
      case 19:
        if (_ = (b & p.childLanes) !== 0, d.flags & 128) {
          p.flags |= 128;
        }
        return null;
      case 22:
      case 23:
    }
  }
    for (var b = p.child; b !== null; ) {
      if (b.tag === 5 || b.tag === 6) d.appendChild(b.stateNode);
      else if (b.tag !== 4 && b.child !== null) {
        b.child.return = b, b = b.child;
        continue;
      }
      if (b === p) break;
      for (; b.sibling === null; ) {
        if (b.return === null || b.return === p) return;
        b = b.return;
      }
      b.sibling.return = b.return, b = b.sibling;
    }
      switch (b) {
        case "input":
          break;
        case "select":
          break;
        case "textarea":
          break;
        default:
      }
      We(b, _);
      var oe;
      b = null;
        for (oe in me) me.hasOwnProperty(oe) && (b || (b = {}), b[oe] = "");
      for (Fe in _) {
        var Se = _[Fe];
          for (oe in me) !me.hasOwnProperty(oe) || Se && Se.hasOwnProperty(oe) || (b || (b = {}), b[oe] = "");
          for (oe in Se) Se.hasOwnProperty(oe) && me[oe] !== Se[oe] && (b || (b = {}), b[oe] = Se[oe]);
          Fe,
          b
        )), b = Se;
      }
      (p.updateQueue = Fe) && (p.flags |= 4);
    }
    b !== _ && (p.flags |= 4);
  };
      case "hidden":
        p = d.tail;
        for (var b = null; p !== null; ) p.alternate !== null && (b = p), p = p.sibling;
        b === null ? d.tail = null : b.sibling = null;
        break;
      case "collapsed":
        b = d.tail;
        for (var _ = null; b !== null; ) b.alternate !== null && (_ = b), b = b.sibling;
        _ === null ? p || d.tail === null ? d.tail = null : d.tail.sibling = null : _.sibling = null;
    }
  }
    var p = d.alternate !== null && d.alternate.child === d.child, b = 0, _ = 0;
    return d.subtreeFlags |= _, d.childLanes = b, p;
  }
    var _ = p.pendingProps;
      case 2:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
      case 1:
      case 3:
      case 5:
        else {
          if (!_) {
            if (p.stateNode === null) throw Error(n(166));
          }
            _ = p.stateNode, b = p.type;
              case "dialog":
                break;
              case "iframe":
              case "object":
              case "embed":
                break;
              case "video":
              case "audio":
                break;
              case "source":
                break;
              case "img":
              case "image":
              case "link":
                  "error",
                  _
                break;
              case "details":
                break;
              case "input":
                break;
              case "select":
                break;
              case "textarea":
            }
                _.textContent,
                me,
                d
            }
            switch (b) {
              case "input":
                break;
              case "textarea":
                _e(_), Et(_);
                break;
              case "select":
              case "option":
                break;
              default:
            }
          } else {
            e: {
              switch (oe = St(b, _), b) {
                case "dialog":
                  break;
                case "iframe":
                case "object":
                case "embed":
                  break;
                case "video":
                case "audio":
                  break;
                case "source":
                  break;
                case "img":
                case "image":
                case "link":
                    "error",
                    d
                  break;
                case "details":
                  break;
                case "input":
                  break;
                case "option":
                  break;
                case "select":
                  break;
                case "textarea":
                  break;
                default:
              }
              }
              switch (b) {
                case "input":
                  _e(d), rt(d, _, !1);
                  break;
                case "textarea":
                  _e(d), Et(d);
                  break;
                case "option":
                  _.value != null && d.setAttribute("value", "" + pe(_.value));
                  break;
                case "select":
                    d,
                    !!_.multiple,
                    _.defaultValue,
                    !0
                  );
                  break;
                default:
              }
              switch (b) {
                case "button":
                case "input":
                case "select":
                case "textarea":
                  _ = !!_.autoFocus;
                  break e;
                case "img":
                  _ = !0;
                  break e;
                default:
                  _ = !1;
              }
            }
            _ && (p.flags |= 4);
          }
          p.ref !== null && (p.flags |= 512, p.flags |= 2097152);
        }
      case 6:
        else {
          if (typeof _ != "string" && p.stateNode === null) throw Error(n(166));
              case 3:
                break;
              case 5:
            }
        }
      case 13:
            if (d === null) {
      case 4:
      case 10:
      case 17:
      case 19:
        else {
            }
            d = d.sibling;
          }
        }
        else {
        }
      case 22:
      case 23:
      case 24:
        return null;
      case 25:
        return null;
    }
    throw Error(n(156, p.tag));
  }
      case 1:
      case 3:
      case 5:
      case 13:
          if (p.alternate === null) throw Error(n(340));
        }
        return d = p.flags, d & 65536 ? (p.flags = d & -65537 | 128, p) : null;
      case 19:
      case 4:
      case 10:
      case 22:
      case 23:
      case 24:
        return null;
      default:
        return null;
    }
  }
    var b = d.ref;
    if (b !== null) if (typeof b == "function") try {
      b(null);
    } catch (_) {
    }
    else b.current = null;
  }
    try {
      b();
    } catch (_) {
    }
  }
      if ("selectionStart" in d) var b = { start: d.selectionStart, end: d.selectionEnd };
      else e: {
        b = (b = d.ownerDocument) && b.defaultView || window;
        var _ = b.getSelection && b.getSelection();
        if (_ && _.rangeCount !== 0) {
          b = _.anchorNode;
          _ = _.focusOffset;
          try {
          } catch {
            b = null;
            break e;
          }
          var oe = 0, me = -1, Se = -1, Fe = 0, at = 0, ct = d, st = null;
          t: for (; ; ) {
              st = ct, ct = Mt;
            for (; ; ) {
              if (ct === d) break t;
              ct = st, st = ct.parentNode;
            }
            ct = Mt;
          }
          b = me === -1 || Se === -1 ? null : { start: me, end: Se };
        } else b = null;
      }
      b = b || { start: 0, end: 0 };
    } else b = null;
    else for (; Nt !== null; ) {
      p = Nt;
      try {
        var Ht = p.alternate;
        if (p.flags & 1024) switch (p.tag) {
          case 0:
          case 11:
          case 15:
            break;
          case 1:
            if (Ht !== null) {
              ke.__reactInternalSnapshotBeforeUpdate = Ee;
            }
            break;
          case 3:
            var Ae = p.stateNode.containerInfo;
            Ae.nodeType === 1 ? Ae.textContent = "" : Ae.nodeType === 9 && Ae.documentElement && Ae.removeChild(Ae.documentElement);
            break;
          case 5:
          case 6:
          case 4:
          case 17:
            break;
          default:
            throw Error(n(163));
        }
      } catch (lt) {
      }
      if (d = p.sibling, d !== null) {
        d.return = p.return, Nt = d;
        break;
      }
      Nt = p.return;
    }
  }
    var _ = p.updateQueue;
    if (_ = _ !== null ? _.lastEffect : null, _ !== null) {
      do {
        }
    }
  }
    if (p = p.updateQueue, p = p !== null ? p.lastEffect : null, p !== null) {
      var b = p = p.next;
      do {
        if ((b.tag & d) === d) {
          var _ = b.create;
          b.destroy = _();
        }
        b = b.next;
      } while (b !== p);
    }
  }
    var p = d.ref;
    if (p !== null) {
      var b = d.stateNode;
      switch (d.tag) {
        case 5:
          d = b;
          break;
        default:
          d = b;
      }
      typeof p == "function" ? p(d) : p.current = d;
    }
  }
    var p = d.alternate;
  }
    return d.tag === 5 || d.tag === 3 || d.tag === 4;
  }
    e: for (; ; ) {
      for (; d.sibling === null; ) {
        d = d.return;
      }
      for (d.sibling.return = d.return, d = d.sibling; d.tag !== 5 && d.tag !== 6 && d.tag !== 18; ) {
        if (d.flags & 2 || d.child === null || d.tag === 4) continue e;
        d.child.return = d, d = d.child;
      }
      if (!(d.flags & 2)) return d.stateNode;
    }
  }
    var _ = d.tag;
  }
    var _ = d.tag;
    if (_ === 5 || _ === 6) d = d.stateNode, p ? b.insertBefore(d, p) : b.appendChild(d);
  }
  }
    } catch {
    }
    switch (b.tag) {
      case 5:
      case 6:
        break;
      case 18:
        break;
      case 4:
        break;
      case 0:
      case 11:
      case 14:
      case 15:
          do {
        }
        break;
      case 1:
          _.props = b.memoizedProps, _.state = b.memoizedState, _.componentWillUnmount();
        } catch (me) {
        }
        break;
      case 21:
        break;
      case 22:
        break;
      default:
    }
  }
    var p = d.updateQueue;
    if (p !== null) {
      d.updateQueue = null;
      var b = d.stateNode;
      });
    }
  }
    var b = p.deletions;
    if (b !== null) for (var _ = 0; _ < b.length; _++) {
      try {
        e: for (; me !== null; ) {
          switch (me.tag) {
            case 5:
              break e;
            case 3:
              break e;
            case 4:
              break e;
          }
          me = me.return;
        }
      } catch (Fe) {
      }
    }
  }
    var b = d.alternate, _ = d.flags;
    switch (d.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
          try {
          } catch (Gt) {
          }
          try {
          } catch (Gt) {
          }
        }
        break;
      case 1:
        break;
      case 5:
          try {
          } catch (Gt) {
          }
        }
          if (d.updateQueue = null, Se !== null) try {
            for (oe = 0; oe < Se.length; oe += 2) {
              var at = Se[oe], ct = Se[oe + 1];
            }
            switch (me) {
              case "input":
                break;
              case "textarea":
                break;
              case "select":
                  !0
            }
          } catch (Gt) {
          }
        }
        break;
      case 6:
          if (d.stateNode === null) throw Error(n(162));
          try {
          } catch (Gt) {
          }
        }
        break;
      case 3:
        } catch (Gt) {
        }
        break;
      case 4:
        break;
      case 13:
        break;
      case 22:
          if (Fe = d.memoizedState !== null, (d.stateNode.isHidden = Fe) && !at && d.mode & 1) for (Nt = d, at = d.child; at !== null; ) {
            for (ct = Nt = at; Nt !== null; ) {
              switch (st = Nt, Mt = st.child, st.tag) {
                case 0:
                case 11:
                case 14:
                case 15:
                  break;
                case 1:
                  var Ht = st.stateNode;
                  if (typeof Ht.componentWillUnmount == "function") {
                    _ = st, b = st.return;
                    try {
                      p = _, Ht.props = p.memoizedProps, Ht.state = p.memoizedState, Ht.componentWillUnmount();
                    } catch (Gt) {
                    }
                  }
                  break;
                case 5:
                  break;
                case 22:
                  if (st.memoizedState !== null) {
                    continue;
                  }
              }
            }
            at = at.sibling;
          }
          e: for (at = null, ct = d; ; ) {
            if (ct.tag === 5) {
              if (at === null) {
                at = ct;
                try {
                } catch (Gt) {
                }
              }
            } else if (ct.tag === 6) {
              if (at === null) try {
                ct.stateNode.nodeValue = Fe ? "" : ct.memoizedProps;
              } catch (Gt) {
              }
            } else if ((ct.tag !== 22 && ct.tag !== 23 || ct.memoizedState === null || ct === d) && ct.child !== null) {
              ct.child.return = ct, ct = ct.child;
              continue;
            }
            if (ct === d) break e;
            for (; ct.sibling === null; ) {
              if (ct.return === null || ct.return === d) break e;
              at === ct && (at = null), ct = ct.return;
            }
            at === ct && (at = null), ct.sibling.return = ct.return, ct = ct.sibling;
          }
        }
        break;
      case 19:
        break;
      case 21:
        break;
      default:
          p,
          d
    }
  }
    var p = d.flags;
    if (p & 2) {
      try {
        e: {
          for (var b = d.return; b !== null; ) {
              var _ = b;
              break e;
            }
            b = b.return;
          }
          throw Error(n(160));
        }
        switch (_.tag) {
          case 5:
            break;
          case 3:
          case 4:
            break;
          default:
            throw Error(n(161));
        }
      } catch (Se) {
      }
      d.flags &= -3;
    }
    p & 4096 && (d.flags &= -4097);
  }
  }
    for (var _ = (d.mode & 1) !== 0; Nt !== null; ) {
        if (!oe) {
        }
    }
  }
    for (; Nt !== null; ) {
      var p = Nt;
      if (p.flags & 8772) {
        var b = p.alternate;
        try {
          if (p.flags & 8772) switch (p.tag) {
            case 0:
            case 11:
            case 15:
              break;
            case 1:
              var _ = p.stateNode;
              else {
              }
              break;
            case 3:
              var oe = p.updateQueue;
              if (oe !== null) {
                if (b = null, p.child !== null) switch (p.child.tag) {
                  case 5:
                    b = p.child.stateNode;
                    break;
                  case 1:
                    b = p.child.stateNode;
                }
              }
              break;
            case 5:
              var me = p.stateNode;
              if (b === null && p.flags & 4) {
                b = me;
                var Se = p.memoizedProps;
                switch (p.type) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    Se.autoFocus && b.focus();
                    break;
                  case "img":
                    Se.src && (b.src = Se.src);
                }
              }
              break;
            case 6:
              break;
            case 4:
              break;
            case 12:
              break;
            case 13:
              if (p.memoizedState === null) {
                var Fe = p.alternate;
                if (Fe !== null) {
                  var at = Fe.memoizedState;
                  if (at !== null) {
                    var ct = at.dehydrated;
                  }
                }
              }
              break;
            case 19:
            case 17:
            case 21:
            case 22:
            case 23:
            case 25:
              break;
            default:
              throw Error(n(163));
          }
        } catch (st) {
        }
      }
      if (p === d) {
        Nt = null;
        break;
      }
      if (b = p.sibling, b !== null) {
        b.return = p.return, Nt = b;
        break;
      }
      Nt = p.return;
    }
  }
    for (; Nt !== null; ) {
      var p = Nt;
      if (p === d) {
        Nt = null;
        break;
      }
      var b = p.sibling;
      if (b !== null) {
        b.return = p.return, Nt = b;
        break;
      }
      Nt = p.return;
    }
  }
    for (; Nt !== null; ) {
      var p = Nt;
      try {
        switch (p.tag) {
          case 0:
          case 11:
          case 15:
            var b = p.return;
            try {
            } catch (Se) {
            }
            break;
          case 1:
            var _ = p.stateNode;
            if (typeof _.componentDidMount == "function") {
              try {
                _.componentDidMount();
              } catch (Se) {
              }
            }
            try {
            } catch (Se) {
            }
            break;
          case 5:
            var oe = p.return;
            try {
            } catch (Se) {
            }
        }
      } catch (Se) {
      }
      if (p === d) {
        Nt = null;
        break;
      }
      var me = p.sibling;
      if (me !== null) {
        me.return = p.return, Nt = me;
        break;
      }
      Nt = p.return;
    }
  }
  }
  }
  function Li(d, p, b, _) {
  }
    var b = d.callbackNode;
    if (_ === 0) b !== null && Ln(b), d.callbackNode = null, d.callbackPriority = 0;
    else if (p = _ & -_, d.callbackPriority !== p) {
      }), b = null;
      else {
          case 1:
            break;
          case 4:
            break;
          case 16:
            break;
          case 536870912:
            break;
          default:
        }
      }
      d.callbackPriority = p, d.callbackNode = b;
    }
  }
    var b = d.callbackNode;
    if (_ === 0) return null;
    else {
      p = _;
      do
        try {
          break;
        } catch (me) {
        }
      while (!0);
    }
    if (p !== 0) {
      else {
          case 0:
          case 1:
            throw Error(n(345));
          case 2:
            break;
          case 3:
                break;
              }
              break;
            }
            break;
          case 4:
            }
              break;
            }
            break;
          case 5:
            break;
          default:
            throw Error(n(329));
        }
      }
    }
  }
  }
  }
    for (var p = d; ; ) {
      if (p.flags & 16384) {
        var b = p.updateQueue;
        if (b !== null && (b = b.stores, b !== null)) for (var _ = 0; _ < b.length; _++) {
          try {
          } catch {
            return !1;
          }
        }
      }
      if (b = p.child, p.subtreeFlags & 16384 && b !== null) b.return = p, p = b;
      else {
        if (p === d) break;
        for (; p.sibling === null; ) {
          if (p.return === null || p.return === d) return !0;
          p = p.return;
        }
        p.sibling.return = p.return, p = p.sibling;
      }
    }
    return !0;
  }
      d[b] = -1, p &= ~_;
    }
  }
    if (d.tag !== 0 && b === 2) {
    }
    if (b === 6) throw Error(n(345));
  }
    try {
      return d(p);
    } finally {
    }
  }
    try {
    } finally {
    }
  }
  }
    d.finishedWork = null, d.finishedLanes = 0;
    var b = d.timeoutHandle;
      var _ = b;
        case 1:
          break;
        case 3:
          break;
        case 5:
          break;
        case 4:
          break;
        case 13:
          break;
        case 19:
          break;
        case 10:
          break;
        case 22:
        case 23:
      }
      b = b.return;
    }
        b.interleaved = null;
        }
        b.pending = _;
      }
    }
    return d;
  }
    do {
      try {
          }
        }
          break;
        }
        e: {
            var Fe = Se, at = me, ct = at.tag;
            if (!(at.mode & 1) && (ct === 0 || ct === 11 || ct === 15)) {
              var st = at.alternate;
              st ? (at.updateQueue = st.updateQueue, at.memoizedState = st.memoizedState, at.lanes = st.lanes) : (at.updateQueue = null, at.memoizedState = null);
            }
            if (Mt !== null) {
              var Ht = p.updateQueue;
              if (Ht === null) {
                var Gt = /* @__PURE__ */ new Set();
                Gt.add(Se), p.updateQueue = Gt;
              } else Ht.add(Se);
              break e;
            } else {
              if (!(p & 1)) {
                break e;
              }
              Se = Error(n(426));
            }
              break e;
            }
          }
          do {
              case 3:
                break e;
              case 1:
                me = Se;
                  break e;
                }
            }
        }
      } catch (Vt) {
        continue;
      }
      break;
    } while (!0);
  }
  function L0() {
  }
  }
    do
      try {
        break;
      }
    while (!0);
  }
  }
  }
  }
    var p = d;
    do {
      var b = p.alternate;
      if (d = p.return, p.flags & 32768) {
          return;
        }
        if (d !== null) d.flags |= 32768, d.subtreeFlags = 0, d.deletions = null;
        else {
          return;
        }
        return;
      }
      if (p = p.sibling, p !== null) {
        return;
      }
    } while (p !== null);
  }
    try {
    } finally {
    }
    return null;
  }
    do
    b = d.finishedWork;
    if (b === null) return null;
    if (d.finishedWork = null, d.finishedLanes = 0, b === d.current) throw Error(n(177));
    d.callbackNode = null, d.callbackPriority = 0;
    } else d.current = b;
  }
      try {
        else {
            if (Nt.flags & 16) {
              if (me !== null) {
                for (var Se = 0; Se < me.length; Se++) {
                  var Fe = me[Se];
                  for (Nt = Fe; Nt !== null; ) {
                    var at = Nt;
                    switch (at.tag) {
                      case 0:
                      case 11:
                      case 15:
                    }
                    var ct = at.child;
                    if (ct !== null) ct.return = at, Nt = ct;
                    else for (; Nt !== null; ) {
                      at = Nt;
                      var st = at.sibling, Mt = at.return;
                        Nt = null;
                        break;
                      }
                      if (st !== null) {
                        st.return = Mt, Nt = st;
                        break;
                      }
                      Nt = Mt;
                    }
                  }
                }
                if (Ht !== null) {
                  var Gt = Ht.child;
                  if (Gt !== null) {
                    Ht.child = null;
                    do {
                    } while (Gt !== null);
                  }
                }
              }
            }
            else e: for (; Nt !== null; ) {
                case 0:
                case 11:
                case 15:
              }
              if (ke !== null) {
                break e;
              }
            }
          }
          var Ee = d.current;
          for (Nt = Ee; Nt !== null; ) {
            oe = Nt;
            var Ae = oe.child;
            if (oe.subtreeFlags & 2064 && Ae !== null) Ae.return = oe, Nt = Ae;
            else e: for (oe = Ee; Nt !== null; ) {
              if (me = Nt, me.flags & 2048) try {
                switch (me.tag) {
                  case 0:
                  case 11:
                  case 15:
                }
              } catch (Vt) {
              }
              if (me === oe) {
                Nt = null;
                break e;
              }
              var lt = me.sibling;
              if (lt !== null) {
                lt.return = me.return, Nt = lt;
                break e;
              }
              Nt = me.return;
            }
          }
          } catch {
          }
          _ = !0;
        }
        return _;
      } finally {
      }
    }
    return !1;
  }
  }
    else for (; p !== null; ) {
      if (p.tag === 3) {
        break;
      } else if (p.tag === 1) {
        var _ = p.stateNode;
          break;
        }
      }
      p = p.return;
    }
  }
    var _ = d.pingCache;
  }
  }
    var p = d.memoizedState, b = 0;
  }
    var b = 0;
    switch (d.tag) {
      case 13:
        break;
      case 19:
        _ = d.stateNode;
        break;
      default:
        throw Error(n(314));
    }
  }
    else {
    }
    switch (p.lanes = 0, p.tag) {
      case 2:
        var _ = p.type;
      case 16:
        _ = p.elementType;
        e: {
            case 0:
              break e;
            case 1:
              break e;
            case 11:
              break e;
            case 14:
              break e;
          }
          throw Error(n(
            306,
            _,
            ""
          ));
        }
        return p;
      case 0:
      case 1:
      case 3:
        e: {
          var oe = p.memoizedState;
            break e;
            break e;
          else {
              break e;
            }
          }
          p = p.child;
        }
        return p;
      case 5:
      case 6:
      case 13:
      case 4:
      case 11:
      case 7:
      case 8:
      case 12:
      case 10:
        e: {
              break e;
            }
            if (me !== null) {
              for (var Se = me.firstContext; Se !== null; ) {
                if (Se.context === _) {
                    if (Fe !== null) {
                      Fe = Fe.shared;
                      var at = Fe.pending;
                      at === null ? Se.next = Se : (Se.next = at.next, at.next = Se), Fe.pending = Se;
                    }
                  }
                    b,
                    p
                  ), me.lanes |= b;
                  break;
                }
                Se = Se.next;
              }
              if (oe === p) {
                oe = null;
                break;
              }
                break;
              }
              oe = oe.return;
            }
          }
        }
        return p;
      case 9:
      case 14:
      case 15:
      case 17:
      case 19:
      case 22:
    }
    throw Error(n(156, p.tag));
  };
    return Kt(d, p);
  }
    this.tag = d, this.key = b, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = p, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = _, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  }
    return d = d.prototype, !(!d || !d.isReactComponent);
  }
    if (d != null) {
      if (d === G) return 14;
    }
    return 2;
  }
    var b = d.alternate;
  }
    var oe = 2;
    else if (typeof d == "string") oe = 5;
    else e: switch (d) {
      case H:
        break;
      case ee:
      case X:
      default:
        if (typeof d == "object" && d !== null) switch (d.$$typeof) {
            oe = 10;
            break e;
          case q:
            oe = 9;
            break e;
            oe = 11;
            break e;
          case G:
            oe = 14;
            break e;
            oe = 16, _ = null;
            break e;
        }
        throw Error(n(130, d == null ? d : typeof d, ""));
    }
  }
  }
  }
  }
  }
  }
  }
    var _ = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
  }
    d = d._reactInternals;
    e: {
      var p = d;
      do {
        switch (p.tag) {
          case 3:
            p = p.stateNode.context;
            break e;
          case 1:
              p = p.stateNode.__reactInternalMemoizedMergedChildContext;
              break e;
            }
        }
        p = p.return;
      } while (p !== null);
      throw Error(n(171));
    }
    if (d.tag === 1) {
      var b = d.type;
    }
    return p;
  }
  }
  }
    if (d = d.current, !d.child) return null;
    switch (d.child.tag) {
      case 5:
        return d.child.stateNode;
      default:
        return d.child.stateNode;
    }
  }
    if (d = d.memoizedState, d !== null && d.dehydrated !== null) {
      var b = d.retryLane;
      d.retryLane = b !== 0 && b < p ? b : p;
    }
  }
  }
    return null;
  }
    console.error(d);
  };
    this._internalRoot = d;
  }
    var p = this._internalRoot;
    if (p === null) throw Error(n(409));
    var d = this._internalRoot;
    if (d !== null) {
      this._internalRoot = null;
      var p = d.containerInfo;
    }
  };
    this._internalRoot = d;
  }
    if (d) {
      d = { blockedOn: null, target: d, priority: p };
    }
  };
    return !(!d || d.nodeType !== 1 && d.nodeType !== 9 && d.nodeType !== 11);
  }
    return !(!d || d.nodeType !== 1 && d.nodeType !== 9 && d.nodeType !== 11 && (d.nodeType !== 8 || d.nodeValue !== " react-mount-point-unstable "));
  }
  }
      if (typeof _ == "function") {
        _ = function() {
        };
      }
    }
    if (typeof _ == "function") {
      var me = _;
      _ = function() {
        me.call(Fe);
      };
    }
    }), Se;
  }
          me.call(Se);
        };
      }
  }
    switch (d.tag) {
      case 3:
        var p = d.stateNode;
        if (p.current.memoizedState.isDehydrated) {
        }
        break;
      case 13:
          if (_ !== null) {
          }
    }
    if (d.tag === 13) {
      if (p !== null) {
        Li(p, d, 134217728, b);
      }
    }
    if (d.tag === 13) {
      if (b !== null) {
        Li(b, d, p, _);
      }
    }
    try {
    } finally {
    }
    switch (p) {
      case "input":
          for (b = d; b.parentNode; ) b = b.parentNode;
          for (b = b.querySelectorAll("input[name=" + JSON.stringify("" + p) + '][type="radio"]'), p = 0; p < b.length; p++) {
            var _ = b[p];
            if (_ !== d && _.form === d.form) {
            }
          }
        }
        break;
      case "textarea":
        ut(d, b);
        break;
      case "select":
        p = b.value, p != null && gt(d, !!b.multiple, p, !1);
    }
    return d = Bt(d), d === null ? null : d.stateNode;
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    } catch {
    }
  }
    var b = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (d == null) return null;
    if (d.nodeType === 1) return d;
    var p = d._reactInternals;
    if (p === void 0)
      throw typeof d.render == "function" ? Error(n(188)) : (d = Object.keys(d).join(","), Error(n(268, d)));
    return d = Bt(p), d = d === null ? null : d.stateNode, d;
      b,
    );
      });
    }), !0) : !1;
    if (d == null || d._reactInternals === void 0) throw Error(n(38));
}
/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    function o(i) {
      r = i;
    }
    function s(i) {
      if (!r) {
      }
    }
    function a(i) {
      if (!r) {
      }
    }
      {
          return String(L);
        });
        R.unshift("Warning: " + l), Function.prototype.apply.call(console[i], console, R);
      }
    }
    function be(i, l) {
      we(i, l), we(i + "Capture", l);
    }
    function we(i, l) {
      fe[i] && a("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", i), fe[i] = l;
      {
      }
    }
    var _e = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", ce = Object.prototype.hasOwnProperty;
    function Ce(i) {
      {
      }
    }
    function Ne(i) {
      try {
        return Be(i), !1;
      } catch {
        return !0;
      }
    }
    function Be(i) {
      return "" + i;
    }
    function tt(i, l) {
      if (Ne(i))
        return a("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", l, Ce(i)), Be(i);
    }
      if (Ne(i))
        return a("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Ce(i)), Be(i);
    }
    function rt(i, l) {
      if (Ne(i))
        return a("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", l, Ce(i)), Be(i);
    }
    function ot(i, l) {
      if (Ne(i))
        return a("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", l, Ce(i)), Be(i);
    }
    function wt(i) {
      if (Ne(i))
        return a("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", Ce(i)), Be(i);
    }
    function gt(i) {
      if (Ne(i))
        return a("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", Ce(i)), Be(i);
    }
    var nt = 0, Ft = 1, ut = 2, Et = 3, Tt = 4, At = 5, vt = 6, Xe = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", Oe = Xe + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040", Ie = new RegExp("^[" + Xe + "][" + Oe + "]*$"), pt = {}, yt = {};
    function zt(i) {
      return ce.call(yt, i) ? !0 : ce.call(pt, i) ? !1 : Ie.test(i) ? (yt[i] = !0, !0) : (pt[i] = !0, a("Invalid attribute name: `%s`", i), !1);
    }
    }
        return !1;
      switch (typeof l) {
        case "function":
        case "symbol":
          return !0;
        case "boolean": {
            return !1;
          var S = i.toLowerCase().slice(0, 5);
          return S !== "data-" && S !== "aria-";
        }
        default:
          return !1;
      }
    }
        return !0;
        return !1;
          case Et:
            return !l;
          case Tt:
            return l === !1;
          case At:
            return isNaN(l);
          case vt:
            return isNaN(l) || l < 1;
        }
      return !1;
    }
    }
    }
      "children",
      "dangerouslySetInnerHTML",
      // TODO: This prevents the assignment of defaultValue to regular
      // elements (not just inputs). Now that ReactDOMInput assigns to the
      // defaultValue property -- do we need this?
      "defaultValue",
      "defaultChecked",
      "innerHTML",
      "suppressContentEditableWarning",
      "suppressHydrationWarning",
      "style"
    ];
        i,
        nt,
        !1,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(i) {
        l,
        Ft,
        !1,
        // mustUseProperty
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(i) {
        i,
        ut,
        !1,
        // mustUseProperty
        i.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(i) {
        i,
        ut,
        !1,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "allowFullScreen",
      "async",
      // Note: there is a special case that prevents it from being written to the DOM
      // on the client side because the browsers are inconsistent. Instead we call focus().
      "autoFocus",
      "autoPlay",
      "controls",
      "default",
      "defer",
      "disabled",
      "disablePictureInPicture",
      "disableRemotePlayback",
      "formNoValidate",
      "hidden",
      "loop",
      "noModule",
      "noValidate",
      "open",
      "playsInline",
      "readOnly",
      "required",
      "reversed",
      "scoped",
      "seamless",
      // Microdata
      "itemScope"
    ].forEach(function(i) {
        i,
        Et,
        !1,
        // mustUseProperty
        i.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "checked",
      // Note: `option.selected` is not updated if `select.multiple` is
      // disabled with `removeAttribute`. We have special logic for handling this.
      "multiple",
      "muted",
      "selected"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        i,
        Et,
        !0,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "capture",
      "download"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        i,
        Tt,
        !1,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "cols",
      "rows",
      "size",
      "span"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        i,
        vt,
        !1,
        // mustUseProperty
        i,
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), ["rowSpan", "start"].forEach(function(i) {
        i,
        At,
        !1,
        // mustUseProperty
        i.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    });
      return i[1].toUpperCase();
    };
    [
      "accent-height",
      "alignment-baseline",
      "arabic-form",
      "baseline-shift",
      "cap-height",
      "clip-path",
      "clip-rule",
      "color-interpolation",
      "color-interpolation-filters",
      "color-profile",
      "color-rendering",
      "dominant-baseline",
      "enable-background",
      "fill-opacity",
      "fill-rule",
      "flood-color",
      "flood-opacity",
      "font-family",
      "font-size",
      "font-size-adjust",
      "font-stretch",
      "font-style",
      "font-variant",
      "font-weight",
      "glyph-name",
      "glyph-orientation-horizontal",
      "glyph-orientation-vertical",
      "horiz-adv-x",
      "horiz-origin-x",
      "image-rendering",
      "letter-spacing",
      "lighting-color",
      "marker-end",
      "marker-mid",
      "marker-start",
      "overline-position",
      "overline-thickness",
      "paint-order",
      "panose-1",
      "pointer-events",
      "rendering-intent",
      "shape-rendering",
      "stop-color",
      "stop-opacity",
      "strikethrough-position",
      "strikethrough-thickness",
      "stroke-dasharray",
      "stroke-dashoffset",
      "stroke-linecap",
      "stroke-linejoin",
      "stroke-miterlimit",
      "stroke-opacity",
      "stroke-width",
      "text-anchor",
      "text-decoration",
      "text-rendering",
      "underline-position",
      "underline-thickness",
      "unicode-bidi",
      "unicode-range",
      "units-per-em",
      "v-alphabetic",
      "v-hanging",
      "v-ideographic",
      "v-mathematical",
      "vector-effect",
      "vert-adv-y",
      "vert-origin-x",
      "vert-origin-y",
      "word-spacing",
      "writing-mode",
      "xmlns:xlink",
      "x-height"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        l,
        Ft,
        !1,
        // mustUseProperty
        i,
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "xlink:actuate",
      "xlink:arcrole",
      "xlink:role",
      "xlink:show",
      "xlink:title",
      "xlink:type"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        l,
        Ft,
        !1,
        // mustUseProperty
        i,
        "http://www.w3.org/1999/xlink",
        !1,
        // sanitizeURL
        !1
      );
    }), [
      "xml:base",
      "xml:lang",
      "xml:space"
      // NOTE: if you add a camelCased prop to this list,
      // you'll need to set attributeName to name.toLowerCase()
      // instead in the assignment below.
    ].forEach(function(i) {
        l,
        Ft,
        !1,
        // mustUseProperty
        i,
        "http://www.w3.org/XML/1998/namespace",
        !1,
        // sanitizeURL
        !1
      );
    }), ["tabIndex", "crossOrigin"].forEach(function(i) {
        i,
        Ft,
        !1,
        // mustUseProperty
        i.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !1,
        // sanitizeURL
        !1
      );
    });
      "xlinkHref",
      Ft,
      !1,
      // mustUseProperty
      "xlink:href",
      "http://www.w3.org/1999/xlink",
      !0,
      // sanitizeURL
      !1
    ), ["src", "href", "action", "formAction"].forEach(function(i) {
        i,
        Ft,
        !1,
        // mustUseProperty
        i.toLowerCase(),
        // attributeName
        null,
        // attributeNamespace
        !0,
        // sanitizeURL
        !0
      );
    });
    function Wt(i) {
    }
        return i[S];
      } else {
          if (i.hasAttribute(R)) {
          }
        } else if (i.hasAttribute(R)) {
            return i.getAttribute(R);
          L = i.getAttribute(R);
        }
      }
    }
      {
        if (!zt(l))
          return;
        if (!i.hasAttribute(l))
        var S = i.getAttribute(l);
      }
    }
          if (zt(l)) {
            var R = l;
          }
          return;
        }
        var L = S.mustUseProperty;
        if (L) {
            var Z = S.type;
          } else
          return;
        }
        var ae = S.attributeName, le = S.attributeNamespace;
          i.removeAttribute(ae);
        else {
          var Te = S.type, xe;
        }
      }
    }
      if (i === null || typeof i != "object")
        return null;
      return typeof l == "function" ? l : null;
    }
    }
      {
          var i = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            info: i,
            log: i,
            warn: i,
            error: i,
            group: i,
            groupCollapsed: i,
            groupEnd: i
          });
        }
      }
    }
      {
          var i = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            }),
            }),
            }),
            }),
            }),
            }),
            })
          });
        }
      }
    }
      {
          try {
            throw Error();
          } catch (S) {
          }
        return `
      }
    }
    {
    }
        return "";
      {
      }
      var S = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var R;
      try {
        if (l) {
          var L = function() {
            throw Error();
          };
          if (Object.defineProperty(L.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(L, []);
            } catch (ze) {
            }
            Reflect.construct(i, [], L);
          } else {
            try {
              L.call();
            } catch (ze) {
            }
            i.call(L.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (ze) {
          }
          i();
        }
      } catch (ze) {
            le--;
          for (; ae >= 1 && le >= 0; ae--, le--)
              if (ae !== 1 || le !== 1)
                do
                    var Te = `
                  }
                while (ae >= 1 && le >= 0);
              break;
            }
        }
      } finally {
      }
    }
    }
    }
      var l = i.prototype;
      return !!(l && l.isReactComponent);
    }
      if (i == null)
        return "";
      if (typeof i == "function")
      if (typeof i == "string")
      switch (i) {
        case ft:
        case Ct:
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case Ye:
          case De: {
            try {
            } catch {
            }
          }
        }
      return "";
    }
      switch (i._debugOwner && i._debugOwner.type, i._debugSource, i.tag) {
        case C:
        case q:
        case f:
        case g:
        case M:
        default:
          return "";
      }
    }
      try {
        do
        return l;
        return `
      }
    }
      var S = l.displayName || l.name || "";
    }
      return i.displayName || "Context";
    }
      if (i == null)
        return null;
      if (typeof i.tag == "number" && a("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof i == "function")
        return i.displayName || i.name || null;
      if (typeof i == "string")
        return i;
      switch (i) {
          return "Fragment";
          return "Portal";
          return "Profiler";
          return "StrictMode";
        case ft:
          return "Suspense";
        case Ct:
          return "SuspenseList";
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case ye:
            var l = i;
          case Ye:
          case De: {
            var S = i, R = S._payload, L = S._init;
            try {
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    }
      return i.displayName || "Context";
    }
      switch (l) {
        case G:
          return "Cache";
        case I:
          return "DehydratedFragment";
        case M:
        case E:
          return "Fragment";
        case C:
        case w:
          return "Portal";
          return "Root";
        case T:
          return "Text";
        case O:
          return "Offscreen";
          return "Profiler";
          return "Scope";
          return "Suspense";
        case q:
          return "SuspenseList";
          return "TracingMarker";
        case f:
        case F:
          break;
      }
      return null;
    }
      {
          return null;
        if (i !== null && typeof i < "u")
      }
      return null;
    }
    }
    }
    }
    }
    }
      return "" + i;
    }
      switch (typeof i) {
        case "boolean":
        case "number":
        case "string":
        case "undefined":
          return i;
        case "object":
          return gt(i), i;
        default:
          return "";
      }
    }
      button: !0,
      checkbox: !0,
      image: !0,
      hidden: !0,
      radio: !0,
      reset: !0,
      submit: !0
    };
    }
    }
      return i._valueTracker;
    }
      i._valueTracker = null;
    }
      var l = "";
    }
      gt(i[l]);
        Object.defineProperty(i, l, {
          configurable: !0,
          get: function() {
            return S.call(this);
          },
          }
        }), Object.defineProperty(i, l, {
        });
        var L = {
          getValue: function() {
          },
          },
          stopTracking: function() {
          }
        };
        return L;
      }
    }
    }
      if (!i)
        return !1;
      if (!l)
        return !0;
    }
    function Ls(i) {
      if (i = i || (typeof document < "u" ? document : void 0), typeof i > "u")
        return null;
      try {
        return i.activeElement || i.body;
      } catch {
        return i.body;
      }
    }
      var l = i.type === "checkbox" || i.type === "radio";
      return l ? i.checked != null : i.value != null;
    }
        defaultChecked: void 0,
        defaultValue: void 0,
        value: void 0,
      });
      return S;
    }
        initialChecked: l.checked != null ? l.checked : l.defaultChecked,
      };
    }
    function ne(i, l) {
    }
    function ve(i, l) {
      {
      }
      ne(i, l);
      if (S != null)
        // eslint-disable-next-line
      else if (R === "submit" || R === "reset") {
        return;
      }
    }
      if (l.hasOwnProperty("value") || l.hasOwnProperty("defaultValue")) {
        var S = l.type, R = S === "submit" || S === "reset";
        if (R && (l.value === void 0 || l.value === null))
          return;
      }
    }
    function Ve(i, l) {
    }
    function ht(i, l) {
          var L = S[R];
          if (!(L === i || L.form !== i.form)) {
              throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
          }
        }
      }
    }
      // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
    }
    }
    }
    }
      return i ? `

Check the render method of \`` + i + "`." : "";
    }
      {
          }
        }
      }
    }
      var S = i.options;
      if (l) {
        for (var Z = 0; Z < S.length; Z++) {
          var ae = L.hasOwnProperty("$" + S[Z].value);
        }
      } else {
          if (S[xe].value === le) {
            return;
          }
          Te === null && !S[xe].disabled && (Te = S[xe]);
        }
        Te !== null && (Te.selected = !0);
      }
    }
        value: void 0
      });
    }
        wasMultiple: !!l.multiple
    }
    }
      var S = l.value;
    }
    }
      if (l.dangerouslySetInnerHTML != null)
        throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
        value: void 0,
        defaultValue: void 0,
      });
    }
        var S = l.children, R = l.defaultValue;
        if (S != null) {
          a("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
          {
            if (R != null)
              throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
              if (S.length > 1)
                throw new Error("<textarea> can only have at most one child.");
              S = S[0];
            }
            R = S;
          }
        }
      }
      };
    }
      }
    }
    }
    }
      switch (i) {
        case "svg":
        case "math":
        default:
      }
    }
    }
        MSApp.execUnsafeLocalFunction(function() {
        });
      } : i;
          i.removeChild(i.firstChild);
        return;
      }
      i.innerHTML = l;
      if (l) {
          return;
        }
      }
      i.textContent = l;
      animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
      background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
      backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
      border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
      borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
      borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
      borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
      borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
      borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
      borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
      borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
      borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
      borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
      borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
      borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
      borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
      columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
      columns: ["columnCount", "columnWidth"],
      flex: ["flexBasis", "flexGrow", "flexShrink"],
      flexFlow: ["flexDirection", "flexWrap"],
      font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
      fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
      gap: ["columnGap", "rowGap"],
      grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
      gridColumn: ["gridColumnEnd", "gridColumnStart"],
      gridColumnGap: ["columnGap"],
      gridGap: ["columnGap", "rowGap"],
      gridRow: ["gridRowEnd", "gridRowStart"],
      gridRowGap: ["rowGap"],
      gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
      listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
      margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
      marker: ["markerEnd", "markerMid", "markerStart"],
      mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
      maskPosition: ["maskPositionX", "maskPositionY"],
      outline: ["outlineColor", "outlineStyle", "outlineWidth"],
      overflow: ["overflowX", "overflowY"],
      padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
      placeContent: ["alignContent", "justifyContent"],
      placeItems: ["alignItems", "justifyItems"],
      placeSelf: ["alignSelf", "justifySelf"],
      textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
      textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
      transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
      wordWrap: ["overflowWrap"]
      animationIterationCount: !0,
      aspectRatio: !0,
      borderImageOutset: !0,
      borderImageSlice: !0,
      borderImageWidth: !0,
      boxFlex: !0,
      boxFlexGroup: !0,
      boxOrdinalGroup: !0,
      columnCount: !0,
      columns: !0,
      flex: !0,
      flexGrow: !0,
      flexPositive: !0,
      flexShrink: !0,
      flexNegative: !0,
      flexOrder: !0,
      gridArea: !0,
      gridRow: !0,
      gridRowEnd: !0,
      gridRowSpan: !0,
      gridRowStart: !0,
      gridColumn: !0,
      gridColumnEnd: !0,
      gridColumnSpan: !0,
      gridColumnStart: !0,
      fontWeight: !0,
      lineClamp: !0,
      lineHeight: !0,
      opacity: !0,
      order: !0,
      orphans: !0,
      tabSize: !0,
      widows: !0,
      zIndex: !0,
      zoom: !0,
      // SVG-related properties
      fillOpacity: !0,
      floodOpacity: !0,
      stopOpacity: !0,
      strokeDasharray: !0,
      strokeDashoffset: !0,
      strokeMiterlimit: !0,
      strokeOpacity: !0,
      strokeWidth: !0
    };
      return i + l.charAt(0).toUpperCase() + l.substring(1);
    }
      });
    });
    }
    }
    };
    {
        });
          "Unsupported style property %s. Did you mean %s?",
          i,
          // As Andi Smith suggests
          // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
          // is converted to lowercase `ms`.
        ));
      };
      };
    }
      {
            if (S != null) {
            }
          }
        return l || null;
      }
    }
        }
    }
      return i == null || typeof i == "boolean" || i === "";
    }
      var l = {};
      return l;
    }
      {
        if (!l)
          return;
            if (S[Z])
              continue;
          }
        }
      }
    }
      area: !0,
      base: !0,
      br: !0,
      col: !0,
      embed: !0,
      hr: !0,
      img: !0,
      input: !0,
      keygen: !0,
      link: !0,
      meta: !0,
      param: !0,
      source: !0,
      track: !0,
      wbr: !0
      // NOTE: menuitem's close tag should be omitted, but that causes problems.
      menuitem: !0
      if (l) {
          throw new Error(i + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
        if (l.dangerouslySetInnerHTML != null) {
          if (l.children != null)
            throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!l.suppressContentEditableWarning && l.contentEditable && l.children != null && a("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional."), l.style != null && typeof l.style != "object")
          throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
      }
    }
      if (i.indexOf("-") === -1)
        return typeof l.is == "string";
      switch (i) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
      // HTML
      accept: "accept",
      acceptcharset: "acceptCharset",
      "accept-charset": "acceptCharset",
      accesskey: "accessKey",
      action: "action",
      allowfullscreen: "allowFullScreen",
      alt: "alt",
      as: "as",
      async: "async",
      autocapitalize: "autoCapitalize",
      autocomplete: "autoComplete",
      autocorrect: "autoCorrect",
      autofocus: "autoFocus",
      autoplay: "autoPlay",
      autosave: "autoSave",
      capture: "capture",
      cellpadding: "cellPadding",
      cellspacing: "cellSpacing",
      challenge: "challenge",
      charset: "charSet",
      checked: "checked",
      children: "children",
      cite: "cite",
      class: "className",
      classid: "classID",
      classname: "className",
      cols: "cols",
      colspan: "colSpan",
      content: "content",
      contenteditable: "contentEditable",
      contextmenu: "contextMenu",
      controls: "controls",
      controlslist: "controlsList",
      coords: "coords",
      crossorigin: "crossOrigin",
      dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
      data: "data",
      datetime: "dateTime",
      default: "default",
      defaultchecked: "defaultChecked",
      defaultvalue: "defaultValue",
      defer: "defer",
      dir: "dir",
      disabled: "disabled",
      disablepictureinpicture: "disablePictureInPicture",
      disableremoteplayback: "disableRemotePlayback",
      download: "download",
      draggable: "draggable",
      enctype: "encType",
      enterkeyhint: "enterKeyHint",
      for: "htmlFor",
      form: "form",
      formmethod: "formMethod",
      formaction: "formAction",
      formenctype: "formEncType",
      formnovalidate: "formNoValidate",
      formtarget: "formTarget",
      frameborder: "frameBorder",
      headers: "headers",
      height: "height",
      hidden: "hidden",
      high: "high",
      href: "href",
      hreflang: "hrefLang",
      htmlfor: "htmlFor",
      httpequiv: "httpEquiv",
      "http-equiv": "httpEquiv",
      icon: "icon",
      id: "id",
      imagesizes: "imageSizes",
      imagesrcset: "imageSrcSet",
      innerhtml: "innerHTML",
      inputmode: "inputMode",
      integrity: "integrity",
      is: "is",
      itemid: "itemID",
      itemprop: "itemProp",
      itemref: "itemRef",
      itemscope: "itemScope",
      itemtype: "itemType",
      keyparams: "keyParams",
      keytype: "keyType",
      kind: "kind",
      label: "label",
      lang: "lang",
      list: "list",
      loop: "loop",
      low: "low",
      manifest: "manifest",
      marginwidth: "marginWidth",
      marginheight: "marginHeight",
      max: "max",
      maxlength: "maxLength",
      media: "media",
      mediagroup: "mediaGroup",
      method: "method",
      min: "min",
      minlength: "minLength",
      multiple: "multiple",
      muted: "muted",
      name: "name",
      nomodule: "noModule",
      nonce: "nonce",
      novalidate: "noValidate",
      open: "open",
      optimum: "optimum",
      pattern: "pattern",
      placeholder: "placeholder",
      playsinline: "playsInline",
      poster: "poster",
      preload: "preload",
      profile: "profile",
      radiogroup: "radioGroup",
      readonly: "readOnly",
      referrerpolicy: "referrerPolicy",
      rel: "rel",
      required: "required",
      reversed: "reversed",
      role: "role",
      rows: "rows",
      rowspan: "rowSpan",
      sandbox: "sandbox",
      scope: "scope",
      scoped: "scoped",
      scrolling: "scrolling",
      seamless: "seamless",
      selected: "selected",
      shape: "shape",
      size: "size",
      sizes: "sizes",
      span: "span",
      spellcheck: "spellCheck",
      src: "src",
      srcdoc: "srcDoc",
      srclang: "srcLang",
      srcset: "srcSet",
      start: "start",
      step: "step",
      style: "style",
      summary: "summary",
      tabindex: "tabIndex",
      target: "target",
      title: "title",
      type: "type",
      usemap: "useMap",
      value: "value",
      width: "width",
      wmode: "wmode",
      wrap: "wrap",
      // SVG
      about: "about",
      accentheight: "accentHeight",
      "accent-height": "accentHeight",
      accumulate: "accumulate",
      additive: "additive",
      alignmentbaseline: "alignmentBaseline",
      "alignment-baseline": "alignmentBaseline",
      allowreorder: "allowReorder",
      alphabetic: "alphabetic",
      amplitude: "amplitude",
      arabicform: "arabicForm",
      "arabic-form": "arabicForm",
      ascent: "ascent",
      attributename: "attributeName",
      attributetype: "attributeType",
      autoreverse: "autoReverse",
      azimuth: "azimuth",
      basefrequency: "baseFrequency",
      baselineshift: "baselineShift",
      "baseline-shift": "baselineShift",
      baseprofile: "baseProfile",
      bbox: "bbox",
      begin: "begin",
      bias: "bias",
      by: "by",
      calcmode: "calcMode",
      capheight: "capHeight",
      "cap-height": "capHeight",
      clip: "clip",
      clippath: "clipPath",
      "clip-path": "clipPath",
      clippathunits: "clipPathUnits",
      cliprule: "clipRule",
      "clip-rule": "clipRule",
      color: "color",
      colorinterpolation: "colorInterpolation",
      "color-interpolation": "colorInterpolation",
      colorinterpolationfilters: "colorInterpolationFilters",
      "color-interpolation-filters": "colorInterpolationFilters",
      colorprofile: "colorProfile",
      "color-profile": "colorProfile",
      colorrendering: "colorRendering",
      "color-rendering": "colorRendering",
      contentscripttype: "contentScriptType",
      contentstyletype: "contentStyleType",
      cursor: "cursor",
      cx: "cx",
      cy: "cy",
      d: "d",
      datatype: "datatype",
      decelerate: "decelerate",
      descent: "descent",
      diffuseconstant: "diffuseConstant",
      direction: "direction",
      display: "display",
      divisor: "divisor",
      dominantbaseline: "dominantBaseline",
      "dominant-baseline": "dominantBaseline",
      dur: "dur",
      dx: "dx",
      dy: "dy",
      edgemode: "edgeMode",
      elevation: "elevation",
      enablebackground: "enableBackground",
      "enable-background": "enableBackground",
      end: "end",
      exponent: "exponent",
      externalresourcesrequired: "externalResourcesRequired",
      fill: "fill",
      fillopacity: "fillOpacity",
      "fill-opacity": "fillOpacity",
      fillrule: "fillRule",
      "fill-rule": "fillRule",
      filter: "filter",
      filterres: "filterRes",
      filterunits: "filterUnits",
      floodopacity: "floodOpacity",
      "flood-opacity": "floodOpacity",
      floodcolor: "floodColor",
      "flood-color": "floodColor",
      focusable: "focusable",
      fontfamily: "fontFamily",
      "font-family": "fontFamily",
      fontsize: "fontSize",
      "font-size": "fontSize",
      fontsizeadjust: "fontSizeAdjust",
      "font-size-adjust": "fontSizeAdjust",
      fontstretch: "fontStretch",
      "font-stretch": "fontStretch",
      fontstyle: "fontStyle",
      "font-style": "fontStyle",
      fontvariant: "fontVariant",
      "font-variant": "fontVariant",
      fontweight: "fontWeight",
      "font-weight": "fontWeight",
      format: "format",
      from: "from",
      fx: "fx",
      fy: "fy",
      g1: "g1",
      g2: "g2",
      glyphname: "glyphName",
      "glyph-name": "glyphName",
      glyphorientationhorizontal: "glyphOrientationHorizontal",
      "glyph-orientation-horizontal": "glyphOrientationHorizontal",
      glyphorientationvertical: "glyphOrientationVertical",
      "glyph-orientation-vertical": "glyphOrientationVertical",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      hanging: "hanging",
      horizadvx: "horizAdvX",
      "horiz-adv-x": "horizAdvX",
      horizoriginx: "horizOriginX",
      "horiz-origin-x": "horizOriginX",
      ideographic: "ideographic",
      imagerendering: "imageRendering",
      "image-rendering": "imageRendering",
      in2: "in2",
      in: "in",
      inlist: "inlist",
      intercept: "intercept",
      k1: "k1",
      k2: "k2",
      k3: "k3",
      k4: "k4",
      k: "k",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      kerning: "kerning",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      letterspacing: "letterSpacing",
      "letter-spacing": "letterSpacing",
      lightingcolor: "lightingColor",
      "lighting-color": "lightingColor",
      limitingconeangle: "limitingConeAngle",
      local: "local",
      markerend: "markerEnd",
      "marker-end": "markerEnd",
      markerheight: "markerHeight",
      markermid: "markerMid",
      "marker-mid": "markerMid",
      markerstart: "markerStart",
      "marker-start": "markerStart",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      mask: "mask",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      mathematical: "mathematical",
      mode: "mode",
      numoctaves: "numOctaves",
      offset: "offset",
      opacity: "opacity",
      operator: "operator",
      order: "order",
      orient: "orient",
      orientation: "orientation",
      origin: "origin",
      overflow: "overflow",
      overlineposition: "overlinePosition",
      "overline-position": "overlinePosition",
      overlinethickness: "overlineThickness",
      "overline-thickness": "overlineThickness",
      paintorder: "paintOrder",
      "paint-order": "paintOrder",
      panose1: "panose1",
      "panose-1": "panose1",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointerevents: "pointerEvents",
      "pointer-events": "pointerEvents",
      points: "points",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      prefix: "prefix",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      property: "property",
      r: "r",
      radius: "radius",
      refx: "refX",
      refy: "refY",
      renderingintent: "renderingIntent",
      "rendering-intent": "renderingIntent",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      resource: "resource",
      restart: "restart",
      result: "result",
      results: "results",
      rotate: "rotate",
      rx: "rx",
      ry: "ry",
      scale: "scale",
      security: "security",
      seed: "seed",
      shaperendering: "shapeRendering",
      "shape-rendering": "shapeRendering",
      slope: "slope",
      spacing: "spacing",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      speed: "speed",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stemh: "stemh",
      stemv: "stemv",
      stitchtiles: "stitchTiles",
      stopcolor: "stopColor",
      "stop-color": "stopColor",
      stopopacity: "stopOpacity",
      "stop-opacity": "stopOpacity",
      strikethroughposition: "strikethroughPosition",
      "strikethrough-position": "strikethroughPosition",
      strikethroughthickness: "strikethroughThickness",
      "strikethrough-thickness": "strikethroughThickness",
      string: "string",
      stroke: "stroke",
      strokedasharray: "strokeDasharray",
      "stroke-dasharray": "strokeDasharray",
      strokedashoffset: "strokeDashoffset",
      "stroke-dashoffset": "strokeDashoffset",
      strokelinecap: "strokeLinecap",
      "stroke-linecap": "strokeLinecap",
      strokelinejoin: "strokeLinejoin",
      "stroke-linejoin": "strokeLinejoin",
      strokemiterlimit: "strokeMiterlimit",
      "stroke-miterlimit": "strokeMiterlimit",
      strokewidth: "strokeWidth",
      "stroke-width": "strokeWidth",
      strokeopacity: "strokeOpacity",
      "stroke-opacity": "strokeOpacity",
      suppresscontenteditablewarning: "suppressContentEditableWarning",
      suppresshydrationwarning: "suppressHydrationWarning",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textanchor: "textAnchor",
      "text-anchor": "textAnchor",
      textdecoration: "textDecoration",
      "text-decoration": "textDecoration",
      textlength: "textLength",
      textrendering: "textRendering",
      "text-rendering": "textRendering",
      to: "to",
      transform: "transform",
      typeof: "typeof",
      u1: "u1",
      u2: "u2",
      underlineposition: "underlinePosition",
      "underline-position": "underlinePosition",
      underlinethickness: "underlineThickness",
      "underline-thickness": "underlineThickness",
      unicode: "unicode",
      unicodebidi: "unicodeBidi",
      "unicode-bidi": "unicodeBidi",
      unicoderange: "unicodeRange",
      "unicode-range": "unicodeRange",
      unitsperem: "unitsPerEm",
      "units-per-em": "unitsPerEm",
      unselectable: "unselectable",
      valphabetic: "vAlphabetic",
      "v-alphabetic": "vAlphabetic",
      values: "values",
      vectoreffect: "vectorEffect",
      "vector-effect": "vectorEffect",
      version: "version",
      vertadvy: "vertAdvY",
      "vert-adv-y": "vertAdvY",
      vertoriginx: "vertOriginX",
      "vert-origin-x": "vertOriginX",
      vertoriginy: "vertOriginY",
      "vert-origin-y": "vertOriginY",
      vhanging: "vHanging",
      "v-hanging": "vHanging",
      videographic: "vIdeographic",
      "v-ideographic": "vIdeographic",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      visibility: "visibility",
      vmathematical: "vMathematical",
      "v-mathematical": "vMathematical",
      vocab: "vocab",
      widths: "widths",
      wordspacing: "wordSpacing",
      "word-spacing": "wordSpacing",
      writingmode: "writingMode",
      "writing-mode": "writingMode",
      x1: "x1",
      x2: "x2",
      x: "x",
      xchannelselector: "xChannelSelector",
      xheight: "xHeight",
      "x-height": "xHeight",
      xlinkactuate: "xlinkActuate",
      "xlink:actuate": "xlinkActuate",
      xlinkarcrole: "xlinkArcrole",
      "xlink:arcrole": "xlinkArcrole",
      xlinkhref: "xlinkHref",
      "xlink:href": "xlinkHref",
      xlinkrole: "xlinkRole",
      "xlink:role": "xlinkRole",
      xlinkshow: "xlinkShow",
      "xlink:show": "xlinkShow",
      xlinktitle: "xlinkTitle",
      "xlink:title": "xlinkTitle",
      xlinktype: "xlinkType",
      "xlink:type": "xlinkType",
      xmlbase: "xmlBase",
      "xml:base": "xmlBase",
      xmllang: "xmlLang",
      "xml:lang": "xmlLang",
      xmlns: "xmlns",
      "xml:space": "xmlSpace",
      xmlnsxlink: "xmlnsXlink",
      "xmlns:xlink": "xmlnsXlink",
      xmlspace: "xmlSpace",
      y1: "y1",
      y2: "y2",
      y: "y",
      ychannelselector: "yChannelSelector",
      z: "z",
      zoomandpan: "zoomAndPan"
      "aria-current": 0,
      // state
      "aria-description": 0,
      "aria-details": 0,
      "aria-disabled": 0,
      // state
      "aria-hidden": 0,
      // state
      "aria-invalid": 0,
      // state
      "aria-keyshortcuts": 0,
      "aria-label": 0,
      "aria-roledescription": 0,
      // Widget Attributes
      "aria-autocomplete": 0,
      "aria-checked": 0,
      "aria-expanded": 0,
      "aria-haspopup": 0,
      "aria-level": 0,
      "aria-modal": 0,
      "aria-multiline": 0,
      "aria-multiselectable": 0,
      "aria-orientation": 0,
      "aria-placeholder": 0,
      "aria-pressed": 0,
      "aria-readonly": 0,
      "aria-required": 0,
      "aria-selected": 0,
      "aria-sort": 0,
      "aria-valuemax": 0,
      "aria-valuemin": 0,
      "aria-valuenow": 0,
      "aria-valuetext": 0,
      // Live Region Attributes
      "aria-atomic": 0,
      "aria-busy": 0,
      "aria-live": 0,
      "aria-relevant": 0,
      // Drag-and-Drop Attributes
      "aria-dropeffect": 0,
      "aria-grabbed": 0,
      // Relationship Attributes
      "aria-activedescendant": 0,
      "aria-colcount": 0,
      "aria-colindex": 0,
      "aria-colspan": 0,
      "aria-controls": 0,
      "aria-describedby": 0,
      "aria-errormessage": 0,
      "aria-flowto": 0,
      "aria-labelledby": 0,
      "aria-owns": 0,
      "aria-posinset": 0,
      "aria-rowcount": 0,
      "aria-rowindex": 0,
      "aria-rowspan": 0,
      "aria-setsize": 0
      {
          return !0;
          if (R == null)
          if (l !== R)
        }
      }
      return !0;
    }
      {
        }
          return "`" + L + "`";
        }).join(", ");
      }
    }
    }
      {
        if (i !== "input" && i !== "textarea" && i !== "select")
          return;
      }
    }
    };
    {
          return !0;
        var S = l.toLowerCase();
        if (S === "onfocusin" || S === "onfocusout")
          if (R.hasOwnProperty(l))
            return !0;
          return !0;
        if (S === "innerhtml")
        if (S === "aria")
          if (le !== l)
        } else if (!ae && l !== S)
      };
    }
      {
        for (var S in l) {
        }
        }).join(", ");
      }
    };
    }
    }
    }
    }
      var l = i.target || i.srcElement || window;
    }
      if (l) {
          throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    }
    }
    }
      }
    }
      return i(l);
      try {
      } finally {
      }
    }
    }
      return i === "button" || i === "input" || i === "select" || i === "textarea";
    }
      switch (i) {
        case "onClick":
        case "onClickCapture":
        case "onDoubleClick":
        case "onDoubleClickCapture":
        case "onMouseDown":
        case "onMouseDownCapture":
        case "onMouseMove":
        case "onMouseMoveCapture":
        case "onMouseUp":
        case "onMouseUpCapture":
        case "onMouseEnter":
        default:
          return !1;
      }
    }
        return null;
        return null;
        return null;
      if (S && typeof S != "function")
        throw new Error("Expected `" + l + "` listener to be a function, instead got a value of `" + typeof S + "` type.");
      return S;
    }
    if (_e)
      try {
          get: function() {
          }
      } catch {
      }
      var ae = Array.prototype.slice.call(arguments, 3);
      try {
      } catch (le) {
        this.onError(le);
      }
    }
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        function Ge() {
        }
        var kt = Array.prototype.slice.call(arguments, 3);
        function nn() {
        }
        function Pe(Me) {
            try {
              Yt._suppressLogging = !0;
            } catch {
            }
        }
        var qe = "react-" + (l || "invokeguardedcallback");
      };
    }
      onError: function(i) {
      }
    };
    }
      }
    }
      }
    }
    }
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
      return i._reactInternals;
    }
      return i._reactInternals !== void 0;
    }
      i._reactInternals = l;
    }
    var Qt = (
      /*                      */
      0
      /*                */
      1
      /*                    */
      2
      /*                       */
      4
      /*                */
      16
      /*                 */
      32
      /*                     */
      64
    ), Xt = (
      /*                   */
      128
      /*            */
      256
      /*                          */
      512
      /*                     */
      1024
      /*                      */
      2048
      /*                    */
      4096
      /*                   */
      8192
      /*             */
      16384
      /*               */
      32767
      /*                   */
      32768
      /*                */
      65536
      /* */
      131072
      /*                       */
      1048576
      /*                    */
      2097152
      /*                 */
      4194304
      /*                */
      8388608
      /*               */
      16777216
      /*              */
      33554432
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      if (i.alternate)
        for (; l.return; )
          l = l.return;
      else {
        do
      }
    }
        var l = i.memoizedState;
        if (l === null) {
        }
        if (l !== null)
          return l.dehydrated;
      }
      return null;
    }
    }
    }
      {
        }
      }
    }
        throw new Error("Unable to find node on an unmounted component.");
    }
      var l = i.alternate;
      if (!l) {
          throw new Error("Unable to find node on an unmounted component.");
      }
        if (R === null)
          break;
        var L = R.alternate;
        if (L === null) {
            continue;
          }
          break;
        }
        if (R.child === L.child) {
          for (var Z = R.child; Z; ) {
            if (Z === S)
            Z = Z.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        else {
          for (var ae = !1, le = R.child; le; ) {
              break;
            }
            if (le === S) {
              break;
            }
            le = le.sibling;
          }
          if (!ae) {
            for (le = L.child; le; ) {
                break;
              }
              if (le === S) {
                break;
              }
              le = le.sibling;
            }
            if (!ae)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
        throw new Error("Unable to find node on an unmounted component.");
    }
    function ns(i) {
      if (i.tag === C || i.tag === T)
        return i;
      for (var l = i.child; l !== null; ) {
        l = l.sibling;
      }
      return null;
    }
    }
      if (i.tag === C || i.tag === T)
        return i;
      for (var l = i.child; l !== null; ) {
        if (l.tag !== w) {
        }
        l = l.sibling;
      }
      return null;
    }
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return !1;
      var l = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (l.isDisabled)
        return !0;
      if (!l.supportsFiber)
        return a("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
      }
      return !!l.checkDCE;
    }
        try {
        }
    }
        try {
          if (ue) {
            switch (l) {
                break;
                break;
              case Us:
                break;
              default:
                break;
            }
          }
        } catch (S) {
        }
    }
        try {
        } catch (l) {
        }
    }
        try {
        } catch (l) {
        }
    }
        try {
        } catch (l) {
        }
    }
      Rt = i;
    }
      {
        }
        return i;
      }
    }
      Rt !== null && typeof Rt.markCommitStarted == "function" && Rt.markCommitStarted(i);
    }
      Rt !== null && typeof Rt.markCommitStopped == "function" && Rt.markCommitStopped();
    }
      Rt !== null && typeof Rt.markComponentRenderStarted == "function" && Rt.markComponentRenderStarted(i);
    }
      Rt !== null && typeof Rt.markComponentRenderStopped == "function" && Rt.markComponentRenderStopped();
    }
      Rt !== null && typeof Rt.markComponentPassiveEffectMountStarted == "function" && Rt.markComponentPassiveEffectMountStarted(i);
    }
      Rt !== null && typeof Rt.markComponentPassiveEffectMountStopped == "function" && Rt.markComponentPassiveEffectMountStopped();
    }
      Rt !== null && typeof Rt.markComponentPassiveEffectUnmountStarted == "function" && Rt.markComponentPassiveEffectUnmountStarted(i);
    }
      Rt !== null && typeof Rt.markComponentPassiveEffectUnmountStopped == "function" && Rt.markComponentPassiveEffectUnmountStopped();
    }
      Rt !== null && typeof Rt.markComponentLayoutEffectMountStarted == "function" && Rt.markComponentLayoutEffectMountStarted(i);
    }
      Rt !== null && typeof Rt.markComponentLayoutEffectMountStopped == "function" && Rt.markComponentLayoutEffectMountStopped();
    }
      Rt !== null && typeof Rt.markComponentLayoutEffectUnmountStarted == "function" && Rt.markComponentLayoutEffectUnmountStarted(i);
    }
      Rt !== null && typeof Rt.markComponentLayoutEffectUnmountStopped == "function" && Rt.markComponentLayoutEffectUnmountStopped();
    }
    }
    }
      Rt !== null && typeof Rt.markLayoutEffectsStarted == "function" && Rt.markLayoutEffectsStarted(i);
    }
      Rt !== null && typeof Rt.markLayoutEffectsStopped == "function" && Rt.markLayoutEffectsStopped();
    }
      Rt !== null && typeof Rt.markPassiveEffectsStarted == "function" && Rt.markPassiveEffectsStarted(i);
    }
      Rt !== null && typeof Rt.markPassiveEffectsStopped == "function" && Rt.markPassiveEffectsStopped();
    }
      Rt !== null && typeof Rt.markRenderStarted == "function" && Rt.markRenderStarted(i);
    }
      Rt !== null && typeof Rt.markRenderYielded == "function" && Rt.markRenderYielded();
    }
      Rt !== null && typeof Rt.markRenderStopped == "function" && Rt.markRenderStopped();
    }
      Rt !== null && typeof Rt.markRenderScheduled == "function" && Rt.markRenderScheduled(i);
    }
      Rt !== null && typeof Rt.markForceUpdateScheduled == "function" && Rt.markForceUpdateScheduled(i, l);
    }
      Rt !== null && typeof Rt.markStateUpdateScheduled == "function" && Rt.markStateUpdateScheduled(i, l);
    }
    var Jt = (
      /*                         */
      0
      /*                 */
      1
      /*                    */
      2
      /*               */
      8
      /*              */
      16
      var l = i >>> 0;
    }
      /*                        */
      0
      /*                          */
      0
      /*                        */
      1
      /*    */
      2
      /*             */
      4
      /*            */
      8
      /*                     */
      16
      /*                */
      32
      /*                       */
      4194240
      /*                        */
      64
      /*                        */
      128
      /*                        */
      256
      /*                        */
      512
      /*                        */
      1024
      /*                        */
      2048
      /*                        */
      4096
      /*                        */
      8192
      /*                        */
      16384
      /*                       */
      32768
      /*                       */
      65536
      /*                       */
      131072
      /*                       */
      262144
      /*                       */
      524288
      /*                       */
      1048576
      /*                       */
      2097152
      /*                            */
      130023424
      /*                             */
      4194304
      /*                             */
      8388608
      /*                             */
      16777216
      /*                             */
      33554432
      /*                             */
      67108864
      /*          */
      134217728
      /*                          */
      268435455
      /*               */
      268435456
      /*                        */
      536870912
      /*                   */
      1073741824
    );
      {
          return "Sync";
          return "InputContinuousHydration";
          return "InputContinuous";
          return "DefaultHydration";
          return "Default";
          return "TransitionHydration";
          return "Transition";
        if (i & Bp)
          return "SelectiveHydration";
          return "IdleHydration";
          return "Idle";
          return "Offscreen";
      }
    }
        case Xm:
        case Qm:
        case Jm:
        case Zm:
        case eg:
        case tg:
        case ng:
        case rg:
        case og:
        case ig:
        case Hp:
        default:
          return a("Should have found matching lanes. This is a bug in React."), i;
      }
    }
        return it;
      if (L !== it) {
        else {
          var Z = L & R;
        }
      } else {
      }
        return it;
      // bother waiting until the root is complete.
      (l & S) === it) {
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          le >= Te || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
        )
          return l;
      }
      var xe = i.entangledLanes;
      if (xe !== it)
        }
    }
      }
    }
      switch (i) {
          return l + 250;
        case Xm:
        case Qm:
        case Jm:
        case Zm:
        case eg:
        case tg:
        case ng:
        case rg:
        case og:
        case ig:
        case Hp:
        default:
      }
    }
      }
    }
    }
    }
    }
    }
    }
      return (i & l) === it;
    }
    }
    }
      return (l & i.expiredLanes) !== it;
    }
    }
    }
    }
      return i & -i;
    }
    }
    }
    }
      return (i & l) !== it;
    }
      return (i & l) === l;
    }
      return i | l;
    }
      return i & ~l;
    }
      return i & l;
    }
      return i;
    }
    }
        l.push(i);
      return l;
    }
    }
      i.suspendedLanes |= l, i.pingedLanes &= ~l;
      }
    }
      i.pingedLanes |= i.suspendedLanes & l;
    }
      i.pendingLanes = l, i.suspendedLanes = it, i.pingedLanes = it, i.expiredLanes &= l, i.mutableReadLanes &= l, i.entangledLanes &= l;
      }
    }
        // Is this one of the newly entangled lanes?
        L & l | // Is this lane transitively entangled with the newly entangled lanes?
      }
    }
          break;
          break;
        case Xm:
        case Qm:
        case Jm:
        case Zm:
        case eg:
        case tg:
        case ng:
        case rg:
        case og:
        case ig:
          break;
          break;
        default:
          break;
      }
    }
        }
    }
          }), L.clear()), l &= ~R;
        }
    }
      return null;
    }
    }
    }
      try {
      } finally {
      }
    }
      return i !== 0 && i < l ? i : l;
    }
      return i > l ? i : l;
    }
      return i !== 0 && i < l;
    }
    }
      var l = i.current.memoizedState;
      return l.isDehydrated;
    }
    }
    }
    var Nt;
      Nt = i;
    }
    }
    }
    }
      "mousedown",
      "mouseup",
      "touchcancel",
      "touchend",
      "touchstart",
      "auxclick",
      "dblclick",
      "pointercancel",
      "pointerdown",
      "pointerup",
      "dragend",
      "dragstart",
      "drop",
      "compositionend",
      "compositionstart",
      "keydown",
      "keypress",
      "keyup",
      "input",
      "textInput",
      // Intentionally camelCase
      "copy",
      "cut",
      "paste",
      "click",
      "change",
      "contextmenu",
      "reset",
      "submit"
    ];
    }
      return {
        blockedOn: i,
        domEventName: l,
        nativeEvent: S,
      };
    }
      switch (i) {
        case "focusin":
        case "focusout":
          break;
        case "dragenter":
        case "dragleave":
          break;
        case "mouseover":
        case "mouseout":
          break;
        case "pointerover":
        case "pointerout": {
          break;
        }
        case "gotpointercapture":
        case "lostpointercapture": {
          break;
        }
      }
    }
      if (i === null || i.nativeEvent !== R) {
        if (l !== null) {
        }
        return L;
      }
      var Z = i.targetContainers;
      return S !== null && Z.indexOf(S) === -1 && Z.push(S), i;
    }
      switch (l) {
        case "focusin": {
          var R = S;
        }
        case "dragenter": {
          var L = S;
        }
        case "mouseover": {
        }
        case "pointerover": {
          var Z = S, ae = Z.pointerId;
        }
        case "gotpointercapture": {
          var le = S, Te = le.pointerId;
        }
      }
      return !1;
    }
      if (l !== null) {
            if (S !== null) {
              });
              return;
            }
              return;
            }
          }
        }
      }
      i.blockedOn = null;
    }
        blockedOn: null,
        target: i,
        priority: l
        ;
    }
      if (i.blockedOn !== null)
        return !1;
      for (var l = i.targetContainers; l.length > 0; ) {
          var S = i.nativeEvent, R = new S.constructor(S.type, S);
        } else {
        }
        l.shift();
      }
      return !0;
    }
    }
    }
    }
        }
      }
      };
        R.blockedOn === i && (R.blockedOn = null);
      }
        if (L.blockedOn !== null)
          break;
      }
    }
    }
    }
          break;
          break;
        default:
          break;
      }
    }
      try {
      } finally {
      }
    }
      try {
      } finally {
      }
    }
    }
      if (S === null) {
        return;
      }
        return;
      }
        for (; S !== null; ) {
            break;
          S = L;
        }
        return;
      }
    }
      if (R !== null) {
        if (L === null)
          R = null;
        else {
            if (Z !== null)
              return Z;
            R = null;
            var ae = L.stateNode;
            R = null;
          } else L !== R && (R = null);
        }
      }
    }
      switch (i) {
        case "cancel":
        case "click":
        case "close":
        case "contextmenu":
        case "copy":
        case "cut":
        case "auxclick":
        case "dblclick":
        case "dragend":
        case "dragstart":
        case "drop":
        case "focusin":
        case "focusout":
        case "input":
        case "invalid":
        case "keydown":
        case "keypress":
        case "keyup":
        case "mousedown":
        case "mouseup":
        case "paste":
        case "pause":
        case "play":
        case "pointercancel":
        case "pointerdown":
        case "pointerup":
        case "ratechange":
        case "reset":
        case "resize":
        case "seeked":
        case "submit":
        case "touchcancel":
        case "touchend":
        case "touchstart":
        case "volumechange":
        case "change":
        case "selectionchange":
        case "textInput":
        case "compositionstart":
        case "compositionend":
        case "compositionupdate":
        case "beforeblur":
        case "afterblur":
        case "beforeinput":
        case "blur":
        case "fullscreenchange":
        case "focus":
        case "hashchange":
        case "popstate":
        case "select":
        case "selectstart":
        case "drag":
        case "dragenter":
        case "dragexit":
        case "dragleave":
        case "dragover":
        case "mousemove":
        case "mouseout":
        case "mouseover":
        case "pointermove":
        case "pointerout":
        case "pointerover":
        case "scroll":
        case "toggle":
        case "touchmove":
        case "wheel":
        case "mouseenter":
        case "mouseleave":
        case "pointerenter":
        case "pointerleave":
        case "message": {
          switch (l) {
              return Us;
            default:
          }
        }
        default:
      }
    }
    }
    }
        capture: !0,
        ;
        ;
    }
    }
    }
      return !0;
    }
      return !1;
    }
          }
        var ae = R.defaultPrevented != null ? R.defaultPrevented : R.returnValue === !1;
      }
        preventDefault: function() {
          this.defaultPrevented = !0;
        },
        stopPropagation: function() {
        },
        /**
         * We release all dispatched `SyntheticEvent`s after each event loop, adding
         * them back into the pool. This allows a way to hold onto a reference that
         * won't be added back into the pool.
         */
        persist: function() {
        },
        /**
         * Checks if this event should be released back into the pool.
         *
         * @return {boolean} True if this should not be released, false otherwise.
         */
      }), l;
    }
      eventPhase: 0,
      bubbles: 0,
      cancelable: 0,
      timeStamp: function(i) {
        return i.timeStamp || Date.now();
      },
      defaultPrevented: 0,
      isTrusted: 0
      view: 0,
      detail: 0
    }
      screenX: 0,
      screenY: 0,
      clientX: 0,
      clientY: 0,
      pageX: 0,
      pageY: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      button: 0,
      buttons: 0,
      relatedTarget: function(i) {
        return i.relatedTarget === void 0 ? i.fromElement === i.srcElement ? i.toElement : i.fromElement : i.relatedTarget;
      },
      movementX: function(i) {
      },
      movementY: function(i) {
      }
      dataTransfer: 0
      relatedTarget: 0
      animationName: 0,
      elapsedTime: 0,
      pseudoElement: 0
      clipboardData: function(i) {
        return "clipboardData" in i ? i.clipboardData : window.clipboardData;
      }
      data: 0
      Esc: "Escape",
      Spacebar: " ",
      Left: "ArrowLeft",
      Up: "ArrowUp",
      Right: "ArrowRight",
      Down: "ArrowDown",
      Del: "Delete",
      Win: "OS",
      Menu: "ContextMenu",
      Apps: "ContextMenu",
      Scroll: "ScrollLock",
      MozPrintableKey: "Unidentified"
      8: "Backspace",
      9: "Tab",
      12: "Clear",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      19: "Pause",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      45: "Insert",
      46: "Delete",
      112: "F1",
      113: "F2",
      114: "F3",
      115: "F4",
      116: "F5",
      117: "F6",
      118: "F7",
      119: "F8",
      120: "F9",
      121: "F10",
      122: "F11",
      123: "F12",
      144: "NumLock",
      145: "ScrollLock",
      224: "Meta"
    };
      if (i.key) {
        if (l !== "Unidentified")
          return l;
      }
      if (i.type === "keypress") {
      }
    }
      Alt: "altKey",
      Control: "ctrlKey",
      Meta: "metaKey",
      Shift: "shiftKey"
    };
      code: 0,
      location: 0,
      ctrlKey: 0,
      shiftKey: 0,
      altKey: 0,
      metaKey: 0,
      repeat: 0,
      locale: 0,
      // Legacy Interface
      charCode: function(i) {
      },
      keyCode: function(i) {
        return i.type === "keydown" || i.type === "keyup" ? i.keyCode : 0;
      },
      which: function(i) {
      }
      pointerId: 0,
      width: 0,
      height: 0,
      pressure: 0,
      tangentialPressure: 0,
      tiltX: 0,
      tiltY: 0,
      twist: 0,
      pointerType: 0,
      isPrimary: 0
      touches: 0,
      targetTouches: 0,
      changedTouches: 0,
      altKey: 0,
      metaKey: 0,
      ctrlKey: 0,
      shiftKey: 0,
      propertyName: 0,
      elapsedTime: 0,
      pseudoElement: 0
      deltaX: function(i) {
        return "deltaX" in i ? i.deltaX : (
          // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
          "wheelDeltaX" in i ? -i.wheelDeltaX : 0
        );
      },
      deltaY: function(i) {
        return "deltaY" in i ? i.deltaY : (
          // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
          "wheelDeltaY" in i ? -i.wheelDeltaY : (
            // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            "wheelDelta" in i ? -i.wheelDelta : 0
          )
        );
      },
      deltaZ: 0,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: 0
      be("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]), be("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]), be("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]), be("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
    }
      return (i.ctrlKey || i.altKey || i.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(i.ctrlKey && i.altKey);
    }
      switch (i) {
        case "compositionstart":
          return "onCompositionStart";
        case "compositionend":
          return "onCompositionEnd";
        case "compositionupdate":
          return "onCompositionUpdate";
      }
    }
    }
      switch (i) {
        case "keyup":
        case "keydown":
        case "keypress":
        case "mousedown":
        case "focusout":
          return !0;
        default:
          return !1;
      }
    }
      var l = i.detail;
      return typeof l == "object" && "data" in l ? l.data : null;
    }
      return i.locale === "ko";
    }
      var R, L;
        return null;
        if (i.push({
          event: Z,
        }), L)
          Z.data = L;
        else {
          ae !== null && (Z.data = ae);
        }
      }
    }
      switch (i) {
        case "compositionend":
        case "keypress":
        case "textInput":
        default:
          return null;
      }
    }
        }
        return null;
      }
      switch (i) {
        case "paste":
          return null;
        case "keypress":
            if (l.char && l.char.length > 1)
              return l.char;
            if (l.which)
              return String.fromCharCode(l.which);
          }
          return null;
        case "compositionend":
        default:
          return null;
      }
    }
      var R;
        return null;
      if (L.length > 0) {
        i.push({
          listeners: L
      }
    }
    }
      color: !0,
      date: !0,
      datetime: !0,
      "datetime-local": !0,
      email: !0,
      month: !0,
      number: !0,
      password: !0,
      range: !0,
      search: !0,
      tel: !0,
      text: !0,
      time: !0,
      url: !0,
      week: !0
    };
      var l = i && i.nodeName && i.nodeName.toLowerCase();
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */
      if (!_e)
        return !1;
      }
    }
      be("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
    }
      if (S.length > 0) {
        i.push({
          event: R,
          listeners: S
        });
      }
    }
    function p(i) {
      var l = i.nodeName && i.nodeName.toLowerCase();
      return l === "select" || l === "input" && i.type === "file";
    }
    function b(i) {
      var l = [];
    }
    function _(i) {
    }
        return i;
    }
      if (i === "change")
        return l;
    }
    var oe = !1;
    function me(i, l) {
    }
    function Se() {
    }
    function Fe(i) {
    }
    }
    function ct(i, l) {
      if (i === "selectionchange" || i === "keyup" || i === "keydown")
    }
    function st(i) {
      var l = i.nodeName;
      return l && l.toLowerCase() === "input" && (i.type === "checkbox" || i.type === "radio");
    }
    function Mt(i, l) {
      if (i === "click")
    }
    function Ht(i, l) {
      if (i === "input" || i === "change")
    }
    function Gt(i) {
      var l = i._wrapperState;
      !l || !l.controlled || i.type !== "number" || tn(i, "number", i.value);
    }
        if (le) {
          return;
        }
      }
    }
    function ke() {
      we("onMouseEnter", ["mouseout", "mouseover"]), we("onMouseLeave", ["mouseout", "mouseover"]), we("onPointerEnter", ["pointerout", "pointerover"]), we("onPointerLeave", ["pointerout", "pointerover"]);
    }
          return;
      }
        var le;
        if (S.window === S)
          le = S;
        else {
          var Te = S.ownerDocument;
          Te ? le = Te.defaultView || Te.parentWindow : le = window;
        }
        if (Z) {
          }
        } else
          }
        }
      }
    }
    function Ae(i, l) {
      return i === l && (i !== 0 || 1 / i === 1 / l) || i !== i && l !== l;
    }
    var lt = typeof Object.is == "function" ? Object.is : Ae;
    function Vt(i, l) {
      if (lt(i, l))
        return !0;
      if (typeof i != "object" || i === null || typeof l != "object" || l === null)
        return !1;
        return !1;
        if (!ce.call(l, R) || !lt(i[R], l[R]))
          return !1;
      }
      return !0;
    }
      for (; i && i.firstChild; )
        i = i.firstChild;
      return i;
    }
      for (; i; ) {
        if (i.nextSibling)
          return i.nextSibling;
        i = i.parentNode;
      }
    }
            return {
            };
        }
      }
    }
        return null;
      try {
        S.nodeType, L.nodeType;
      } catch {
        return null;
      }
    }
      e: for (; ; ) {
          Te = le, le = xe;
        for (; ; ) {
          if (le === i)
            break e;
            break;
          le = Te, Te = le.parentNode;
        }
        le = xe;
      }
        start: L,
      };
    }
        }
        if (ae && le) {
          if (S.rangeCount === 1 && S.anchorNode === ae.node && S.anchorOffset === ae.offset && S.focusNode === le.node && S.focusOffset === le.offset)
            return;
        }
      }
    }
    }
    }
    }
      try {
        return typeof i.contentWindow.location.href == "string";
      } catch {
        return !1;
      }
    }
      for (var i = window, l = Ls(); l instanceof i.HTMLIFrameElement; ) {
          i = l.contentWindow;
        else
          return l;
        l = Ls(i.document);
      }
      return l;
    }
      var l = i && i.nodeName && i.nodeName.toLowerCase();
      return l && (l === "input" && (i.type === "text" || i.type === "search" || i.type === "tel" || i.type === "url" || i.type === "password") || l === "textarea" || i.contentEditable === "true");
    }
      return {
        focusedElem: i,
      };
    }
            element: R,
            left: R.scrollLeft,
            top: R.scrollTop
          });
        for (var L = 0; L < S.length; L++) {
        }
      }
    }
      var l;
      return "selectionStart" in i ? l = {
        start: i.selectionStart,
        end: i.selectionEnd
        start: 0,
        end: 0
      };
    }
    }
      be("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
    }
        return {
          start: i.selectionStart,
          end: i.selectionEnd
        };
      return {
      };
    }
    }
          if (R.length > 0) {
            i.push({
              event: L,
              listeners: R
          }
        }
      }
    }
      switch (l) {
        case "focusin":
          break;
        case "focusout":
          break;
        case "mousedown":
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          break;
        case "selectionchange":
            break;
        case "keydown":
        case "keyup":
      }
    }
        return i;
      return i;
    }
    }
      }
    }
        switch (l) {
          case "keypress":
              return;
          case "keydown":
          case "keyup":
            break;
          case "focusin":
            break;
          case "focusout":
            break;
          case "beforeblur":
          case "afterblur":
            break;
          case "click":
              return;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            break;
            break;
            break;
          case "scroll":
            break;
          case "wheel":
            break;
          case "copy":
          case "cut":
          case "paste":
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            break;
        }
        {
          var Te = !le && // TODO: ideally, we'd eventually add all events from
          // nonDelegatedEvents list in DOMPluginEventSystem.
          // Then we can remove this special list.
          // This is a breaking change that can wait until React 18.
          if (xe.length > 0) {
            i.push({
              listeners: xe
            });
          }
        }
      }
    }
    }
    }
        for (var S = l.length - 1; S >= 0; S--) {
            return;
        }
      else
        for (var ae = 0; ae < l.length; ae++) {
            return;
        }
    }
      }
    }
    }
    }
    }
        });
      }
    }
    }
    }
        var L = S;
          e: for (; ; ) {
              return;
                break;
              if (Z === w)
                  var Te = le.tag;
                    var xe = le.stateNode.containerInfo;
                      return;
                  }
                  le = le.return;
                }
              for (; ae !== null; ) {
                  return;
                if (ze === C || ze === T) {
                  continue e;
                }
                ae = ae.parentNode;
              }
            }
          }
        }
      }
      });
    }
      return {
        instance: i,
        listener: l,
      };
    }
        }
        if (S)
          break;
        ae = ae.return;
      }
      return Z;
    }
        }
        S = S.return;
      }
    }
      if (i === null)
        return null;
      do
        i = i.return;
      while (i && i.tag !== C);
      return i || null;
    }
        S++;
        L++;
      for (; S - L > 0; )
      for (; L - S > 0; )
      for (var Z = S; Z--; ) {
      }
      return null;
    }
          break;
        if (Te === C && le !== null) {
          var xe = le;
          if (S) {
          } else if (!S) {
          }
        }
      }
      L.length !== 0 && i.push({
        event: l,
        listeners: L
      });
    }
    }
      return i + "__bubble";
    }
      // There are working polyfills for <dialog>. Let people use it.
      dialog: !0,
      // Electron ships a custom <webview> tag to display external web content in
      // an isolated frame and process.
      // This tag is not present in non Electron environments such as JSDom which
      // is often used for testing purposes.
      // @see https://electronjs.org/docs/api/webview-tag
      webview: !0
        registrationNameDependencies: fe,
        possibleRegistrationNames: pe
      });
        var l = [];
        }), a("Extra attributes from the server: %s", l);
      }
      l === !1 ? a("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", i, i, i) : a("Expected `%s` listener to be a function, instead got a value of `%s` type.", i, typeof l);
    };
      wt(i);
      var l = typeof i == "string" ? i : "" + i;
    }
        throw new Error("Text content does not match server-rendered HTML.");
    }
            if (typeof L == "string") {
              var Z = i !== "textarea" || L !== "";
        }
    }
      for (var S = 0; S < l.length; S += 2) {
        var R = l[S], L = l[S + 1];
      }
    }
          var Z = R.createElement("div");
          Z.innerHTML = "<script><\/script>";
          var ae = Z.firstChild;
          L = Z.removeChild(ae);
        } else if (typeof l.is == "string")
          L = R.createElement(i, {
            is: l.is
          });
        else if (L = R.createElement(i), i === "select") {
          var le = L;
          l.multiple ? le.multiple = !0 : l.size && (le.size = l.size);
        }
      } else
    }
    }
      var R;
      switch (l) {
        case "dialog":
          break;
        case "iframe":
        case "object":
        case "embed":
          break;
        case "video":
        case "audio":
          break;
        case "source":
          break;
        case "img":
        case "image":
        case "link":
          break;
        case "details":
          break;
        case "input":
          break;
        case "option":
          break;
        case "select":
          break;
        case "textarea":
          break;
        default:
      }
        case "input":
          break;
        case "textarea":
          break;
        case "option":
          break;
        case "select":
          break;
        default:
          break;
      }
    }
      switch (l) {
        case "input":
          break;
        case "select":
          break;
        case "textarea":
          break;
        default:
          break;
      }
      var Z, ae, le = null;
      for (Z in L)
            var Te = L[Z];
            for (ae in Te)
              Te.hasOwnProperty(ae) && (le || (le = {}), le[ae] = "");
              for (ae in xe)
            } else
              le || (R || (R = []), R.push(Z, le)), le = xe;
            ze != null && Ge !== ze && (R = R || []).push(Z, ze);
      }
    }
        case "input":
          ve(i, S);
          break;
        case "textarea":
          break;
        case "select":
          break;
      }
    }
      {
        var l = i.toLowerCase();
      }
    }
        case "dialog":
          break;
        case "iframe":
        case "object":
        case "embed":
          break;
        case "video":
        case "audio":
          break;
        case "source":
          break;
        case "img":
        case "image":
        case "link":
          break;
        case "details":
          break;
        case "input":
          break;
        case "option":
          break;
        case "select":
          break;
        case "textarea":
          break;
      }
      {
        Z = /* @__PURE__ */ new Set();
        for (var le = i.attributes, Te = 0; Te < le.length; Te++) {
          var xe = le[Te].name.toLowerCase();
          switch (xe) {
            case "value":
              break;
            case "checked":
              break;
            case "selected":
              break;
            default:
              Z.add(le[Te].name);
          }
        }
      }
          else if (fe.hasOwnProperty(ze))
          else if (L && // Convince Flow we've calculated it (it's DEV-only in this method.)
              // TODO: Only ignore them on controlled tags.
              ze === "value" || ze === "checked" || ze === "selected")) {
                  }
                  }
                  var qe = !1;
                  if (nn !== null)
                  else {
                      Z.delete(ze.toLowerCase());
                    else {
                      dt !== null && dt !== ze && (qe = !0, Z.delete(dt)), Z.delete(ze);
                    }
                  }
                }
              }
            }
          }
        }
      switch (L && // $FlowFixMe - Should be inferred as not undefined.
        case "input":
          break;
        case "textarea":
          break;
        case "select":
        case "option":
          break;
        default:
          break;
      }
    }
    }
      {
          return;
      }
    }
      {
          return;
      }
    }
      {
          return;
      }
    }
      {
          return;
      }
    }
      switch (l) {
        case "input":
          return;
        case "textarea":
          return;
        case "select":
          return;
      }
    }
    };
    {
        "applet",
        "caption",
        "html",
        "table",
        "td",
        "th",
        "marquee",
        "object",
        "template",
        // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
        // TODO: Distinguish by namespace here -- for <title>, including it here
        // errs on the side of fewer warnings
        "foreignObject",
        "desc",
        "title"
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };
          tag: l
        };
      };
        switch (l) {
          case "select":
            return i === "option" || i === "optgroup" || i === "#text";
          case "optgroup":
            return i === "option" || i === "#text";
          case "option":
            return i === "#text";
          case "tr":
            return i === "th" || i === "td" || i === "style" || i === "script" || i === "template";
          case "tbody":
          case "thead":
          case "tfoot":
            return i === "tr" || i === "style" || i === "script" || i === "template";
          case "colgroup":
            return i === "col" || i === "template";
          case "table":
            return i === "caption" || i === "colgroup" || i === "tbody" || i === "tfoot" || i === "thead" || i === "style" || i === "script" || i === "template";
          case "head":
            return i === "base" || i === "basefont" || i === "bgsound" || i === "link" || i === "meta" || i === "title" || i === "noscript" || i === "noframes" || i === "style" || i === "script" || i === "template";
          case "html":
            return i === "head" || i === "body" || i === "frameset";
          case "frameset":
            return i === "frame";
          case "#document":
            return i === "html";
        }
        switch (i) {
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return l !== "h1" && l !== "h2" && l !== "h3" && l !== "h4" && l !== "h5" && l !== "h6";
          case "rp":
          case "rt":
          case "body":
          case "caption":
          case "col":
          case "colgroup":
          case "frameset":
          case "frame":
          case "head":
          case "html":
          case "tbody":
          case "td":
          case "tfoot":
          case "th":
          case "thead":
          case "tr":
            return l == null;
        }
        return !0;
        switch (i) {
          case "address":
          case "article":
          case "aside":
          case "blockquote":
          case "center":
          case "details":
          case "dialog":
          case "dir":
          case "div":
          case "dl":
          case "fieldset":
          case "figcaption":
          case "figure":
          case "footer":
          case "header":
          case "hgroup":
          case "main":
          case "menu":
          case "nav":
          case "ol":
          case "p":
          case "section":
          case "summary":
          case "ul":
          case "pre":
          case "listing":
          case "table":
          case "hr":
          case "xmp":
          case "h1":
          case "h2":
          case "h3":
          case "h4":
          case "h5":
          case "h6":
            return l.pTagInButtonScope;
          case "form":
            return l.formTag || l.pTagInButtonScope;
          case "li":
            return l.listItemTagAutoclosing;
          case "dd":
          case "dt":
            return l.dlItemTagAutoclosing;
          case "button":
            return l.buttonTagInScope;
          case "a":
            return l.aTagInScope;
          case "nobr":
            return l.nobrTagInScope;
        }
        return null;
        l != null && (i != null && a("validateDOMNesting: when childText is passed, childTag should be null"), i = "#text");
            var le = i, Te = "";
            if (i === "#text" ? /\S/.test(l) ? le = "Text nodes" : (le = "Whitespace text nodes", Te = " Make sure you don't have any extra whitespace between tags on each line of your source code.") : le = "<" + i + ">", R) {
              var xe = "";
              Z === "table" && i === "tr" && (xe += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser."), a("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", le, Z, Te, xe);
            } else
              a("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", le, Z);
          }
        }
      };
    }
          var S = i.documentElement;
          break;
        }
        default: {
          break;
        }
      }
      {
        return {
          ancestorInfo: Z
        };
      }
    }
      {
        return {
          namespace: S,
          ancestorInfo: R
        };
      }
    }
      return i;
    }
      var l = null;
    }
    }
      var R;
      {
        }
        R = L.namespace;
      }
    }
      i.appendChild(l);
    }
        case "button":
        case "input":
        case "select":
        case "textarea":
        case "img":
          return !0;
        default:
          return !1;
      }
    }
      {
        var L = R;
        }
      }
    }
      return i === "textarea" || i === "noscript" || typeof l.children == "string" || typeof l.children == "number" || typeof l.dangerouslySetInnerHTML == "object" && l.dangerouslySetInnerHTML !== null && l.dangerouslySetInnerHTML.__html != null;
    }
      {
      }
    }
      var i = window.event;
    }
      setTimeout(function() {
        throw i;
      });
    }
      switch (l) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          return;
        case "img": {
          return;
        }
      }
    }
    }
    }
    }
      i.appendChild(l);
    }
    }
    }
    }
      i.removeChild(l);
    }
    }
      do {
          var R = S.data;
              return;
            } else
        }
    }
    }
      i = i;
      var l = i.style;
      typeof l.setProperty == "function" ? l.setProperty("display", "none", "important") : l.display = "none";
    }
      i.nodeValue = "";
    }
      i = i;
    }
      i.nodeValue = l;
    }
    }
    }
    }
    }
    }
    }
        stack: S
      };
    }
      i._reactRetry = l;
    }
      for (; i != null; i = i.nextSibling) {
        var l = i.nodeType;
          break;
            break;
            return null;
        }
      }
      return i;
    }
    }
    }
    }
    }
      {
        var Z = S;
      }
    }
    }
    }
        }
        l = l.nextSibling;
      }
      return null;
    }
              return l;
        }
        l = l.previousSibling;
      }
      return null;
    }
    }
    }
      return i !== "head" && i !== "body";
    }
      var S = !0;
    }
        var L = !0;
      }
    }
    }
      {
      }
    }
    }
    }
    }
      {
      }
    }
      {
      }
    }
    }
    }
      a("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", i.nodeName.toLowerCase());
    }
    }
    }
    }
    }
    }
    }
      if (l)
        return l;
              if (R)
                return R;
            }
          return l;
        }
      }
      return null;
    }
    }
      if (i.tag === C || i.tag === T)
        return i.stateNode;
      throw new Error("getNodeFromInstance: Invalid argument.");
    }
    }
    }
    }
      if (i) {
      } else
    }
      {
        var R = Function.call.bind(ce);
        for (var L in i)
          if (R(i, L)) {
            try {
              if (typeof i[L] != "function") {
                throw Z.name = "Invariant Violation", Z;
              }
            } catch (ae) {
            }
          }
      }
    }
      return {
        current: i
      };
    }
        a("Unexpected pop.");
        return;
      }
    }
    }
    }
      {
      }
    }
      {
        var S = i.stateNode;
        if (S && S.__reactInternalMemoizedUnmaskedChildContext === l)
          return S.__reactInternalMemoizedMaskedChildContext;
        var R = {};
          R[L] = l[L];
        {
        }
      }
    }
    }
      {
        var l = i.childContextTypes;
        return l != null;
      }
    }
    }
    }
      {
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
      {
          {
          }
        }
        {
        }
      }
    }
      {
      }
    }
      {
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        } else
      }
    }
      {
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var l = i;
        do {
          switch (l.tag) {
              return l.stateNode.context;
                return l.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          l = l.return;
        } while (l !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    }
    }
    }
        try {
            do
            while (S !== null);
          }
        } catch (R) {
        } finally {
        }
      }
      return null;
    }
    }
    }
    }
    }
      if (Z > 30) {
      } else {
      }
    }
      var l = i.return;
      if (l !== null) {
      }
    }
    }
      } : null;
    }
    }
    }
    }
    }
    }
      var l = i.stateNode.containerInfo;
    }
    }
      switch (i.tag) {
          break;
        }
        case C: {
            i.type,
            i.memoizedProps,
            i.stateNode,
            l,
            // TODO: Delete this argument when we remove the legacy root API.
          );
          break;
        }
          break;
        }
      }
    }
    }
      {
          return;
        switch (i.tag) {
            switch (l.tag) {
              case C:
                break;
              case T:
                var S = l.pendingProps;
                break;
            }
            break;
          }
          case C: {
            switch (l.tag) {
              case C: {
                  R,
                  L,
                  Z,
                  ae,
                  // TODO: Delete this argument when we remove the legacy root API.
                  le
                );
                break;
              }
              case T: {
                  R,
                  L,
                  Te,
                  // TODO: Delete this argument when we remove the legacy root API.
                  xe
                );
                break;
              }
            }
            break;
          }
            if (ze !== null) switch (l.tag) {
              case C:
                var Ge = l.type;
                break;
              case T:
                var kt = l.pendingProps;
                break;
            }
            break;
          }
          default:
            return;
        }
      }
    }
    }
      switch (i.tag) {
        case C: {
          i.pendingProps;
        }
        case T: {
        }
          if (L !== null) {
              dehydrated: L,
            };
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    }
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
        if (!l) {
          return;
        }
            return;
          }
        }
      }
    }
      return i.updateQueue = R, R !== null;
    }
        if (S !== null)
          switch (S.tag) {
                R,
                l,
                // TODO: Delete this argument when we remove the legacy root API.
                L
              );
              break;
            }
            case C: {
                Z,
                ae,
                l,
                // TODO: Delete this argument when we remove the legacy root API.
                le
              );
              break;
            }
          }
      }
    }
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
    }
        l = l.return;
    }
        return !1;
        if (l)
          else
            for (; l; )
      }
    }
    }
    }
    }
    }
    }
    }
    }
      recordUnsafeLifecycleWarnings: function(i, l) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(i, l) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
        return l;
        var l = [];
        }), l.sort().join(", ");
        var i = /* @__PURE__ */ new Set();
        var l = /* @__PURE__ */ new Set();
        var S = /* @__PURE__ */ new Set();
        var R = /* @__PURE__ */ new Set();
          a(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, L);
        }
          a(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

        }
        if (R.size > 0) {
          a(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, Z);
        }
        if (i.size > 0) {
          s(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, ae);
        }
          s(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, le);
        }
        if (S.size > 0) {
          s(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, Te);
        }
      };
          a("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        }
          if (i.length !== 0) {
            i.forEach(function(R) {
            });
            try {

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, S);
            } finally {
            }
          }
        });
      };
    }
    };
      if (!(i === null || typeof i != "object") && !(!i._store || i._store.validated || i.key != null)) {
        if (typeof i._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        i._store.validated = !0;
      }
    };
      return i.prototype && i.prototype.isReactComponent;
    }
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
          if (R) {
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
          }
          if (!L)
          var Z = L;
          if (l !== null && l.ref !== null && typeof l.ref == "function" && l.ref._stringRef === ae)
            return l.ref;
          var le = function(Te) {
            var xe = Z.refs;
            Te === null ? delete xe[ae] : xe[ae] = Te;
          };
          return le._stringRef = ae, le;
        } else {
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
    }
    }
      {
          return;
      }
    }
    }
      function l(Pe, qe) {
        if (i) {
          var Me = Pe.deletions;
        }
      }
        if (!i)
          return null;
        for (var Me = qe; Me !== null; )
          l(Pe, Me), Me = Me.sibling;
        return null;
      }
        for (var Me = /* @__PURE__ */ new Map(), dt = qe; dt !== null; )
          dt.key !== null ? Me.set(dt.key, dt) : Me.set(dt.index, dt), dt = dt.sibling;
        return Me;
      }
      function S(Pe, qe) {
        return Me.index = 0, Me.sibling = null, Me;
      }
      function R(Pe, qe, Me) {
        if (Pe.index = Me, !i)
        var dt = Pe.alternate;
        if (dt !== null) {
          var Dt = dt.index;
        } else
      }
      function L(Pe) {
      }
        if (qe === null || qe.tag !== T) {
          return Dt.return = Pe, Dt;
        } else {
          var Pt = S(qe, Me);
          return Pt.return = Pe, Pt;
        }
      }
      function Z(Pe, qe, Me, dt) {
        var Dt = Me.type;
          return le(Pe, qe, Me.props.children, dt, Me.key);
        if (qe !== null && (qe.elementType === Dt || // Keep this check inline so it only runs on the false path:
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
          var Pt = S(qe, Me.props);
        }
      }
      function ae(Pe, qe, Me, dt) {
        if (qe === null || qe.tag !== w || qe.stateNode.containerInfo !== Me.containerInfo || qe.stateNode.implementation !== Me.implementation) {
          return Dt.return = Pe, Dt;
        } else {
          var Pt = S(qe, Me.children || []);
          return Pt.return = Pe, Pt;
        }
      }
      function le(Pe, qe, Me, dt, Dt) {
        if (qe === null || qe.tag !== E) {
          return Pt.return = Pe, Pt;
        } else {
        }
      }
      function Te(Pe, qe, Me) {
        if (typeof qe == "string" && qe !== "" || typeof qe == "number") {
          return dt.return = Pe, dt;
        }
        if (typeof qe == "object" && qe !== null) {
          switch (qe.$$typeof) {
            }
              return Pt.return = Pe, Pt;
            }
            case De: {
            }
          }
          }
        }
      }
      function xe(Pe, qe, Me, dt) {
        var Dt = qe !== null ? qe.key : null;
        if (typeof Me == "string" && Me !== "" || typeof Me == "number")
        if (typeof Me == "object" && Me !== null) {
          switch (Me.$$typeof) {
              return Me.key === Dt ? Z(Pe, qe, Me, dt) : null;
              return Me.key === Dt ? ae(Pe, qe, Me, dt) : null;
            case De: {
            }
          }
            return Dt !== null ? null : le(Pe, qe, Me, dt, null);
        }
      }
        if (typeof dt == "string" && dt !== "" || typeof dt == "number") {
          var Pt = Pe.get(Me) || null;
        }
        if (typeof dt == "object" && dt !== null) {
          switch (dt.$$typeof) {
            }
            }
            case De:
          }
            var Lo = Pe.get(Me) || null;
            return le(qe, Lo, dt, Dt, null);
          }
        }
      }
      function ze(Pe, qe, Me) {
        {
          if (typeof Pe != "object" || Pe === null)
            return qe;
          switch (Pe.$$typeof) {
              var dt = Pe.key;
              if (typeof dt != "string")
                break;
              if (qe === null) {
                qe = /* @__PURE__ */ new Set(), qe.add(dt);
                break;
              }
              if (!qe.has(dt)) {
                qe.add(dt);
                break;
              }
              a("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", dt);
              break;
            case De:
              var Dt = Pe._payload, Pt = Pe._init;
              ze(Pt(Dt), qe, Me);
              break;
          }
        }
        return qe;
      }
      function Ge(Pe, qe, Me, dt) {
        for (var Dt = null, Pt = 0; Pt < Me.length; Pt++) {
            break;
          }
        }
          }
        }
          }
          }
        }
        }
        }
      }
      function kt(Pe, qe, Me, dt) {
        if (typeof Dt != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          var Pt = Dt.call(Me);
          if (Pt)
            }
        }
          throw new Error("An iterable object provided no iterator.");
            break;
          }
        }
          }
          return Lo;
        }
          }
          }
          return Lo;
        }
        }
        }
        return Lo;
      }
      function nn(Pe, qe, Me, dt) {
        if (qe !== null && qe.tag === T) {
          var Dt = S(qe, Me);
          return Dt.return = Pe, Dt;
        }
        return Pt.return = Pe, Pt;
      }
      function Yt(Pe, qe, Me, dt) {
        for (var Dt = Me.key, Pt = qe; Pt !== null; ) {
          if (Pt.key === Dt) {
              if (Pt.tag === E) {
              }
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            }
            break;
          } else
            l(Pe, Pt);
          Pt = Pt.sibling;
        }
        } else {
        }
      }
        for (var Dt = Me.key, Pt = qe; Pt !== null; ) {
          if (Pt.key === Dt)
            if (Pt.tag === w && Pt.stateNode.containerInfo === Me.containerInfo && Pt.stateNode.implementation === Me.implementation) {
            } else {
              break;
            }
          else
            l(Pe, Pt);
          Pt = Pt.sibling;
        }
      }
        if (Dt && (Me = Me.props.children), typeof Me == "object" && Me !== null) {
          switch (Me.$$typeof) {
              return L(Yt(Pe, qe, Me, dt));
            case De:
          }
            return Ge(Pe, qe, Me, dt);
            return kt(Pe, qe, Me, dt);
        }
      }
    }
      if (i !== null && l.child !== i.child)
        throw new Error("Resuming work not yet implemented.");
      if (l.child !== null) {
      }
    }
    }
    }
    }
    }
    }
    }
          break;
      }
    }
    }
        if (R !== null) {
          for (var L = R.firstContext; L !== null; ) {
            if (L.context === l) {
                if (ae !== null) {
                  var le = ae.shared, Te = le.pending;
                  Te === null ? Z.next = Z : (Z.next = Te.next, Te.next = Z), le.pending = Z;
                }
              }
              break;
            }
            L = L.next;
          }
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
        } else
        if (S !== null)
        else
            if (S === i) {
              S = null;
              break;
            }
            var Ge = S.sibling;
            if (Ge !== null) {
              Ge.return = S.return, S = Ge;
              break;
            }
            S = S.return;
          }
      }
    }
      }
    }
      var l = i._currentValue;
          context: i,
          memoizedValue: l,
          next: null
        };
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            lanes: it,
          };
        } else
      }
      return l;
    }
    }
            l.interleaved = null;
            if (S !== null) {
              var R = S.next;
            }
          }
        }
      }
    }
      var S = l.interleaved;
    }
      var S = l.interleaved;
    }
      var S = l.interleaved;
        return R;
      } else
        return null;
    }
      var l = {
        baseState: i.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: it
        },
        effects: null
      };
      i.updateQueue = l;
    }
        var S = {
        };
        l.updateQueue = S;
      }
    }
        eventTime: i,
        lane: l,
        payload: null,
        callback: null,
        next: null
      };
    }
        return null;
        var R = S.pending;
      } else
    }
          var R = S.lanes;
        }
      }
    }
            do {
              var ae = {
                eventTime: Z.eventTime,
                lane: Z.lane,
                tag: Z.tag,
                payload: Z.payload,
                callback: Z.callback,
                next: null
              };
              L === null ? R = L = ae : (L.next = ae, L = ae), Z = Z.next;
            } while (Z !== null);
            L === null ? R = L = l : (L.next = l, L = l);
          } else
            R = L = l;
            baseState: S.baseState,
            firstBaseUpdate: R,
            lastBaseUpdate: L,
            shared: S.shared,
            effects: S.effects
          return;
        }
      }
    }
          if (typeof L == "function") {
            {
                try {
                } finally {
                }
              }
            }
          }
          return L;
        }
          if (typeof Z == "function") {
            {
                try {
                } finally {
                }
              }
            }
          } else
            ae = Z;
        }
      }
    }
      var S = i.updateQueue;
        S.shared.pending = null;
        Z.next = null, L === null ? R = ae : L.next = ae, L = Z;
        var le = i.alternate;
        if (le !== null) {
          var Te = le.updateQueue, xe = Te.lastBaseUpdate;
          xe !== L && (xe === null ? Te.firstBaseUpdate = ae : xe.next = ae, Te.lastBaseUpdate = Z);
        }
      }
      if (R !== null) {
        do {
            if (nn !== null) {
              var qe = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                tag: Yt.tag,
                payload: Yt.payload,
                callback: Yt.callback,
                next: null
              };
              nn = nn.next = qe;
            }
            var Me = Yt.callback;
            if (Me !== null && // If the update was already committed, we should not queue its
            // callback again.
              var dt = S.effects;
              dt === null ? S.effects = [Yt] : dt.push(Yt);
            }
          } else {
            var Pe = {
              tag: Yt.tag,
              payload: Yt.payload,
              callback: Yt.callback,
              next: null
            };
          }
          if (Yt = Yt.next, Yt === null) {
              break;
            Dt.next = null, Yt = Pt, S.lastBaseUpdate = Dt, S.shared.pending = null;
          }
        } while (!0);
          do
        } else R === null && (S.shared.lanes = it);
      }
    }
      if (typeof i != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + i));
      i.call(l);
    }
    }
    }
        }
    }
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return i;
    }
      return i;
    }
    }
    }
      return i;
    }
    }
    }
      return (i & l) !== 0;
    }
    }
    }
      return i | l;
    }
    }
    }
    }
      for (var l = i; l !== null; ) {
              return l;
          }
        } else if (l.tag === q && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        l.memoizedProps.revealOrder !== void 0) {
          var S = (l.flags & Xt) !== Qt;
          if (S)
            return l;
        } else if (l.child !== null) {
          l.child.return = l, l = l.child;
          continue;
        }
        if (l === i)
          return null;
        for (; l.sibling === null; ) {
          if (l.return === null || l.return === i)
            return null;
          l = l.return;
        }
        l.sibling.return = l.return, l = l.sibling;
      }
      return null;
    }
      /*   */
      0
      /* */
      1
      /*  */
      2
      /*    */
      4
      /*   */
      8
        l._workInProgressVersionPrimary = null;
      }
    }
    }
      {
        var i = Qe;
      }
    }
    function xt() {
      {
        var i = Qe;
      }
    }
    }
      {
          }
          a(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        }
      }
    }
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
        return !1;
      if (l === null)
        return a("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", Qe), !1;
      i.length !== l.length && a(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, Qe, "[" + l.join(", ") + "]", "[" + i.join(", ") + "]");
          return !1;
      return !0;
    }
        do {
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      }
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return L;
    }
    }
    }
          var l = i.queue;
          l !== null && (l.pending = null), i = i.next;
        }
      }
    }
      var i = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
    }
      var i;
        l !== null ? i = l.memoizedState : i = null;
      } else
      else {
        if (i === null)
          throw new Error("Rendered more hooks than during the previous render.");
          next: null
        };
      }
    }
      return {
        lastEffect: null,
        stores: null
      };
    }
      return typeof l == "function" ? l(i) : l;
    }
      var R = {
        pending: null,
        interleaved: null,
        lanes: it,
        dispatch: null,
        lastRenderedReducer: i,
        lastRenderedState: S
      };
    }
      if (S === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      S.lastRenderedReducer = i;
        if (L !== null) {
        }
      }
      if (L !== null) {
        do {
          var kt = Ge.lane;
            if (ze !== null) {
              var Yt = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                action: Ge.action,
                hasEagerState: Ge.hasEagerState,
                eagerState: Ge.eagerState,
                next: null
              };
              ze = ze.next = Yt;
            }
            if (Ge.hasEagerState)
              Te = Ge.eagerState;
            else {
            }
          } else {
            var nn = {
              lane: kt,
              action: Ge.action,
              hasEagerState: Ge.hasEagerState,
              eagerState: Ge.eagerState,
              next: null
            };
          }
          Ge = Ge.next;
        } while (Ge !== null && Ge !== le);
      }
        do {
          var qe = Pe.lane;
      } else L === null && (S.lanes = it);
      var Me = S.dispatch;
    }
      if (S === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      S.lastRenderedReducer = i;
      if (L !== null) {
        S.pending = null;
        var Z = L.next, ae = Z;
        do {
          var le = ae.action;
        } while (ae !== Z);
      }
    }
    }
    }
      if (L) {
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
      } else {
        }
        if (Z === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      }
      S.memoizedState = R;
      var ae = {
        value: R,
        getSnapshot: l
      };
    }
        var L = l();
      }
      var ae = S.queue;
      // checking whether we scheduled a subscription effect above.
        if (le === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
      }
      return R;
    }
        getSnapshot: l,
      if (S === null)
      else {
        var R = S.stores;
      }
    }
    }
      };
    }
      try {
      } catch {
        return !0;
      }
    }
    }
      typeof i == "function" && (i = i()), l.memoizedState = l.baseState = i;
        pending: null,
        interleaved: null,
        lanes: it,
        dispatch: null,
        lastRenderedState: i
      };
    }
    }
    }
      var S = {
        tag: i,
        create: l,
        // Circular
        next: null
      if (R === null)
      else {
        var L = R.lastEffect;
        if (L === null)
          R.lastEffect = S.next = S;
        else {
        }
      }
      return S;
    }
      {
          current: i
        };
      }
    }
      return l.memoizedState;
    }
            return;
          }
        }
      }
    }
    }
    }
    }
    }
    }
    }
      if (typeof l == "function") {
        };
      } else if (l != null) {
        var S = l;
        S.hasOwnProperty("current") || a("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(S).join(", ") + "}");
        var R = i();
        return S.current = R, function() {
          S.current = null;
        };
      }
    }
      typeof l != "function" && a("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", l !== null ? typeof l : "null");
    }
      typeof l != "function" && a("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", l !== null ? typeof l : "null");
    }
    }
    }
        var R = S[1];
          return S[0];
      }
    }
    }
        var R = S[1];
          return S[0];
      }
      var L = i();
    }
      return l.memoizedState = i, i;
    }
    }
        return l.memoizedState = i, i;
    }
        }
        return l;
      } else
      try {
        i(!1), l();
      } finally {
          var L = R._updatedFibers.size;
          L > 10 && s("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), R._updatedFibers.clear();
        }
      }
    }
      } else {
      }
    }
      return l;
    }
      typeof arguments[3] == "function" && a("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      else {
        if (R !== null) {
        }
      }
    }
      typeof arguments[3] == "function" && a("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      else {
        var R = i.alternate;
        if (i.lanes === it && (R === null || R.lanes === it)) {
          var L = l.lastRenderedReducer;
          if (L !== null) {
            try {
              if (S.hasEagerState = !0, S.eagerState = ae, lt(ae, Z)) {
                return;
              }
            } catch {
            } finally {
            }
          }
        }
        if (le !== null) {
        }
      }
    }
      var l = i.alternate;
      unstable_isNewReconciler: te
    {
        a("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        a("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          try {
          } finally {
          }
        },
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          Qe = "useMemo", xt();
          try {
          } finally {
          }
        },
          Qe = "useReducer", xt();
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          Qe = "useState", xt();
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
          return Qe = "useDebugValue", xt(), void 0;
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
          return Qe = "useMutableSource", xt(), void 0;
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          Qe = "useMemo", xt();
          try {
          } finally {
          }
        },
          Qe = "useReducer", xt();
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          Qe = "useState", xt();
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
          return Qe = "useMutableSource", xt(), void 0;
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          Qe = "useMemo", xt();
          try {
          } finally {
          }
        },
          Qe = "useReducer", xt();
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          Qe = "useState", xt();
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
          return Qe = "useMutableSource", xt(), void 0;
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          try {
          } finally {
          }
        },
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          try {
          } finally {
          }
        },
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
        readContext: function(i) {
        },
        useCallback: function(i, l) {
        },
        useContext: function(i) {
        },
        useEffect: function(i, l) {
        },
        },
        useInsertionEffect: function(i, l) {
        },
        useLayoutEffect: function(i, l) {
        },
        useMemo: function(i, l) {
          try {
          } finally {
          }
        },
          try {
          } finally {
          }
        },
        useRef: function(i) {
        },
        useState: function(i) {
          var l = It.current;
          try {
          } finally {
            It.current = l;
          }
        },
        useDebugValue: function(i, l) {
        },
        useDeferredValue: function(i) {
        },
        useTransition: function() {
        },
        },
        },
        useId: function() {
        },
        unstable_isNewReconciler: te
      };
    }
    }
    }
    }
    }
    }
    }
    }
    }
      }
    }
              return;
              S.effectDuration += l;
              return;
          }
        }
      }
    }
              return;
              S !== null && (S.passiveEffectDuration += l);
              return;
          }
        }
      }
    }
    }
    }
      for (var l = i.child; l; )
        i.actualDuration += l.actualDuration, l = l.sibling;
    }
      if (i && i.defaultProps) {
      }
      return l;
    }
    {
        if (!(i === null || typeof i == "function")) {
        }
        if (l === void 0) {
        }
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    }
      {
          try {
          } finally {
          }
        }
      }
      if (i.memoizedState = L, i.lanes === it) {
      }
    }
      },
      },
      enqueueForceUpdate: function(i, l) {
      }
    };
        {
            try {
            } finally {
            }
          }
        }
        return Z;
      }
    }
      {
        // this one.

        // this one.

      }
    }
    }
      if ("contextType" in l) {
          // Allow null for conditional declaration
          L === null || L !== void 0 && L.$$typeof === ye && L._context === void 0
        );
          var Z = "";
        }
      }
      if (typeof L == "object" && L !== null)
      else {
        var ae = l.contextTypes;
      }
        try {
        } finally {
        }
      }
      var Te = i.memoizedState = le.state !== null && le.state !== void 0 ? le.state : null;
      {
        if (typeof l.getDerivedStateFromProps == "function" && Te === null) {
        }
        if (typeof l.getDerivedStateFromProps == "function" || typeof le.getSnapshotBeforeUpdate == "function") {

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
  ` + ze : "", Ge !== null ? `
  ` + Ge : ""));
          }
        }
      }
    }
    }
      var S = l.state;
        {
        }
      }
    }
      var S = i.stateNode;
      var R = l.contextType;
      if (typeof R == "object" && R !== null)
      else {
      }
      {
        }
      }
      S.state = i.memoizedState;
      var Z = l.getDerivedStateFromProps;
      }
    }
      var S = i.stateNode, R = i.memoizedProps;
      S.props = R;
      else {
      }
      var le = l.getDerivedStateFromProps, Te = typeof le == "function" || typeof S.getSnapshotBeforeUpdate == "function";
        if (typeof S.componentDidMount == "function") {
        }
        return !1;
      }
      if (Ge) {
        if (!Te && (typeof S.UNSAFE_componentWillMount == "function" || typeof S.componentWillMount == "function") && (typeof S.componentWillMount == "function" && S.componentWillMount(), typeof S.UNSAFE_componentWillMount == "function" && S.UNSAFE_componentWillMount()), typeof S.componentDidMount == "function") {
        }
      } else {
        if (typeof S.componentDidMount == "function") {
        }
      }
    }
      var R = l.stateNode;
      if (typeof le == "object" && le !== null)
      else {
      }
      var Ge = l.memoizedState, kt = R.state = Ge;
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      re;
    }
      return {
        value: i,
        source: l,
        digest: null
      };
    }
      return {
        value: i,
        source: null,
        digest: l ?? null
      };
    }
      return !0;
    }
      try {
          return;
            return;
        }
          ae = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          ae = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + le + ".");
        }
        var Te = Z + `
` + L + `

` + ("" + ae);
        console.error(Te);
      } catch (xe) {
        setTimeout(function() {
          throw xe;
        });
      }
    }
        element: null
      };
      var S = l.value;
    }
      var S = i.type.getDerivedStateFromError;
      if (typeof S == "function") {
        var R = l.value;
          return S(R);
        };
      }
      var L = i.stateNode;
        var Z = l.value, ae = l.stack;
        this.componentDidCatch(Z, {
          componentStack: ae !== null ? ae : ""
    }
      }
    }
      var S = i.updateQueue;
      if (S === null) {
        var R = /* @__PURE__ */ new Set();
      } else
    }
      }
    }
      var l = i;
      do {
          return l;
        l = l.return;
      } while (l !== null);
      return null;
    }
        if (i === l)
        else {
            if (R === null)
            else {
            }
          }
        }
        return i;
      }
    }
        if (L !== null) {
          return;
        } else {
            return;
          }
        }
        if (Z !== null) {
          return;
        }
      }
      var ae = l;
      do {
        switch (ae.tag) {
            return;
          }
              return;
            }
            break;
        }
        ae = ae.return;
      } while (ae !== null);
    }
      return null;
    }
    }
    }
      if (l.type !== l.elementType) {
          R,
          // Resolved props
          "prop",
        );
      }
      {
          try {
          } finally {
          }
        }
      }
    }
      if (i === null) {
          var L = R;
        }
        {
            // Resolved props
            "prop",
          }
        }
        return ae.ref = l.ref, ae.return = l, l.child = ae, ae;
      }
      {
          Te,
          // Resolved props
          "prop",
        );
      }
      }
      return kt.ref = l.ref, kt.return = l, l.child = kt, kt;
    }
      if (l.type !== l.elementType) {
        var R = l.elementType;
        if (R.$$typeof === De) {
          try {
          } catch {
            R = null;
          }
          var ae = R && R.propTypes;
            ae,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
          );
        }
      }
      if (i !== null) {
        var le = i.memoizedProps;
        l.type === i.type)
      }
    }
          var L = {
            baseLanes: it,
            cachePool: null,
            transitions: null
          };
          var Te = {
            baseLanes: it,
            cachePool: null,
            transitions: null
          };
          l.memoizedState = Te;
        } else {
          if (R !== null) {
            var ae = R.baseLanes;
          } else
          var le = {
            baseLanes: Z,
            transitions: null
          };
        }
      else {
      }
    }
    }
    }
      {
        {
        }
      }
      var S = l.pendingProps, R = S.children;
    }
    }
      if (l.type !== l.elementType) {
          R,
          // Resolved props
          "prop",
        );
      }
      var L;
      {
      }
      var Z, ae;
      {
          try {
          } finally {
          }
        }
      }
    }
      {
          case !1: {
            R.updater.enqueueSetState(R, Z, null);
            break;
          }
          case !0: {
            break;
          }
        }
        if (l.type !== l.elementType) {
            xe,
            // Resolved props
            "prop",
          );
        }
      }
      var ze = l.stateNode, Ge;
      {
        var nn = l.stateNode;
      }
      return kt;
    }
      var L = (l.flags & Xt) !== Qt;
      var Z;
      else {
        {
            try {
            } finally {
            }
          }
        }
      }
    }
      var l = i.stateNode;
    }
        throw new Error("Should have a current fiber. This is a bug in React.");
      var L = l.memoizedState;
      l.stateNode;
      if (S.isDehydrated) {
        var Z = {
          isDehydrated: !1,
          cache: L.cache,
          pendingSuspenseBoundaries: L.pendingSuspenseBoundaries,
          transitions: L.transitions
        }, ae = l.updateQueue;
        } else {
          l.child = xe;
        }
      } else {
      }
      return l.child;
    }
    }
    }
    }
      l.type = Z;
      switch (ae) {
        case f:
        case M:
          if (l.type !== l.elementType) {
            var xe = Z.propTypes;
              xe,
              le,
              // Resolved for outer only
              "prop",
            );
          }
            null,
            l,
            Z,
            // The inner type can have defaults too
          ), Te;
        }
      }
    }
      var R;
    }
      var S = l.pendingProps, R;
      {
      }
      {
        }
      }
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
      ) {
        {
        }
        var xe = !1;
      } else {
          try {
          } finally {
          }
        }
      }
    }
      {
        if (l && l.childContextTypes && a("%s(...): childContextTypes cannot be defined on a function component.", l.displayName || l.name || "Component"), i.ref !== null) {

        }
        if (l.defaultProps !== void 0) {
        }
        if (typeof l.getDerivedStateFromProps == "function") {
        }
        if (typeof l.contextType == "object" && l.contextType !== null) {
        }
      }
    }
      dehydrated: null,
      treeContext: null,
    };
      return {
        baseLanes: i,
        transitions: null
      };
    }
      return {
        transitions: i.transitions
      };
    }
      if (l !== null) {
        var S = l.memoizedState;
        if (S === null)
          return !1;
      }
    }
    }
          if (Z !== null)
        }
        if (R) {
        } else
      } else {
          if (ze !== null)
        }
        if (R) {
        } else {
          return l.memoizedState = null, Pe;
        }
      }
    }
        mode: "visible",
        children: l
      return R.return = i, i.child = R, R;
    }
      var S = i.mode, R = i.child, L = {
        mode: "hidden",
        children: l
    }
    }
    }
        mode: "visible",
      });
      }
      return l.child = L, L;
    }
        mode: "hidden",
      }, ae;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        l.child !== L
      ) {
        var le = l.child;
      } else
      var Te;
    }
    }
      var R = l.mode, L = {
        mode: "visible",
        } else {
          if (l.memoizedState !== null)
            return l.child = i.child, l.flags |= Xt, null;
        }
      else {
            i,
            l,
            L,
            // TODO: When we delete legacy mode, we should make this error argument
            // required — every concurrent mode path that causes hydration to
            // de-opt to client rendering should have an error message.
            null
          );
          {
          }
          var Te;
          Z ? Te = new Error(Z) : Te = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
        }
          if (ze !== null) {
              R.retryLane = Ge;
            }
          }
          l.flags |= Xt, l.child = i.child;
        } else {
          continue;
        }
          return;
            return;
        }
      }
    }
      }
    }
          switch (i.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              a('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', i, i.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              a('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', i, i.toLowerCase());
              break;
            }
            default:
              a('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
              break;
          }
        else
          a('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
    }
    }
      {
          return a("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", S, l, S), !1;
        }
      }
      return !0;
    }
      if ((l === "forwards" || l === "backwards") && i !== void 0 && i !== null && i !== !1)
              return;
        } else {
            if (S)
              for (var R = S.next(), L = 0; !R.done; R = S.next()) {
                  return;
                L++;
              }
          } else
            a('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', l);
        }
    }
      var R = i.memoizedState;
      R === null ? i.memoizedState = {
        isBackwards: l,
        rendering: null,
        renderingStartTime: 0,
        tailMode: S
    }
      if (Z)
      else {
        var ae = i !== null && (i.flags & Xt) !== Qt;
      }
        l.memoizedState = null;
      else
        switch (S) {
          case "forwards": {
              l,
              !1,
              // isBackwards
              Te,
              le,
              R
            );
            break;
          }
          case "backwards": {
                break;
              }
            }
              l,
              !0,
              // isBackwards
              xe,
              null,
              // last
              R
            );
            break;
          }
          case "together": {
              l,
              !1,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            l.memoizedState = null;
        }
      return l.child;
    }
    }
      {
        var Z = l.type.propTypes;
      }
        var ae = L.value;
        } else
      }
      var le = R.children;
    }
      var S = l.pendingProps, R = S.children;
    }
    }
    }
    }
      {
          throw new Error("Cannot swap the root fiber.");
        else {
          if (S === null)
            throw new Error("Expected parent to have a child.");
          for (; S.sibling !== l; )
            if (S = S.sibling, S === null)
              throw new Error("Expected to find the previous sibling.");
        }
      }
    }
    }
      switch (l.tag) {
          break;
        case C:
          break;
          break;
        }
        case w:
          break;
        case I: {
          var S = l.memoizedProps.value, R = l.type._context;
          break;
        }
          {
            {
            }
          }
          break;
          var Z = l.memoizedState;
          if (Z !== null) {
            if (Z.dehydrated !== null)
            var ae = l.child, le = ae.childLanes;
            return Te !== null ? Te.sibling : null;
          } else
          break;
        }
        case q: {
          if (xe) {
            l.flags |= Xt;
          }
          var ze = l.memoizedState;
            break;
          return null;
        }
        case ee:
      }
    }
      if (l._debugNeedsRemount && i !== null)
      if (i !== null) {
        l.type !== i.type)
        else {
          if (!R && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (l.flags & Xt) === Qt)
        }
      }
      switch (l.lanes = it, l.tag) {
        case g:
          var Z = l.elementType;
        }
        case f: {
        }
        }
        case C:
        case T:
        case w:
        case M: {
        }
        case E:
        case O:
        case I:
          if (l.type !== l.elementType) {
            var Pe = Yt.propTypes;
              Pe,
              // Resolved for outer only
              "prop",
            );
          }
        }
        }
        case q:
          break;
      }
      throw new Error("Unknown unit of work tag (" + l.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    }
    }
      for (var S = l.child; S !== null; ) {
        if (S.tag === C || S.tag === T)
        else if (S.tag !== w) {
          if (S.child !== null) {
            S.child.return = S, S = S.child;
            continue;
          }
        }
        if (S === l)
          return;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === l)
            return;
          S = S.return;
        }
        S.sibling.return = S.return, S = S.sibling;
      }
      var R = i.memoizedProps;
      }
    };
        switch (i.tailMode) {
          case "hidden": {
            break;
          }
          case "collapsed": {
            for (var S = i.tail, R = null; S !== null; )
              S.alternate !== null && (R = S), S = S.sibling;
            R === null ? !l && i.tail !== null ? i.tail.sibling = null : i.tail = null : R.sibling = null;
            break;
          }
        }
    }
      if (l) {
          for (var Z = i.selfBaseDuration, ae = i.child; ae !== null; )
          i.treeBaseDuration = Z;
        } else
          for (var le = i.child; le !== null; )
      } else {
          for (var S = i.actualDuration, R = i.selfBaseDuration, L = i.child; L !== null; )
          i.actualDuration = S, i.treeBaseDuration = R;
        } else
      }
    }
        if (i === null) {
            throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
            if (S) {
              var R = l.child;
              R !== null && (l.treeBaseDuration -= R.treeBaseDuration);
            }
          }
          return !1;
        } else {
            if (L) {
            }
          }
          return !1;
        }
      else
    }
        case g:
        case H:
        case f:
        case M:
        case E:
        case O:
          var S = l.type;
        }
          var R = l.stateNode;
            if (L)
            else if (i !== null) {
              // Check if this is a client root
            }
          }
        }
        case C: {
          if (i !== null && l.stateNode != null)
          else {
              if (l.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (Te)
            else {
            }
          }
        }
        case T: {
          if (i && l.stateNode != null) {
            var ze = i.memoizedProps;
          } else {
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
          var Yt = l.memoizedState;
          if (i === null || i.memoizedState !== null && i.memoizedState.dehydrated !== null) {
          }
          if ((l.flags & Xt) !== Qt)
            var qe = l.child;
              var Me = i === null && (l.memoizedProps.unstable_avoidThisFallback !== !0 || !0);
            }
          }
          var dt = l.updateQueue;
            var Dt = l.child;
            Dt !== null && (l.treeBaseDuration -= Dt.treeBaseDuration);
          }
          return null;
        }
        case w:
        case I:
          var Pt = l.type._context;
        }
        case q: {
            else {
              if (!Lo)
                  }
                }
            }
          else {
              } else // The time it took to render last row is greater than the remaining
              // time we have to render. So rendering one more row would likely
              // exceed it.
            }
            else {
            }
          }
          }
        }
          break;
        case ee: {
          if (i !== null) {
          }
        }
        case G:
          return null;
          return null;
      }
      throw new Error("Unknown unit of work tag (" + l.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
          var S = l.flags;
        }
          var R = l.flags;
        }
        case C:
          var L = l.memoizedState;
          if (L !== null && L.dehydrated !== null) {
            if (l.alternate === null)
              throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
          }
        }
        case q:
        case w:
        case I:
          var Z = l.type._context;
        case ee:
        case G:
          return null;
        default:
          return null;
      }
    }
          break;
        }
          break;
        }
        case C: {
          break;
        }
        case w:
          break;
          break;
        case q:
          break;
        case I:
          var S = l.type._context;
          break;
        case ee:
          break;
      }
    }
        throw i;
    }
        try {
        } finally {
        }
      else
        l.componentWillUnmount();
    };
      try {
      }
    }
      try {
      }
    }
      try {
      }
    }
      try {
      }
    }
          try {
              try {
              } finally {
              }
            else
          } catch (S) {
          }
        } else
    }
      try {
      }
    }
    }
      for (; Ut !== null; ) {
        var i = Ut, l = i.child;
      }
    }
      for (; Ut !== null; ) {
        var i = Ut;
        try {
        }
        var l = i.sibling;
        if (l !== null) {
          l.return = i.return, Ut = l;
          return;
        }
        Ut = i.return;
      }
    }
          case f:
          case M:
            break;
            if (l !== null) {
              {
              }
              R.__reactInternalSnapshotBeforeUpdate = L;
            }
            break;
          }
            {
              var Z = i.stateNode;
            }
            break;
          }
          case C:
          case T:
          case w:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
      if (S !== null) {
        var R = S.next, L = R;
        do {
          if ((L.tag & i) === i) {
          }
          L = L.next;
        } while (L !== R);
      }
    }
        do {
          if ((R.tag & i) === i) {
            var L = R.create;
            {
                var Z = void 0;
                var ae = void 0;

It looks like you wrote ` + Z + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + Z + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

              }
            }
          }
          R = R.next;
        } while (R !== S);
      }
    }
    function Uq(i, l) {
        switch (l.tag) {
            var Z = l.return;
            e: for (; Z !== null; ) {
              switch (Z.tag) {
                  var ae = Z.stateNode;
                  break e;
                  var le = Z.stateNode;
                  break e;
              }
              Z = Z.return;
            }
            break;
          }
        }
    }
          case f:
          case M:
                try {
                } finally {
                }
              else
            break;
          }
              if (l === null)
                  try {
                  } finally {
                  }
                else
                  S.componentDidMount();
              else {
                  try {
                  } finally {
                  }
                else
                  S.componentDidUpdate(R, L, S.__reactInternalSnapshotBeforeUpdate);
              }
            break;
          }
            if (Z !== null) {
              var ae = null;
                  case C:
                    break;
                    break;
                }
            }
            break;
          }
          case C: {
            }
            break;
          }
          case T:
            break;
          case w:
            break;
            {
              {
                      break e;
                      Pe.effectDuration += kt;
                      break e;
                  }
                }
              }
            }
            break;
          }
            break;
          }
          case q:
          case K:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
      switch (i.tag) {
        case f:
        case M:
            try {
            } finally {
            }
          else
          break;
        }
          var l = i.stateNode;
          break;
        }
        case C: {
          break;
        }
      }
    }
            try {
            } catch (L) {
            }
          }
            try {
            } catch (L) {
            }
            continue;
          }
        }
          return;
            return;
        }
      }
    }
      var l = i.ref;
      if (l !== null) {
        switch (i.tag) {
          case C:
            break;
          default:
        }
        if (typeof l == "function") {
          var S;
            try {
            } finally {
            }
          else
        } else
      }
    }
      var l = i.alternate;
      l !== null && (l.return = null), i.return = null;
    }
      var l = i.alternate;
      {
        if (i.child = null, i.deletions = null, i.sibling = null, i.tag === C) {
        }
        i.stateNode = null, i._debugOwner = null, i.return = null, i.dependencies = null, i.memoizedProps = null, i.memoizedState = null, i.pendingProps = null, i.stateNode = null, i.updateQueue = null;
      }
    }
      for (var l = i.return; l !== null; ) {
          return l;
        l = l.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    }
      var l = i;
      e: for (; ; ) {
        for (; l.sibling === null; ) {
            return null;
          l = l.return;
        }
            continue e;
          l.child.return = l, l = l.child;
        }
          return l.stateNode;
      }
    }
      switch (l.tag) {
        case C: {
          break;
        }
        case w: {
          break;
        }
        default:
          throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
      if (S) {
        var R = i.stateNode;
        var L = i.child;
        if (L !== null) {
        }
      }
    }
      if (S) {
        var R = i.stateNode;
        var L = i.child;
        if (L !== null) {
        }
      }
    }
      {
            case C: {
              break e;
            }
              break e;
            }
            case w: {
              break e;
            }
          }
        }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    }
        case C:
        case T: {
          {
          }
          return;
        }
          return;
        }
        case w: {
          {
          }
          return;
        }
        case f:
        case M:
              if (Z !== null) {
                var ae = Z.next, le = ae;
                do {
                } while (le !== ae);
              }
            }
          }
          return;
        }
          }
          return;
        }
          return;
        }
          if (
            // TODO: Remove this dead flag
          ) {
          } else
          break;
        }
        default: {
          return;
        }
      }
    }
      i.memoizedState;
    }
          if (S !== null) {
            var R = S.dehydrated;
          }
        }
      }
    }
      var l = i.updateQueue;
      if (l !== null) {
        i.updateQueue = null;
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
          }
        });
      }
    }
    }
          try {
          } catch (Z) {
          }
        }
    }
      switch (i.tag) {
        case f:
        case M:
            try {
            }
              try {
              }
            } else
              try {
              }
          }
          return;
        }
          return;
        }
        case C: {
          {
              var R = i.stateNode;
              try {
              }
            }
              var L = i.stateNode;
              if (L != null) {
                if (i.updateQueue = null, le !== null)
                  try {
                  }
              }
            }
          }
          return;
        }
        case T: {
            if (i.stateNode === null)
              throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
            try {
            }
          }
          return;
        }
            if (ze.isDehydrated)
              try {
              }
          }
          return;
        }
        case w: {
          return;
        }
          var Ge = i.child;
            var kt = Ge.stateNode, nn = Ge.memoizedState, Yt = nn !== null;
            if (kt.isHidden = Yt, Yt) {
            }
          }
            try {
            }
          }
          return;
        }
          if (
            // TODO: Remove this dead flag
          ) {
          } else
            var qe = i.stateNode, Me = i.memoizedState, dt = Me !== null, Dt = i;
              Ut = Dt;
              for (var Pt = Dt.child; Pt !== null; )
            }
          }
          return;
        }
        case q: {
          return;
        }
          return;
        default: {
          return;
        }
      }
    }
      var l = i.flags;
        try {
        }
      }
    }
    }
        var S = Ut, R = S.child;
            continue;
          } else {
                // New root; bubble back up to here and stop.
                l,
            continue;
          }
        }
      }
    }
      for (; Ut !== null; ) {
          try {
          } catch (L) {
          }
        }
          Ut = null;
          return;
        }
        if (R !== null) {
          return;
        }
      }
    }
      for (; Ut !== null; ) {
        switch (l.tag) {
          case f:
          case M:
              try {
              } finally {
              }
            else
            break;
          }
            break;
          }
          case C: {
            break;
          }
            var S = l.memoizedState !== null;
            if (S) {
              continue;
            }
            break;
          }
        }
      }
    }
      for (; Ut !== null; ) {
        var l = Ut;
        if (l === i) {
          Ut = null;
          return;
        }
          return;
        }
        Ut = l.return;
      }
    }
      for (; Ut !== null; ) {
            continue;
          }
        }
      }
    }
      for (; Ut !== null; ) {
        var l = Ut;
        try {
        }
          Ut = null;
          return;
        }
          return;
        }
        Ut = l.return;
      }
    }
    }
      for (; Ut !== null; ) {
        var S = Ut, R = S.child;
      }
    }
      for (; Ut !== null; ) {
        var S = Ut;
          try {
          } catch (L) {
          }
        }
        if (S === i) {
          Ut = null;
          return;
        }
        var R = S.sibling;
        if (R !== null) {
          R.return = S.return, Ut = R;
          return;
        }
        Ut = S.return;
      }
    }
      switch (l.tag) {
        case f:
        case M:
            try {
            } finally {
            }
          } else
          break;
        }
      }
    }
    }
      for (; Ut !== null; ) {
        var i = Ut, l = i.child;
            }
            {
              var R = i.alternate;
              if (R !== null) {
                var L = R.child;
                if (L !== null) {
                  R.child = null;
                  do {
                  } while (L !== null);
                }
              }
            }
            Ut = i;
          }
        }
      }
    }
      for (; Ut !== null; ) {
        var i = Ut;
        var l = i.sibling;
        if (l !== null) {
          l.return = i.return, Ut = l;
          return;
        }
        Ut = i.return;
      }
    }
      switch (i.tag) {
        case f:
        case M:
          break;
        }
      }
    }
      for (; Ut !== null; ) {
      }
    }
      for (; Ut !== null; ) {
          Ut = null;
          return;
        }
          return;
        }
      }
    }
      switch (i.tag) {
        case f:
        case M:
          break;
        }
      }
    }
      switch (i.tag) {
        case f:
        case M:
          try {
          }
          break;
        }
          var l = i.stateNode;
          try {
            l.componentDidMount();
          }
          break;
        }
      }
    }
      switch (i.tag) {
        case f:
        case M:
          try {
          } catch (l) {
          }
          break;
        }
      }
    }
      switch (i.tag) {
        case f:
        case M:
          try {
          }
          break;
        }
          var l = i.stateNode;
          break;
        }
      }
    }
      switch (i.tag) {
        case f:
        case M:
          try {
          } catch (l) {
          }
      }
    }
    if (typeof Symbol == "function" && Symbol.for) {
    }
        return i();
      });
    }
      {
        var l = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
      }
    }
      {
        var i = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
      }
    }
      /*             */
      0
      /*               */
      1
      /*                */
      2
      /*                */
      4
    }
    }
    }
    }
      var l = i.mode;
        }
      }
        return S;
      return R;
    }
      var l = i.mode;
    }
    }
    }
      return (
        // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
        // decided not to enable it.
      );
    }
        return;
      }
      if (R === S && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
        return;
      }
      var L;
        }), L = null;
      else {
            break;
            break;
          case Us:
            break;
          default:
            break;
        }
      }
      i.callbackPriority = S, i.callbackNode = L;
    }
        throw new Error("Should not already be working.");
        return null;
      if (S === it)
        return null;
        else {
            }
            }
          }
        }
      }
    }
      }
      }
      return S;
    }
    }
      switch (l) {
          throw new Error("Root did not complete. This is a bug in React.");
          break;
        }
              if (S !== it)
                break;
              var R = i.suspendedLanes;
                break;
              }
              break;
            }
          }
          break;
        }
            break;
            if (ae > 10) {
              break;
            }
          }
          break;
        }
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
      for (var l = i; ; ) {
                try {
                    return !1;
                } catch {
                  return !1;
                }
              }
          }
        }
        var Z = l.child;
          Z.return = l, l = Z;
          continue;
        }
        if (l === i)
          return !0;
        for (; l.sibling === null; ) {
          if (l.return === null || l.return === i)
            return !0;
          l = l.return;
        }
        l.sibling.return = l.return, l = l.sibling;
      }
      return !0;
    }
    }
        throw new Error("Should not already be working.");
        throw new Error("Root did not complete. This is a bug in React.");
      var R = i.current.alternate;
    }
    }
      try {
        return i(l);
      } finally {
      }
    }
      try {
      } finally {
      }
    }
      try {
      } finally {
      }
    }
    }
    }
    }
      i.finishedWork = null, i.finishedLanes = it;
        }
    }
      do {
        try {
            return;
          }
            } else
        } catch (S) {
          continue;
        }
        return;
      } while (!0);
    }
    }
    }
    }
    }
    }
    }
    }
          var S = i.memoizedUpdaters;
        }
      }
      do
        try {
          break;
        } catch (R) {
        }
      while (!0);
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          var S = i.memoizedUpdaters;
        }
      }
      do
        try {
          break;
        } catch (R) {
        }
      while (!0);
    }
    }
      var l = i.alternate;
    }
      var l = i;
      do {
          var S = void 0;
            return;
          }
        } else {
          if (R !== null) {
            return;
          }
            l.actualDuration = L;
          }
          else {
            return;
          }
        }
        var Z = l.sibling;
        if (Z !== null) {
          return;
        }
      } while (l !== null);
    }
      try {
      } finally {
      }
      return null;
    }
      do
        throw new Error("Should not already be working.");
      var S = i.finishedWork, R = i.finishedLanes;
      if (R === it && a("root.finishedLanes should not be empty during a commit. This is a bug in React."), i.finishedWork = null, i.finishedLanes = it, S === i.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      })));
      } else
          var Ge = l[ze], kt = Ge.stack, nn = Ge.digest;
            componentStack: kt,
            digest: nn
          });
        }
      }
    }
        try {
        } finally {
        }
      }
      return !1;
    }
      }));
    }
        return !1;
        throw new Error("Cannot flush passive effects while already rendering.");
      {
        for (var R = 0; R < S.length; R++) {
          var L = S[R];
        }
      }
      {
      }
      return !0;
    }
    }
    }
    }
    }
        return;
      }
          return;
            return;
          }
        }
      }
      a(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

    }
    }
    }
    }
      switch (i.tag) {
          var S = i.memoizedState;
          break;
        case q:
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
    }
    }
    }
    }
    }
      }
    }
      {
          return;
        var l = i.tag;
          return;
            return;
        } else
        try {
        } finally {
        }
      }
    }
    {
        try {
        } catch (R) {
            throw R;
            typeof S == "object" && S !== null && S._suppressLogging && typeof R == "object" && R !== null && !R._suppressLogging && (R._suppressLogging = !0);
          }
          throw R;
        }
      };
    }
        switch (i.tag) {
          case f:
          case M:
            }
            break;
          }
            break;
          }
        }
    }
        });
      }
    }
      {
      }
    }
    }
    }
      {
            return;
          return;
          try {

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

          } finally {
          }
        }
      }
    }

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    }
    };
      {
          return i;
        return l === void 0 ? i : l.current;
      }
    }
    }
      {
          return i;
        if (l === void 0) {
          if (i != null && typeof i.render == "function") {
                $$typeof: Ye,
              };
            }
          }
          return i;
        }
        return l.current;
      }
    }
      {
          return !1;
        switch (i.tag) {
            break;
          }
          case f: {
            break;
          }
          case M: {
            (R === Ye || R === De) && (S = !0);
            break;
          }
            break;
          }
          default:
            return !1;
        }
        if (S) {
            return !0;
        }
        return !1;
      }
    }
      {
          return;
      }
    }
      {
          return;
        });
      }
      {
          return;
        });
      }
    };
      {
        switch (L) {
          case f:
            break;
          case M:
            break;
        }
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var ae = !1, le = !1;
        if (Z !== null) {
        }
        }
      }
    }
      {
          return S.current;
        }));
      }
    };
      {
        switch (R) {
          case f:
            break;
          case M:
            break;
        }
        var Z = !1;
      }
    }
      {
          return;
            case C:
              return;
            case w:
              return;
              return;
          }
            throw new Error("Expected to reach root first.");
        }
      }
    }
          continue;
        }
        }
      }
      return !1;
    }
    {
      try {
      } catch {
      }
    }
    }
    };
      var l = i.prototype;
      return !!(l && l.isReactComponent);
    }
    }
      if (typeof i == "function")
      if (i != null) {
        var l = i.$$typeof;
        if (l === Ye)
          return M;
      }
      return g;
    }
        case g:
        case f:
          break;
          break;
        case M:
          break;
      }
    }
        i.childLanes = it, i.lanes = l, i.child = null, i.subtreeFlags = Qt, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null, i.selfBaseDuration = 0, i.treeBaseDuration = 0;
      else {
      }
      return i;
    }
    }
      if (typeof i == "function")
      else if (typeof i == "string")
        L = C;
      else
        e: switch (i) {
          case Yi:
          case ft:
          case Ct:
          case Bt:
          case jt:
          case Re:
          case Kt:
          case Ln:
          case Je:
          default: {
            if (typeof i == "object" && i !== null)
              switch (i.$$typeof) {
                  L = I;
                  break e;
                case ye:
                  break e;
                case Ye:
                  break e;
                  break e;
                case De:
                  break e;
              }
            var Z = "";
            {
              (i === void 0 || typeof i == "object" && i !== null && Object.keys(i).length === 0) && (Z += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
              ae && (Z += `

Check the render method of \`` + ae + "`.");
            }
            throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (i == null ? i : typeof i) + "." + Z));
          }
        }
    }
    }
    }
      typeof i.id != "string" && a('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof i.id);
        effectDuration: 0,
        passiveEffectDuration: 0
      }, S;
    }
    }
    }
      var R = {
        isHidden: !1
      };
      return S.stateNode = R, S;
    }
    }
      return i.elementType = "DELETED", i;
    }
      return l.stateNode = i, l;
    }
        containerInfo: i.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: i.implementation
      }, S;
    }
    }
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
          R.push(/* @__PURE__ */ new Set());
      }
      switch (l) {
          break;
          break;
      }
    }
      le.current = Te, Te.stateNode = le;
      {
        var xe = {
          cache: null,
          // not enabled yet
          transitions: null,
          pendingSuspenseBoundaries: null
        };
        Te.memoizedState = xe;
      }
    }
        // This tag allow us to uniquely identify this as a React Portal
        children: i,
        containerInfo: l,
      };
    }
      if (!i)
      }
    }
      {
          if (typeof i.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
        }
        if (S === null)
          return null;
            try {
            } finally {
            }
          }
        }
        return S.stateNode;
      }
    }
      var Z = !1, ae = null;

      Z.payload = {
        element: i
    }
      var l = i.current;
      if (!l.child)
        return null;
      switch (l.child.tag) {
        case C:
          return l.child.stateNode;
        default:
          return l.child.stateNode;
      }
    }
      switch (i.tag) {
          var l = i.stateNode;
          }
          break;
        }
            if (S !== null) {
            }
          });
          break;
        }
      }
    }
    }
    }
        }
      }
    }
        }
      }
    }
      return l === null ? null : l.stateNode;
    }
      return null;
    };
    }
      return !1;
    };
    }
    {
        } else
            // $FlowFixMe number or string is fine here
            i[S],
            l,
          );
        return R;
          s("copyWithRename() expects paths of the same length");
          return;
        } else
              s("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
      };
        if (S !== null) {
        if (S !== null) {
      };
    }
      return l === null ? null : l.stateNode;
    }
      return null;
    }
    }
        bundleType: i.bundleType,
        version: i.version,
        rendererPackageName: i.rendererPackageName,
        rendererConfig: i.rendererConfig,
        // React Refresh
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
      });
    }
      // In modern browsers, reportError will dispatch an error event,
      // emulating an uncaught JavaScript error.
      reportError
    ) : function(i) {
      console.error(i);
    };
      this._internalRoot = i;
    }
      var l = this._internalRoot;
      if (l === null)
        throw new Error("Cannot update an unmounted root.");
      {
        }
      }
      typeof arguments[0] == "function" && a("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
      var i = this._internalRoot;
      if (i !== null) {
        this._internalRoot = null;
        var l = i.containerInfo;
      }
    };
        throw new Error("createRoot(...): Target container is not a DOM element.");

  let root = createRoot(domContainer);
    }
      this._internalRoot = i;
    }
    }
        throw new Error("hydrateRoot(...): Target container is not a DOM element.");
        for (var le = 0; le < S.length; le++) {
          var Te = S[le];
        }
    }
    }
    }
    }
        l && l.parentNode !== i && a("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
      }
    };
    }
    }
      if (S) {
            R.call(xe);
          };
        }
          l,
          i,
          null,
          // hydrationCallbacks
          !1,
          // isStrictMode
          !1,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
        );
      } else {
        for (var Z; Z = i.lastChild; )
          i.removeChild(Z);
            ae.call(xe);
          };
        }
          i,
          null,
          // hydrationCallbacks
          !1,
          // isStrictMode
          !1,
          // concurrentUpdatesByDefaultOverride,
          "",
          // identifierPrefix
        );
        }), le;
      }
    }
      i !== null && typeof i != "function" && a("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", l, i);
    }
      if (!R)
      else {
        if (L = R, typeof S == "function") {
          S = function() {
          };
        }
      }
    }
      {
        if (l !== null && l.stateNode !== null) {
        }
      }
    }
        throw new Error("Target container is not a DOM element.");
      {
      }
    }
        throw new Error("Target container is not a DOM element.");
      {
      }
    }
        throw new Error("Target container is not a DOM element.");
        throw new Error("parentComponent must be a valid React Component");
    }
        throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
      {
        l && a("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
      }
      if (i._reactRootContainer) {
        {
        }
          });
        }), !0;
      } else {
        {
          R && a("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", L ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
        }
        return !1;
      }
    }
    Map.prototype == null || typeof Map.prototype.forEach != "function" || typeof Set != "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
        throw new Error("Target container is not a DOM element.");
    }
    }
      usingClientEntryPoint: !1,
      // Keep in sync with ReactTestUtils.js.
      // This is an array for better minification.
    };
    }
    }
    }
      bundleType: 1,
      rendererPackageName: "react-dom"
    });
You might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq` : ""), "font-weight:bold");
    }
}
  if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function")) {
    if (process.env.NODE_ENV !== "production")
      throw new Error("^_^");
    try {
    } catch (e) {
      console.error(e);
    }
  }
}
if (process.env.NODE_ENV === "production")
else {
    try {
    } finally {
    }
    try {
    } finally {
    }
  };
}
/**
 * @remix-run/router v1.23.0
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
}
(function(e) {
  e.Pop = "POP", e.Push = "PUSH", e.Replace = "REPLACE";
  e === void 0 && (e = {});
  function t(r, o) {
    let {
      pathname: s,
      search: a,
      hash: c
    } = r.location;
      "",
      {
        pathname: s,
        search: a,
        hash: c
      },
      // state defaults to `null` because `window.history.state` does
      o.state && o.state.usr || null,
      o.state && o.state.key || "default"
    );
  }
  function n(r, o) {
  }
}
  if (e === !1 || e === null || typeof e > "u")
    throw new Error(t);
}
  if (!e) {
    typeof console < "u" && console.warn(t);
    try {
      throw new Error(t);
    } catch {
    }
  }
}
  return Math.random().toString(36).substr(2, 8);
}
  return {
    usr: e.state,
    key: e.key,
    idx: t
  };
}
    pathname: typeof e == "string" ? e : e.pathname,
    search: "",
    hash: ""
    state: n,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
  });
}
  let {
    pathname: t = "/",
    search: n = "",
    hash: r = ""
  } = e;
  return n && n !== "?" && (t += n.charAt(0) === "?" ? n : "?" + n), r && r !== "#" && (t += r.charAt(0) === "#" ? r : "#" + r), t;
}
  let t = {};
  if (e) {
    let n = e.indexOf("#");
    n >= 0 && (t.hash = e.substr(n), e = e.substr(0, n));
    let r = e.indexOf("?");
    r >= 0 && (t.search = e.substr(r), e = e.substr(0, r)), e && (t.pathname = e);
  }
  return t;
}
  r === void 0 && (r = {});
  let {
    window: o = document.defaultView,
    v5Compat: s = !1
  }), ""));
  function g() {
    return (a.state || {
      idx: null
    }).idx;
  }
      action: c,
      location: E.location,
    });
  }
    try {
    }
    s && f && f({
      action: c,
      location: E.location,
      delta: 1
    });
  }
      action: c,
      location: E.location,
      delta: 0
    });
  }
  function T(O) {
  }
  let E = {
    get action() {
      return c;
    },
    get location() {
      return e(o, a);
    },
    listen(O) {
      if (f)
        throw new Error("A history only accepts one active listener");
      };
    },
    createHref(O) {
      return t(o, O);
    },
    createURL: T,
    encodeLocation(O) {
      return {
      };
    },
    push: w,
    replace: C,
    go(O) {
      return a.go(O);
    }
  };
  return E;
}
(function(e) {
  e.data = "data", e.deferred = "deferred", e.redirect = "redirect", e.error = "error";
}
  if (s == null)
    return null;
  let c = null;
  for (let f = 0; c == null && f < a.length; ++f) {
  }
  return c;
}
  t === void 0 && (t = []), n === void 0 && (n = []), r === void 0 && (r = "");
  let o = (s, a, c) => {
    let f = {
      relativePath: c === void 0 ? s.path || "" : c,
      caseSensitive: s.caseSensitive === !0,
      childrenIndex: a,
      route: s
    };
      // Our types know better, but runtime JS may not!
      // @ts-expect-error
      s.index !== !0,
      routesMeta: g
    });
  };
  return e.forEach((s, a) => {
    var c;
    if (s.path === "" || !((c = s.path) != null && c.includes("?")))
      o(s, a);
    else
        o(s, a, f);
  }), t;
}
  let t = e.split("/");
  if (t.length === 0) return [];
  let [n, ...r] = t, o = n.endsWith("?"), s = n.replace(/\?$/, "");
  if (r.length === 0)
    return o ? [s, ""] : [s];
  return c.push(...a.map((f) => f === "" ? s : [s, f].join("/"))), o && c.push(...a), c.map((f) => e.startsWith("/") && f === "" ? "/" : f);
}
}
  let n = e.split("/"), r = n.length;
}
  return e.length === t.length && e.slice(0, -1).every((r, o) => r === t[o]) ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    e[e.length - 1] - t[t.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
  let {
    routesMeta: r
  } = e, o = {}, s = "/", a = [];
  for (let c = 0; c < r.length; ++c) {
      path: f.relativePath,
      caseSensitive: f.caseSensitive,
    }, g), w = f.route;
      return null;
      // TODO: Can this as be avoided?
      params: o,
      route: w
  }
  return a;
}
  typeof e == "string" && (e = {
    path: e,
    caseSensitive: !1,
    end: !0
  });
  if (!o) return null;
  let s = o[0], a = s.replace(/(.)\/+$/, "$1"), c = o.slice(1);
  return {
      let {
        paramName: w,
        isOptional: C
      } = g;
      if (w === "*") {
        a = s.slice(0, s.length - E.length).replace(/(.)\/+$/, "$1");
      }
    }, {}),
    pathname: s,
    pathnameBase: a,
    pattern: e
  };
}
  let r = [], o = "^" + e.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (a, c, f) => (r.push({
    paramName: c,
    isOptional: f != null
  }), f ? "/?([^\\/]+)?" : "/([^\\/]+)"));
  return e.endsWith("*") ? (r.push({
    paramName: "*"
  }), o += e === "*" || e === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$") : n ? o += "\\/*$" : e !== "" && e !== "/" && (o += "(?:(?=\\/|$))"), [new RegExp(o, t ? void 0 : "i"), r];
}
  try {
    return e.split("/").map((t) => decodeURIComponent(t).replace(/\//g, "%2F")).join("/");
  } catch (t) {
  }
}
  if (t === "/") return e;
  if (!e.toLowerCase().startsWith(t.toLowerCase()))
    return null;
  let n = t.endsWith("/") ? t.length - 1 : t.length, r = e.charAt(n);
  return r && r !== "/" ? null : e.slice(n) || "/";
}
  t === void 0 && (t = "/");
  let {
    pathname: n,
    search: r = "",
    hash: o = ""
  return {
  };
}
  let n = t.replace(/\/+$/, "").split("/");
  return e.split("/").forEach((o) => {
    o === ".." ? n.length > 1 && n.pop() : o !== "." && n.push(o);
  }), n.length > 1 ? n.join("/") : "/";
}
  return "Cannot include a '" + e + "' character in a manually specified " + ("`to." + t + "` field [" + JSON.stringify(r) + "].  Please separate it out to the ") + ("`to." + n + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
  return e.filter((t, n) => n === 0 || t.route.path && t.route.path.length > 0);
}
  return t ? n.map((r, o) => o === n.length - 1 ? r.pathname : r.pathnameBase) : n.map((r) => r.pathnameBase);
}
  r === void 0 && (r = !1);
  let o;
  let s = e === "" || o.pathname === "", a = s ? "/" : o.pathname, c;
  if (a == null)
    c = n;
  else {
    if (!r && a.startsWith("..")) {
      let w = a.split("/");
      for (; w[0] === ".."; )
      o.pathname = w.join("/");
    }
  }
}
  return e != null && typeof e.status == "number" && typeof e.statusText == "string" && typeof e.internal == "boolean" && "data" in e;
}
/**
 * React Router v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  outlet: null,
  matches: [],
  isDataRoute: !1
});
  let {
    relative: n
  } = t === void 0 ? {} : t;
    !1,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  let {
    basename: r,
    navigator: o
    hash: s,
    pathname: a,
    search: c
    relative: n
  }), f = a;
    pathname: f,
    search: c,
    hash: s
  });
}
}
    !1,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
}
}
  let {
    isDataRoute: e
}
    !1,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
    basename: t,
    future: n,
    navigator: r
    matches: o
    pathname: s
    c.current = !0;
      return;
    }
  }, [t, r, a, s, e]);
}
  let {
    relative: n
  } = t === void 0 ? {} : t, {
    future: r
    matches: o
    pathname: s
}
}
    !1,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  let {
    navigator: o
    matches: s
  if (process.env.NODE_ENV !== "production") {
    let I = g && g.path || "";

` + ('Please change the parent <Route path="' + I + '"> to <Route ') + ('path="' + (I === "/" ? "*" : I + "/*") + '">.'));
  }
  if (t) {
    var C;
  } else
  let T = w.pathname || "/", E = T;
    E = "/" + T.replace(/^\//, "").split("/").slice(I.length).join("/");
  }
    pathname: E
  });
    params: Object.assign({}, c, I.params),
      // Re-encode pathnames that were decoded inside matchRoutes
      o.encodeLocation ? o.encodeLocation(I.pathname).pathname : I.pathname
    ]),
      // Re-encode pathnames that were decoded inside matchRoutes
      o.encodeLocation ? o.encodeLocation(I.pathnameBase).pathname : I.pathnameBase
    ])
  })), s, n, r);
    value: {
        pathname: "/",
        search: "",
        hash: "",
        state: null,
        key: "default"
      }, w),
    }
}
    padding: "0.5rem",
    backgroundColor: r
  }, s = {
    padding: "2px 4px",
    backgroundColor: r
  }, a = null;
  return process.env.NODE_ENV !== "production" && (console.error("Error handled by React Router default ErrorBoundary:", e), a = /* @__PURE__ */ x.createElement(x.Fragment, null, /* @__PURE__ */ x.createElement("p", null, "💿 Hey developer 👋"), /* @__PURE__ */ x.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ x.createElement("code", {
    style: s
  }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ x.createElement("code", {
    style: s
  }, "errorElement"), " prop on your route."))), /* @__PURE__ */ x.createElement(x.Fragment, null, /* @__PURE__ */ x.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ x.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, t), n ? /* @__PURE__ */ x.createElement("pre", {
    style: o
  }, n) : null, a);
}
  constructor(t) {
    super(t), this.state = {
      location: t.location,
      revalidation: t.revalidation,
      error: t.error
    };
  }
  static getDerivedStateFromError(t) {
    return {
      error: t
    };
  }
  static getDerivedStateFromProps(t, n) {
    return n.location !== t.location || n.revalidation !== "idle" && t.revalidation === "idle" ? {
      error: t.error,
      location: t.location,
      revalidation: t.revalidation
    } : {
      error: t.error !== void 0 ? t.error : n.error,
      location: n.location,
      revalidation: t.revalidation || n.revalidation
    };
  }
  componentDidCatch(t, n) {
    console.error("React Router caught the following error during render", t, n);
  }
  render() {
      value: this.props.routeContext
      value: this.state.error,
      children: this.props.component
    })) : this.props.children;
  }
}
  let {
    routeContext: t,
    match: n,
    children: r
    value: t
  }, r);
}
  var o;
  if (t === void 0 && (t = []), n === void 0 && (n = null), r === void 0 && (r = null), e == null) {
    var s;
    if (!n)
      return null;
    if (n.errors)
      e = n.matches;
    else if ((s = r) != null && s.v7_partialHydration && t.length === 0 && !n.initialized && n.matches.length > 0)
      e = n.matches;
    else
      return null;
  }
  let a = e, c = (o = n) == null ? void 0 : o.errors;
  if (c != null) {
  }
  if (n && r && r.v7_partialHydration)
    for (let g = 0; g < a.length; g++) {
        let {
          loaderData: w,
          errors: C
          break;
        }
      }
    }
    let C, T = !1, E = null, O = null;
      let M;
        routeContext: {
          outlet: g,
          isDataRoute: n != null
        },
        children: M
      });
    };
      location: n.location,
      revalidation: n.revalidation,
      component: E,
      error: C,
      children: I(),
      routeContext: {
        outlet: null,
        isDataRoute: !0
      }
    }) : I();
  }, null);
}
  return e.UseBlocker = "useBlocker", e.UseRevalidator = "useRevalidator", e.UseNavigateStable = "useNavigate", e;
  return e.UseBlocker = "useBlocker", e.UseLoaderData = "useLoaderData", e.UseActionData = "useActionData", e.UseRouteError = "useRouteError", e.UseNavigation = "useNavigation", e.UseRouteLoaderData = "useRouteLoaderData", e.UseMatches = "useMatches", e.UseRevalidator = "useRevalidator", e.UseNavigateStable = "useNavigate", e.UseRouteId = "useRouteId", e;
  return e + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
}
}
}
}
}
  var e;
  return t !== void 0 ? t : (e = n.errors) == null ? void 0 : e[r];
}
  let {
    router: e
    n.current = !0;
  }), x.useCallback(function(o, s) {
      fromRouteId: t
    }, s)));
  }, [e, t]);
}
}
}
}
  let {
    to: t,
    replace: n,
    state: r,
    relative: o
  } = e;
    !1,
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component."
  let {
    future: s,
    static: a
  let {
    matches: c
    pathname: f
    replace: n,
    state: r,
    relative: o
}
}
  let {
    basename: t = "/",
    children: n = null,
    location: r,
    navigator: s,
    static: a = !1,
    future: c
  } = e;
    basename: f,
    navigator: s,
    static: a,
      v7_relativeSplatPath: !1
    }, c)
  }), [f, c, s, a]);
  let {
    pathname: g = "/",
    hash: w = "",
    state: C = null,
    key: T = "default"
  } = r, E = x.useMemo(() => {
    return O == null ? null : {
      location: {
        pathname: O,
        hash: w,
        state: C,
        key: T
      },
      navigationType: o
    };
    children: n,
    value: E
  }));
}
  let {
    children: t,
    location: n
  } = e;
}
new Promise(() => {
});
  t === void 0 && (t = []);
  let n = [];
  return x.Children.forEach(e, (r, o) => {
    if (!/* @__PURE__ */ x.isValidElement(r))
      return;
    let s = [...t, o];
    if (r.type === x.Fragment) {
      return;
    }
    let a = {
      id: r.props.id || s.join("-"),
      caseSensitive: r.props.caseSensitive,
      element: r.props.element,
      Component: r.props.Component,
      index: r.props.index,
      path: r.props.path,
      loader: r.props.loader,
      action: r.props.action,
      errorElement: r.props.errorElement,
      ErrorBoundary: r.props.ErrorBoundary,
      hasErrorBoundary: r.props.ErrorBoundary != null || r.props.errorElement != null,
      shouldRevalidate: r.props.shouldRevalidate,
      handle: r.props.handle,
      lazy: r.props.lazy
    };
  }), n;
}
/**
 * React Router DOM v6.30.1
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n)
        Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
}
  if (e == null) return {};
  var n = {}, r = Object.keys(e), o, s;
  for (s = 0; s < r.length; s++)
    o = r[s], !(t.indexOf(o) >= 0) && (n[o] = e[o]);
  return n;
}
  return e != null && typeof e.tagName == "string";
}
}
}
}
  return !!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey);
}
  return e.button === 0 && // Ignore everything but left clicks
  (!t || t === "_self") && // Let browser handle "target=_blank" etc.
}
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
    } catch {
    }
}
}
  let n, r, o, s, a;
    let c = e.getAttribute("action");
    let c = e.form;
    if (c == null)
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    let f = e.getAttribute("formaction") || c.getAttribute("action");
      let {
        type: g,
      } = e;
      if (g === "image") {
        s.append(w + "x", "0"), s.append(w + "y", "0");
    }
  } else {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
  }
  return s && o === "text/plain" && (a = s, s = void 0), {
    action: r,
    method: n.toLowerCase(),
    encType: o,
    formData: s,
    body: a
  };
}
try {
} catch {
}
  isTransitioning: !1
});
  let {
    basename: t,
    children: n,
    future: r,
    window: o
  } = e, s = x.useRef();
    window: o,
    v5Compat: !0
  }));
  let a = s.current, [c, f] = x.useState({
    action: a.action,
    location: a.location
  }), {
    basename: t,
    children: n,
    location: c.location,
    navigationType: c.action,
    navigator: a,
    future: r
  });
}
process.env.NODE_ENV;
  let {
    onClick: r,
    relative: o,
    reloadDocument: s,
    replace: a,
    state: c,
    target: f,
    preventScrollReset: g,
    basename: C
    try {
    } catch {
    }
    relative: o
    replace: a,
    state: c,
    target: f,
    preventScrollReset: g,
    relative: o,
  });
  function I(M) {
  }
  return (
    // eslint-disable-next-line jsx-a11y/anchor-has-content
      href: T || O,
      onClick: E || s ? r : I,
      ref: n,
      target: f
    }))
  );
});
  let {
    "aria-current": r = "page",
    caseSensitive: o = !1,
    className: s = "",
    end: a = !1,
    style: c,
    to: f,
    children: g
    navigator: E,
    basename: O
  // eslint-disable-next-line react-hooks/rules-of-hooks
    ref: n,
    style: q,
    to: f,
});
  let {
    fetcherKey: n,
    navigate: r,
    reloadDocument: o,
    replace: s,
    state: a,
    action: f,
    relative: g,
    viewTransition: w
    relative: g
    I.preventDefault();
    T(M || I.currentTarget, {
      fetcherKey: n,
      navigate: r,
      replace: s,
      state: a,
      relative: g,
      viewTransition: w
    });
  };
    ref: t,
    method: O,
    action: E,
  }, C));
});
process.env.NODE_ENV;
(function(e) {
  e.UseScrollRestoration = "useScrollRestoration", e.UseSubmit = "useSubmit", e.UseSubmitFetcher = "useSubmitFetcher", e.UseFetcher = "useFetcher", e.useViewTransitionState = "useViewTransitionState";
(function(e) {
  e.UseFetcher = "useFetcher", e.UseFetchers = "useFetchers", e.UseScrollRestoration = "useScrollRestoration";
  return e + " must be used within a data router.  See https://reactrouter.com/v6/routers/picking-a-router.";
}
}
  let {
    target: n,
    replace: r,
    state: o,
    preventScrollReset: s,
    relative: a,
    viewTransition: c
    relative: a
  });
      f(e, {
        replace: w,
        state: o,
        preventScrollReset: s,
        relative: a,
        viewTransition: c
      });
    }
}
  if (typeof document > "u")
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
}
  let {
    router: e
    basename: t
  return x.useCallback(function(r, o) {
    let {
      action: s,
      method: a,
      encType: c,
      formData: f,
    if (o.navigate === !1) {
      e.fetch(g, n, o.action || s, {
        preventScrollReset: o.preventScrollReset,
        formData: f,
        formMethod: o.method || a,
        formEncType: o.encType || c,
        flushSync: o.flushSync
      });
    } else
      e.navigate(o.action || s, {
        preventScrollReset: o.preventScrollReset,
        formData: f,
        formMethod: o.method || a,
        formEncType: o.encType || c,
        replace: o.replace,
        state: o.state,
        fromRouteId: n,
        flushSync: o.flushSync,
        viewTransition: o.viewTransition
      });
  }, [e, t, n]);
}
  let {
    relative: n
  } = t === void 0 ? {} : t, {
    basename: r
    relative: n
  if (e == null) {
    a.search = c.search;
    }
  }
}
  t === void 0 && (t = {});
  let {
    basename: r
    relative: t.relative
  });
  if (!n.isTransitioning)
    return !1;
}
  black: "#000",
  white: "#fff"
  300: "#e57373",
  400: "#ef5350",
  500: "#f44336",
  700: "#d32f2f",
  800: "#c62828"
  50: "#f3e5f5",
  200: "#ce93d8",
  300: "#ba68c8",
  400: "#ab47bc",
  500: "#9c27b0",
  700: "#7b1fa2"
  50: "#e3f2fd",
  200: "#90caf9",
  400: "#42a5f5",
  700: "#1976d2",
  800: "#1565c0"
  300: "#4fc3f7",
  400: "#29b6f6",
  500: "#03a9f4",
  700: "#0288d1",
  900: "#01579b"
  300: "#81c784",
  400: "#66bb6a",
  500: "#4caf50",
  700: "#388e3c",
  800: "#2e7d32",
  900: "#1b5e20"
  300: "#ffb74d",
  400: "#ffa726",
  500: "#ff9800",
  700: "#f57c00",
  900: "#e65100"
  50: "#fafafa",
  100: "#f5f5f5",
  200: "#eeeeee",
  300: "#e0e0e0",
  400: "#bdbdbd",
  500: "#9e9e9e",
  600: "#757575",
  700: "#616161",
  800: "#424242",
  900: "#212121",
  A100: "#f5f5f5",
  A200: "#eeeeee",
  A400: "#bdbdbd",
  A700: "#616161"
};
  const n = new URL(`https://mui.com/production-error/?code=${e}`);
  return t.forEach((r) => n.searchParams.append("args[]", r)), `Minified MUI error #${e}; visit ${n} for the full message.`;
}
function J() {
  return J = Object.assign ? Object.assign.bind() : function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) ({}).hasOwnProperty.call(n, r) && (e[r] = n[r]);
    }
    return e;
  }, J.apply(null, arguments);
}
  if (e.sheet)
    return e.sheet;
  for (var t = 0; t < document.styleSheets.length; t++)
    if (document.styleSheets[t].ownerNode === e)
      return document.styleSheets[t];
}
  var t = document.createElement("style");
  return t.setAttribute("data-emotion", e.key), e.nonce !== void 0 && t.setAttribute("nonce", e.nonce), t.appendChild(document.createTextNode("")), t.setAttribute("data-s", ""), t;
}
  function e(n) {
    var r = this;
    this._insertTag = function(o) {
      var s;
      r.tags.length === 0 ? r.insertionPoint ? s = r.insertionPoint.nextSibling : r.prepend ? s = r.container.firstChild : s = r.before : s = r.tags[r.tags.length - 1].nextSibling, r.container.insertBefore(o, s), r.tags.push(o);
    }, this.isSpeedy = n.speedy === void 0 ? !0 : n.speedy, this.tags = [], this.ctr = 0, this.nonce = n.nonce, this.key = n.key, this.container = n.container, this.prepend = n.prepend, this.insertionPoint = n.insertionPoint, this.before = null;
  }
  var t = e.prototype;
  return t.hydrate = function(r) {
    r.forEach(this._insertTag);
  }, t.insert = function(r) {
    var o = this.tags[this.tags.length - 1];
    if (this.isSpeedy) {
      try {
        s.insertRule(r, s.cssRules.length);
      } catch {
      }
    } else
      o.appendChild(document.createTextNode(r));
    this.ctr++;
  }, t.flush = function() {
    this.tags.forEach(function(r) {
      var o;
      return (o = r.parentNode) == null ? void 0 : o.removeChild(r);
    }), this.tags = [], this.ctr = 0;
  }, e;
}
  return e.trim();
}
  return (e = t.exec(e)) ? e[0] : e;
}
  return e.replace(t, n);
}
  return e.indexOf(t);
}
  return e.charCodeAt(t) | 0;
}
  return e.slice(t, n);
}
  return e.length;
}
  return e.length;
}
  return t.push(e), e;
}
  return e.map(t).join("");
}
}
}
}
}
}
}
}
}
  switch (e) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
}
}
}
}
    ;
}
      case e:
      case 34:
      case 39:
        break;
      case 40:
        break;
      case 92:
        break;
    }
}
      break;
}
}
}
      case 40:
          break;
        }
      case 34:
      case 39:
      case 91:
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        break;
      case 92:
        continue;
      case 47:
          case 42:
          case 47:
            break;
          default:
        }
        break;
      case 123 * E:
      case 125 * E:
      case 59:
      case 0:
        switch (I) {
          case 0:
          case 125:
            O = 0;
          case 59 + g:
            break;
          case 59:
          default:
              if (g === 0)
              else
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    break;
                  default:
                }
        }
        break;
      case 58:
      default:
        if (E < 1) {
          if (I == 123)
            --E;
            continue;
        }
          case 38:
            break;
          case 44:
            break;
          case 64:
            break;
          case 45:
        }
    }
  return s;
}
}
}
}
    n += t(e[o], o, e, t) || "";
  return n;
}
  switch (e.type) {
      if (e.children.length) break;
      return e.return = e.return || e.value;
      return "";
      e.value = e.props.join(",");
  }
}
  return function(n, r, o, s) {
    for (var a = "", c = 0; c < t; c++)
      a += e[c](n, r, o, s) || "";
    return a;
  };
}
  return function(t) {
    t.root || (t = t.return) && e(t);
  };
}
  var t = /* @__PURE__ */ Object.create(null);
  return function(n) {
    return t[n] === void 0 && (t[n] = e(n)), t[n];
  };
}
  var r = -1, o = 44;
  do
      case 0:
        break;
      case 2:
        break;
      case 4:
        if (o === 44) {
          break;
        }
      default:
    }
  return t;
  if (!(t.type !== "rule" || !t.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  t.length < 1)) {
    for (var n = t.value, r = t.parent, o = t.column === r.column && t.line === r.line; r.type !== "rule"; )
      if (r = r.parent, !r) return;
    }
  }
  if (t.type === "decl") {
    var n = t.value;
    // charcode for l
    n.charCodeAt(0) === 108 && // charcode for b
    n.charCodeAt(2) === 98 && (t.return = "", t.value = "");
  }
};
    case 5103:
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
    case 6828:
    case 4268:
    case 6165:
    case 5187:
    case 5443:
    case 4675:
    case 5548:
    case 5292:
    case 6060:
    case 4554:
    case 6187:
    case 5495:
    case 3959:
    case 4968:
    case 4095:
    case 3583:
    case 4068:
    case 2532:
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
        case 109:
        case 102:
        case 115:
      }
      break;
    case 4949:
    case 6444:
        case 107:
        case 101:
      }
      break;
    case 5936:
        case 114:
        case 108:
        case 45:
      }
  }
  return e;
}
  if (t.length > -1 && !t.return) switch (t.type) {
      break;
      })], o);
          case ":read-only":
          case ":read-write":
            })], o);
          case "::placeholder":
            })], o);
        }
        return "";
      });
  }
  var n = t.key;
  if (n === "css") {
    var r = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(r, function(E) {
      var O = E.getAttribute("data-emotion");
      O.indexOf(" ") !== -1 && (document.head.appendChild(E), E.setAttribute("data-s", ""));
    });
  }
  a = t.container || document.head, Array.prototype.forEach.call(
    // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll('style[data-emotion^="' + n + ' "]'),
    function(E) {
      c.push(E);
    }
  );
  {
      g.insert(E);
    };
    };
  }
  var T = {
    key: n,
      key: n,
      container: a,
      nonce: t.nonce,
      speedy: t.speedy,
      prepend: t.prepend,
      insertionPoint: t.insertionPoint
    }),
    nonce: t.nonce,
    inserted: s,
    registered: {},
    insert: f
  };
  return T.sheet.hydrate(c), T;
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
        case t:
            case f:
            case r:
            case s:
            case o:
            default:
                case c:
                case g:
                case T:
                case C:
                case a:
                default:
              }
          }
        case n:
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function M(ce) {
      return typeof ce == "string" || typeof ce == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    }
      if (typeof ce == "object" && ce !== null) {
        var Ce = ce.$$typeof;
        switch (Ce) {
          case t:
            var Ne = ce.type;
            switch (Ne) {
              case f:
              case r:
              case s:
              case o:
                return Ne;
              default:
                var Be = Ne && Ne.$$typeof;
                switch (Be) {
                  case c:
                  case g:
                  case T:
                  case C:
                  case a:
                    return Be;
                  default:
                    return Ce;
                }
            }
          case n:
            return Ce;
        }
      }
    }
    function re(ce) {
    }
    function Q(ce) {
    }
    }
    function ie(ce) {
    }
    function de(ce) {
      return typeof ce == "object" && ce !== null && ce.$$typeof === t;
    }
    function ue(ce) {
    }
    function he(ce) {
    }
    function ge(ce) {
    }
    function fe(ce) {
    }
    function pe(ce) {
    }
    function be(ce) {
    }
    function we(ce) {
    }
    function _e(ce) {
    }
}
  $$typeof: !0,
  render: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0
  $$typeof: !0,
  compare: !0,
  defaultProps: !0,
  displayName: !0,
  propTypes: !0,
  type: !0
  var r = "";
  return n.split(" ").forEach(function(o) {
    e[o] !== void 0 ? t.push(e[o] + ";") : o && (r += o + " ");
  }), r;
}
  var o = t.key + "-" + n.name;
  // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (r === !1 || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  var o = t.key + "-" + n.name;
  if (t.inserted[n.name] === void 0) {
    var s = n;
    do
      t.insert(n === s ? "." + o : "", s, t.sheet, !0), s = s.next;
    while (s !== void 0);
  }
};
  for (var t = 0, n, r = 0, o = e.length; o >= 4; ++r, o -= 4)
    n = e.charCodeAt(r) & 255 | (e.charCodeAt(++r) & 255) << 8 | (e.charCodeAt(++r) & 255) << 16 | (e.charCodeAt(++r) & 255) << 24, n = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16), n ^= /* k >>> r: */
    n >>> 24, t = /* Math.imul(k, m): */
    (n & 65535) * 1540483477 + ((n >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  switch (o) {
    case 3:
      t ^= (e.charCodeAt(r + 2) & 255) << 16;
    case 2:
      t ^= (e.charCodeAt(r + 1) & 255) << 8;
    case 1:
      t ^= e.charCodeAt(r) & 255, t = /* Math.imul(h, m): */
      (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16);
  }
  return t ^= t >>> 13, t = /* Math.imul(h, m): */
  (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16), ((t ^ t >>> 15) >>> 0).toString(36);
}
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  scale: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
  return t.charCodeAt(1) === 45;
  return t != null && typeof t != "boolean";
  switch (t) {
    case "animation":
    case "animationName":
      if (typeof n == "string")
            name: o,
            styles: s,
          }, o;
        });
  }
};
  if (n == null)
    return "";
  var r = n;
  if (r.__emotion_styles !== void 0)
    return r;
  switch (typeof n) {
    case "boolean":
      return "";
    case "object": {
      var o = n;
      if (o.anim === 1)
          name: o.name,
          styles: o.styles,
        }, o.name;
      var s = n;
      if (s.styles !== void 0) {
        var a = s.next;
        if (a !== void 0)
          for (; a !== void 0; )
              name: a.name,
              styles: a.styles,
            }, a = a.next;
        var c = s.styles + ";";
        return c;
      }
    }
    case "function": {
      if (e !== void 0) {
      }
      break;
    }
  }
  var g = n;
  if (t == null)
    return g;
}
  var r = "";
  if (Array.isArray(n))
    for (var o = 0; o < n.length; o++)
  else
    for (var s in n) {
      var a = n[s];
      if (typeof a != "object") {
        var c = a;
      } else if (Array.isArray(a) && typeof a[0] == "string" && (t == null || t[a[0]] === void 0))
        for (var f = 0; f < a.length; f++)
      else {
        switch (s) {
          case "animation":
          case "animationName": {
            break;
          }
          default:
        }
      }
    }
  return r;
}
  if (e.length === 1 && typeof e[0] == "object" && e[0] !== null && e[0].styles !== void 0)
    return e[0];
  var r = !0, o = "";
  var s = e[0];
  if (s == null || s.raw === void 0)
  else {
    var a = s;
    o += a[0];
  }
  for (var c = 1; c < e.length; c++)
      var f = s;
      o += f[c];
    }
  return {
    styles: o,
  };
}
  return t();
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
    key: "css"
  }) : null
);
  return /* @__PURE__ */ x.forwardRef(function(n, r) {
    return t(n, o, r);
  });
  var r = {};
  for (var o in n)
  var n = t.cache, r = t.serialized, o = t.isStringTag;
  }), null;
  var r = e.css;
  typeof r == "string" && t.registered[r] !== void 0 && (r = t.registered[r]);
  a += t.key + "-" + c.name;
  var f = {};
    cache: t,
    serialized: c,
    isStringTag: typeof o == "string"
  }), /* @__PURE__ */ x.createElement(o, f));
  var r = arguments;
    return x.createElement.apply(void 0, r);
  var o = r.length, s = new Array(o);
  for (var a = 2; a < o; a++)
    s[a] = r[a];
  return x.createElement.apply(null, s);
};
(function(e) {
  var t;
  t || (t = e.JSX || (e.JSX = {}));
    var s = t.key + "-global", a = new t.sheet.constructor({
      key: s,
      nonce: t.sheet.nonce,
      container: t.sheet.container,
      speedy: t.sheet.isSpeedy
    }), c = !1, f = document.querySelector('style[data-emotion="' + s + " " + r.name + '"]');
    return t.sheet.tags.length && (a.before = t.sheet.tags[0]), f !== null && (c = !0, f.setAttribute("data-emotion", s), a.hydrate([f])), o.current = [a, c], function() {
      a.flush();
    };
    var s = o.current, a = s[0], c = s[1];
    if (c) {
      s[1] = !1;
      return;
    }
      var f = a.tags[a.tags.length - 1].nextElementSibling;
      a.before = f, a.flush();
    }
    t.insert("", r, a, !1);
  }, [t, r.name]), null;
});
  for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
    t[n] = arguments[n];
}
  return {
    name: t,
    styles: "@keyframes " + t + "{" + e.styles + "}",
    anim: 1,
    toString: function() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
}
  function(e) {
  }
  /* Z+1 */
  return t !== "theme";
  return typeof t == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  var o;
  if (n) {
    var s = n.shouldForwardProp;
    o = t.__emotion_forwardProp && s ? function(a) {
      return t.__emotion_forwardProp(a) && s(a);
    } : s;
  }
  return typeof o != "function" && r && (o = t.__emotion_forwardProp), o;
  var n = t.cache, r = t.serialized, o = t.isStringTag;
  }), null;
  var r = t.__emotion_real === t, o = r && t.__emotion_base || t, s, a;
  n !== void 0 && (s = n.label, a = n.target);
  return function() {
    else {
      var w = g[0];
      for (var C = g.length, T = 1; T < C; T++)
    }
      if (O.theme == null) {
      for (var q in O)
        isStringTag: typeof M == "string"
    });
      value: function() {
        return "." + a;
      }
      }));
    }, E;
  };
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
});
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
        case t:
            case f:
            case r:
            case s:
            case o:
            default:
                case c:
                case g:
                case T:
                case C:
                case a:
                default:
              }
          }
        case n:
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function M(ce) {
      return typeof ce == "string" || typeof ce == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
    }
      if (typeof ce == "object" && ce !== null) {
        var Ce = ce.$$typeof;
        switch (Ce) {
          case t:
            var Ne = ce.type;
            switch (Ne) {
              case f:
              case r:
              case s:
              case o:
                return Ne;
              default:
                var Be = Ne && Ne.$$typeof;
                switch (Be) {
                  case c:
                  case g:
                  case T:
                  case C:
                  case a:
                    return Be;
                  default:
                    return Ce;
                }
            }
          case n:
            return Ce;
        }
      }
    }
    function re(ce) {
    }
    function Q(ce) {
    }
    }
    function ie(ce) {
    }
    function de(ce) {
      return typeof ce == "object" && ce !== null && ce.$$typeof === t;
    }
    function ue(ce) {
    }
    function he(ce) {
    }
    function ge(ce) {
    }
    function fe(ce) {
    }
    function pe(ce) {
    }
    function be(ce) {
    }
    function we(ce) {
    }
    function _e(ce) {
    }
}
}
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
  var e = Object.getOwnPropertySymbols, t = Object.prototype.hasOwnProperty, n = Object.prototype.propertyIsEnumerable;
  function r(s) {
    if (s == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(s);
  }
  function o() {
    try {
      if (!Object.assign)
        return !1;
      var s = new String("abc");
      if (s[5] = "de", Object.getOwnPropertyNames(s)[0] === "5")
        return !1;
      for (var a = {}, c = 0; c < 10; c++)
        a["_" + String.fromCharCode(c)] = c;
      var f = Object.getOwnPropertyNames(a).map(function(g) {
        return a[g];
      });
      if (f.join("") !== "0123456789")
        return !1;
      return "abcdefghijklmnopqrst".split("").forEach(function(g) {
    } catch {
      return !1;
    }
  }
      c = Object(arguments[g]);
      if (e) {
      }
    }
    return f;
}
  var e = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
}
}
  var e = function() {
  };
  if (process.env.NODE_ENV !== "production") {
    e = function(s) {
      var a = "Warning: " + s;
      typeof console < "u" && console.error(a);
      try {
        throw new Error(a);
      } catch {
      }
    };
  }
    if (process.env.NODE_ENV !== "production") {
      for (var g in s)
        if (r(s, g)) {
          try {
            if (typeof s[g] != "function") {
              var w = Error(
                (f || "React class") + ": " + c + " type `" + g + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof s[g] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
              );
              throw w.name = "Invariant Violation", w;
            }
          } catch (T) {
          }
            e(
            );
          }
        }
    }
  }
  return o.resetWarningCache = function() {
    process.env.NODE_ENV !== "production" && (n = {});
}
  };
  process.env.NODE_ENV !== "production" && (s = function(c) {
    var f = "Warning: " + c;
    typeof console < "u" && console.error(f);
    try {
      throw new Error(f);
    } catch {
    }
  });
  function a() {
    return null;
  }
    }
    var w = "<<anonymous>>", C = {
      any: I(),
      arrayOf: M,
    };
    }
    }
    E.prototype = Error.prototype;
    function O(Q) {
      if (process.env.NODE_ENV !== "production")
      function de(he, ge, fe, pe, be, we, _e) {
        if (pe = pe || w, we = we || fe, _e !== n) {
          if (f) {
            var ce = new Error(
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
            );
            throw ce.name = "Invariant Violation", ce;
          } else if (process.env.NODE_ENV !== "production" && typeof console < "u") {
            var Ce = pe + ":" + fe;
            ie < 3 && (s(
              "You are manually calling a React.PropTypes validation function for the `" + we + "` prop on `" + pe + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
          }
        }
        return ge[fe] == null ? he ? ge[fe] === null ? new E("The " + be + " `" + we + "` is marked as required " + ("in `" + pe + "`, but its value is `null`.")) : new E("The " + be + " `" + we + "` is marked as required in " + ("`" + pe + "`, but its value is `undefined`.")) : null : Q(ge, fe, pe, be, we);
      }
      var ue = de.bind(null, !1);
      return ue.isRequired = de.bind(null, !0), ue;
    }
        if (be !== Q) {
          var we = X(pe);
          return new E(
            "Invalid " + he + " `" + ge + "` of type " + ("`" + we + "` supplied to `" + ue + "`, expected ") + ("`" + Q + "`."),
            { expectedType: Q }
          );
        }
        return null;
      }
    }
    function I() {
      return O(a);
    }
    function M(Q) {
        if (typeof Q != "function")
          return new E("Property `" + ge + "` of component `" + ue + "` has invalid PropType notation inside arrayOf.");
        var fe = ie[de];
        if (!Array.isArray(fe)) {
          return new E("Invalid " + he + " `" + ge + "` of type " + ("`" + pe + "` supplied to `" + ue + "`, expected an array."));
        }
        for (var be = 0; be < fe.length; be++) {
          var we = Q(fe, be, ue, he, ge + "[" + be + "]", n);
          if (we instanceof Error)
            return we;
        }
        return null;
      }
    }
        if (!c(ge)) {
          return new E("Invalid " + ue + " `" + he + "` of type " + ("`" + fe + "` supplied to `" + de + "`, expected a single ReactElement."));
        }
        return null;
      }
      return O(Q);
    }
        if (!e.isValidElementType(ge)) {
          return new E("Invalid " + ue + " `" + he + "` of type " + ("`" + fe + "` supplied to `" + de + "`, expected a single ReactElement type."));
        }
        return null;
      }
      return O(Q);
    }
        if (!(ie[de] instanceof Q)) {
          var fe = Q.name || w, pe = re(ie[de]);
          return new E("Invalid " + he + " `" + ge + "` of type " + ("`" + pe + "` supplied to `" + ue + "`, expected ") + ("instance of `" + fe + "`."));
        }
        return null;
      }
    }
      if (!Array.isArray(Q))
        return process.env.NODE_ENV !== "production" && (arguments.length > 1 ? s(
          "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
        ) : s("Invalid argument supplied to oneOf, expected an array.")), a;
        for (var fe = ie[de], pe = 0; pe < Q.length; pe++)
          if (T(fe, Q[pe]))
            return null;
        var be = JSON.stringify(Q, function(_e, ce) {
          var Ce = X(ce);
          return Ce === "symbol" ? String(ce) : ce;
        });
        return new E("Invalid " + he + " `" + ge + "` of value `" + String(fe) + "` " + ("supplied to `" + ue + "`, expected one of " + be + "."));
      }
    }
        if (typeof Q != "function")
          return new E("Property `" + ge + "` of component `" + ue + "` has invalid PropType notation inside objectOf.");
        if (pe !== "object")
          return new E("Invalid " + he + " `" + ge + "` of type " + ("`" + pe + "` supplied to `" + ue + "`, expected an object."));
        for (var be in fe)
          if (r(fe, be)) {
            var we = Q(fe, be, ue, he, ge + "." + be, n);
            if (we instanceof Error)
              return we;
          }
        return null;
      }
    }
      if (!Array.isArray(Q))
        return process.env.NODE_ENV !== "production" && s("Invalid argument supplied to oneOfType, expected an instance of array."), a;
        if (typeof ie != "function")
          return s(
          ), a;
      }
      function de(ue, he, ge, fe, pe) {
        for (var be = [], we = 0; we < Q.length; we++) {
          var _e = Q[we], ce = _e(ue, he, ge, fe, pe, n);
          if (ce == null)
            return null;
          ce.data && r(ce.data, "expectedType") && be.push(ce.data.expectedType);
        }
        var Ce = be.length > 0 ? ", expected one of type [" + be.join(", ") + "]" : "";
        return new E("Invalid " + fe + " `" + pe + "` supplied to " + ("`" + ge + "`" + Ce + "."));
      }
      return O(de);
    }
      }
      return O(Q);
    }
      return new E(
      );
    }
        if (pe !== "object")
          return new E("Invalid " + he + " `" + ge + "` of type `" + pe + "` " + ("supplied to `" + ue + "`, expected `object`."));
        for (var be in Q) {
          var we = Q[be];
          if (typeof we != "function")
            return q(ue, he, ge, be, X(we));
          var _e = we(fe, be, ue, he, ge + "." + be, n);
          if (_e)
            return _e;
        }
        return null;
      }
    }
        if (pe !== "object")
          return new E("Invalid " + he + " `" + ge + "` of type `" + pe + "` " + ("supplied to `" + ue + "`, expected `object`."));
        var be = t({}, ie[de], Q);
        for (var we in be) {
          var _e = Q[we];
          if (r(Q, we) && typeof _e != "function")
            return q(ue, he, ge, we, X(_e));
          if (!_e)
            return new E(
              "Invalid " + he + " `" + ge + "` key `" + we + "` supplied to `" + ue + "`.\nBad object: " + JSON.stringify(ie[de], null, "  ") + `
Valid keys: ` + JSON.stringify(Object.keys(Q), null, "  ")
            );
          var ce = _e(fe, we, ue, he, ge + "." + we, n);
          if (ce)
            return ce;
        }
        return null;
      }
    }
    function ee(Q) {
      switch (typeof Q) {
        case "number":
        case "string":
        case "undefined":
          return !0;
        case "boolean":
          return !Q;
        case "object":
          if (Array.isArray(Q))
            return Q.every(ee);
          if (Q === null || c(Q))
            return !0;
              for (; !(de = ie.next()).done; )
                if (!ee(de.value))
                  return !1;
            } else
              for (; !(de = ie.next()).done; ) {
                var ue = de.value;
                if (ue && !ee(ue[1]))
                  return !1;
              }
          } else
            return !1;
          return !0;
        default:
          return !1;
      }
    }
    }
    }
    function X(Q) {
      if (typeof Q > "u" || Q === null)
        return "" + Q;
        if (Q instanceof Date)
          return "date";
        if (Q instanceof RegExp)
          return "regexp";
      }
    }
    function te(Q) {
        case "array":
        case "object":
        case "boolean":
        case "date":
        case "regexp":
        default:
      }
    }
    function re(Q) {
      return !Q.constructor || !Q.constructor.name ? w : Q.constructor.name;
    }
    return C.checkPropTypes = o, C.resetWarningCache = o.resetWarningCache, C.PropTypes = C, C;
}
  function t() {
  }
  function n() {
  }
        var w = new Error(
          "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
        );
        throw w.name = "Invariant Violation", w;
      }
    }
    r.isRequired = r;
    function o() {
      return r;
    }
    var s = {
      array: r,
      bigint: r,
      bool: r,
      func: r,
      number: r,
      object: r,
      string: r,
      symbol: r,
      any: r,
      arrayOf: o,
      element: r,
      elementType: r,
      instanceOf: o,
      node: r,
      objectOf: o,
      oneOf: o,
      oneOfType: o,
      shape: o,
      exact: o,
      checkPropTypes: n,
      resetWarningCache: t
    };
    return s.PropTypes = s, s;
}
if (process.env.NODE_ENV !== "production") {
} else
  return e == null || Object.keys(e).length === 0;
}
  const {
    styles: t,
    defaultTheme: n = {}
    styles: r
  });
}
  defaultTheme: u.object,
  styles: u.oneOfType([u.array, u.string, u.object, u.func])
});
/**
 * @mui/styled-engine v6.5.0
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  return process.env.NODE_ENV !== "production" ? (...r) => {
    const o = typeof e == "string" ? `"${e}"` : "component";
    return r.length === 0 ? console.error([`MUI: Seems like you called \`styled(${o})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join(`
`)) : r.some((s) => s === void 0) && console.error(`MUI: the styled(${o})(...args) API requires all its args to be defined.`), n(...r);
  } : n;
}
  Array.isArray(e.__emotion_styles) && (e.__emotion_styles = t(e.__emotion_styles));
}
}
/**
 * @license React
 * react-is.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  function T(E) {
    if (typeof E == "object" && E !== null) {
      var O = E.$$typeof;
      switch (O) {
        case e:
          switch (E = E.type, E) {
            case n:
            case o:
            case r:
            case f:
            case w:
              return E;
            default:
              switch (E = E && E.$$typeof, E) {
                case a:
                case c:
                case g:
                  return E;
                case s:
                  return E;
                default:
                  return O;
              }
          }
        case t:
          return O;
      }
    }
  }
    return T(E) === s;
    return T(E) === a;
    return typeof E == "object" && E !== null && E.$$typeof === e;
    return T(E) === c;
    return T(E) === n;
    return T(E) === g;
    return T(E) === t;
    return T(E) === o;
    return T(E) === r;
    return T(E) === f;
}
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function e(E) {
      if (typeof E == "object" && E !== null) {
        var O = E.$$typeof;
        switch (O) {
          case t:
            switch (E = E.type, E) {
              case r:
              case s:
              case o:
              case g:
              case C:
                return E;
              default:
                switch (E = E && E.$$typeof, E) {
                  case c:
                  case f:
                  case w:
                    return E;
                  case a:
                    return E;
                  default:
                    return O;
                }
            }
          case n:
            return O;
        }
      }
    }
      return e(E) === a;
      return e(E) === c;
      return typeof E == "object" && E !== null && E.$$typeof === t;
      return e(E) === f;
      return e(E) === r;
      return e(E) === w;
      return e(E) === n;
      return e(E) === s;
      return e(E) === o;
      return e(E) === g;
  if (typeof e != "object" || e === null)
    return !1;
  const t = Object.getPrototypeOf(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}
    return e;
  const t = {};
  return Object.keys(e).forEach((n) => {
  }), t;
}
  clone: !0
}) {
  const r = n.clone ? {
    ...e
  } : e;
  }), r;
}
  const t = Object.keys(e).map((n) => ({
    key: n,
    val: e[n]
  })) || [];
  return t.sort((n, r) => n.val - r.val), t.reduce((n, r) => ({
    ...n,
    [r.key]: r.val
  }), {});
};
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: t = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit: n = "px",
    step: r = 5,
    ...o
  function c(w) {
    return `@media (min-width:${typeof t[w] == "number" ? t[w] : w}${n})`;
  }
  function f(w) {
    return `@media (max-width:${(typeof t[w] == "number" ? t[w] : w) - r / 100}${n})`;
  }
    const T = a.indexOf(C);
    return `@media (min-width:${typeof t[w] == "number" ? t[w] : w}${n}) and (max-width:${(T !== -1 && typeof t[a[T]] == "number" ? t[a[T]] : C) - r / 100}${n})`;
  }
  function g(w) {
  }
    const C = a.indexOf(w);
  }
  return {
    keys: a,
    values: s,
    up: c,
    down: f,
    only: g,
    unit: n,
    ...o
  };
}
  if (!e.containerQueries)
    return t;
  const n = Object.keys(t).filter((r) => r.startsWith("@container")).sort((r, o) => {
    var a, c;
    const s = /min-width:\s*([0-9.]+)/;
    return +(((a = r.match(s)) == null ? void 0 : a[1]) || 0) - +(((c = o.match(s)) == null ? void 0 : c[1]) || 0);
  });
  return n.length ? n.reduce((r, o) => {
    const s = t[o];
    return delete r[o], r[o] = s, r;
  }, {
    ...t
  }) : t;
}
  return t === "@" || t.startsWith("@") && (e.some((n) => t.startsWith(`@${n}`)) || !!t.match(/^@\d/));
}
  const n = t.match(/^@([^/]+)?\/?(.+)?$/);
  if (!n) {
    if (process.env.NODE_ENV !== "production")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${t})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
    return null;
  }
  const [, r, o] = n, s = Number.isNaN(+r) ? r || 0 : +r;
  return e.containerQueries(o).up(s);
}
  const t = (s, a) => s.replace("@media", a ? `@container ${a}` : "@container");
  function n(s, a) {
    s.up = (...c) => t(e.breakpoints.up(...c), a), s.down = (...c) => t(e.breakpoints.down(...c), a), s.between = (...c) => t(e.breakpoints.between(...c), a), s.only = (...c) => t(e.breakpoints.only(...c), a), s.not = (...c) => {
      const f = t(e.breakpoints.not(...c), a);
      return f.includes("not all and") ? f.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or") : f;
    };
  }
  const r = {}, o = (s) => (n(r, s), r);
  return n(o), {
    ...e,
    containerQueries: o
  };
}
  borderRadius: 4
    clone: !1
    // No need to clone deep, it's way faster.
  }) : e;
}
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  containerQueries: (e) => ({
    up: (t) => {
      return typeof n == "number" && (n = `${n}px`), e ? `@container ${e} (min-width:${n})` : `@container (min-width:${n})`;
    }
  })
};
  const r = e.theme || {};
  if (Array.isArray(t)) {
    return t.reduce((a, c, f) => (a[s.up(s.keys[f])] = n(t[f]), a), {});
  }
  if (typeof t == "object") {
    return Object.keys(t).reduce((a, c) => {
        f && (a[f] = n(t[c], c));
        const f = s.up(c);
        a[f] = n(t[c], c);
      } else {
        const f = c;
        a[f] = t[f];
      }
      return a;
    }, {});
  }
  return n(t);
}
  var n;
  return ((n = e.keys) == null ? void 0 : n.reduce((r, o) => {
    const s = e.up(o);
    return r[s] = {}, r;
  }, {})) || {};
}
  return e.reduce((n, r) => {
    const o = n[r];
    return (!o || Object.keys(o).length === 0) && delete n[r], n;
  }, t);
}
}
  if (typeof e != "object")
    return {};
  const n = {}, r = Object.keys(t);
  return Array.isArray(e) ? r.forEach((o, s) => {
    s < e.length && (n[o] = !0);
  }) : r.forEach((o) => {
    e[o] != null && (n[o] = !0);
  }), n;
}
  values: e,
  breakpoints: t,
  base: n
}) {
  if (o.length === 0)
    return e;
  let s;
  return o.reduce((a, c, f) => (Array.isArray(e) ? (a[c] = e[f] != null ? e[f] : e[s], s = f) : typeof e == "object" ? (a[c] = e[c] != null ? e[c] : e[s], s = c) : a[c] = e, a), {});
}
function He(e) {
  if (typeof e != "string")
  return e.charAt(0).toUpperCase() + e.slice(1);
}
  if (!t || typeof t != "string")
    return null;
  if (e && e.vars && n) {
    const r = `vars.${t}`.split(".").reduce((o, s) => o && o[s] ? o[s] : null, e);
    if (r != null)
      return r;
  }
  return t.split(".").reduce((r, o) => r && r[o] != null ? r[o] : null, e);
}
  let o;
}
  const {
    prop: t,
    cssProperty: n = e.prop,
    themeKey: r,
    transform: o
  } = e, s = (a) => {
    if (a[t] == null)
      return null;
        [n]: w
      };
    });
  };
  return s.propTypes = process.env.NODE_ENV !== "production" ? {
  } : {}, s.filterProps = [t], s;
}
  const t = {};
  return (n) => (t[n] === void 0 && (t[n] = e(n)), t[n]);
}
  m: "margin",
  p: "padding"
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
  if (e.length > 2)
    else
      return [e];
  return Array.isArray(o) ? o.map((s) => r + s) : [r + o];
  return typeof o == "number" || typeof o == "string" ? (s) => typeof s == "string" ? s : (process.env.NODE_ENV !== "production" && typeof s != "number" && console.error(`MUI: Expected ${r} argument to be a number or a string, got ${s}.`), typeof o == "string" ? `calc(${s} * ${o})` : o * s) : Array.isArray(o) ? (s) => {
    if (typeof s == "string")
      return s;
    const a = Math.abs(s);
    process.env.NODE_ENV !== "production" && (Number.isInteger(a) ? a > o.length - 1 && console.error([`MUI: The value provided (${a}) overflows.`, `The supported values are: ${JSON.stringify(o)}.`, `${a} > ${o.length - 1}, you need to add the missing values.`].join(`
`)) : console.error([`MUI: The \`theme.${t}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${t}\` as a number.`].join(`
`)));
    const c = o[a];
    return s >= 0 ? c : typeof c == "number" ? -c : `-${c}`;
  } : typeof o == "function" ? o : (process.env.NODE_ENV !== "production" && console.error([`MUI: The \`theme.${t}\` value (${o}) is invalid.`, "It should be a number, an array or a function."].join(`
`)), () => {
  });
}
}
  return typeof t == "string" || t == null ? t : e(t);
}
}
  if (!t.includes(n))
    return null;
}
}
}
}
  spacing: e
})) {
  if (e.mui)
    return e;
  const n = (...r) => (process.env.NODE_ENV !== "production" && (r.length <= 4 || console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${r.length}`)), (r.length === 0 ? [1] : r).map((s) => {
    const a = t(s);
    return typeof a == "number" ? `${a}px` : a;
  }).join(" "));
  return n.mui = !0, n;
}
  const t = e.reduce((r, o) => (o.filterProps.forEach((s) => {
    r[s] = o;
  return n.propTypes = process.env.NODE_ENV !== "production" ? e.reduce((r, o) => Object.assign(r, o.propTypes), {}) : {}, n.filterProps = e.reduce((r, o) => r.concat(o.filterProps), []), n;
}
  return typeof e != "number" ? e : `${e}px solid`;
}
    prop: e,
    themeKey: "borders",
    transform: t
  });
}
  if (e.borderRadius !== void 0 && e.borderRadius !== null) {
    });
  }
  return null;
};
} : {};
  if (e.gap !== void 0 && e.gap !== null) {
    });
  }
  return null;
};
} : {};
  if (e.columnGap !== void 0 && e.columnGap !== null) {
    });
  }
  return null;
};
} : {};
  if (e.rowGap !== void 0 && e.rowGap !== null) {
    });
  }
  return null;
};
} : {};
  prop: "gridColumn"
  prop: "gridRow"
  prop: "gridAutoFlow"
  prop: "gridAutoColumns"
  prop: "gridAutoRows"
  prop: "gridTemplateColumns"
  prop: "gridTemplateRows"
  prop: "gridTemplateAreas"
  prop: "gridArea"
});
  return t === "grey" ? t : e;
}
  prop: "color",
  themeKey: "palette",
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  prop: "backgroundColor",
  themeKey: "palette",
});
  return e <= 1 && e !== 0 ? `${e * 100}%` : e;
}
  prop: "width",
  if (e.maxWidth !== void 0 && e.maxWidth !== null) {
    const t = (n) => {
      var o, s, a, c, f;
      return r ? ((f = (c = e.theme) == null ? void 0 : c.breakpoints) == null ? void 0 : f.unit) !== "px" ? {
        maxWidth: `${r}${e.theme.breakpoints.unit}`
      } : {
        maxWidth: r
      } : {
      };
    };
  }
  return null;
};
  prop: "minWidth",
  prop: "height",
  prop: "maxHeight",
  prop: "minHeight",
});
  prop: "size",
  cssProperty: "width",
});
  prop: "size",
  cssProperty: "height",
});
  prop: "boxSizing"
});
  // borders
  border: {
    themeKey: "borders",
  },
  borderTop: {
    themeKey: "borders",
  },
  borderRight: {
    themeKey: "borders",
  },
  borderBottom: {
    themeKey: "borders",
  },
  borderLeft: {
    themeKey: "borders",
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
  },
  // palette
  color: {
    themeKey: "palette",
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
  },
  backgroundColor: {
    themeKey: "palette",
  },
  // spacing
  p: {
  },
  pt: {
  },
  pr: {
  },
  pb: {
  },
  pl: {
  },
  px: {
  },
  py: {
  },
  padding: {
  },
  paddingTop: {
  },
  paddingRight: {
  },
  paddingBottom: {
  },
  paddingLeft: {
  },
  paddingX: {
  },
  paddingY: {
  },
  paddingInline: {
  },
  paddingInlineStart: {
  },
  paddingInlineEnd: {
  },
  paddingBlock: {
  },
  paddingBlockStart: {
  },
  paddingBlockEnd: {
  },
  m: {
  },
  mt: {
  },
  mr: {
  },
  mb: {
  },
  ml: {
  },
  mx: {
  },
  my: {
  },
  margin: {
  },
  marginTop: {
  },
  marginRight: {
  },
  marginBottom: {
  },
  marginLeft: {
  },
  marginX: {
  },
  marginY: {
  },
  marginInline: {
  },
  marginInlineStart: {
  },
  marginInlineEnd: {
  },
  marginBlock: {
  },
  marginBlockStart: {
  },
  marginBlockEnd: {
  },
  // display
  displayPrint: {
    cssProperty: !1,
    transform: (e) => ({
      "@media print": {
        display: e
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
  },
  rowGap: {
  },
  columnGap: {
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
  },
  maxWidth: {
  },
  minWidth: {
  },
  height: {
  },
  maxHeight: {
  },
  minHeight: {
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: !1,
    themeKey: "typography"
  }
};
  const t = e.reduce((r, o) => r.concat(Object.keys(o)), []), n = new Set(t);
  return e.every((r) => n.size === Object.keys(r).length);
}
  return typeof e == "function" ? e(t) : e;
}
  function e(n, r, o, s) {
    const a = {
      [n]: r,
      theme: o
    }, c = s[n];
    if (!c)
      return {
        [n]: r
      };
    const {
      cssProperty: f = n,
      transform: g,
    } = c;
    if (r == null)
      return null;
      return {
        [n]: r
      };
        [f]: E
      };
    });
  }
  function t(n) {
    const {
      sx: r,
      theme: o = {},
      nested: s
    } = n || {};
    if (!r)
      return null;
    function c(f) {
      if (typeof f == "function")
      else if (typeof f != "object")
        return f;
        return null;
      let w = g;
        if (T != null)
          if (typeof T == "object")
            if (a[C])
            else {
                theme: o
              }, T, (O) => ({
                [C]: O
              }));
                sx: T,
                theme: o,
                nested: !0
            }
          else
      }), !s && o.modularCssLayers ? {
    }
    return Array.isArray(r) ? r.map(c) : c(r);
  }
  return t;
}
  var r;
  const n = this;
  if (n.vars) {
    if (!((r = n.colorSchemes) != null && r[e]) || typeof n.getColorSchemeSelector != "function")
      return {};
    let o = n.getColorSchemeSelector(e);
    return o === "&" ? t : ((o.includes("data-") || o.includes(".")) && (o = `*:where(${o.replace(/\s*&$/, "")}) &`), {
      [o]: t
    });
  }
  return n.palette.mode === e ? t : {};
}
  const {
    breakpoints: n = {},
    palette: r = {},
    spacing: o,
    shape: s = {},
    ...a
    breakpoints: c,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...r
    },
    spacing: f,
    shape: {
      ...s
    }
  }, a);
    ...a == null ? void 0 : a.unstable_sxConfig
      theme: this
    });
}
  return Object.keys(e).length === 0;
}
}
}
  return e !== t && t.styles ? (t.styles.match(/^@layer\s+[^{]*$/) || (t.styles = `@layer global{${t.styles}}`), t) : e;
}
  styles: e,
  themeId: t,
  defaultTheme: n = {}
}) {
  let s = typeof e == "function" ? e(o) : e;
    styles: s
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: u.object,
  /**
   * @ignore
   */
  styles: u.oneOfType([u.array, u.func, u.number, u.object, u.string, u.bool]),
  /**
   * @ignore
   */
  themeId: u.string
});
const LX = (e) => {
  var r;
  const t = {
    systemProps: {},
    otherProps: {}
  }, n = ((r = e == null ? void 0 : e.theme) == null ? void 0 : r.unstable_sxConfig) ?? pC;
  return Object.keys(e).forEach((o) => {
    n[o] ? t.systemProps[o] = e[o] : t.otherProps[o] = e[o];
  }), t;
};
function mC(e) {
  const {
    sx: t,
    ...n
  } = e, {
    systemProps: r,
    otherProps: o
  } = LX(n);
  let s;
  return Array.isArray(t) ? s = [r, ...t] : typeof t == "function" ? s = (...a) => {
    const c = t(...a);
      ...r,
      ...c
    } : r;
  } : s = {
    ...r,
    ...t
  }, {
    ...o,
    sx: s
  };
}
  return {
    configure(t) {
      e = t;
    },
    generate(t) {
      return e(t);
    },
    reset() {
    }
  };
  var t, n, r = "";
  if (typeof e == "string" || typeof e == "number") r += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var o = e.length;
  } else for (n in e) e[n] && (r && (r += " "), r += n);
  return r;
}
function et() {
  return r;
}
  const {
    themeId: t,
    defaultTheme: n,
    defaultClassName: r = "MuiBox-root",
    generateClassName: o
    shouldForwardProp: (c) => c !== "theme" && c !== "sx" && c !== "as"
      component: w = "div",
      ...C
    return /* @__PURE__ */ $.jsx(s, {
      as: w,
      theme: t && g[t] || g,
      ...C
    });
  });
}
  active: "active",
  checked: "checked",
  completed: "completed",
  disabled: "disabled",
  error: "error",
  expanded: "expanded",
  focused: "focused",
  focusVisible: "focusVisible",
  open: "open",
  readOnly: "readOnly",
  required: "required",
  selected: "selected"
};
}
  const r = {};
  return t.forEach((o) => {
  }), r;
}
  return e.displayName || e.name || t;
}
  return e.displayName || (r !== "" ? `${n}(${r})` : n);
}
  if (e != null) {
    if (typeof e == "string")
      return e;
    if (typeof e == "function")
    if (typeof e == "object")
      switch (e.$$typeof) {
        default:
          return;
      }
  }
}
  const {
    variants: t,
    ...n
  } = e, r = {
    variants: t,
    isProcessed: !0
  };
  return r.style === n || t && t.forEach((o) => {
  }), r;
}
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
  return t && e && typeof e == "object" && e.styles && !e.styles.startsWith("@layer") && (e.styles = `@layer ${t}{${String(e.styles)}}`), e;
}
  return e ? (t, n) => n[e] : null;
}
}
  const r = typeof t == "function" ? t(e) : t;
  if (Array.isArray(r))
  if (Array.isArray(r == null ? void 0 : r.variants)) {
    let o;
    if (r.isProcessed)
    else {
      const {
        variants: s,
        ...a
      } = r;
    }
  }
}
  var s;
  let o;
  e: for (let a = 0; a < t.length; a += 1) {
    const c = t[a];
    if (typeof c.props == "function") {
      if (o ?? (o = {
        ...e,
        ...e.ownerState,
        ownerState: e.ownerState
      }), !c.props(o))
        continue;
    } else
      for (const f in c.props)
        if (e[f] !== c.props[f] && ((s = e.ownerState) == null ? void 0 : s[f]) !== c.props[f])
          continue e;
    typeof c.style == "function" ? (o ?? (o = {
      ...e,
      ...e.ownerState,
      ownerState: e.ownerState
  }
  return n;
}
  const {
    themeId: t,
  } = e;
  function s(c) {
  }
  return (c, f = {}) => {
    const {
      slot: g,
      skipSx: w,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      ...T
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      g && g !== "Root" && g !== "root" || !1
      shouldForwardProp: I,
      ...T
        };
        };
      }
        var X, te;
        if (!G)
          return null;
        for (const re in G)
        let G;
      }
    };
  };
}
}
  let n;
}
  for (const t in e)
    return !1;
  return !0;
}
  return typeof e == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  e.charCodeAt(0) > 96;
}
  return e && e.charAt(0).toLowerCase() + e.slice(1);
}
  const n = {
    ...t
  };
  for (const r in e)
    if (Object.prototype.hasOwnProperty.call(e, r)) {
      const o = r;
      if (o === "components" || o === "slots")
        n[o] = {
          ...e[o],
          ...n[o]
        };
      else if (o === "componentsProps" || o === "slotProps") {
        const s = e[o], a = t[o];
        if (!a)
          n[o] = s || {};
        else if (!s)
          n[o] = a;
        else {
          n[o] = {
            ...a
          };
          for (const c in s)
            if (Object.prototype.hasOwnProperty.call(s, c)) {
              const f = c;
            }
        }
      } else n[o] === void 0 && (n[o] = e[o]);
    }
  return n;
}
  const {
    theme: t,
    name: n,
    props: r
  } = e;
}
  props: e,
  name: t,
  defaultTheme: n,
  themeId: r
}) {
    theme: o,
    name: t,
    props: e
  });
}
  return Math.max(t, Math.min(e, n));
}
}
  e = e.slice(1);
  const t = new RegExp(`.{1,${e.length >= 6 ? 2 : 1}}`, "g");
  let n = e.match(t);
  return n && n[0].length === 1 && (n = n.map((r) => r + r)), process.env.NODE_ENV !== "production" && e.length !== e.trim().length && console.error(`MUI: The color: "${e}" is invalid. Make sure the color input doesn't contain leading/trailing space.`), n ? `rgb${n.length === 4 ? "a" : ""}(${n.map((r, o) => o < 3 ? parseInt(r, 16) : Math.round(parseInt(r, 16) / 255 * 1e3) / 1e3).join(", ")})` : "";
}
  if (e.type)
    return e;
  if (e.charAt(0) === "#")
  const t = e.indexOf("("), n = e.substring(0, t);
  if (!["rgb", "rgba", "hsl", "hsla", "color"].includes(n))
    throw new Error(process.env.NODE_ENV !== "production" ? `MUI: Unsupported \`${e}\` color.
  let r = e.substring(t + 1, e.length - 1), o;
  if (n === "color") {
    if (r = r.split(" "), o = r.shift(), r.length === 4 && r[3].charAt(0) === "/" && (r[3] = r[3].slice(1)), !["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].includes(o))
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: unsupported \`${o}\` color space.
  } else
    r = r.split(",");
  return r = r.map((s) => parseFloat(s)), {
    type: n,
    values: r,
    colorSpace: o
  };
}
  return t.values.slice(0, 3).map((n, r) => t.type.includes("hsl") && r !== 0 ? `${n}%` : n).join(" ");
  try {
  } catch {
    return t && process.env.NODE_ENV !== "production" && console.warn(t), e;
  }
};
  const {
    type: t,
    colorSpace: n
  } = e;
  let {
    values: r
  } = e;
  return t.includes("rgb") ? r = r.map((o, s) => s < 3 ? parseInt(o, 10) : o) : t.includes("hsl") && (r[1] = `${r[1]}%`, r[2] = `${r[2]}%`), t.includes("color") ? r = `${n} ${r.join(" ")}` : r = `${r.join(", ")}`, `${t}(${r})`;
}
  const {
    values: t
  let c = "rgb";
  const f = [Math.round(a(0) * 255), Math.round(a(8) * 255), Math.round(a(4) * 255)];
    type: c,
    values: f
  });
}
  return t = t.map((n) => (e.type !== "color" && (n /= 255), n <= 0.03928 ? n / 12.92 : ((n + 0.055) / 1.055) ** 2.4)), Number((0.2126 * t[0] + 0.7152 * t[1] + 0.0722 * t[2]).toFixed(3));
}
  return (Math.max(n, r) + 0.05) / (Math.min(n, r) + 0.05);
}
}
  try {
  } catch {
    return e;
  }
}
    e.values[2] *= 1 - t;
  else if (e.type.includes("rgb") || e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] *= 1 - t;
}
  try {
  } catch {
    return e;
  }
}
    e.values[2] += (100 - e.values[2]) * t;
  else if (e.type.includes("rgb"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (255 - e.values[n]) * t;
  else if (e.type.includes("color"))
    for (let n = 0; n < 3; n += 1)
      e.values[n] += (1 - e.values[n]) * t;
}
  try {
  } catch {
    return e;
  }
}
}
  try {
  } catch {
    return e;
  }
}
  return process.env.NODE_ENV === "production" ? () => null : function(...r) {
    return e(...r) || t(...r);
  };
}
  const {
    prototype: t = {}
  } = e;
  return !!t.isReactComponent;
}
  const s = e[t], a = o || t;
  if (s == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let c;
  const f = s.type;
}
  const {
    prototype: t = {}
  } = e;
  return !!t.isReactComponent;
}
  const s = e[t], a = o || t;
  if (s == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let c;
}
  return process.env.NODE_ENV === "production" ? e : {
    ...e,
      const n = Object.keys(t).filter((r) => !e.hasOwnProperty(r));
      return n.length > 0 ? new Error(`The following props are not supported: ${n.map((r) => `\`${r}\``).join(", ")}. Please remove them.`) : null;
    }
  };
}
  if (process.env.NODE_ENV === "production")
    return null;
  const s = e[t], a = o || t;
  return s == null ? null : s && s.nodeType !== 1 ? new Error(`Invalid ${r} \`${a}\` supplied to \`${n}\`. Expected an HTMLElement.`) : null;
}
  return e.reduce((t, n) => n == null ? t : function(...o) {
    t.apply(this, o), n.apply(this, o);
  }, () => {
  });
}
  let n;
  function r(...o) {
    const s = () => {
      e.apply(this, o);
    };
    clearTimeout(n), n = setTimeout(s, t);
  }
  return r.clear = () => {
    clearTimeout(n);
  }, r;
}
  var n, r, o;
  return /* @__PURE__ */ x.isValidElement(e) && t.indexOf(
    // For server components `muiName` is avaialble in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    e.type.muiName ?? ((o = (r = (n = e.type) == null ? void 0 : n._payload) == null ? void 0 : r.value) == null ? void 0 : o.muiName)
  ) !== -1;
}
  return e && e.ownerDocument || document;
}
}
  if (process.env.NODE_ENV === "production")
    return () => null;
  const n = t ? {
    ...t.propTypes
  } : null;
    if (w) {
      if (C)
        return C;
    }
  };
}
  typeof e == "function" ? e(t) : e && (e.current = t);
}
  const [t, n] = x.useState(e), r = e || t;
  return x.useEffect(() => {
  }, [t]), r;
}
    return e ?? t;
  }
}
  if (process.env.NODE_ENV === "production")
    return null;
  const s = o || t;
  return typeof e[t] < "u" ? new Error(`The prop \`${s}\` is not supported. Please remove it.`) : null;
}
  controlled: e,
  default: t,
  name: n,
  state: r = "value"
}) {
  const {
    current: o
  } = x.useRef(e !== void 0), [s, a] = x.useState(t), c = o ? e : s;
  if (process.env.NODE_ENV !== "production") {
    x.useEffect(() => {
      o !== (e !== void 0) && console.error([`MUI: A component is changing the ${o ? "" : "un"}controlled ${r} state of ${n} to be ${o ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${n} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [r, n, e]);
    const {
    } = x.useRef(t);
    x.useEffect(() => {
`));
    }, [JSON.stringify(t)]);
  }
  }, []);
  return [c, f];
}
  const t = x.useRef(e);
    t.current = e;
  }), x.useRef((...n) => (
    // @ts-expect-error hide `this`
    (0, t.current)(...n)
  )).current;
}
  const t = x.useRef(void 0), n = x.useCallback((r) => {
    const o = e.map((s) => {
      if (s == null)
        return null;
      if (typeof s == "function") {
        const a = s, c = a(r);
        return typeof c == "function" ? c : () => {
          a(null);
        };
      }
      return s.current = r, () => {
        s.current = null;
      };
    });
    return () => {
      o.forEach((s) => s == null ? void 0 : s());
    };
  }, e);
  return x.useMemo(() => e.every((r) => r == null) ? null : (r) => {
    t.current && (t.current(), t.current = void 0), r != null && (t.current = n(r));
  }, e);
}
}
}
  constructor() {
      this.currentId !== null && (clearTimeout(this.currentId), this.currentId = null);
    });
  }
  static create() {
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(t, n) {
    this.clear(), this.currentId = setTimeout(() => {
      this.currentId = null, n();
    }, t);
  }
}
}
  try {
    return e.matches(":focus-visible");
  } catch {
    process.env.NODE_ENV !== "production" && !/jsdom/.test(window.navigator.userAgent) && console.warn(["MUI: The `:focus-visible` pseudo class is not supported in this browser.", "Some components rely on this feature to work properly."].join(`
`));
  }
  return !1;
}
  const t = e.document.documentElement.clientWidth;
  return e.innerWidth - t;
}
  const t = x.useRef({});
  return x.useEffect(() => {
    t.current = e;
  }), t.current;
};
  const t = typeof e;
  switch (t) {
    case "number":
      return Number.isNaN(e) ? "NaN" : Number.isFinite(e) ? e !== Math.floor(e) ? "float" : "number" : "Infinity";
    case "object":
      return e === null ? "null" : e.constructor.name;
    default:
      return t;
  }
}
  const o = e[t];
  if (o == null || !Number.isInteger(o)) {
    return new RangeError(`Invalid ${r} \`${t}\` of type \`${s}\` supplied to \`${n}\`, expected \`integer\`.`);
  }
  return null;
}
}
  return null;
}
function mt(e, t, n = void 0) {
  const r = {};
  for (const o in e) {
    const s = e[o];
    let a = "", c = !0;
    for (let f = 0; f < s.length; f += 1) {
    }
    r[o] = a;
  }
  return r;
}
  return typeof e == "string";
}
    ...t,
    ownerState: {
      ...t.ownerState,
      ...n
    }
  };
}
  if (e === void 0)
    return {};
  const n = {};
  return Object.keys(e).filter((r) => r.match(/^on[A-Z]/) && typeof e[r] == "function" && !t.includes(r)).forEach((r) => {
    n[r] = e[r];
  }), n;
}
  if (e === void 0)
    return {};
  const t = {};
  return Object.keys(e).filter((n) => !(n.match(/^on[A-Z]/) && typeof e[n] == "function")).forEach((n) => {
    t[n] = e[n];
  }), t;
}
  const {
    getSlotProps: t,
    additionalProps: n,
    externalSlotProps: r,
    externalForwardedProps: o,
    className: s
  } = e;
  if (!t) {
    const C = et(n == null ? void 0 : n.className, s, o == null ? void 0 : o.className, r == null ? void 0 : r.className), T = {
      ...n == null ? void 0 : n.style,
      ...o == null ? void 0 : o.style,
      ...r == null ? void 0 : r.style
    }, E = {
      ...n,
      ...o,
      ...r
    };
    return C.length > 0 && (E.className = C), Object.keys(T).length > 0 && (E.style = T), {
      props: E,
      internalRef: void 0
    };
  }
    ...o,
    ...r
    ...n == null ? void 0 : n.style,
    ...o == null ? void 0 : o.style,
    ...r == null ? void 0 : r.style
  }, w = {
    ...n,
    ...f,
    ...c
  };
    props: w,
  };
}
  return typeof e == "function" ? e(t, n) : e;
}
  const {
    elementType: t,
    externalSlotProps: n,
    ownerState: r,
    skipResolvingSlotProps: o = !1,
    ...s
    props: c,
    internalRef: f
    ...s,
    externalSlotProps: a
    ...c,
  }, r);
}
  var t;
  return parseInt(x.version, 10) >= 19 ? ((t = e == null ? void 0 : e.props) == null ? void 0 : t.ref) || null : (e == null ? void 0 : e.ref) || null;
}
  return process.env.NODE_ENV !== "production" && x.useDebugValue(e), e;
}
  if (typeof t == "function") {
    const n = t(e);
    return process.env.NODE_ENV !== "production" && (n || console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join(`
`))), n;
  }
  return {
    ...e,
    ...t
  };
}
  const {
    children: t,
    theme: n
  process.env.NODE_ENV !== "production" && r === null && typeof n == "function" && console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join(`
`));
  const o = x.useMemo(() => {
    const s = r === null ? {
      ...n
  }, [n, r]);
    value: o,
    children: t
  });
}
  /**
   * Your component tree.
   */
  children: u.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: u.oneOfType([u.object, u.func]).isRequired
});
  value: e,
  ...t
}) {
    value: e ?? !0,
    ...t
  });
}
  children: u.node,
  value: u.bool
});
  value: e,
  children: t
}) {
    value: e,
    children: t
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: u.node,
  /**
   * @ignore
   */
  value: u.object
});
  const {
    theme: t,
    name: n,
    props: r
  } = e;
  if (!t || !t.components || !t.components[n])
    return r;
  const o = t.components[n];
}
  props: e,
  name: t
}) {
    props: e,
    name: t,
    theme: {
      components: n
    }
  });
}
function mQ(e) {
  const t = NI(), n = mr() || "", {
    modularCssLayers: r
  } = e;
  let o = "mui.global, mui.components, mui.theme, mui.custom, mui.sx";
    var c, f;
    const s = document.querySelector("head");
    if (!s)
      return;
    const a = s.firstChild;
    if (o) {
      if (a && ((c = a.hasAttribute) != null && c.call(a, "data-mui-layer-order")) && a.getAttribute("data-mui-layer-order") === n)
        return;
    } else
      (f = s.querySelector(`style[data-mui-layer-order="${n}"]`)) == null || f.remove();
    styles: o
  }) : null;
}
  return x.useMemo(() => {
    const o = e && t[e] || t;
    if (typeof n == "function") {
      const s = n(o), a = e ? {
        ...t,
        [e]: s
      } : s;
      return r ? () => a : a;
    }
    return e ? {
      ...t,
      [e]: n
    } : {
      ...t,
      ...n
    };
  }, [e, t, n, r]);
}
  const {
    children: t,
    theme: n,
    themeId: r
  process.env.NODE_ENV !== "production" && (o === null && typeof n == "function" || r && o && !o[r] && typeof n == "function") && console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join(`
`));
    theme: c,
      value: a,
        value: f,
          value: r ? a[r].components : a.components,
        })
      })
    })
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Your component tree.
   */
  children: u.node,
  /**
   * A theme object. You can provide a function to extend the outer theme.
   */
  theme: u.oneOfType([u.func, u.object]).isRequired,
  /**
   * The design system's unique id for getting the corresponded theme when there are multiple design systems.
   */
  themeId: u.string
});
  theme: void 0
};
  let t, n;
  return function(o) {
    let s = t;
  };
}
  const {
    defaultMode: t = "system",
    defaultLightColorScheme: n = "light",
    defaultDarkColorScheme: r = "dark",
    colorSchemeNode: c = "document.documentElement",
    nonce: f
  } = e || {};
  if (a === "class" && (g = ".%s"), a === "data" && (g = "[data-%s]"), g.startsWith(".")) {
    const w = g.substring(1);
      ${c}.classList.add('${w}'.replace('%s', colorScheme));`;
  }
      ${c}.setAttribute('${w}'.replace('%s', colorScheme), ${C ? `${C}.replace('%s', colorScheme)` : '""'});`;
  } else
  return /* @__PURE__ */ $.jsx("script", {
    suppressHydrationWarning: !0,
    nonce: typeof window > "u" ? f : "",
    dangerouslySetInnerHTML: {
      __html: `(function() {
try {
  let colorScheme = '';
  const mode = localStorage.getItem('${o}') || '${t}';
  const dark = localStorage.getItem('${s}-dark') || '${r}';
  const light = localStorage.getItem('${s}-light') || '${n}';
  if (mode === 'system') {
    // handle system mode
    const mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = dark
    } else {
      colorScheme = light
    }
  }
  if (mode === 'light') {
    colorScheme = light;
  }
  if (mode === 'dark') {
    colorScheme = dark;
  }
  if (colorScheme) {
  }
} catch(e){}})();`
    }
  }, "mui-color-scheme-init");
}
}
  key: e,
  storageWindow: t
}) => (!t && typeof window < "u" && (t = window), {
  get(n) {
    if (typeof window > "u")
      return;
    if (!t)
      return n;
    let r;
    try {
      r = t.localStorage.getItem(e);
    } catch {
    }
    return r || n;
  },
  set: (n) => {
    if (t)
      try {
        t.localStorage.setItem(e, n);
      } catch {
      }
  },
  subscribe: (n) => {
    if (!t)
    const r = (o) => {
      const s = o.newValue;
      o.key === e && n(s);
    };
    return t.addEventListener("storage", r), () => {
      t.removeEventListener("storage", r);
    };
  }
});
}
  if (typeof window < "u" && typeof window.matchMedia == "function" && e === "system")
    return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
}
  if (e.mode === "light" || e.mode === "system" && e.systemMode === "light")
    return t("light");
  if (e.mode === "dark" || e.mode === "system" && e.systemMode === "dark")
    return t("dark");
}
    if (t === "light")
      return e.lightColorScheme;
    if (t === "dark")
      return e.darkColorScheme;
  });
}
  const {
    defaultMode: t = "light",
    defaultLightColorScheme: n,
    defaultDarkColorScheme: r,
    supportedColorSchemes: o = [],
    storageWindow: c = typeof window > "u" ? void 0 : window,
    key: s,
    storageWindow: c
  }), [f, s, c]), C = x.useMemo(() => f == null ? void 0 : f({
    key: `${a}-light`,
    storageWindow: c
  }), [f, a, c]), T = x.useMemo(() => f == null ? void 0 : f({
    key: `${a}-dark`,
    storageWindow: c
  }), [f, a, c]), [E, O] = x.useState(() => {
    return {
    };
  x.useEffect(() => {
    I(!0);
  }, []);
      };
    });
      };
      lightColorScheme: n,
      darkColorScheme: r
    }));
      };
    });
      return;
    };
          light: q
        });
          dark: q
        });
      return () => {
      };
    }
    ...E,
  };
}
  const {
    themeId: t,
    /**
     * This `theme` object needs to follow a certain structure to
     * be used correctly by the finel `CssVarsProvider`. It should have a
     * `colorSchemes` key with the light and dark (and any other) palette.
     * It should also ideally have a vars object created using `prepareCssVars`.
     */
    theme: n = {},
    disableTransitionOnChange: s = !1,
    defaultColorScheme: a,
    resolveTheme: c
  } = e, f = {
    allColorSchemes: [],
    colorScheme: void 0,
    darkColorScheme: void 0,
    lightColorScheme: void 0,
    mode: void 0,
    setColorScheme: () => {
    },
    setMode: () => {
    },
    systemMode: void 0
    var ut, Et, Tt, At;
    const {
      children: I,
      theme: M,
      disableNestedContext: q = !1,
      noSsr: ee
      components: de = w,
      cssVarPrefix: ue
      mode: we,
      setMode: _e,
      systemMode: ce,
      lightColorScheme: Ce,
      darkColorScheme: Ne,
      colorScheme: Be,
      setColorScheme: tt
      supportedColorSchemes: ge,
      defaultLightColorScheme: fe,
      defaultDarkColorScheme: pe,
      defaultMode: be,
      noSsr: ee
    });
    const ot = x.useMemo(() => {
      var Ie;
        components: de,
        colorSchemes: ie,
        cssVarPrefix: ue,
        vars: Xe
      };
      if (typeof Oe.generateSpacing == "function" && (Oe.spacing = Oe.generateSpacing()), vt) {
        const pt = ie[vt];
        pt && typeof pt == "object" && Object.keys(pt).forEach((yt) => {
          pt[yt] && typeof pt[yt] == "object" ? Oe[yt] = {
            ...Oe[yt],
            ...pt[yt]
          } : Oe[yt] = pt[yt];
        });
      }
      return c ? c(Oe) : Oe;
        const vt = wt;
        let Xe = wt;
        if (vt === "class" && (Xe = ".%s"), vt === "data" && (Xe = "[data-%s]"), vt != null && vt.startsWith("data-") && !vt.includes("%s") && (Xe = `[${vt}="%s"]`), Xe.startsWith("."))
        else {
          const Oe = Xe.replace("%s", rt).match(/\[([^\]]+)\]/);
          if (Oe) {
            const [Ie, pt] = Oe[1].split("=");
            pt || ge.forEach((yt) => {
          } else
        }
      }
      let vt;
        }, 1);
      }
      return () => {
        clearTimeout(vt);
      };
      G.current = !1;
    }), []);
    const gt = x.useMemo(() => ({
      allColorSchemes: ge,
      colorScheme: rt,
      darkColorScheme: Ne,
      lightColorScheme: Ce,
      setColorScheme: tt,
      setMode: process.env.NODE_ENV === "production" ? _e : (vt) => {
        ot.colorSchemeSelector === "media" && console.error(["MUI: The `setMode` function has no effect if `colorSchemeSelector` is `media` (`media` is the default value).", "To toggle the mode manually, please configure `colorSchemeSelector` to use a class or data attribute.", "To learn more, visit https://mui.com/material-ui/customization/css-theme-variables/configuration/#toggling-dark-mode-manually"].join(`
`)), _e(vt);
      },
      systemMode: ce
    let nt = !0;
    const Ft = /* @__PURE__ */ $.jsxs(x.Fragment, {
        themeId: Q ? t : void 0,
        theme: ot,
        children: I
        styles: ((At = ot.generateStyleSheets) == null ? void 0 : At.call(ot)) || []
      })]
    });
      value: gt,
      children: Ft
    });
  }
  process.env.NODE_ENV !== "production" && (C.propTypes = {
    /**
     * The component tree.
     */
    children: u.node,
    /**
     * The node used to attach the color-scheme attribute
     */
    colorSchemeNode: u.any,
    /**
     * localStorage key used to store `colorScheme`
     */
    colorSchemeStorageKey: u.string,
    /**
     * The default mode when the storage is empty,
     * require the theme to have `colorSchemes` with light and dark.
     */
    defaultMode: u.string,
    /**
     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
     */
    disableNestedContext: u.bool,
    /**
     * If `true`, the style sheet won't be generated.
     *
     * This is useful for controlling nested CssVarsProvider behavior.
     */
    disableStyleSheetGeneration: u.bool,
    /**
     * Disable CSS transitions when switching between modes or color schemes.
     */
    disableTransitionOnChange: u.bool,
    /**
     * The document to attach the attribute to.
     */
    documentNode: u.any,
    /**
     * The key in the local storage used to store current color scheme.
     */
    modeStorageKey: u.string,
    /**
     * If `true`, the mode will be the same value as the storage without an extra rerendering after the hydration.
     * You should use this option in conjuction with `InitColorSchemeScript` component.
     */
    noSsr: u.bool,
    /**
     * The storage manager to be used for storing the mode and color scheme
     * @default using `window.localStorage`
     */
    storageManager: u.func,
    /**
     * The window that attaches the 'storage' event listener.
     * @default window
     */
    storageWindow: u.any,
    /**
     * The calculated theme object that will be passed through context.
     */
    theme: u.object
  });
  const T = typeof a == "string" ? a : a.light, E = typeof a == "string" ? a : a.dark;
  return {
    CssVarsProvider: C,
    useColorScheme: g,
      colorSchemeStorageKey: o,
      defaultLightColorScheme: T,
      defaultDarkColorScheme: E,
      modeStorageKey: r,
    })
  };
}
  function t(...r) {
    if (!r.length)
      return "";
    const o = r[0];
    return typeof o == "string" && !o.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/) ? `, var(--${e ? `${e}-` : ""}${o}${t(...r.slice(1))})` : `, ${o}`;
  }
  return (r, ...o) => `var(--${e ? `${e}-` : ""}${r}${t(...o)})`;
}
  let o = e;
  t.forEach((s, a) => {
    a === t.length - 1 ? Array.isArray(o) ? o[Number(s)] = n : o && typeof o == "object" && (o[s] = n) : o && typeof o == "object" && (o[s] || (o[s] = r.includes(s) ? [] : {}), o = o[s]);
  });
  function r(o, s = [], a = []) {
    Object.entries(o).forEach(([c, f]) => {
      (!n || n && !n([...s, c])) && f != null && (typeof f == "object" && Object.keys(f).length > 0 ? r(f, [...s, c], Array.isArray(f) ? [...a, c] : a) : t([...s, c], f, a));
    });
  }
  r(e);
  const {
    prefix: n,
    shouldSkipGeneratingVar: r
  } = t || {}, o = {}, s = {}, a = {};
    e,
      if ((typeof f == "string" || typeof f == "number") && (!r || !r(c, f))) {
        Object.assign(o, {
      }
    },
    (c) => c[0] === "vars"
    // skip 'vars/*' paths
  ), {
    css: o,
    vars: s,
    varsWithDefaults: a
  };
}
  const {
    getSelector: n = O,
    disableCssColorScheme: r,
    colorSchemeSelector: o
  } = t, {
    colorSchemes: s = {},
    components: a,
    defaultColorScheme: c = "light",
    ...f
  } = e, {
    css: g,
  const C = {}, {
    [c]: T,
    ...E
  } = s;
    const {
    };
  }), T) {
    const {
      css: M,
      css: M,
    };
  }
        return e.defaultColorScheme === M ? ":root" : {
          }
        };
    }
    return ":root";
  }
  return {
    vars: w,
    generateThemeVars: () => {
      let M = {
      };
      return Object.entries(C).forEach(([, {
      }]) => {
      }), M;
    },
    generateStyleSheets: () => {
            ...q
          }
      }
        ...g
      }), g);
      const {
      } = C;
        const {
          colorScheme: q,
        } : {
        };
      }
        css: q
      }]) => {
        var ee, G;
          ...q
        } : {
          ...q
        };
      }), M;
    }
  };
}
  return function(n) {
    return e === "media" ? (process.env.NODE_ENV !== "production" && n !== "light" && n !== "dark" && console.error(`MUI: @media (prefers-color-scheme) supports only 'light' or 'dark', but receive '${n}'.`), `@media (prefers-color-scheme: ${n})`) : e ? e.startsWith("data-") && !e.includes("%s") ? `[${e}="${n}"] &` : e === "class" ? `.${n} &` : e === "data" ? `[data-${n}] &` : `${e.replace("%s", n)} &` : "&";
  };
}
  name: "MuiContainer",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[`maxWidth${He(String(n.maxWidth))}`], n.fixed && t.fixed, n.disableGutters && t.disableGutters];
  }
  props: e,
  name: "MuiContainer",
    classes: r,
    fixed: o,
    disableGutters: s,
    maxWidth: a
  } = e, c = {
    root: ["root", a && `maxWidth${He(String(a))}`, o && "fixed", s && "disableGutters"]
  };
  return mt(c, n, r);
};
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    componentName: r = "MuiContainer"
  } = e, o = t(({
    theme: a,
    ownerState: c
  }) => ({
    width: "100%",
    marginLeft: "auto",
    boxSizing: "border-box",
    marginRight: "auto",
    ...!c.disableGutters && {
      paddingLeft: a.spacing(2),
      paddingRight: a.spacing(2),
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [a.breakpoints.up("sm")]: {
        paddingLeft: a.spacing(3),
        paddingRight: a.spacing(3)
      }
    }
  }), ({
    theme: a,
    ownerState: c
    }), f;
  }, {}), ({
    theme: a,
    ownerState: c
  }) => ({
    // @ts-ignore module augmentation fails if custom breakpoints are used
    ...c.maxWidth === "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [a.breakpoints.up("xs")]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: Math.max(a.breakpoints.values.xs, 444)
      }
    },
    ...c.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
    c.maxWidth !== "xs" && {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      [a.breakpoints.up(c.maxWidth)]: {
        // @ts-ignore module augmentation fails if custom breakpoints are used
        maxWidth: `${a.breakpoints.values[c.maxWidth]}${a.breakpoints.unit}`
      }
    }
  })), s = /* @__PURE__ */ x.forwardRef(function(c, f) {
      className: g,
      disableGutters: w = !1,
      fixed: C = !1,
      maxWidth: T = "lg",
      classes: E,
      ...O
      disableGutters: w,
      fixed: C,
      maxWidth: T
    return (
      // @ts-ignore theme is injected by the styled util
      /* @__PURE__ */ $.jsx(o, {
        className: et(I.root, g),
        ref: f,
        ...O
      })
    );
  });
  return process.env.NODE_ENV !== "production" && (s.propTypes = {
    children: u.node,
    classes: u.object,
    className: u.string,
    component: u.elementType,
    disableGutters: u.bool,
    fixed: u.bool,
    maxWidth: u.oneOfType([u.oneOf(["xs", "sm", "md", "lg", "xl", !1]), u.string]),
    sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
  }), s;
}
  const r = e.keys[0];
  Array.isArray(t) ? t.forEach((o, s) => {
    n((a, c) => {
      s <= e.keys.length - 1 && (s === 0 ? Object.assign(a, c) : a[e.up(e.keys[s])] = c);
    }, o);
    if (e.keys.includes(s)) {
      const a = t[s];
      a !== void 0 && n((c, f) => {
        r === s ? Object.assign(c, f) : c[e.up(s)] = f;
      }, a);
    }
  }) : (typeof t == "number" || typeof t == "string") && n((o, s) => {
    Object.assign(o, s);
  }, t);
};
  return `--Grid-${e}Spacing`;
}
  return `--Grid-parent-${e}Spacing`;
}
  theme: e,
  ownerState: t
}) => {
  const n = {};
    let s = {};
    o === "grow" && (s = {
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: "100%"
    }), o === "auto" && (s = {
      flexBasis: "auto",
      flexGrow: 0,
      flexShrink: 0,
      maxWidth: "none",
      width: "auto"
    }), typeof o == "number" && (s = {
      flexGrow: 0,
      flexBasis: "auto",
    }), r(n, s);
  }), n;
  theme: e,
  ownerState: t
}) => {
  const n = {};
    let s = {};
    o === "auto" && (s = {
      marginLeft: "auto"
    }), typeof o == "number" && (s = {
    }), r(n, s);
  }), n;
  theme: e,
  ownerState: t
}) => {
  if (!t.container)
    return {};
  const n = {
  };
    const s = o ?? 12;
    r(n, {
      "> *": {
      }
    });
  }), n;
  theme: e,
  ownerState: t
}) => {
  if (!t.container)
    return {};
  const n = {};
    var a;
    const s = typeof o == "string" ? o : (a = e.spacing) == null ? void 0 : a.call(e, o);
    r(n, {
      "> *": {
      }
    });
  }), n;
  theme: e,
  ownerState: t
}) => {
  if (!t.container)
    return {};
  const n = {};
    var a;
    const s = typeof o == "string" ? o : (a = e.spacing) == null ? void 0 : a.call(e, o);
    r(n, {
      "> *": {
      }
    });
  }), n;
  theme: e,
  ownerState: t
}) => {
  if (!t.container)
    return {};
  const n = {};
    r(n, {
      flexDirection: o
    });
  }), n;
  ownerState: e
}) => ({
  minWidth: 0,
  boxSizing: "border-box",
  ...e.container && {
    display: "flex",
    flexWrap: "wrap",
    ...e.wrap && e.wrap !== "wrap" && {
      flexWrap: e.wrap
    },
  }
  const t = [];
  return Object.entries(e).forEach(([n, r]) => {
    r !== !1 && r !== void 0 && t.push(`grid-${n}-${String(r)}`);
  }), t;
  function n(r) {
    return r === void 0 ? !1 : typeof r == "string" && !Number.isNaN(Number(r)) || typeof r == "number" && r > 0;
  }
  if (n(e))
    return [`spacing-${t}-${String(e)}`];
  if (typeof e == "object" && !Array.isArray(e)) {
    const r = [];
    return Object.entries(e).forEach(([o, s]) => {
      n(s) && r.push(`spacing-${o}-${String(s)}`);
    }), r;
  }
  return [];
  const n = [];
  e.item !== void 0 && (delete e.item, n.push("item")), e.zeroMinWidth !== void 0 && (delete e.zeroMinWidth, n.push("zeroMinWidth")), t.keys.forEach((r) => {
    e[r] !== void 0 && (n.push(r), delete e[r]);
  }), process.env.NODE_ENV !== "production" && n.forEach((r) => {
`));
  });
}
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (e, t) => t.root
});
    props: e,
    name: "MuiGrid",
  });
}
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    componentName: o = "MuiGrid"
    const {
      direction: w,
      spacing: C,
      wrap: T,
      size: E
    };
  };
    const w = {};
    const {
      className: E,
      children: O,
      container: I = !1,
      component: M = "div",
      unstable_level: q = 0,
      ...T,
      level: q,
      columns: G,
      container: I,
      rowSpacing: X,
      columnSpacing: te,
      offset: ee
    }, Q = s(re, w);
    return /* @__PURE__ */ $.jsx(c, {
      as: M,
      ownerState: re,
      className: et(Q.root, E),
        var ie;
      })
    });
  });
  return process.env.NODE_ENV !== "production" && (f.propTypes = {
    children: u.node,
    className: u.string,
    columns: u.oneOfType([u.arrayOf(u.number), u.number, u.object]),
    columnSpacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
    component: u.elementType,
    container: u.bool,
    direction: u.oneOfType([u.oneOf(["column-reverse", "column", "row-reverse", "row"]), u.arrayOf(u.oneOf(["column-reverse", "column", "row-reverse", "row"])), u.object]),
    offset: u.oneOfType([u.string, u.number, u.arrayOf(u.oneOfType([u.string, u.number])), u.object]),
    rowSpacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
    size: u.oneOfType([u.string, u.bool, u.number, u.arrayOf(u.oneOfType([u.string, u.bool, u.number])), u.object]),
    spacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
    sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
    wrap: u.oneOf(["nowrap", "wrap-reverse", "wrap"])
  }), f.muiName = "Grid", f;
}
  name: "MuiStack",
  slot: "Root",
  overridesResolver: (e, t) => t.root
});
    props: e,
    name: "MuiStack",
  });
}
  const n = x.Children.toArray(e).filter(Boolean);
  return n.reduce((r, o, s) => (r.push(o), s < n.length - 1 && r.push(/* @__PURE__ */ x.cloneElement(t, {
    key: `separator-${s}`
  })), r), []);
}
  row: "Left",
  "row-reverse": "Right",
  column: "Top",
  "column-reverse": "Bottom"
  ownerState: e,
  theme: t
}) => {
  let n = {
    display: "flex",
    flexDirection: "column",
      theme: t
      values: e.direction,
      breakpoints: t.breakpoints.values
    }), (r) => ({
      flexDirection: r
    }))
  };
  if (e.spacing) {
      values: e.direction,
      base: o
      values: e.spacing,
      base: o
    });
      if (!s[f]) {
        s[f] = w;
      }
      theme: t
    } : {
      // The useFlexGap={false} implement relies on each child to give up control of the margin.
      // We need to reset the margin to avoid double spacing.
      "& > :not(style):not(style)": {
        margin: 0
      },
      "& > :not(style) ~ :not(style)": {
      }
    }));
  }
};
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    componentName: r = "MuiStack"
  } = e, o = () => mt({
    root: ["root"]
      component: w = "div",
      direction: C = "column",
      spacing: T = 0,
      divider: E,
      children: O,
      useFlexGap: I = !1,
      ...M
      direction: C,
      spacing: T,
      useFlexGap: I
    return /* @__PURE__ */ $.jsx(s, {
      as: w,
      ...M,
    });
  });
  return process.env.NODE_ENV !== "production" && (a.propTypes = {
    children: u.node,
    direction: u.oneOfType([u.oneOf(["column-reverse", "column", "row-reverse", "row"]), u.arrayOf(u.oneOf(["column-reverse", "column", "row-reverse", "row"])), u.object]),
    divider: u.node,
    spacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
    sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
  }), a;
}
  return {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
}
  return {
    text: {
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
}
  const o = r.light || r, s = r.dark || r * 1.5;
}
  return e === "dark" ? {
  } : {
  };
}
  return e === "dark" ? {
  } : {
  };
}
  return e === "dark" ? {
  } : {
  };
}
  return e === "dark" ? {
  } : {
  };
}
  return e === "dark" ? {
  } : {
  };
}
  return e === "dark" ? {
  } : {
    main: "#ed6c02",
    // closest to orange[800] that pass 3:1.
  };
}
  const {
    mode: t = "light",
    contrastThreshold: n = 3,
    tonalOffset: r = 0.2,
    ...o
    if (process.env.NODE_ENV !== "production") {
`));
    }
    return O;
  }
  const w = ({
    color: E,
    name: O,
    lightShade: I = 300,
    darkShade: M = 700
  }) => {
    if (E = {
      ...E
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${O ? ` (${O})` : ""} provided to augmentColor(color) is invalid.
    if (typeof E.main != "string")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The color${O ? ` (${O})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(E.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
  };
  let C;
    // A collection of common colors.
    common: {
    },
    // prevent mutable object.
    // The palette mode, can be light or dark.
    mode: t,
    // The colors used to represent primary interface elements for a user.
    primary: w({
      color: s,
      name: "primary"
    }),
    // The colors used to represent secondary interface elements for a user.
    secondary: w({
      color: a,
      name: "secondary",
      mainShade: "A400",
      lightShade: "A200",
      darkShade: "A700"
    }),
    // The colors used to represent interface elements that the user should be made aware of.
    error: w({
      color: c,
      name: "error"
    }),
    // The colors used to represent potentially dangerous actions or important messages.
    warning: w({
      color: g,
      name: "warning"
    }),
    // The colors used to present information to the user that is neutral and not necessarily important.
    info: w({
      color: f,
      name: "info"
    }),
    // The colors used to indicate the successful completion of an action that user triggered.
    success: w({
      name: "success"
    }),
    // The grey colors.
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: n,
    // Takes a background color and returns the text color that maximizes the contrast.
    // Generate a rich color object.
    augmentColor: w,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: r,
    // The light and dark mode object.
    ...C
  }, o);
}
  const t = {};
  return Object.entries(e).forEach((r) => {
    const [o, s] = r;
    typeof s == "object" && (t[o] = `${s.fontStyle ? `${s.fontStyle} ` : ""}${s.fontVariant ? `${s.fontVariant} ` : ""}${s.fontWeight ? `${s.fontWeight} ` : ""}${s.fontStretch ? `${s.fontStretch} ` : ""}${s.fontSize || ""}${s.lineHeight ? `/${s.lineHeight} ` : ""}${s.fontFamily || ""}`);
  }), t;
}
  return {
    toolbar: {
      minHeight: 56,
      [e.up("xs")]: {
        "@media (orientation: landscape)": {
          minHeight: 48
        }
      },
      [e.up("sm")]: {
        minHeight: 64
      }
    },
    ...t
  };
}
  return Math.round(e * 1e5) / 1e5;
}
  textTransform: "uppercase"
  const {
    // The default font size of the Material Specification.
    fontSize: r = 14,
    // px
    fontWeightLight: o = 300,
    fontWeightRegular: s = 400,
    fontWeightMedium: a = 500,
    fontWeightBold: c = 700,
    // Tell MUI what's the font-size on the html element.
    // 16px is the default font-size used by browsers.
    htmlFontSize: f = 16,
    // Apply the CSS properties to all the variants.
    pxToRem: g,
  } = typeof t == "function" ? t(e) : t;
  process.env.NODE_ENV !== "production" && (typeof r != "number" && console.error("MUI: `fontSize` is required to be a number."), typeof f != "number" && console.error("MUI: `htmlFontSize` is required to be a number."));
    fontFamily: n,
    fontWeight: O,
    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
    lineHeight: I,
    // The letter spacing was designed for the Roboto font-family. Using the same letter-spacing
    // across font-families can cause issues with the kerning.
    } : {},
  }), E = {
    h1: T(o, 96, 1.167, -1.5),
    h2: T(o, 60, 1.2, -0.5),
    h3: T(s, 48, 1.167, 0),
    h4: T(s, 34, 1.235, 0.25),
    h5: T(s, 24, 1.334, 0),
    h6: T(a, 20, 1.6, 0.15),
    subtitle1: T(s, 16, 1.75, 0.15),
    subtitle2: T(a, 14, 1.57, 0.1),
    body1: T(s, 16, 1.5, 0.15),
    body2: T(s, 14, 1.43, 0.15),
    caption: T(s, 12, 1.66, 0.4),
    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
    inherit: {
      fontFamily: "inherit",
      fontWeight: "inherit",
      fontSize: "inherit",
      lineHeight: "inherit",
      letterSpacing: "inherit"
    }
  };
    htmlFontSize: f,
    pxToRem: C,
    fontFamily: n,
    fontSize: r,
    fontWeightLight: o,
    fontWeightRegular: s,
    fontWeightMedium: a,
    fontWeightBold: c,
    ...E
    clone: !1
    // No need to clone deep
  });
}
}
  // This is the most common easing curve.
  easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
  // Objects enter the screen at full velocity from off-screen and
  // slowly decelerate to a resting point.
  easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
  easeIn: "cubic-bezier(0.4, 0, 1, 1)",
  // The sharp curve is used by objects that may return to the screen at any time.
  sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  shortest: 150,
  shorter: 200,
  short: 250,
  // most basic recommended timing
  standard: 300,
  // this is to be used in complex animations
  complex: 375,
  // recommended when something is entering screen
  enteringScreen: 225,
  // recommended when something is leaving screen
  leavingScreen: 195
};
  return `${Math.round(e)}ms`;
}
  if (!e)
    return 0;
  const t = e / 36;
  return Math.min(Math.round((4 + 15 * t ** 0.25 + t / 5) * 10), 3e3);
}
  const t = {
    ...e.easing
  }, n = {
    ...e.duration
  };
  return {
    create: (o = ["all"], s = {}) => {
      const {
        duration: a = n.standard,
        easing: c = t.easeInOut,
        delay: f = 0,
      } = s;
      if (process.env.NODE_ENV !== "production") {
      }
    },
    ...e,
    easing: t,
    duration: n
  };
}
  mobileStepper: 1e3,
  fab: 1050,
  speedDial: 1050,
  appBar: 1100,
  drawer: 1200,
  modal: 1300,
  snackbar: 1400,
  tooltip: 1500
};
}
  const t = {
    ...e
  };
  function n(r) {
    const o = Object.entries(r);
    for (let s = 0; s < o.length; s++) {
      const [a, c] = o[s];
        ...c
      }, n(r[a]));
    }
  }
  return n(t), `import { unstable_createBreakpoints as createBreakpoints, createTransitions } from '@mui/material/styles';

const theme = ${JSON.stringify(t, null, 2)};

theme.breakpoints = createBreakpoints(theme.breakpoints || {});
theme.transitions = createTransitions(theme.transitions || {});

export default theme;`;
}
  const {
    breakpoints: n,
    mixins: r = {},
    spacing: o,
    palette: s = {},
    transitions: a = {},
    typography: c = {},
    shape: f,
  } = e;
  if (e.vars && // The error should throw only for the root theme creation because user is not allowed to use a custom node `vars`.
  // `generateThemeVars` is the closest identifier for checking that the `options` is a result of `createTheme` with CSS variables so that user can create new theme for nested ThemeProvider.
  e.generateThemeVars === void 0)
    palette: g,
    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
    zIndex: {
    }
  });
    const C = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"], T = (E, O) => {
          if (process.env.NODE_ENV !== "production") {
              root: {
                [`&.${M}`]: I
              }
            }, null, 2), "", "https://mui.com/r/state-classes-guide"].join(`
`));
          }
        }
      }
    };
    Object.keys(w.components).forEach((E) => {
      const O = w.components[E].styleOverrides;
      O && E.startsWith("Mui") && T(O, E);
    });
  }
  return w.unstable_sxConfig = {
  }, w.unstable_sx = function(T) {
      sx: T,
      theme: this
    });
}
  let t;
  return e < 1 ? t = 5.11916 * e ** 2 : t = 4.5 * Math.log(e + 1) + 2, Math.round(t * 10) / 1e3;
}
  if (t === 0)
    return "none";
  return `linear-gradient(rgba(255 255 255 / ${n}), rgba(255 255 255 / ${n}))`;
});
  return {
    inputPlaceholder: e === "dark" ? 0.5 : 0.42,
    inputUnderline: e === "dark" ? 0.7 : 0.42,
    switchTrackDisabled: e === "dark" ? 0.2 : 0.12,
    switchTrack: e === "dark" ? 0.3 : 0.38
  };
}
}
  const {
    palette: t = {
      mode: "light"
    },
    // need to cast to avoid module augmentation test
    opacity: n,
    overlays: r,
    ...o
  return {
    palette: s,
    opacity: {
      ...n
    },
    ...o
  };
}
  var t;
  return !!e[0].match(/(cssVarPrefix|colorSchemeSelector|modularCssLayers|rootSelector|typography|mixins|breakpoints|direction|transitions)/) || !!e[0].match(/sxConfig$/) || // ends with sxConfig
  e[0] === "palette" && !!((t = e[1]) != null && t.match(/(mode|contrastThreshold|tonalOffset)/));
}
  const r = e.rootSelector || ":root", o = e.colorSchemeSelector;
  let s = o;
  if (o === "class" && (s = ".%s"), o === "data" && (s = "[data-%s]"), o != null && o.startsWith("data-") && !o.includes("%s") && (s = `[${o}="%s"]`), e.defaultColorScheme === t) {
    if (t === "dark") {
      const a = {};
        a[c] = n[c], delete n[c];
      }), s === "media" ? {
        [r]: n,
        "@media (prefers-color-scheme: dark)": {
          [r]: a
        }
      } : s ? {
        [s.replace("%s", t)]: a,
        [`${r}, ${s.replace("%s", t)}`]: n
      } : {
        [r]: {
          ...n,
          ...a
        }
      };
    }
    if (s && s !== "media")
      return `${r}, ${s.replace("%s", String(t))}`;
  } else if (t) {
    if (s === "media")
      return {
        [`@media (prefers-color-scheme: ${String(t)})`]: {
          [r]: n
        }
      };
    if (s)
      return s.replace("%s", String(t));
  }
  return r;
};
  t.forEach((n) => {
    e[n] || (e[n] = {});
  });
}
function Ke(e, t, n) {
  !e[t] && n && (e[t] = n);
}
}
To suppress this warning, you need to explicitly provide the \`palette.${t}Channel\` as a string (in rgb format, for example "12 12 12") or undefined if you want to remove the channel token.`));
}
  return typeof e == "number" ? `${e}px` : typeof e == "string" || typeof e == "function" || Array.isArray(e) ? e : "8px";
}
  try {
    return e();
  } catch {
  }
  if (!t)
    return;
  t = t === !0 ? {} : t;
  const o = r === "dark" ? "dark" : "light";
  if (!n) {
      ...t,
      palette: {
        mode: o,
        ...t == null ? void 0 : t.palette
      }
    });
    return;
  }
  const {
    palette: s,
    ...a
    ...n,
    palette: {
      mode: o,
      ...t == null ? void 0 : t.palette
    }
  });
  return e[r] = {
    ...t,
    palette: s,
    opacity: {
      ...t == null ? void 0 : t.opacity
    },
  }, a;
}
  const {
    colorSchemes: n = {
      light: !0
    },
    defaultColorScheme: r,
    disableCssColorScheme: o = !1,
    cssVarPrefix: s = "mui",
    colorSchemeSelector: c = n.light && n.dark ? "media" : void 0,
    rootSelector: f = ":root",
    light: T,
    dark: E,
    ...O
    ...O
  };
  let I = C;
    ...M,
    cssVarPrefix: s,
    colorSchemeSelector: c,
    rootSelector: f,
    getCssVar: w,
    font: {
      ...M.font
    },
  };
    };
    });
    prefix: s,
    disableCssColorScheme: o,
    shouldSkipGeneratingVar: a,
  }, {
      theme: this
    });
}
  e.colorSchemes && n && (e.colorSchemes[t] = {
    ...n !== !0 && n,
      ...n === !0 ? {} : n.palette,
      mode: t
    })
    // cast type to skip module augmentation test
  });
}
  const {
    palette: n,
    cssVariables: r = !1,
    colorSchemes: o = n ? void 0 : {
      light: !0
    },
    defaultColorScheme: s = n == null ? void 0 : n.mode,
    ...a
    ...o,
    ...n ? {
      [c]: {
        ...typeof f != "boolean" && f,
        palette: n
      }
    } : void 0
  };
  if (r === !1) {
    if (!("colorSchemes" in e))
    let g = n;
      mode: "dark"
    }));
      ...e,
      palette: g
    }, ...t);
    ...a,
    defaultColorScheme: c,
    ...typeof r != "boolean" && r
  }, ...t);
}
  return String(e).match(/[\d.\-+]*\s*(.*)/)[1] || "";
}
  return parseFloat(e);
}
}
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
});
  theme: e,
  ...t
}) {
    ...t,
    theme: n || e
  });
}
  colorSchemeStorageKey: "mui-color-scheme",
  defaultLightColorScheme: "light",
  defaultDarkColorScheme: "dark",
  modeStorageKey: "mui-mode"
}, {
  // @ts-ignore ignore module augmentation tests
    cssVariables: !0
  }),
  defaultColorScheme: {
  },
  resolveTheme: (e) => {
    const t = {
      ...e,
    };
    return t.unstable_sx = function(r) {
        sx: r,
        theme: this
      });
    }, t;
  }
  theme: e,
  ...t
}) {
  const n = x.useMemo(() => {
    if (typeof e == "function")
      return e;
    return "colorSchemes" in r ? null : "vars" in r ? e : {
      ...e,
      vars: null
    };
  }, [e]);
    theme: n,
    ...t
    theme: e,
    ...t
  });
}
    ...e,
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: u.oneOfType([u.array, u.func, u.number, u.object, u.string, u.bool])
});
  return function(n) {
    return (
      // Pigment CSS `globalCss` support callback with theme inside an object but `GlobalStyles` support theme as a callback value.
        styles: typeof e == "function" ? (r) => e({
          theme: r,
          ...n
        }) : e
      })
    );
  };
}
}
process.env.NODE_ENV !== "production" && (u.node, u.object.isRequired);
}
}
  const {
    color: t,
    fontSize: n,
    classes: r
  } = e, o = {
    root: ["root", t !== "inherit" && `color${He(t)}`, `fontSize${He(n)}`]
  };
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.color !== "inherit" && t[`color${He(n.color)}`], t[`fontSize${He(n.fontSize)}`]];
  }
})(Zt(({
  theme: e
}) => {
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    flexShrink: 0,
    transition: (o = (t = e.transitions) == null ? void 0 : t.create) == null ? void 0 : o.call(t, "fill", {
      duration: (r = (n = (e.vars ?? e).transitions) == null ? void 0 : n.duration) == null ? void 0 : r.shorter
    }),
    variants: [
      {
        props: (E) => !E.hasSvgAsChild,
        style: {
          // the <svg> will define the property that has `currentColor`
          // for example heroicons uses fill="none" and stroke="currentColor"
          fill: "currentColor"
        }
      },
      {
        props: {
          fontSize: "inherit"
        },
        style: {
          fontSize: "inherit"
        }
      },
      {
        props: {
          fontSize: "small"
        },
        style: {
          fontSize: ((a = (s = e.typography) == null ? void 0 : s.pxToRem) == null ? void 0 : a.call(s, 20)) || "1.25rem"
        }
      },
      {
        props: {
          fontSize: "medium"
        },
        style: {
          fontSize: ((f = (c = e.typography) == null ? void 0 : c.pxToRem) == null ? void 0 : f.call(c, 24)) || "1.5rem"
        }
      },
      {
        props: {
          fontSize: "large"
        },
        style: {
        }
      },
      // TODO v5 deprecate color prop, v6 remove for sx
      ...Object.entries((e.vars ?? e).palette).filter(([, E]) => E && E.main).map(([E]) => {
        return {
          props: {
            color: E
          },
          style: {
          }
        };
      }),
      {
        props: {
          color: "action"
        },
        style: {
        }
      },
      {
        props: {
          color: "disabled"
        },
        style: {
          color: (T = (C = (e.vars ?? e).palette) == null ? void 0 : C.action) == null ? void 0 : T.disabled
        }
      },
      {
        props: {
          color: "inherit"
        },
        style: {
          color: void 0
        }
      }
    ]
  };
    props: t,
    name: "MuiSvgIcon"
  }), {
    children: o,
    className: s,
    color: a = "inherit",
    component: c = "svg",
    fontSize: f = "medium",
    inheritViewBox: g = !1,
    viewBox: w = "0 0 24 24",
    ...C
  } = r, T = /* @__PURE__ */ x.isValidElement(o) && o.type === "svg", E = {
    ...r,
    color: a,
    component: c,
    fontSize: f,
    instanceFontSize: t.fontSize,
    inheritViewBox: g,
    viewBox: w,
    hasSvgAsChild: T
  }, O = {};
  g || (O.viewBox = w);
    as: c,
    focusable: "false",
    ref: n,
    ...O,
    ...C,
    ...T && o.props,
    ownerState: E,
    }) : null]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: u.oneOfType([u.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: u.oneOfType([u.oneOf(["inherit", "large", "medium", "small"]), u.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: u.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: u.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: u.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: u.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: u.string
});
  function n(r, o) {
      "data-testid": `${t}Icon`,
      ref: o,
      ...r,
      children: e
    });
  }
}
  if (!e)
    return t;
  if (typeof e == "function" || typeof t == "function")
    return (o) => {
      const s = typeof t == "function" ? t(o) : t, a = typeof e == "function" ? e({
        ...o,
        ...s
      }) : e, c = et(o == null ? void 0 : o.className, s == null ? void 0 : s.className, a == null ? void 0 : a.className);
      return {
        ...s,
        ...a,
        ...!!c && {
          className: c
        },
        ...(s == null ? void 0 : s.style) && (a == null ? void 0 : a.style) && {
          style: {
            ...s.style,
            ...a.style
          }
        },
        ...(s == null ? void 0 : s.sx) && (a == null ? void 0 : a.sx) && {
          sx: [...Array.isArray(s.sx) ? s.sx : [s.sx], ...Array.isArray(a.sx) ? a.sx : [a.sx]]
        }
      };
    };
  const n = t, r = et(n == null ? void 0 : n.className, e == null ? void 0 : e.className);
  return {
    ...t,
    ...e,
    ...!!r && {
      className: r
    },
    ...(n == null ? void 0 : n.style) && (e == null ? void 0 : e.style) && {
      style: {
        ...n.style,
        ...e.style
      }
    },
    ...(n == null ? void 0 : n.sx) && (e == null ? void 0 : e.sx) && {
      sx: [...Array.isArray(n.sx) ? n.sx : [n.sx], ...Array.isArray(e.sx) ? e.sx : [e.sx]]
    }
  };
}
function qt(e, t) {
  if (e == null) return {};
  var n = {};
  for (var r in e) if ({}.hasOwnProperty.call(e, r)) {
    if (t.indexOf(r) !== -1) continue;
    n[r] = e[r];
  }
  return n;
}
    return n.__proto__ = r, n;
}
}
  disabled: !1
};
  enter: u.number,
  exit: u.number,
  appear: u.number
}).isRequired]) : null;
process.env.NODE_ENV !== "production" && u.oneOfType([u.string, u.shape({
  enter: u.string,
  exit: u.string,
  active: u.string
}), u.shape({
  enter: u.string,
  enterDone: u.string,
  enterActive: u.string,
  exit: u.string,
  exitDone: u.string,
  exitActive: u.string
})]);
  return t.scrollTop;
  function t(r, o) {
    var s;
    s = e.call(this, r, o) || this;
    var a = o, c = a && !a.isMounting ? r.enter : r.appear, f;
      status: f
    }, s.nextCallback = null, s;
  }
  t.getDerivedStateFromProps = function(o, s) {
    var a = o.in;
    } : null;
  };
  var n = t.prototype;
  return n.componentDidMount = function() {
    this.updateStatus(!0, this.appearStatus);
  }, n.componentDidUpdate = function(o) {
    var s = null;
    if (o !== this.props) {
      var a = this.state.status;
    }
    this.updateStatus(!1, s);
  }, n.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, n.getTimeouts = function() {
    var o = this.props.timeout, s, a, c;
    return s = a = c = o, o != null && typeof o != "number" && (s = o.exit, a = o.enter, c = o.appear !== void 0 ? o.appear : a), {
      exit: s,
      enter: a,
      appear: c
    };
  }, n.updateStatus = function(o, s) {
    if (o === void 0 && (o = !1), s !== null)
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
        }
        this.performEnter(o);
      } else
        this.performExit();
    });
  }, n.performEnter = function(o) {
      this.safeSetState({
      }, function() {
      });
      return;
    }
    }, function() {
        s.safeSetState({
        }, function() {
        });
      });
    });
  }, n.performExit = function() {
      this.safeSetState({
      }, function() {
        o.props.onExited(c);
      });
      return;
    }
    this.props.onExit(c), this.safeSetState({
    }, function() {
      o.props.onExiting(c), o.onTransitionEnd(a.exit, function() {
        o.safeSetState({
        }, function() {
          o.props.onExited(c);
        });
      });
    });
  }, n.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, n.safeSetState = function(o, s) {
    s = this.setNextCallback(s), this.setState(o, s);
  }, n.setNextCallback = function(o) {
    var s = this, a = !0;
    return this.nextCallback = function(c) {
      a && (a = !1, s.nextCallback = null, o(c));
    }, this.nextCallback.cancel = function() {
      a = !1;
    }, this.nextCallback;
  }, n.onTransitionEnd = function(o, s) {
    this.setNextCallback(s);
    if (!a || c) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
    }
    o != null && setTimeout(this.nextCallback, o);
  }, n.render = function() {
    var o = this.state.status;
      return null;
    var s = this.props, a = s.children;
    s.in, s.mountOnEnter, s.unmountOnExit, s.appear, s.enter, s.exit, s.timeout, s.addEndListener, s.onEnter, s.onEntering, s.onEntered, s.onExit, s.onExiting, s.onExited, s.nodeRef;
    var c = qt(s, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
        value: null
    );
  }, t;
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: u.shape({
    current: typeof Element > "u" ? u.any : function(e, t, n, r, o, s) {
      var a = e[t];
      return u.instanceOf(a && "ownerDocument" in a ? a.ownerDocument.defaultView.Element : Element)(e, t, n, r, o, s);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: u.oneOfType([u.func.isRequired, u.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: u.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: u.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: u.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: u.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: u.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: u.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function(t) {
    t.addEndListener || (n = n.isRequired);
    for (var r = arguments.length, o = new Array(r > 1 ? r - 1 : 0), s = 1; s < r; s++)
      o[s - 1] = arguments[s];
    return n.apply(void 0, [t].concat(o));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: u.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: u.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: u.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: u.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: u.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: u.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: u.func
} : {};
function fv() {
}
Cu.defaultProps = {
  in: !1,
  mountOnEnter: !1,
  unmountOnExit: !1,
  appear: !1,
  enter: !0,
  exit: !0,
  onEnter: fv,
  onEntering: fv,
  onEntered: fv,
};
  if (e === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
  var n = function(s) {
    return t && x.isValidElement(s) ? t(s) : s;
  }, r = /* @__PURE__ */ Object.create(null);
  return e && x.Children.map(e, function(o) {
    return o;
  }).forEach(function(o) {
    r[o.key] = n(o);
  }), r;
}
  e = e || {}, t = t || {};
  function n(g) {
    return g in t ? t[g] : e[g];
  }
  var r = /* @__PURE__ */ Object.create(null), o = [];
  for (var s in e)
    s in t ? o.length && (r[s] = o, o = []) : o.push(s);
  var a, c = {};
  for (var f in t) {
    if (r[f])
      for (a = 0; a < r[f].length; a++) {
      }
    c[f] = n(f);
  }
  for (a = 0; a < o.length; a++)
    c[o[a]] = n(o[a]);
  return c;
}
  return n[t] != null ? n[t] : e.props[t];
}
    return x.cloneElement(n, {
      onExited: t.bind(null, n),
      in: !0,
    });
  });
}
  return Object.keys(o).forEach(function(s) {
    var a = o[s];
    if (x.isValidElement(a)) {
      f && (!c || g) ? o[s] = x.cloneElement(a, {
        onExited: n.bind(null, a),
        in: !0,
      }) : !f && c && !g ? o[s] = x.cloneElement(a, {
        in: !1
        onExited: n.bind(null, a),
      }));
    }
  }), o;
}
  return Object.keys(e).map(function(t) {
    return e[t];
  });
  component: "div",
  childFactory: function(t) {
    return t;
  }
  function t(r, o) {
    var s;
    s = e.call(this, r, o) || this;
    return s.state = {
      contextValue: {
        isMounting: !0
      },
      handleExited: a,
      firstRender: !0
    }, s;
  }
  var n = t.prototype;
  return n.componentDidMount = function() {
    this.mounted = !0, this.setState({
      contextValue: {
        isMounting: !1
      }
    });
  }, n.componentWillUnmount = function() {
    this.mounted = !1;
  }, t.getDerivedStateFromProps = function(o, s) {
    var a = s.children, c = s.handleExited, f = s.firstRender;
    return {
      firstRender: !1
    };
  }, n.handleExited = function(o, s) {
    o.key in a || (o.props.onExited && o.props.onExited(s), this.mounted && this.setState(function(c) {
      var f = J({}, c.children);
      return delete f[o.key], {
        children: f
      };
    }));
  }, n.render = function() {
      value: f
      value: f
  }, t;
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: u.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: u.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: u.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: u.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: u.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: u.func
} : {};
  const {
    timeout: n,
    easing: r,
    style: o = {}
  } = e;
  return {
    duration: o.transitionDuration ?? (typeof n == "number" ? n : n[t.mode] || 0),
    easing: o.transitionTimingFunction ?? (typeof r == "object" ? r[t.mode] : r),
    delay: o.transitionDelay
  };
}
}
  const {
    square: t,
    elevation: n,
    variant: r,
    classes: o
  } = e, s = {
    root: ["root", r, !t && "rounded", r === "elevation" && `elevation${n}`]
  };
  name: "MuiPaper",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], !n.square && t.rounded, n.variant === "elevation" && t[`elevation${n.elevation}`]];
  }
})(Zt(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  color: (e.vars || e).palette.text.primary,
  transition: e.transitions.create("box-shadow"),
  variants: [{
    props: ({
      ownerState: t
    }) => !t.square,
    style: {
      borderRadius: e.shape.borderRadius
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      border: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: {
      variant: "elevation"
    },
    style: {
      boxShadow: "var(--Paper-shadow)",
      backgroundImage: "var(--Paper-overlay)"
    }
  }]
  var C;
    props: t,
    name: "MuiPaper"
    className: s,
    component: a = "div",
    elevation: c = 1,
    square: f = !1,
    ...g
    ...r,
    component: a,
    elevation: c,
    square: f,
  return process.env.NODE_ENV !== "production" && o.shadows[c] === void 0 && console.error([`MUI: The elevation provided <Paper elevation={${c}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${c}]\` is defined.`].join(`
    as: a,
    className: et(w.root, s),
    ref: n,
    ...g,
    style: {
        "--Paper-shadow": (o.vars || o).shadows[c],
        ...o.vars && {
          "--Paper-overlay": (C = o.vars.overlays) == null ? void 0 : C[c]
        },
        ...!o.vars && o.palette.mode === "dark" && {
        }
      },
      ...g.style
    }
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
    const {
      elevation: t,
      variant: n
    } = e;
    return t > 0 && n === "outlined" ? new Error(`MUI: Combining \`elevation={${t}}\` with \`variant="${n}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`) : null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: u.bool,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: u.oneOfType([u.oneOf(["elevation", "outlined"]), u.string])
});
  const {
    className: n,
    elementType: r,
    ownerState: o,
    externalForwardedProps: s,
    internalForwardedProps: a,
    shouldForwardComponentProp: c = !1,
    ...f
  } = t, {
    slots: g = {
      [e]: void 0
    },
      [e]: void 0
    },
    ...w
    props: {
      component: E,
      ...O
    },
    className: n,
    ...f,
    externalForwardedProps: e === "root" ? w : void 0,
    externalSlotProps: T
    ...e !== "root" && !g[e] && a,
    ...O,
    ...M && !c && {
      as: M
    },
    ...M && c && {
      component: M
    },
    ref: I
  }, o);
}
  constructor() {
      this.shouldMount && !this.didMount && this.ref.current !== null && (this.didMount = !0, this.mounted.resolve());
    });
    this.ref = {
      current: null
    }, this.mounted = null, this.didMount = !1, this.shouldMount = !1, this.setShouldMount = null;
  }
  /** React ref to the ripple instance */
  /** If the ripple component should be mounted */
  /** Promise that resolves when the ripple component is mounted */
  /** If the ripple component has been mounted */
  /** React state hook setter */
  static create() {
  }
  static use() {
    return t.shouldMount = n, t.setShouldMount = r, x.useEffect(t.mountEffect, [n]), t;
  }
  mount() {
  }
  /* Ripple API */
  start(...t) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.start(...t);
    });
  }
  stop(...t) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.stop(...t);
    });
  }
  pulsate(...t) {
    this.mount().then(() => {
      var n;
      return (n = this.ref.current) == null ? void 0 : n.pulsate(...t);
    });
  }
}
}
  let e, t;
  const n = new Promise((r, o) => {
    e = r, t = o;
  });
  return n.resolve = e, n.reject = t, n;
}
  const {
    className: t,
    classes: n,
    pulsate: r = !1,
    rippleX: o,
    rippleY: s,
    rippleSize: a,
    in: c,
    onExited: f,
    width: a,
    height: a,
    top: -(a / 2) + s,
    left: -(a / 2) + o
  }, T = et(n.child, g && n.childLeaving, r && n.childPulsate);
    if (!c && f != null) {
      return () => {
        clearTimeout(E);
      };
    }
    className: w,
    style: C,
    children: /* @__PURE__ */ $.jsx("span", {
      className: T
    })
  });
}
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object.isRequired,
  className: u.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: u.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: u.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: u.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: u.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: u.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: u.number,
  /**
   * exit delay
   */
  timeout: u.number.isRequired
});
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
  name: "MuiTouchRipple",
  slot: "Root"
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
  name: "MuiTouchRipple",
  slot: "Ripple"
})`
  opacity: 0;
  position: absolute;

    opacity: 0.3;
    transform: scale(1);
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

    animation-duration: ${({
  theme: e
}) => e.transitions.duration.shorter}ms;
  }

    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

    opacity: 0;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
  }

    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-duration: 2500ms;
    animation-timing-function: ${({
  theme: e
}) => e.transitions.easing.easeInOut};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
    props: t,
    name: "MuiTouchRipple"
  }), {
    center: o = !1,
    classes: s = {},
    className: a,
    ...c
  x.useEffect(() => {
  }, [f]);
    const {
      classes: {
      },
  }) => {
    const {
      // For test purposes
      w.current = !1;
      return;
    }
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    else {
      const {
        clientX: G,
    }
      ee = Math.sqrt((2 * q.width ** 2 + q.height ** 2) / 3), ee % 2 === 0 && (ee += 1);
    else {
    }
      O({
        rippleSize: ee,
      });
      T.current && (T.current(), T.current = null);
    })) : O({
      rippleSize: ee,
    });
  }, [o, O, C]), I = x.useCallback(() => {
      pulsate: !0
    });
      T.current(), T.current = null, C.start(0, () => {
      });
      return;
    }
  }, [C]);
  return x.useImperativeHandle(n, () => ({
    pulsate: I,
    stop: M
    ref: E,
    ...c,
      component: null,
      exit: !0,
      children: f
    })
  });
});
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string
});
}
  const {
    disabled: t,
    focusVisible: n,
    focusVisibleClassName: r,
    classes: o
  } = e, a = mt({
    root: ["root", t && "disabled", n && "focusVisible"]
  return n && r && (a.root += ` ${r}`), a;
  name: "MuiButtonBase",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  textDecoration: "none",
  // So we take precedent over the style of a native <a /> element.
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
    pointerEvents: "none",
    // Disable link interactions
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
    props: t,
    name: "MuiButtonBase"
  }), {
    action: o,
    centerRipple: s = !1,
    children: a,
    className: c,
    component: f = "button",
    disableRipple: g = !1,
    focusRipple: w = !1,
    focusVisibleClassName: C,
    LinkComponent: T = "a",
    onBlur: E,
    onClick: O,
    onDragLeave: I,
    onFocus: M,
    onTouchMove: q,
    TouchRippleProps: ee,
    touchRippleRef: G,
    ...X
    focusVisible: () => {
      ie(!0), te.current.focus();
    }
  }), []);
  x.useEffect(() => {
  }), Ne = () => {
    const nt = te.current;
    return f && f !== "button" && !(nt.tagName === "A" && nt.href);
      re.start(nt);
      re.pulsate(nt);
  });
  const rt = {};
    ...r,
    centerRipple: s,
    component: f,
    disableRipple: g,
    focusRipple: w,
    className: et(gt.root, c),
    ownerState: wt,
    onBlur: ce,
    onClick: O,
    onContextMenu: he,
    onFocus: Ce,
    onKeyDown: Be,
    onKeyUp: tt,
    onMouseDown: ue,
    onMouseLeave: pe,
    onMouseUp: fe,
    onDragLeave: ge,
    onTouchEnd: we,
    onTouchMove: _e,
    onTouchStart: be,
    ref: ot,
    ...rt,
    ...X,
      ref: Q,
      center: s,
      ...ee
    }) : null]
  });
});
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: u.bool,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: u.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: u.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: u.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: u.string,
  /**
   * @ignore
   */
  href: u.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: u.elementType,
  /**
   * @ignore
   */
  onBlur: u.func,
  /**
   * @ignore
   */
  onClick: u.func,
  /**
   * @ignore
   */
  onContextMenu: u.func,
  /**
   * @ignore
   */
  onDragLeave: u.func,
  /**
   * @ignore
   */
  onFocus: u.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: u.func,
  /**
   * @ignore
   */
  onKeyDown: u.func,
  /**
   * @ignore
   */
  onKeyUp: u.func,
  /**
   * @ignore
   */
  onMouseDown: u.func,
  /**
   * @ignore
   */
  onMouseLeave: u.func,
  /**
   * @ignore
   */
  onMouseUp: u.func,
  /**
   * @ignore
   */
  onTouchEnd: u.func,
  /**
   * @ignore
   */
  onTouchMove: u.func,
  /**
   * @ignore
   */
  onTouchStart: u.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * @default 0
   */
  tabIndex: u.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: u.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: u.oneOfType([u.func, u.shape({
    current: u.shape({
      pulsate: u.func.isRequired,
      start: u.func.isRequired,
      stop: u.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: u.oneOfType([u.oneOf(["button", "reset", "submit"]), u.string])
});
function pZ(e) {
  return typeof e.main == "string";
}
function hZ(e, t = []) {
  if (!pZ(e))
    return !1;
  for (const n of t)
    if (!e.hasOwnProperty(n) || typeof e[n] != "string")
      return !1;
  return !0;
}
function no(e = []) {
  return ([, t]) => t && hZ(t, e);
}
function mZ(e) {
  return ln("MuiAlert", e);
}
const iF = fn("MuiAlert", ["root", "action", "icon", "message", "filled", "colorSuccess", "colorInfo", "colorWarning", "colorError", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
function gZ(e) {
  return ln("MuiCircularProgress", e);
}
fn("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: -126px;
  }
  const {
    classes: t,
    variant: n,
    color: r,
    disableShrink: o
  } = e, s = {
    root: ["root", n, `color${He(r)}`],
    svg: ["svg"],
    circle: ["circle", `circle${He(n)}`, o && "circleDisableShrink"]
  };
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`color${He(n.color)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  display: "inline-block",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("transform")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    }
    props: {
      color: t
    },
    style: {
      color: (e.vars || e).palette[t].main
    }
  }))]
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (e, t) => t.svg
})({
  display: "block"
  // Keeps the progress centered
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.circle, t[`circle${He(n.variant)}`], n.disableShrink && t.circleDisableShrink];
  }
})(Zt(({
  theme: e
}) => ({
  stroke: "currentColor",
  variants: [{
    props: {
      variant: "determinate"
    },
    style: {
      transition: e.transitions.create("stroke-dashoffset")
    }
  }, {
    props: {
      variant: "indeterminate"
    },
    style: {
      // Some default value that looks fine waiting for the animation to kicks in.
      strokeDasharray: "80px, 200px",
      strokeDashoffset: 0
      // Add the unit to fix a Edge 16 and below bug.
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" && !t.disableShrink,
      // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
    }
  }]
    props: t,
    name: "MuiCircularProgress"
  }), {
    className: o,
    color: s = "primary",
    disableShrink: a = !1,
    size: c = 40,
    style: f,
    value: g = 0,
    ...w
  } = r, C = {
    ...r,
    color: s,
    disableShrink: a,
    size: c,
    value: g,
  }
    className: et(T.root, o),
    style: {
      width: c,
      height: c,
      ...O,
      ...f
    },
    ownerState: C,
    ref: n,
    role: "progressbar",
    ...w,
      className: T.svg,
      ownerState: C,
        className: T.circle,
        style: E,
        ownerState: C,
        fill: "none",
      })
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, for example '3rem'.
   * @default 40
   */
  size: u.oneOfType([u.number, u.string]),
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: u.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: u.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: u.oneOf(["determinate", "indeterminate"])
});
}
  const {
    classes: t,
    disabled: n,
    color: r,
    edge: o,
    size: s,
    loading: a
  } = e, c = {
    root: ["root", a && "loading", n && "disabled", r !== "default" && `color${He(r)}`, o && `edge${He(o)}`, `size${He(s)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  };
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.loading && t.loading, n.color !== "default" && t[`color${He(n.color)}`], n.edge && t[`edge${He(n.edge)}`], t[`size${He(n.size)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: e.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  color: (e.vars || e).palette.action.active,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  variants: [{
    props: (t) => !t.disableRipple,
    style: {
      "&:hover": {
        backgroundColor: "var(--IconButton-hoverBg)",
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }, {
    props: {
      edge: "start"
    },
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: {
      edge: "end"
    },
    style: {
      marginRight: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }]
})), Zt(({
  theme: e
}) => ({
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
    props: {
      color: t
    },
    style: {
      color: (e.vars || e).palette[t].main
    }
    props: {
      color: t
    },
    style: {
    }
  })), {
    props: {
      size: "small"
    },
    style: {
      padding: 5,
      fontSize: e.typography.pxToRem(18)
    }
  }, {
    props: {
      size: "large"
    },
    style: {
      padding: 12,
      fontSize: e.typography.pxToRem(28)
    }
  }],
    backgroundColor: "transparent",
    color: (e.vars || e).palette.action.disabled
  },
    color: "transparent"
  }
  name: "MuiIconButton",
  slot: "LoadingIndicator",
  overridesResolver: (e, t) => t.loadingIndicator
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  top: "50%",
  left: "50%",
  transform: "translate(-50%, -50%)",
  color: (e.vars || e).palette.action.disabled,
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }]
    props: t,
    name: "MuiIconButton"
  }), {
    edge: o = !1,
    children: s,
    className: a,
    color: c = "default",
    disabled: f = !1,
    size: g = "medium",
    loading: w = null,
    loadingIndicator: C,
    ...T
    "aria-labelledby": E,
    color: "inherit",
    size: 16
    ...r,
    edge: o,
    color: c,
    disabled: f,
    loading: w,
    loadingIndicator: O,
    size: g
    className: et(I.root, a),
    centerRipple: !0,
    disabled: f || w,
    ref: n,
    ...T,
    children: [typeof w == "boolean" && // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ $.jsx("span", {
      className: I.loadingWrapper,
      style: {
        display: "contents"
      },
        className: I.loadingIndicator,
        children: w && O
      })
    }), s]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
`)) : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: u.oneOfType([u.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: u.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: u.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: u.oneOf(["end", "start", !1]),
  /**
   * @ignore
   */
  id: u.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: u.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: u.node,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["small", "medium", "large"]), u.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  const {
    variant: t,
    color: n,
    severity: r,
    classes: o
  } = e, s = {
    root: ["root", `color${He(n || r)}`, `${t}${He(n || r)}`, `${t}`],
    icon: ["icon"],
    message: ["message"],
    action: ["action"]
  };
  name: "MuiAlert",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`${n.variant}${He(n.color || n.severity)}`]];
  }
})(Zt(({
  theme: e
}) => {
  return {
    ...e.typography.body2,
    backgroundColor: "transparent",
    display: "flex",
    padding: "6px 16px",
      props: {
        colorSeverity: r,
        variant: "standard"
      },
      style: {
        color: e.vars ? e.vars.palette.Alert[`${r}Color`] : t(e.palette[r].light, 0.6),
        backgroundColor: e.vars ? e.vars.palette.Alert[`${r}StandardBg`] : n(e.palette[r].light, 0.9),
          color: e.vars.palette.Alert[`${r}IconColor`]
        } : {
          color: e.palette[r].main
        }
      }
      props: {
        colorSeverity: r,
        variant: "outlined"
      },
      style: {
        color: e.vars ? e.vars.palette.Alert[`${r}Color`] : t(e.palette[r].light, 0.6),
        border: `1px solid ${(e.vars || e).palette[r].light}`,
          color: e.vars.palette.Alert[`${r}IconColor`]
        } : {
          color: e.palette[r].main
        }
      }
      props: {
        colorSeverity: r,
        variant: "filled"
      },
      style: {
        fontWeight: e.typography.fontWeightMedium,
        ...e.vars ? {
          color: e.vars.palette.Alert[`${r}FilledColor`],
          backgroundColor: e.vars.palette.Alert[`${r}FilledBg`]
        } : {
          backgroundColor: e.palette.mode === "dark" ? e.palette[r].dark : e.palette[r].main,
          color: e.palette.getContrastText(e.palette[r].main)
        }
      }
    }))]
  };
  name: "MuiAlert",
  slot: "Icon",
  overridesResolver: (e, t) => t.icon
})({
  marginRight: 12,
  padding: "7px 0",
  display: "flex",
  fontSize: 22,
  opacity: 0.9
  name: "MuiAlert",
  slot: "Message",
  overridesResolver: (e, t) => t.message
})({
  padding: "8px 0",
  minWidth: 0,
  overflow: "auto"
  name: "MuiAlert",
  slot: "Action",
  overridesResolver: (e, t) => t.action
})({
  display: "flex",
  alignItems: "flex-start",
  padding: "4px 0 0 16px",
  marginLeft: "auto",
  marginRight: -8
    fontSize: "inherit"
  }),
    fontSize: "inherit"
  }),
    fontSize: "inherit"
  }),
    fontSize: "inherit"
  })
    props: t,
    name: "MuiAlert"
  }), {
    action: o,
    children: s,
    className: a,
    closeText: c = "Close",
    color: f,
    componentsProps: g = {},
    onClose: C,
    role: T = "alert",
    severity: E = "success",
    slotProps: O = {},
    variant: I = "standard",
    ...M
    ...r,
    color: f,
    severity: E,
    variant: I,
    colorSeverity: f || E
    slots: {
    },
    slotProps: {
      ...g,
      ...O
    }
    ref: n,
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      ...M
    },
    additionalProps: {
      role: T,
      elevation: 0
    }
  });
    }) : null, /* @__PURE__ */ $.jsx(q, {
      children: s
      ...ee,
      children: o
      ...ee,
      children: /* @__PURE__ */ $.jsx(G, {
        size: "small",
        "aria-label": c,
        title: c,
        color: "inherit",
        onClick: C,
        children: /* @__PURE__ */ $.jsx(X, {
          fontSize: "small",
          ...te
        })
      })
    }) : null]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the alert.
   */
  action: u.node,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: u.string,
  /**
   * The color of the component. Unless provided, the value is taken from the `severity` prop.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: u.oneOfType([u.oneOf(["error", "info", "success", "warning"]), u.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    CloseButton: u.elementType,
    CloseIcon: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    closeButton: u.object,
    closeIcon: u.object
  }),
  /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   * Set to `false` to remove the `icon`.
   */
  icon: u.node,
  /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */
  iconMapping: u.shape({
    error: u.node,
    info: u.node,
    success: u.node,
    warning: u.node
  }),
  /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: u.func,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: u.string,
  /**
   * The severity of the alert. This defines the color and icon used.
   * @default 'success'
   */
  severity: u.oneOfType([u.oneOf(["error", "info", "success", "warning"]), u.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    action: u.oneOfType([u.func, u.object]),
    closeButton: u.oneOfType([u.func, u.object]),
    closeIcon: u.oneOfType([u.func, u.object]),
    icon: u.oneOfType([u.func, u.object]),
    message: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    action: u.elementType,
    closeButton: u.elementType,
    closeIcon: u.elementType,
    icon: u.elementType,
    message: u.elementType,
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: u.oneOfType([u.oneOf(["filled", "outlined", "standard"]), u.string])
});
}
  primary: !0,
  secondary: !0,
  error: !0,
  info: !0,
  success: !0,
  warning: !0,
  textPrimary: !0,
  textSecondary: !0,
  textDisabled: !0
  const {
    align: t,
    gutterBottom: n,
    noWrap: r,
    paragraph: o,
    variant: s,
    classes: a
  } = e, c = {
    root: ["root", s, e.align !== "inherit" && `align${He(t)}`, n && "gutterBottom", r && "noWrap", o && "paragraph"]
  };
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.variant && t[n.variant], n.align !== "inherit" && t[`align${He(n.align)}`], n.noWrap && t.noWrap, n.gutterBottom && t.gutterBottom, n.paragraph && t.paragraph];
  }
})(Zt(({
  theme: e
}) => {
  var t;
  return {
    margin: 0,
    variants: [{
      props: {
        variant: "inherit"
      },
      style: {
        // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
        font: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    }, ...Object.entries(e.typography).filter(([n, r]) => n !== "inherit" && r && typeof r == "object").map(([n, r]) => ({
      props: {
        variant: n
      },
      style: r
      props: {
        color: n
      },
      style: {
        color: (e.vars || e).palette[n].main
      }
    })), ...Object.entries(((t = e.palette) == null ? void 0 : t.text) || {}).filter(([, n]) => typeof n == "string").map(([n]) => ({
      props: {
        color: `text${He(n)}`
      },
      style: {
        color: (e.vars || e).palette.text[n]
      }
    })), {
      props: ({
        ownerState: n
      }) => n.align !== "inherit",
      style: {
        textAlign: "var(--Typography-textAlign)"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.noWrap,
      style: {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.gutterBottom,
      style: {
        marginBottom: "0.35em"
      }
    }, {
      props: ({
        ownerState: n
      }) => n.paragraph,
      style: {
        marginBottom: 16
      }
    }]
  };
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
  const {
    color: r,
    ...o
    props: t,
    name: "MuiTypography"
    ...o,
    ...s && {
      color: r
    }
  }), {
    align: c = "inherit",
    className: f,
    gutterBottom: g = !1,
    paragraph: w = !1,
    variant: C = "body1",
    ...E
  } = a, O = {
    ...a,
    align: c,
    color: r,
    className: f,
    gutterBottom: g,
    paragraph: w,
    variant: C,
    variantMapping: T
    ref: n,
    className: et(I.root, f),
    ...E,
    ownerState: O,
    style: {
      ...c !== "inherit" && {
        "--Typography-textAlign": c
      },
      ...E.style
    }
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: u.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: u.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: u.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  paragraph: u.bool,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: u.oneOfType([u.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), u.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: u.object
});
}
  const {
    color: t,
    position: n,
    classes: r
  } = e, o = {
    root: ["root", `color${He(t)}`, `position${He(n)}`]
  };
  name: "MuiAppBar",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[`position${He(n.position)}`], t[`color${He(n.color)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "column",
  width: "100%",
  boxSizing: "border-box",
  // Prevent padding issue with the Modal and fixed positioned AppBar.
  flexShrink: 0,
  variants: [{
    props: {
      position: "fixed"
    },
    style: {
      position: "fixed",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }
  }, {
    props: {
      position: "absolute"
    },
    style: {
      position: "absolute",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }
  }, {
    props: {
      position: "sticky"
    },
    style: {
      position: "sticky",
      zIndex: (e.vars || e).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }
  }, {
    props: {
      position: "static"
    },
    style: {
      position: "static"
    }
  }, {
    props: {
      position: "relative"
    },
    style: {
      position: "relative"
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      "--AppBar-color": "inherit"
    }
  }, {
    props: {
      color: "default"
    },
    style: {
      "--AppBar-background": e.vars ? e.vars.palette.AppBar.defaultBg : e.palette.grey[100],
      "--AppBar-color": e.vars ? e.vars.palette.text.primary : e.palette.getContrastText(e.palette.grey[100]),
      ...e.applyStyles("dark", {
        "--AppBar-background": e.vars ? e.vars.palette.AppBar.defaultBg : e.palette.grey[900],
        "--AppBar-color": e.vars ? e.vars.palette.text.primary : e.palette.getContrastText(e.palette.grey[900])
      })
    }
    props: {
      color: t
    },
    style: {
      "--AppBar-background": (e.vars ?? e).palette[t].main,
      "--AppBar-color": (e.vars ?? e).palette[t].contrastText
    }
  })), {
    props: (t) => t.enableColorOnDark === !0 && !["inherit", "transparent"].includes(t.color),
    style: {
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)"
    }
  }, {
    props: (t) => t.enableColorOnDark === !1 && !["inherit", "transparent"].includes(t.color),
    style: {
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)",
      ...e.applyStyles("dark", {
      })
    }
  }, {
    props: {
      color: "transparent"
    },
    style: {
      "--AppBar-background": "transparent",
      "--AppBar-color": "inherit",
      backgroundColor: "var(--AppBar-background)",
      color: "var(--AppBar-color)",
      ...e.applyStyles("dark", {
        backgroundImage: "none"
      })
    }
  }]
    props: t,
    name: "MuiAppBar"
  }), {
    className: o,
    color: s = "primary",
    enableColorOnDark: a = !1,
    position: c = "fixed",
    ...f
    ...r,
    color: s,
    position: c,
    enableColorOnDark: a
    square: !0,
    component: "header",
    elevation: 4,
    className: et(g.root, o, c === "fixed" && "mui-fixed"),
    ref: n,
    ...f
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), u.string]),
  /**
   * If true, the `color` prop is applied in dark mode.
   * @default false
   */
  enableColorOnDark: u.bool,
  /**
   * The positioning type. The behavior of the different options is described
   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Web/CSS/position).
   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
   * @default 'fixed'
   */
  position: u.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  return e.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}
  const {
    ignoreAccents: t = !0,
    ignoreCase: n = !0,
    limit: r,
    matchFrom: o = "any",
    stringify: s,
    trim: a = !1
  } = e;
  return (c, {
    inputValue: f,
  }) => {
    let g = a ? f.trim() : f;
    }) : c;
  };
}
  var t;
  return e.current !== null && ((t = e.current.parentElement) == null ? void 0 : t.contains(document.activeElement));
  if (t || e == null)
    return "";
  const r = n(e);
  return typeof r == "string" ? r : "";
}
  const {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_classNamePrefix: n = "Mui",
    autoComplete: r = !1,
    autoHighlight: o = !1,
    autoSelect: s = !1,
    blurOnSelect: a = !1,
    clearOnBlur: c = !e.freeSolo,
    clearOnEscape: f = !1,
    disableCloseOnSelect: w = !1,
    disabled: C,
    disabledItemsFocusable: T = !1,
    disableListWrap: E = !1,
    freeSolo: I = !1,
    getOptionDisabled: M,
    isOptionEqualToValue: q = (De, Re) => De === Re,
    onClose: ee,
    onHighlightChange: G,
    onOpen: X,
    open: te,
    openOnFocus: re = !1,
    options: Q,
    selectOnFocus: ie = !e.freeSolo,
    value: de
  he = (De) => {
    if (typeof Re != "string") {
      if (process.env.NODE_ENV !== "production") {
        const Je = Re === void 0 ? "undefined" : `${typeof Re} (${Re})`;
      }
      return String(Re);
    }
    return Re;
  };
    controlled: de,
    default: g,
    default: tt,
    state: "inputValue"
  }), [gt, nt] = x.useState(!1), Ft = x.useCallback((De, Re, Je) => {
      return;
    controlled: te,
    default: !1,
    state: "open"
    // we use the empty string to manipulate `filterOptions` to not filter any options
    // i.e. the filter predicate always returns true
    {
      inputValue: vt && Tt ? "" : ot,
      getOptionLabel: he
    }
    filteredOptions: Oe,
    inputValue: ot
  });
  x.useEffect(() => {
    De === -1 ? pe.current.focus() : we.querySelector(`[data-tag-index="${De}"]`).focus();
  });
  x.useEffect(() => {
  function zt(De, Re) {
    if (!be.current || De < 0 || De >= Oe.length)
      return -1;
    let Je = De;
    for (; ; ) {
      const Bt = be.current.querySelector(`[data-option-index="${Je}"]`), jt = T ? !1 : !Bt || Bt.disabled || Bt.getAttribute("aria-disabled") === "true";
      if (Bt && Bt.hasAttribute("tabindex") && !jt)
        return Je;
      if (Re === "next" ? Je = (Je + 1) % Oe.length : Je = (Je - 1 + Oe.length) % Oe.length, Je === De)
        return -1;
    }
  }
    event: De,
    index: Re,
    reason: Je
  }) => {
    if (Be.current = Re, Re === -1 ? pe.current.removeAttribute("aria-activedescendant") : pe.current.setAttribute("aria-activedescendant", `${ue}-option-${Re}`), G && ["mouse", "keyboard", "touch"].includes(Je) && G(De, Re === -1 ? null : Oe[Re], Je), !be.current)
      return;
    const Bt = be.current.querySelector(`[role="option"].${n}-focused`);
    Bt && (Bt.classList.remove(`${n}-focused`), Bt.classList.remove(`${n}-focusVisible`));
    let jt = be.current;
    if (be.current.getAttribute("role") !== "listbox" && (jt = be.current.parentElement.querySelector('[role="listbox"]')), !jt)
      return;
    if (Re === -1) {
      jt.scrollTop = 0;
      return;
    }
    const Kt = be.current.querySelector(`[data-option-index="${Re}"]`);
    if (Kt && (Kt.classList.add(`${n}-focused`), Je === "keyboard" && Kt.classList.add(`${n}-focusVisible`), jt.scrollHeight > jt.clientHeight && Je !== "mouse" && Je !== "touch")) {
    }
    event: De,
    diff: Re,
    direction: Je = "next",
    reason: Bt
  }) => {
    if (!Xe)
      return;
    const Kt = zt((() => {
      const Ln = Oe.length - 1;
      if (Re === "reset")
        return Ne;
      if (Re === "start")
        return 0;
      if (Re === "end")
        return Ln;
    })(), Je);
    if (bt({
      index: Kt,
      reason: Bt,
      event: De
    }), r && Re !== "reset")
      if (Kt === -1)
        pe.current.value = ot;
      else {
        const Ln = he(Oe[Kt]);
        pe.current.value = Ln, Ln.toLowerCase().indexOf(ot.toLowerCase()) === 0 && ot.length > 0 && pe.current.setSelectionRange(ot.length, Ln.length);
      }
  }), St = () => {
    const De = (Re, Je) => {
      const Bt = Re ? he(Re) : "", jt = Je ? he(Je) : "";
      return Bt === jt;
    };
      const Re = Ie.filteredOptions[Be.current];
      if (Re)
        return Oe.findIndex((Je) => he(Je) === he(Re));
    }
    return -1;
    if (!Xe)
      return;
    const De = St();
    if (De !== -1) {
      Be.current = De;
      return;
    }
    if (Oe.length === 0 || Re == null) {
      We({
        diff: "reset"
      });
      return;
    }
    if (be.current) {
      if (Re != null) {
        const Je = Oe[Be.current];
          return;
        const Bt = Oe.findIndex((jt) => q(jt, Re));
        Bt === -1 ? We({
          diff: "reset"
        }) : bt({
          index: Bt
        });
        return;
      }
      if (Be.current >= Oe.length - 1) {
        bt({
          index: Oe.length - 1
        });
        return;
      }
      bt({
        index: Be.current
      });
    }
  }, [
    // Only sync the highlighted index when the option switch between empty and not
    Oe.length,
    // Don't sync the highlighted index with the value when multiple
    // eslint-disable-next-line react-hooks/exhaustive-deps
    We,
    bt,
    Xe,
    ot,
  });
  process.env.NODE_ENV !== "production" && x.useEffect(() => {
`)));
    ut || (Et(!0), At(!0), X && X(De));
    ut && (Et(!1), ee && ee(De, Re));
        return;
      return;
    let jt = Je, Kt = Re;
`));
      }
      Ln === -1 ? Kt.push(Re) : Bt !== "freeSolo" && (Kt.splice(Ln, 1), jt = "removeOption");
    }
      option: Re
  };
    if (De === -1)
      return -1;
    let Je = De;
    for (; ; ) {
        return -1;
      const Bt = we.querySelector(`[data-tag-index="${Je}"]`);
      if (!Bt || !Bt.hasAttribute("tabindex") || Bt.disabled || Bt.getAttribute("aria-disabled") === "true")
        Je += Re === "next" ? 1 : -1;
      else
        return Je;
    }
  }
      return;
    let Je = ce;
  }, Wt = (De) => {
    if (De.onKeyDown && De.onKeyDown(Re), !Re.defaultMuiPrevented && (ce !== -1 && !["ArrowLeft", "ArrowRight"].includes(Re.key) && (Ce(-1), yt(-1)), Re.which !== 229))
      switch (Re.key) {
        case "Home":
            diff: "start",
            direction: "next",
            reason: "keyboard",
            event: Re
          }));
          break;
        case "End":
            diff: "end",
            direction: "previous",
            reason: "keyboard",
            event: Re
          }));
          break;
        case "PageUp":
          Re.preventDefault(), We({
            direction: "previous",
            reason: "keyboard",
            event: Re
          break;
        case "PageDown":
          Re.preventDefault(), We({
            direction: "next",
            reason: "keyboard",
            event: Re
          break;
        case "ArrowDown":
          Re.preventDefault(), We({
            diff: 1,
            direction: "next",
            reason: "keyboard",
            event: Re
          break;
        case "ArrowUp":
          Re.preventDefault(), We({
            diff: -1,
            direction: "previous",
            reason: "keyboard",
            event: Re
          break;
        case "ArrowLeft":
          break;
        case "ArrowRight":
          break;
        case "Enter":
          if (Be.current !== -1 && Xe) {
            const Je = Oe[Be.current], Bt = M ? M(Je) : !1;
            if (Re.preventDefault(), Bt)
              return;
          break;
        case "Escape":
          break;
        case "Backspace":
            });
          }
          break;
        case "Delete":
            });
          }
          break;
      }
    if (t(be)) {
      pe.current.focus();
      return;
    }
    const Re = De.target.value;
    const Re = Number(De.currentTarget.getAttribute("data-option-index"));
    Be.current !== Re && bt({
      event: De,
      index: Re,
      reason: "mouse"
    });
    bt({
      event: De,
      index: Number(De.currentTarget.getAttribute("data-option-index")),
      reason: "touch"
    const Re = Number(De.currentTarget.getAttribute("data-option-index"));
    });
  }, ye = (De) => {
    De.currentTarget.contains(De.target) && De.target.getAttribute("id") !== ue && De.preventDefault();
  }, Ye = (De) => {
    De.currentTarget.contains(De.target) && (pe.current.focus(), ie && fe.current && pe.current.selectionEnd - pe.current.selectionStart === 0 && pe.current.select(), fe.current = !1);
  }, ft = (De) => {
  };
  let Ct = I && ot.length > 0;
    const De = /* @__PURE__ */ new Map();
    let Re = !1;
        key: jt,
        index: jt,
        group: Kt,
        options: [Bt]
      })), Je;
    }, []);
  }
    getRootProps: (De = {}) => ({
      ...De,
      onMouseDown: ye,
      onClick: Ye
    }),
    getInputLabelProps: () => ({
      id: `${ue}-label`,
      htmlFor: ue
    }),
    getInputProps: () => ({
      id: ue,
      value: ot,
      onMouseDown: ft,
      // if open then this is handled imperatively so don't let react override
      // only have an opinion about this when closed
      "aria-activedescendant": Xe ? "" : null,
      "aria-autocomplete": r ? "both" : "list",
      "aria-controls": pt ? `${ue}-listbox` : void 0,
      "aria-expanded": pt,
      // Disable browser's suggestion that might overlap with the popup.
      // Handle autocomplete but not autofill.
      autoComplete: "off",
      ref: pe,
      autoCapitalize: "none",
      spellCheck: "false",
      role: "combobox",
      disabled: C
    }),
    getClearProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: Wt
    }),
    getPopupIndicatorProps: () => ({
      tabIndex: -1,
      type: "button",
    }),
    getTagProps: ({
      index: De
    }) => ({
      key: De,
      "data-tag-index": De,
      tabIndex: -1,
      }
    }),
    getListboxProps: () => ({
      role: "listbox",
      id: `${ue}-listbox`,
      "aria-labelledby": `${ue}-label`,
      onMouseDown: (De) => {
        De.preventDefault();
      }
    }),
    getOptionProps: ({
      index: De,
      option: Re
    }) => {
      return {
        tabIndex: -1,
        role: "option",
        id: `${ue}-option-${De}`,
        "data-option-index": De,
        "aria-disabled": Bt,
        "aria-selected": Je
      };
    },
    id: ue,
    inputValue: ot,
    dirty: Ct,
    expanded: Xe && we,
    popupOpen: Xe,
    focused: gt || ce !== -1,
    anchorEl: we,
    setAnchorEl: _e,
    focusedTag: ce,
  };
}
  return e ? (e.nodeName || "").toLowerCase() : null;
}
  if (e == null)
    return window;
  if (e.toString() !== "[object Window]") {
    var t = e.ownerDocument;
    return t && t.defaultView || window;
  }
  return e;
}
  return e instanceof t || e instanceof Element;
}
  return e instanceof t || e instanceof HTMLElement;
}
  if (typeof ShadowRoot > "u")
    return !1;
  return e instanceof t || e instanceof ShadowRoot;
}
  var t = e.state;
  Object.keys(t.elements).forEach(function(n) {
    var r = t.styles[n] || {}, o = t.attributes[n] || {}, s = t.elements[n];
      var c = o[a];
      c === !1 ? s.removeAttribute(a) : s.setAttribute(a, c === !0 ? "" : c);
    }));
  });
}
  var t = e.state, n = {
    popper: {
      position: t.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(t.elements.popper.style, n.popper), t.styles = n, t.elements.arrow && Object.assign(t.elements.arrow.style, n.arrow), function() {
    Object.keys(t.elements).forEach(function(r) {
      }, {});
        o.removeAttribute(f);
      }));
    });
  };
}
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  requires: ["computeStyles"]
};
  return e.split("-")[0];
}
  var e = navigator.userAgentData;
  return e != null && e.brands && Array.isArray(e.brands) ? e.brands.map(function(t) {
    return t.brand + "/" + t.version;
  }).join(" ") : navigator.userAgent;
}
}
  t === void 0 && (t = !1), n === void 0 && (n = !1);
  var r = e.getBoundingClientRect(), o = 1, s = 1;
  return {
    height: w,
    top: g,
    bottom: g + w,
    y: g
  };
}
  return Math.abs(t.width - n) <= 1 && (n = t.width), Math.abs(t.height - r) <= 1 && (r = t.height), {
    x: e.offsetLeft,
    y: e.offsetTop,
    width: n,
    height: r
  };
}
  var n = t.getRootNode && t.getRootNode();
  if (e.contains(t))
    return !0;
    var r = t;
    do {
      if (r && e.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
}
}
    // $FlowFixMe[prop-missing]
    e.document
  )) || window.document).documentElement;
}
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e.parentNode || // DOM Element detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
  );
}
}
    if (r.position === "fixed")
      return null;
  }
    if (s.transform !== "none" || s.perspective !== "none" || s.contain === "paint" || ["transform", "perspective"].indexOf(s.willChange) !== -1 || t && s.willChange === "filter" || t && s.filter && s.filter !== "none")
      return o;
    o = o.parentNode;
  }
  return null;
}
}
  return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
}
}
  return r > n ? n : r;
}
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
}
  return t.reduce(function(n, r) {
    return n[r] = e, n;
  }, {});
}
  return t = typeof t == "function" ? t(Object.assign({}, n.rects, {
    placement: n.placement
};
  if (!(!s || !a)) {
  }
}
  var t = e.state, n = e.options, r = n.element, o = r === void 0 ? "[data-popper-arrow]" : r;
}
  name: "arrow",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
  return e.split("-")[1];
}
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
  var n = e.x, r = e.y, o = t.devicePixelRatio || 1;
  return {
  };
}
    x: C,
    y: E
  }) : {
    x: C,
    y: E
  };
  C = O.x, E = O.y;
        // $FlowFixMe[prop-missing]
      );
    }
        // $FlowFixMe[prop-missing]
      );
    }
  }
  var q = Object.assign({
    position: c
    x: C,
    y: E
    x: C,
    y: E
  };
  }
}
    popper: t.elements.popper,
    popperRect: t.rects.popper,
    gpuAcceleration: o,
    isFixed: t.options.strategy === "fixed"
  };
    offsets: t.modifiersData.popperOffsets,
    position: t.options.strategy,
    adaptive: a,
    roundOffsets: f
    offsets: t.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: f
  })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-placement": t.placement
  });
}
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  data: {}
};
  passive: !0
};
  };
}
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  data: {}
};
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
  return e.replace(/left|right|bottom|top/g, function(t) {
  });
}
  start: "end",
  end: "start"
};
  return e.replace(/start|end/g, function(t) {
  });
}
  return {
    scrollLeft: n,
    scrollTop: r
  };
}
}
  if (o) {
    s = o.width, a = o.height;
  }
  return {
    width: s,
    height: a,
    y: f
  };
}
    width: s,
    height: a,
    x: c,
    y: f
  };
}
  return /auto|scroll|overlay|hidden/.test(n + o + r);
}
}
  var n;
  t === void 0 && (t = []);
  return o ? c : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  );
}
  return Object.assign({}, e, {
    left: e.x,
    top: e.y,
    right: e.x + e.width,
    bottom: e.y + e.height
  });
}
  return n.top = n.top + e.clientTop, n.left = n.left + e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n;
}
}
  }) : [];
}
  return c.width = c.right - c.left, c.height = c.bottom - c.top, c.x = c.left, c.y = c.top, c;
}
  switch (o) {
      f = {
        x: a,
        y: t.y - n.height
      };
      break;
      f = {
        x: a,
        y: t.y + t.height
      };
      break;
      f = {
        x: t.x + t.width,
        y: c
      };
      break;
      f = {
        x: t.x - n.width,
        y: c
      };
      break;
    default:
      f = {
        x: t.x,
        y: t.y
      };
  }
    switch (s) {
        break;
        break;
    }
  }
  return f;
}
  t === void 0 && (t = {});
    element: M,
    placement: o
  }, q = e.modifiersData.offset;
    });
  }
}
  t === void 0 && (t = {});
  });
  var C = w.reduce(function(T, E) {
      placement: E,
      boundary: o,
      rootBoundary: s,
      padding: a
  }, {});
  return Object.keys(C).sort(function(T, E) {
    return C[T] - C[E];
  });
}
    return [];
}
  var t = e.state, n = e.options, r = e.name;
  if (!t.modifiersData[r]._skip) {
        placement: he,
        boundary: g,
        flipVariations: T,
        allowedAutoPlacements: E
      }) : he);
        placement: q,
        boundary: g,
        altBoundary: w,
        return ue;
      })) {
        break;
      }
    }
          if (pe)
            return pe.slice(0, he).every(function(be) {
              return be;
            });
        });
        if (ge)
      }, ie = Q; ie > 0; ie--) {
        if (de === "break") break;
      }
  }
}
  name: "flip",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
  return n === void 0 && (n = {
    x: 0,
    y: 0
  }), {
    top: e.top - t.height - n.y,
    right: e.right - t.width + n.x,
    bottom: e.bottom - t.height + n.y,
    left: e.left - t.width - n.x
  };
}
    return e[t] >= 0;
  });
}
    elementContext: "reference"
    altBoundary: !0
  t.modifiersData[n] = {
    referenceClippingOffsets: f,
    isReferenceHidden: g,
  }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-reference-hidden": g,
  });
}
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
};
    placement: e
  })) : n, a = s[0], c = s[1];
    x: c,
    y: a
  } : {
    x: a,
    y: c
  };
}
}
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
};
  var t = e.state, n = e.name;
    reference: t.rects.reference,
    element: t.rects.popper,
    placement: t.placement
  });
}
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  data: {}
};
  return e === "x" ? "y" : "x";
}
    boundary: f,
    altBoundary: g
    placement: t.placement
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
    x: 0,
    y: 0
  };
    if (s) {
        width: 0,
        height: 0
    }
    if (c) {
    }
  }
}
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["offset"]
};
  return {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  };
}
}
  return n !== 1 || r !== 1;
}
  n === void 0 && (n = !1);
    scrollLeft: 0,
    scrollTop: 0
  }, f = {
    x: 0,
    y: 0
  };
    x: a.left + c.scrollLeft - f.x,
    y: a.top + c.scrollTop - f.y,
    width: a.width,
    height: a.height
  };
}
  var t = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  e.forEach(function(s) {
    t.set(s.name, s);
  });
  function o(s) {
    n.add(s.name);
    var a = [].concat(s.requires || [], s.requiresIfExists || []);
    a.forEach(function(c) {
      if (!n.has(c)) {
        var f = t.get(c);
        f && o(f);
      }
    }), r.push(s);
  }
  return e.forEach(function(s) {
    n.has(s.name) || o(s);
  }), r;
}
    return n.concat(t.filter(function(o) {
      return o.phase === r;
    }));
  }, []);
}
  var t;
  return function() {
    return t || (t = new Promise(function(n) {
      Promise.resolve().then(function() {
        t = void 0, n(e());
      });
    })), t;
  };
}
  var t = e.reduce(function(n, r) {
    var o = n[r.name];
    return n[r.name] = o ? Object.assign({}, o, r, {
      options: Object.assign({}, o.options, r.options),
      data: Object.assign({}, o.data, r.data)
    }) : r, n;
  }, {});
  return Object.keys(t).map(function(n) {
    return t[n];
  });
}
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
  for (var e = arguments.length, t = new Array(e), n = 0; n < e; n++)
    t[n] = arguments[n];
  return !t.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
  e === void 0 && (e = {});
    var g = {
      placement: "bottom",
      orderedModifiers: [],
      modifiersData: {},
      elements: {
        reference: c,
        popper: f
      },
      attributes: {},
      styles: {}
      state: g,
        E(), g.options = Object.assign({}, s, g.options, I), g.scrollParents = {
        };
        }), T(), C.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!w) {
            g.rects = {
            });
              if (g.reset === !0) {
                continue;
              }
                state: g,
                instance: C
              }) || g);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
        return new Promise(function(O) {
          C.forceUpdate(), O(g);
        });
      }),
      destroy: function() {
        E(), w = !0;
      }
    };
      return C;
    });
    function T() {
      g.orderedModifiers.forEach(function(O) {
            state: g,
            instance: C,
            options: M
          };
        }
      });
    }
    function E() {
        return O();
    }
    return C;
  };
}
});
  return typeof e == "function" ? e() : e;
}
  const {
    children: r,
    container: o,
    disablePortal: s = !1
    if (a && !s)
      };
  }, [n, a, s]), s) {
    if (/* @__PURE__ */ x.isValidElement(r)) {
        ref: f
      };
    }
    return r;
  }
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: u.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: u.bool
});
}
  if (t === "ltr")
    return e;
  switch (e) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return e;
  }
}
  return typeof e == "function" ? e() : e;
}
  return e.nodeType !== void 0;
}
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"]
  const {
    anchorEl: r,
    children: o,
    direction: s,
    disablePortal: a,
    modifiers: c,
    open: f,
    popperOptions: g,
    slotProps: w = {},
    slots: C = {},
    TransitionProps: T,
    // @ts-ignore internal logic
    ownerState: E,
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    ...O
  x.useEffect(() => {
    M.current && M.current.forceUpdate();
  }), x.useEffect(() => {
      return;
    const G = (te) => {
    };
      process.env.NODE_ENV !== "test" && te.top === 0 && te.left === 0 && te.right === 0 && te.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
      name: "preventOverflow",
      options: {
        altBoundary: a
      }
    }, {
      name: "flip",
      options: {
        altBoundary: a
      }
    }, {
      name: "onUpdate",
      enabled: !0,
      phase: "afterWrite",
      fn: ({
        state: te
      }) => {
        G(te);
      }
    }];
      ...g,
    });
    };
  const q = {
  };
  T !== null && (q.TransitionProps = T);
    externalSlotProps: w.root,
    externalForwardedProps: O,
    additionalProps: {
      role: "tooltip",
      ref: I
    },
    ownerState: t,
  });
    ...ee,
    children: typeof o == "function" ? o(q) : o
  });
  const {
    anchorEl: r,
    children: o,
    container: s,
    direction: a = "ltr",
    disablePortal: c = !1,
    keepMounted: f = !1,
    open: g,
    popperRef: C,
    style: T,
    transition: E = !1,
    slotProps: O = {},
    ...I
  };
  if (!f && !g && (!E || M))
    return null;
  if (s)
  else if (r) {
  }
    in: g,
  } : void 0;
    disablePortal: c,
      anchorEl: r,
      direction: a,
      disablePortal: c,
      ref: n,
      open: E ? !M : g,
      popperOptions: w,
      popperRef: C,
      slotProps: O,
      ...I,
      style: {
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        ...T
      },
      children: o
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
    if (e.open) {
        const n = t.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join(`
`));
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: u.oneOfType([u.node, u.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: u.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: u.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: u.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: u.arrayOf(u.shape({
    data: u.object,
    effect: u.func,
    enabled: u.bool,
    fn: u.func,
    name: u.any,
    options: u.object,
    phase: u.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: u.arrayOf(u.string),
    requiresIfExists: u.arrayOf(u.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: u.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: u.shape({
    modifiers: u.array,
    onFirstUpdate: u.func,
    placement: u.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: u.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: u.shape({
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: u.shape({
    root: u.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: u.bool
});
const ate = Ue(EV, {
  name: "MuiPopper",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})({}), cp = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = my(), o = gn({
    props: t,
    name: "MuiPopper"
  }), {
    anchorEl: s,
    component: a,
    components: c,
    componentsProps: f,
    container: h,
    disablePortal: g,
    keepMounted: v,
    modifiers: w,
    open: C,
    placement: T,
    popperOptions: E,
    popperRef: O,
    transition: P,
    slots: I,
    slotProps: M,
    ...A
  } = o, k = (I == null ? void 0 : I.root) ?? (c == null ? void 0 : c.Root), j = {
    anchorEl: s,
    container: h,
    disablePortal: g,
    keepMounted: v,
    modifiers: w,
    open: C,
    placement: T,
    popperOptions: E,
    popperRef: O,
  };
    as: a,
    direction: r ? "rtl" : "ltr",
    slots: {
    },
    slotProps: M ?? f,
    ref: n
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  /**
   * Popper render function or node.
   */
  children: u.oneOfType([u.node, u.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  components: u.shape({
    Root: u.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   * @default {}
   */
  componentsProps: u.shape({
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: u.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: u.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: u.arrayOf(u.shape({
    data: u.object,
    effect: u.func,
    enabled: u.bool,
    fn: u.func,
    name: u.any,
    options: u.object,
    phase: u.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: u.arrayOf(u.string),
    requiresIfExists: u.arrayOf(u.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: u.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: u.shape({
    modifiers: u.array,
    onFirstUpdate: u.func,
    placement: u.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: u.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: u.shape({
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: u.shape({
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: u.bool
});
}
  const {
    classes: t,
    color: n,
    disableGutters: r,
    inset: o,
    disableSticky: s
  } = e, a = {
    root: ["root", n !== "default" && `color${He(n)}`, !r && "gutters", o && "inset", !s && "sticky"]
  };
  name: "MuiListSubheader",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.color !== "default" && t[`color${He(n.color)}`], !n.disableGutters && t.gutters, n.inset && t.inset, !n.disableSticky && t.sticky];
  }
})(Zt(({
  theme: e
}) => ({
  boxSizing: "border-box",
  lineHeight: "48px",
  listStyle: "none",
  color: (e.vars || e).palette.text.secondary,
  fontFamily: e.typography.fontFamily,
  fontWeight: e.typography.fontWeightMedium,
  fontSize: e.typography.pxToRem(14),
  variants: [{
    props: {
      color: "primary"
    },
    style: {
      color: (e.vars || e).palette.primary.main
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      color: "inherit"
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: t
    }) => t.inset,
    style: {
      paddingLeft: 72
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disableSticky,
    style: {
      position: "sticky",
      top: 0,
      zIndex: 1,
      backgroundColor: (e.vars || e).palette.background.paper
    }
  }]
    props: t,
    name: "MuiListSubheader"
  }), {
    className: o,
    color: s = "default",
    component: a = "li",
    disableGutters: c = !1,
    disableSticky: f = !1,
    ...g
    ...r,
    color: s,
    component: a,
    disableGutters: c,
    disableSticky: f,
    as: a,
    className: et(w.root, o),
    ref: n,
    ...g
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'default'
   */
  color: u.oneOf(["default", "inherit", "primary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the List Subheader will not have gutters.
   * @default false
   */
  disableGutters: u.bool,
  /**
   * If `true`, the List Subheader will not stick to the top during scroll.
   * @default false
   */
  disableSticky: u.bool,
  /**
   * If `true`, the List Subheader is indented.
   * @default false
   */
  inset: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
}
  const {
    classes: t,
    disabled: n,
    size: r,
    color: o,
    iconColor: s,
    onDelete: a,
    clickable: c,
    variant: f
    root: ["root", f, n && "disabled", `size${He(r)}`, `color${He(o)}`, c && "clickable", c && `clickableColor${He(o)}`, a && "deletable", a && `deletableColor${He(o)}`, `${f}${He(o)}`],
    label: ["label", `label${He(r)}`],
    avatar: ["avatar", `avatar${He(r)}`, `avatarColor${He(o)}`],
    icon: ["icon", `icon${He(r)}`, `iconColor${He(s)}`],
    deleteIcon: ["deleteIcon", `deleteIcon${He(r)}`, `deleteIconColor${He(o)}`, `deleteIcon${He(f)}Color${He(o)}`]
  };
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e, {
      color: r,
      iconColor: o,
      clickable: s,
      onDelete: a,
      size: c,
      variant: f
    } = n;
    return [{
    }, {
    }, {
    }, {
    }, {
    }, {
    }, {
    }, {
    }, {
    }, {
    }, t.root, t[`size${He(c)}`], t[`color${He(r)}`], s && t.clickable, s && r !== "default" && t[`clickableColor${He(r)})`], a && t.deletable, a && r !== "default" && t[`deletableColor${He(r)}`], t[f], t[`${f}${He(r)}`]];
  }
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? e.palette.grey[700] : e.palette.grey[300];
  return {
    maxWidth: "100%",
    fontFamily: e.typography.fontFamily,
    fontSize: e.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    color: (e.vars || e).palette.text.primary,
    backgroundColor: (e.vars || e).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: e.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: e.vars ? e.vars.palette.Chip.defaultAvatarColor : t,
      fontSize: e.typography.pxToRem(12)
    },
      color: (e.vars || e).palette.primary.contrastText,
      backgroundColor: (e.vars || e).palette.primary.dark
    },
      color: (e.vars || e).palette.secondary.contrastText,
      backgroundColor: (e.vars || e).palette.secondary.dark
    },
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: e.typography.pxToRem(10)
    },
      marginLeft: 5,
      marginRight: -6
    },
      WebkitTapHighlightColor: "transparent",
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
      }
    },
    variants: [{
      props: {
        size: "small"
      },
      style: {
        height: 24,
          fontSize: 18,
          marginLeft: 4,
          marginRight: -4
        },
          fontSize: 16,
          marginRight: 4,
          marginLeft: -4
        }
      }
      props: {
        color: n
      },
      style: {
        backgroundColor: (e.vars || e).palette[n].main,
        color: (e.vars || e).palette[n].contrastText,
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].contrastText
          }
        }
      }
    })), {
      props: (n) => n.iconColor === n.color,
      style: {
          color: e.vars ? e.vars.palette.Chip.defaultIconColor : t
        }
      }
    }, {
      props: (n) => n.iconColor === n.color && n.color !== "default",
      style: {
          color: "inherit"
        }
      }
    }, {
      props: {
        onDelete: !0
      },
      style: {
        }
      }
      props: {
        color: n,
        onDelete: !0
      },
      style: {
          background: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        clickable: !0
      },
      style: {
        userSelect: "none",
        WebkitTapHighlightColor: "transparent",
        cursor: "pointer",
        "&:hover": {
        },
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[1]
        }
      }
      props: {
        color: n,
        clickable: !0
      },
      style: {
          backgroundColor: (e.vars || e).palette[n].dark
        }
      }
    })), {
      props: {
        variant: "outlined"
      },
      style: {
        backgroundColor: "transparent",
        border: e.vars ? `1px solid ${e.vars.palette.Chip.defaultBorder}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[700]}`,
          backgroundColor: (e.vars || e).palette.action.hover
        },
          backgroundColor: (e.vars || e).palette.action.focus
        },
          marginLeft: 4
        },
          marginLeft: 2
        },
          marginLeft: 4
        },
          marginLeft: 2
        },
          marginRight: 5
        },
          marginRight: 3
        }
      }
      props: {
        variant: "outlined",
        color: n
      },
      style: {
        color: (e.vars || e).palette[n].main,
        },
        },
          "&:hover, &:active": {
            color: (e.vars || e).palette[n].main
          }
        }
      }
    }))]
  };
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e, {
      size: r
    } = n;
    return [t.label, t[`label${He(r)}`]];
  }
})({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      variant: "outlined"
    },
    style: {
      paddingLeft: 11,
      paddingRight: 11
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      paddingLeft: 8,
      paddingRight: 8
    }
  }, {
    props: {
      size: "small",
      variant: "outlined"
    },
    style: {
      paddingLeft: 7,
      paddingRight: 7
    }
  }]
});
  return e.key === "Backspace" || e.key === "Delete";
}
    props: t,
    name: "MuiChip"
  }), {
    avatar: o,
    className: s,
    clickable: a,
    color: c = "default",
    component: f,
    disabled: g = !1,
    label: w,
    onClick: C,
    onDelete: T,
    onKeyDown: E,
    onKeyUp: O,
    variant: I = "filled",
    tabIndex: M,
    // TODO v6: Rename to `focusableWhenDisabled`.
    re.stopPropagation(), T && T(re);
    ...r,
    disabled: g,
    color: c,
    onDelete: !!T,
    clickable: q,
    variant: I
    component: f || "div",
    focusVisibleClassName: ee.focusVisible,
    ...T && {
      disableRipple: !0
    }
  } : {};
    className: et(ee.deleteIcon),
  }));
  let X = null;
  o && /* @__PURE__ */ x.isValidElement(o) && (X = /* @__PURE__ */ x.cloneElement(o, {
    className: et(ee.avatar, o.props.className)
  }));
  let te = null;
    className: et(ee.root, s),
    disabled: q && g ? !0 : void 0,
    onClick: C,
    ...G,
      className: et(ee.label),
      children: w
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Avatar element to display.
   */
  avatar: u.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: u.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: u.oneOfType([u.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: u.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * Icon element.
   */
  icon: u.element,
  /**
   * The content of the component.
   */
  label: u.node,
  /**
   * @ignore
   */
  onClick: u.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: u.func,
  /**
   * @ignore
   */
  onKeyDown: u.func,
  /**
   * @ignore
   */
  onKeyUp: u.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * If `true`, allows the disabled chip to escape focus.
   * If `false`, allows the disabled chip to receive focus.
   * @default false
   */
  skipFocusWhenDisabled: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * @ignore
   */
  tabIndex: u.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: u.oneOfType([u.oneOf(["filled", "outlined"]), u.string])
});
function FE(e) {
  return parseInt(e, 10) || 0;
}
const gte = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: "hidden",
    // Remove from the content flow
    position: "absolute",
    // Ignore the scrollbar width
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: "translateZ(0)"
  }
};
function vte(e) {
  for (const t in e)
    return !1;
  return !0;
}
function EF(e) {
  return vte(e) || e.outerHeightStyle === 0 && !e.overflowing;
}
const TV = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const {
    onChange: r,
    maxRows: o,
    minRows: s = 1,
    style: a,
    value: c,
    ...f
  } = t, {
    current: h
  } = x.useRef(c != null), g = x.useRef(null), v = Ir(n, g), w = x.useRef(null), C = x.useRef(null), T = x.useCallback(() => {
    const M = g.current, A = C.current;
    if (!M || !A)
      return;
    const j = _l(M).getComputedStyle(M);
    if (j.width === "0px")
      return {
        outerHeightStyle: 0,
        overflowing: !1
      };
    A.style.width = j.width, A.value = M.value || t.placeholder || "x", A.value.slice(-1) === `
` && (A.value += " ");
    const B = j.boxSizing, H = FE(j.paddingBottom) + FE(j.paddingTop), F = FE(j.borderBottomWidth) + FE(j.borderTopWidth), D = A.scrollHeight;
    A.value = "x";
    const q = A.scrollHeight;
    let U = D;
    s && (U = Math.max(Number(s) * q, U)), o && (U = Math.min(Number(o) * q, U)), U = Math.max(U, q);
    const K = U + (B === "border-box" ? H + F : 0), ee = Math.abs(U - D) <= 1;
    return {
      outerHeightStyle: K,
      overflowing: ee
    };
  }, [o, s, t.placeholder]), E = Fn(() => {
    const M = g.current, A = T();
    if (!M || !A || EF(A))
      return !1;
    const k = A.outerHeightStyle;
    return w.current != null && w.current !== k;
  }), O = x.useCallback(() => {
    const M = g.current, A = T();
    if (!M || !A || EF(A))
      return;
    const k = A.outerHeightStyle;
      return;
      }));
    };
    O();
  });
  const I = (M) => {
  };
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ $.jsx("textarea", {
      value: c,
      onChange: I,
      rows: s,
      style: a,
      ...f
    }), /* @__PURE__ */ $.jsx("textarea", {
      "aria-hidden": !0,
      className: t.className,
      readOnly: !0,
      ref: C,
      tabIndex: -1,
      style: {
        ...a,
        paddingTop: 0,
        paddingBottom: 0
      }
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: u.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * @ignore
   */
  onChange: u.func,
  /**
   * @ignore
   */
  placeholder: u.string,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * @ignore
   */
  value: u.oneOfType([u.arrayOf(u.string), u.number, u.string])
});
  return typeof e == "string";
}
  props: e,
  states: t,
  muiFormControl: n
}) {
  return t.reduce((r, o) => (r[o] = e[o], n && typeof e[o] > "u" && (r[o] = n[o]), r), {});
}
}
  return e != null && !(Array.isArray(e) && e.length === 0);
}
}
  return e.startAdornment;
}
}
  const {
    ownerState: n
  } = e;
  return [t.root, n.formControl && t.formControl, n.startAdornment && t.adornedStart, n.endAdornment && t.adornedEnd, n.error && t.error, n.size === "small" && t.sizeSmall, n.multiline && t.multiline, n.color && t[`color${He(n.color)}`], n.fullWidth && t.fullWidth, n.hiddenLabel && t.hiddenLabel];
  const {
    ownerState: n
  } = e;
  return [t.input, n.size === "small" && t.inputSizeSmall, n.multiline && t.inputMultiline, n.type === "search" && t.inputTypeSearch, n.startAdornment && t.inputAdornedStart, n.endAdornment && t.inputAdornedEnd, n.hiddenLabel && t.inputHiddenLabel];
  const {
    classes: t,
    color: n,
    disabled: r,
    error: o,
    endAdornment: s,
    focused: a,
    formControl: c,
    fullWidth: f,
    multiline: g,
    size: w,
    startAdornment: C,
    type: T
  } = e, E = {
  };
  name: "MuiInputBase",
  slot: "Root",
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body1,
  color: (e.vars || e).palette.text.primary,
  lineHeight: "1.4375em",
  // 23px
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  position: "relative",
  cursor: "text",
  display: "inline-flex",
  alignItems: "center",
    color: (e.vars || e).palette.text.disabled,
    cursor: "default"
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      padding: "4px 0 5px"
    }
  }, {
    props: ({
      ownerState: t,
      size: n
    }) => t.multiline && n === "small",
    style: {
      paddingTop: 1
    }
  }, {
    props: ({
      ownerState: t
    }) => t.fullWidth,
    style: {
      width: "100%"
    }
  }]
  name: "MuiInputBase",
  slot: "Input",
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light", n = {
    color: "currentColor",
    ...e.vars ? {
      opacity: e.vars.opacity.inputPlaceholder
    } : {
      opacity: t ? 0.42 : 0.5
    },
    transition: e.transitions.create("opacity", {
      duration: e.transitions.duration.shorter
    })
  }, r = {
    opacity: "0 !important"
  }, o = e.vars ? {
    opacity: e.vars.opacity.inputPlaceholder
  } : {
    opacity: t ? 0.42 : 0.5
  };
  return {
    font: "inherit",
    letterSpacing: "inherit",
    color: "currentColor",
    padding: "4px 0 5px",
    border: 0,
    boxSizing: "content-box",
    background: "none",
    height: "1.4375em",
    // Reset 23pxthe native input line-height
    margin: 0,
    // Reset for Safari
    WebkitTapHighlightColor: "transparent",
    display: "block",
    // Make the flex item shrink with Firefox
    minWidth: 0,
    width: "100%",
    "&::-webkit-input-placeholder": n,
    "&::-moz-placeholder": n,
    // Firefox 19+
    "&::-ms-input-placeholder": n,
    // Edge
    "&:focus": {
      outline: 0
    },
    // Reset Firefox invalid required input style
    "&:invalid": {
      boxShadow: "none"
    },
    "&::-webkit-search-decoration": {
      // Remove the padding when type=search.
      WebkitAppearance: "none"
    },
    // Show and hide the placeholder logic
      "&::-webkit-input-placeholder": r,
      "&::-moz-placeholder": r,
      // Firefox 19+
      "&::-ms-input-placeholder": r,
      // Edge
      "&:focus::-webkit-input-placeholder": o,
      "&:focus::-moz-placeholder": o,
      // Firefox 19+
      "&:focus::-ms-input-placeholder": o
      // Edge
    },
      opacity: 1,
      // Reset iOS opacity
      WebkitTextFillColor: (e.vars || e).palette.text.disabled
      // Fix opacity Safari bug
    },
    variants: [{
      props: ({
        ownerState: s
      }) => !s.disableInjectingGlobalStyles,
      style: {
        animationName: "mui-auto-fill-cancel",
        animationDuration: "10ms",
        "&:-webkit-autofill": {
          animationDuration: "5000s",
          animationName: "mui-auto-fill"
        }
      }
    }, {
      props: {
        size: "small"
      },
      style: {
        paddingTop: 1
      }
    }, {
      props: ({
        ownerState: s
      }) => s.multiline,
      style: {
        height: "auto",
        resize: "none",
        padding: 0,
        paddingTop: 0
      }
    }, {
      props: {
        type: "search"
      },
      style: {
        MozAppearance: "textfield"
        // Improve type search style.
      }
    }]
  };
  "@keyframes mui-auto-fill": {
    from: {
      display: "block"
    }
  },
  "@keyframes mui-auto-fill-cancel": {
    from: {
      display: "block"
    }
  }
    props: t,
    name: "MuiInputBase"
  }), {
    "aria-describedby": o,
    autoComplete: s,
    autoFocus: a,
    className: c,
    color: f,
    componentsProps: g = {},
    disabled: w,
    disableInjectingGlobalStyles: C,
    endAdornment: T,
    error: E,
    fullWidth: O = !1,
    inputComponent: I = "input",
    inputProps: M = {},
    onChange: q,
    onKeyDown: ee,
    onKeyUp: G,
    readOnly: X,
    renderSuffix: te,
    rows: re,
    size: Q,
    slots: ie = {},
    startAdornment: de,
    type: ue = "text",
    value: he,
    ...ge
  } = r, fe = M.value != null ? M.value : he, {
    current: pe
  } = x.useRef(fe != null), be = x.useRef(), we = x.useCallback((Ie) => {
    process.env.NODE_ENV !== "production" && Ie && Ie.nodeName !== "INPUT" && !Ie.focus && console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join(`
`));
  process.env.NODE_ENV !== "production" && x.useEffect(() => {
    if (Ne)
      return Ne.registerEffect();
  }, [Ne]);
    props: r,
    muiFormControl: Ne,
    states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
  });
  Be.focused = Ne ? Ne.focused : ce, x.useEffect(() => {
    pe && rt({
      value: fe
    });
  }, [fe, rt, pe]);
  const ot = (Ie) => {
  }, wt = (Ie) => {
  }, gt = (Ie, ...pt) => {
    if (!pe) {
      const yt = Ie.target || be.current;
      if (yt == null)
      rt({
        value: yt.value
      });
    }
    M.onChange && M.onChange(Ie, ...pt), q && q(Ie, ...pt);
  };
  x.useEffect(() => {
    rt(be.current);
  }, []);
  const nt = (Ie) => {
  };
  let Ft = I, ut = M;
    type: void 0,
    minRows: re,
    maxRows: re,
    ...ut
  }) : ut = {
    type: void 0,
    ...ut
  const Et = (Ie) => {
    rt(Ie.animationName === "mui-auto-fill-cancel" ? be.current : {
      value: "x"
    });
  };
  x.useEffect(() => {
    Ne && Ne.setAdornedStart(!!de);
  }, [Ne, de]);
  const Tt = {
    ...r,
    color: Be.color || "primary",
    disabled: Be.disabled,
    endAdornment: T,
    error: Be.error,
    focused: Be.focused,
    formControl: Ne,
    fullWidth: O,
    hiddenLabel: Be.hiddenLabel,
    size: Be.size,
    startAdornment: de,
    type: ue
  return ut = {
    ...ut,
  }, /* @__PURE__ */ $.jsxs(x.Fragment, {
    // For Pigment CSS, this has no effect because the InputGlobalStyles will be null.
      ...Xe,
      ref: n,
      onClick: nt,
      ...ge,
        ownerState: {
          ...Tt,
          ...Xe.ownerState
        }
      },
      className: et(At.root, Xe.className, c, X && "MuiInputBase-readOnly"),
        value: null,
        children: /* @__PURE__ */ $.jsx(Oe, {
          "aria-invalid": Be.error,
          "aria-describedby": o,
          autoComplete: s,
          autoFocus: a,
          disabled: Be.disabled,
          onAnimationStart: Et,
          readOnly: X,
          required: Be.required,
          rows: re,
          value: fe,
          onKeyDown: ee,
          onKeyUp: G,
          type: ue,
          ...ut,
            as: Ft,
            ownerState: {
              ...Tt,
              ...ut.ownerState
            }
          },
          ref: _e,
          className: et(At.input, ut.className, X && "MuiInputBase-readOnly"),
          onBlur: wt,
          onChange: gt,
          onFocus: ot
        })
      }), T, te ? te({
        ...Be,
        startAdornment: de
      }) : null]
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  "aria-describedby": u.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: u.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Input: u.elementType,
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: u.bool,
  /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */
  disableInjectingGlobalStyles: u.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: u.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: u.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: u.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: u.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: u.string,
  /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: u.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * @ignore
   */
  onClick: u.func,
  /**
   * @ignore
   */
  onFocus: u.func,
  /**
   * Callback fired when the `input` doesn't satisfy its constraints.
   */
  onInvalid: u.func,
  /**
   * @ignore
   */
  onKeyDown: u.func,
  /**
   * @ignore
   */
  onKeyUp: u.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: u.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: u.bool,
  /**
   * @ignore
   */
  renderSuffix: u.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: u.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: u.oneOfType([u.number, u.string]),
  /**
   * The size of the component.
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    root: u.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: u.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: u.any
});
function Ste(e) {
  return ln("MuiInput", e);
}
const Ff = {
  ..._i,
  ...fn("MuiInput", ["root", "underline", "input"])
};
function Cte(e) {
  return ln("MuiOutlinedInput", e);
}
const pl = {
  ..._i,
  ...fn("MuiOutlinedInput", ["root", "notchedOutline", "input"])
};
function xte(e) {
  return ln("MuiFilledInput", e);
}
const Pa = {
  ..._i,
  ...fn("MuiFilledInput", ["root", "underline", "input", "adornedStart", "adornedEnd", "sizeSmall", "multiline", "hiddenLabel"])
}, _V = Tn(/* @__PURE__ */ $.jsx("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");
function Ete(e) {
  return ln("MuiAutocomplete", e);
}
const jn = fn("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
var RF, kF;
const Tte = (e) => {
  const {
    classes: t,
    disablePortal: n,
    expanded: r,
    focused: o,
    fullWidth: s,
    hasClearIcon: a,
    hasPopupIcon: c,
    inputFocused: f,
    popupOpen: h,
    size: g
  } = e, v = {
    root: ["root", r && "expanded", o && "focused", s && "fullWidth", a && "hasClearIcon", c && "hasPopupIcon"],
    inputRoot: ["inputRoot"],
    input: ["input", f && "inputFocused"],
    tag: ["tag", `tagSize${He(g)}`],
    endAdornment: ["endAdornment"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", h && "popupIndicatorOpen"],
    popper: ["popper", n && "popperDisablePortal"],
    paper: ["paper"],
    listbox: ["listbox"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    option: ["option"],
    groupLabel: ["groupLabel"],
    groupUl: ["groupUl"]
  };
  return mt(v, Ete, t);
  name: "MuiAutocomplete",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e, {
      fullWidth: r,
      hasClearIcon: o,
      hasPopupIcon: s,
      inputFocused: a,
      size: c
    } = n;
    return [{
    }, {
    }, {
    }, {
    }, {
    }, t.root, r && t.fullWidth, s && t.hasPopupIcon, o && t.hasClearIcon];
  }
})({
    visibility: "visible"
  },
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
      visibility: "visible"
    }
  },
    margin: 3,
    maxWidth: "calc(100% - 6px)"
  },
      paddingRight: 30
    },
      paddingRight: 56
    },
      width: 0,
      minWidth: 30
    }
  },
    paddingBottom: 1,
    "& .MuiInput-input": {
      padding: "4px 4px 4px 0px"
    }
  },
      padding: "2px 4px 3px 0"
    }
  },
    padding: 9,
      paddingRight: 39
    },
      paddingRight: 65
    },
      padding: "7.5px 4px 7.5px 5px"
    },
      right: 9
    }
  },
    // Don't specify paddingRight, as it overrides the default value set when there is only
    // one of the popup or clear icon as the specificity is equal so the latter one wins
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 6,
      padding: "2.5px 4px 2.5px 8px"
    }
  },
    paddingTop: 19,
    paddingLeft: 8,
      paddingRight: 39
    },
      paddingRight: 65
    },
      padding: "7px 4px"
    },
      right: 9
    }
  },
    paddingBottom: 1,
      padding: "2.5px 4px"
    }
  },
    paddingTop: 8
  },
    paddingTop: 0,
    paddingBottom: 0,
      paddingTop: 16,
      paddingBottom: 17
    }
  },
      paddingTop: 8,
      paddingBottom: 9
    }
  },
    flexGrow: 1,
    textOverflow: "ellipsis",
    opacity: 0
  },
  variants: [{
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
        margin: 2,
        maxWidth: "calc(100% - 4px)"
      }
    }
  }, {
    props: {
      inputFocused: !0
    },
    style: {
        opacity: 1
      }
    }
  }, {
    props: {
      multiple: !0
    },
    style: {
        flexWrap: "wrap"
      }
    }
  }]
  name: "MuiAutocomplete",
  slot: "EndAdornment",
  overridesResolver: (e, t) => t.endAdornment
})({
  // We use a position absolute to support wrapping tags.
  position: "absolute",
  right: 0,
  top: "50%",
  transform: "translate(0, -50%)"
  name: "MuiAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (e, t) => t.clearIndicator
})({
  marginRight: -2,
  padding: 4,
  visibility: "hidden"
  name: "MuiAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.popupIndicator, n.popupOpen && t.popupIndicatorOpen];
  }
})({
  padding: 2,
  marginRight: -2,
  variants: [{
    props: {
      popupOpen: !0
    },
    style: {
      transform: "rotate(180deg)"
    }
  }]
  name: "MuiAutocomplete",
  slot: "Popper",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [{
    }, t.popper, n.disablePortal && t.popperDisablePortal];
  }
})(Zt(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.modal,
  variants: [{
    props: {
      disablePortal: !0
    },
    style: {
      position: "absolute"
    }
  }]
  name: "MuiAutocomplete",
  slot: "Paper",
  overridesResolver: (e, t) => t.paper
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body1,
  overflow: "auto"
  name: "MuiAutocomplete",
  slot: "Loading",
  overridesResolver: (e, t) => t.loading
})(Zt(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
  name: "MuiAutocomplete",
  slot: "NoOptions",
  overridesResolver: (e, t) => t.noOptions
})(Zt(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
  name: "MuiAutocomplete",
  slot: "Listbox",
  overridesResolver: (e, t) => t.listbox
})(Zt(({
  theme: e
}) => ({
  listStyle: "none",
  margin: 0,
  padding: "8px 0",
  maxHeight: "40vh",
  overflow: "auto",
  position: "relative",
    minHeight: 48,
    display: "flex",
    overflow: "hidden",
    justifyContent: "flex-start",
    alignItems: "center",
    cursor: "pointer",
    paddingTop: 6,
    boxSizing: "border-box",
    outline: "0",
    WebkitTapHighlightColor: "transparent",
    paddingBottom: 6,
    paddingLeft: 16,
    paddingRight: 16,
    [e.breakpoints.up("sm")]: {
      minHeight: "auto"
    },
      backgroundColor: (e.vars || e).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    '&[aria-disabled="true"]': {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
      backgroundColor: (e.vars || e).palette.action.focus
    },
    '&[aria-selected="true"]': {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (e.vars || e).palette.action.selected
        }
      },
      }
    }
  }
  name: "MuiAutocomplete",
  slot: "GroupLabel",
  overridesResolver: (e, t) => t.groupLabel
})(Zt(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  top: -8
  name: "MuiAutocomplete",
  slot: "GroupUl",
  overridesResolver: (e, t) => t.groupUl
})({
  padding: 0,
    paddingLeft: 24
  }
    props: t,
    name: "MuiAutocomplete"
  }), {
    autoComplete: o = !1,
    autoHighlight: s = !1,
    autoSelect: a = !1,
    blurOnSelect: c = !1,
    ChipProps: f,
      fontSize: "small"
    })),
    clearOnEscape: w = !1,
    clearText: C = "Clear",
    closeText: T = "Close",
    componentsProps: E,
    defaultValue: O = r.multiple ? [] : null,
    disableCloseOnSelect: I = !1,
    disabled: M = !1,
    fullWidth: q = !1,
    getOptionKey: ee,
    getOptionLabel: G,
    groupBy: X,
    handleHomeEndKeys: te = !r.freeSolo,
    id: re,
    includeInputInList: Q = !1,
    limitTags: ie = -1,
    ListboxComponent: de,
    ListboxProps: ue,
    loading: he = !1,
    loadingText: ge = "Loading…",
    multiple: fe = !1,
    noOptionsText: pe = "No options",
    onChange: be,
    onClose: we,
    onHighlightChange: _e,
    onInputChange: ce,
    onOpen: Ce,
    open: Ne,
    openOnFocus: Be = !1,
    openText: tt = "Open",
    PaperComponent: rt,
    PopperComponent: ot,
    readOnly: gt = !1,
    renderGroup: nt,
    renderInput: Ft,
    renderOption: ut,
    renderTags: Et,
    selectOnFocus: Tt = !r.freeSolo,
    size: At = "medium",
    slots: vt = {},
    slotProps: Xe = {},
    value: Oe,
    ...Ie
  } = r, {
    getRootProps: pt,
    getInputProps: yt,
    getInputLabelProps: zt,
    getPopupIndicatorProps: bt,
    getClearProps: We,
    getTagProps: St,
    anchorEl: Wt,
    ...r,
    componentName: "Autocomplete"
  } = yt(), {
    ...r,
    fullWidth: q,
    getOptionLabel: ye,
    size: At
    slots: {
      paper: rt,
      popper: ot,
      ...vt
    },
    slotProps: {
      chip: f,
      listbox: ue,
      ...E,
      ...Xe
    }
    externalForwardedProps: Ct,
    ownerState: Ye,
    className: ft.listbox,
    externalForwardedProps: Ct,
    ownerState: Ye,
    className: ft.paper
    externalForwardedProps: Ct,
    ownerState: Ye,
    className: ft.popper,
    additionalProps: {
      style: {
        width: Wt ? Wt.clientWidth : null
      },
      role: "presentation",
      anchorEl: Wt,
    }
  });
  let Kt;
      className: ft.tag,
      disabled: M,
    });
      const {
      });
        size: At,
        ...Ct.slotProps.chip
    });
  }
  if (ie > -1 && Array.isArray(Kt)) {
      className: ft.tag,
    }, Kt.length)));
  }
      className: ft.groupLabel,
      ownerState: Ye,
      component: "div",
      className: ft.groupUl,
      ownerState: Ye,
    })]
    const {
    return /* @__PURE__ */ $.jsx("li", {
    });
      className: ft.option
    }, Ye);
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      ref: n,
      ownerState: Ye,
      ...pt(Ie),
      children: Ft({
        disabled: M,
        fullWidth: !0,
        size: At === "small" ? "small" : void 0,
        InputLabelProps: zt(),
        InputProps: {
          className: ft.inputRoot,
          startAdornment: Kt,
          },
              className: ft.endAdornment,
              ownerState: Ye,
                ...We(),
                "aria-label": C,
                title: C,
                ownerState: Ye,
                children: g
                ...bt(),
                disabled: M,
                ownerState: Ye,
                children: wt
              }) : null]
            })
          }
        },
        inputProps: {
          className: ft.input,
          disabled: M,
          readOnly: gt,
          ...yt()
        }
      })
      as: Bt,
      ...jt,
        as: Re,
        ...Je,
          className: ft.loading,
          ownerState: Ye,
          children: ge
          className: ft.noOptions,
          ownerState: Ye,
          role: "presentation",
          },
          children: pe
          as: de,
          ...De,
        }) : null]
      })
    }) : null]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the portion of the selected suggestion that the user hasn't typed,
   * known as the completion string, appears inline after the input cursor in the textbox.
   * The inline completion string is visually highlighted and has a selected state.
   * @default false
   */
  autoComplete: u.bool,
  /**
   * If `true`, the first option is automatically highlighted.
   * @default false
   */
  autoHighlight: u.bool,
  /**
   * If `true`, the selected option becomes the value of the input
   * when the Autocomplete loses focus unless the user chooses
   * a different option or changes the character string in the input.
   *
   * When using the `freeSolo` mode, the typed value will be the input value
   * if the Autocomplete loses focus without highlighting an option.
   * @default false
   */
  autoSelect: u.bool,
  /**
   * Control if the input should be blurred when an option is selected:
   *
   * - `false` the input is not blurred.
   * - `true` the input is always blurred.
   * - `touch` the input is blurred after a touch event.
   * - `mouse` the input is blurred after a mouse event.
   * @default false
   */
  blurOnSelect: u.oneOfType([u.oneOf(["mouse", "touch"]), u.bool]),
  /**
   * Props applied to the [`Chip`](https://mui.com/material-ui/api/chip/) element.
   * @deprecated Use `slotProps.chip` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ChipProps: u.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="small" />
   */
  clearIcon: u.node,
  /**
   * If `true`, the input's text is cleared on blur if no value is selected.
   *
   * Set it to `true` if you want to help the user enter a new value.
   * Set it to `false` if you want to help the user resume their search.
   * @default !props.freeSolo
   */
  clearOnBlur: u.bool,
  /**
   * If `true`, clear all values when the user presses escape and the popup is closed.
   * @default false
   */
  clearOnEscape: u.bool,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: u.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: u.string,
  /**
   * The props used for each slot inside.
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: u.shape({
    clearIndicator: u.object,
    paper: u.object,
    popper: u.object,
    popupIndicator: u.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
`)) : null),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: u.bool,
  /**
   * If `true`, the popup won't close when a value is selected.
   * @default false
   */
  disableCloseOnSelect: u.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: u.bool,
  /**
   * If `true`, the list box in the popup will not wrap focus.
   * @default false
   */
  disableListWrap: u.bool,
  /**
   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: u.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @default createFilterOptions()
   * @param {Value[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {Value[]}
   */
  filterOptions: u.func,
  /**
   * If `true`, hide the selected options from the list box.
   * @default false
   */
  filterSelectedOptions: u.bool,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: u.oneOfType([u.oneOf(["auto"]), u.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: u.bool,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more) => `+${more}`
   */
  getLimitTagsText: u.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {Value} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: u.func,
  /**
   * Used to determine the key for a given option.
   * This can be useful when the labels of options are not unique (since labels are used as keys by default).
   *
   * @param {Value} option The option to get the key for.
   * @returns {string | number}
   */
  getOptionKey: u.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {Value} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: u.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {Value} option The Autocomplete option.
   * @returns {string}
   */
  groupBy: u.func,
  /**
   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
   * It should move focus to the first option and last option, respectively.
   * @default !props.freeSolo
   */
  handleHomeEndKeys: u.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: u.string,
  /**
   * If `true`, the highlight can move to the input.
   * @default false
   */
  includeInputInList: u.bool,
  /**
   * The input value.
   */
  inputValue: u.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {Value} option The option to test.
   * @param {Value} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: u.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: nm,
  /**
   * The component used to render the listbox.
   * @default 'ul'
   * @deprecated Use `slotProps.listbox.component` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ListboxComponent: u.elementType,
  /**
   * Props applied to the Listbox element.
   * @deprecated Use `slotProps.listbox` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  ListboxProps: u.object,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, for example `options` are empty).
   * @default false
   */
  loading: u.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: u.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: u.bool,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: u.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value|Value[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: u.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: u.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: u.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`, `"blur"`, `"selectOption"`, `"removeOption"`
   */
  onInputChange: u.func,
  /**
   * @ignore
   */
  onKeyDown: u.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool,
  /**
   * If `true`, the popup will open on input focus.
   * @default false
   */
  openOnFocus: u.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: u.string,
  /**
   * A list of options that will be shown in the Autocomplete.
   */
  options: u.array.isRequired,
  /**
   * The component used to render the body of the popup.
   * @default Paper
   * @deprecated Use `slots.paper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PaperComponent: u.elementType,
  /**
   * The component used to position the popup.
   * @default Popper
   * @deprecated Use `slots.popper` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PopperComponent: u.elementType,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: u.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: u.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: u.func,
  /**
   * Render the input.
   *
   * @param {object} params
   * @returns {ReactNode}
   */
  renderInput: u.func.isRequired,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {Value} option The option to render.
   * @param {object} state The state of each option.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderOption: u.func,
  /**
   * Render the selected value.
   *
   * @param {Value[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: u.func,
  /**
   * If `true`, the input's text is selected on focus.
   * It helps the user clear the selected value.
   * @default !props.freeSolo
   */
  selectOnFocus: u.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["small", "medium"]), u.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    chip: u.oneOfType([u.func, u.object]),
    clearIndicator: u.oneOfType([u.func, u.object]),
    listbox: u.oneOfType([u.func, u.object]),
    paper: u.oneOfType([u.func, u.object]),
    popper: u.oneOfType([u.func, u.object]),
    popupIndicator: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    listbox: u.elementType,
    paper: u.elementType,
    popper: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: ja(u.any, (e) => e.multiple && e.value !== void 0 && !Array.isArray(e.value) ? new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${e.value} was provided.`].join(`
`)) : null)
});
const Lte = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
}, OV = /* @__PURE__ */ x.forwardRef(function(t, n) {
  const r = za(), o = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: s,
    appear: a = !0,
    children: c,
    easing: f,
    in: h,
    onEnter: g,
    onEntered: v,
    onEntering: w,
    onExit: C,
    onExited: T,
    onExiting: E,
    style: O,
    timeout: P = o,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: I = Cu,
    ...M
  } = t, A = x.useRef(null), k = Ir(A, lp(c), n), j = (ee) => (G) => {
    if (ee) {
      const Y = A.current;
      G === void 0 ? ee(Y) : ee(Y, G);
    }
  }, B = j(w), H = j((ee, G) => {
    eD(ee);
    const Y = Gv({
      style: O,
      timeout: P,
      easing: f
    }, {
      mode: "enter"
    });
    ee.style.webkitTransition = r.transitions.create("opacity", Y), ee.style.transition = r.transitions.create("opacity", Y), g && g(ee, G);
  }), F = j(v), D = j(E), q = j((ee) => {
    const G = Gv({
      style: O,
      timeout: P,
      easing: f
    }, {
      mode: "exit"
    });
    ee.style.webkitTransition = r.transitions.create("opacity", G), ee.style.transition = r.transitions.create("opacity", G), C && C(ee);
  }), U = j(T), K = (ee) => {
    s && s(A.current, ee);
  };
  return /* @__PURE__ */ $.jsx(I, {
    appear: a,
    in: h,
    nodeRef: A,
    onEnter: H,
    onEntered: F,
    onEntering: B,
    onExit: q,
    onExited: U,
    ...M,
    children: (ee, {
      ownerState: G,
    }) => /* @__PURE__ */ x.cloneElement(c, {
      style: {
        opacity: 0,
        ...O,
        ...c.props.style
      },
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: u.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: u.bool,
  /**
   * A single child content element.
   */
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: u.oneOfType([u.shape({
    enter: u.string,
    exit: u.string
  }), u.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: u.bool,
  /**
   * @ignore
   */
  onEnter: u.func,
  /**
   * @ignore
   */
  onEntered: u.func,
  /**
   * @ignore
   */
  onEntering: u.func,
  /**
   * @ignore
   */
  onExit: u.func,
  /**
   * @ignore
   */
  onExited: u.func,
  /**
   * @ignore
   */
  onExiting: u.func,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: u.oneOfType([u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })])
});
}
  const {
    classes: t,
    invisible: n
  } = e;
  return mt({
    root: ["root", n && "invisible"]
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.invisible && t.invisible];
  }
})({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent",
  variants: [{
    props: {
      invisible: !0
    },
    style: {
      backgroundColor: "transparent"
    }
  }]
    props: t,
    name: "MuiBackdrop"
  }), {
    children: o,
    className: s,
    component: a = "div",
    invisible: c = !1,
    open: f,
    componentsProps: g = {},
    slots: w = {},
    TransitionComponent: C,
    transitionDuration: T,
    ...E
  } = r, O = {
    ...r,
    component: a,
    invisible: c
    transition: C,
    ...w
  }, M = {
    ...g,
    slots: I,
    slotProps: M
    ownerState: O
    ownerState: O
  });
    in: f,
    timeout: T,
    ...E,
      "aria-hidden": !0,
      ref: n,
      children: o
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    root: u.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: u.bool,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    root: u.oneOfType([u.func, u.object]),
    transition: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    root: u.elementType,
    transition: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: u.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: u.oneOfType([u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })])
});
  const {
    badgeContent: t,
    invisible: n = !1,
    max: r = 99,
    showZero: o = !1
    badgeContent: t,
    max: r
  });
  let a = n;
  n === !1 && t === 0 && !o && (a = !0);
  const {
    badgeContent: c,
    max: f = r
  return {
    badgeContent: c,
    invisible: a,
    max: f,
  };
}
}
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopRight",
  "anchorOriginBottomRight",
  "anchorOriginTopLeft",
  "anchorOriginBottomLeft",
  "invisible",
  "colorError",
  "colorInfo",
  "colorPrimary",
  "colorSecondary",
  "colorSuccess",
  "colorWarning",
  "overlapRectangular",
  "overlapCircular",
  // TODO: v6 remove the overlap value from these class keys
  "anchorOriginTopLeftCircular",
  "anchorOriginTopLeftRectangular",
  "anchorOriginTopRightCircular",
  "anchorOriginTopRightRectangular",
  "anchorOriginBottomLeftCircular",
  "anchorOriginBottomLeftRectangular",
  "anchorOriginBottomRightCircular",
  "anchorOriginBottomRightRectangular"
  const {
    color: t,
    anchorOrigin: n,
    invisible: r,
    overlap: o,
    variant: s,
    classes: a = {}
  } = e, c = {
    root: ["root"],
    badge: ["badge", s, r && "invisible", `anchorOrigin${He(n.vertical)}${He(n.horizontal)}`, `anchorOrigin${He(n.vertical)}${He(n.horizontal)}${He(o)}`, `overlap${He(o)}`, t !== "default" && `color${He(t)}`]
  };
  name: "MuiBadge",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})({
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
  name: "MuiBadge",
  slot: "Badge",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.badge, t[n.variant], t[`anchorOrigin${He(n.anchorOrigin.vertical)}${He(n.anchorOrigin.horizontal)}${He(n.overlap)}`], n.color !== "default" && t[`color${He(n.color)}`], n.invisible && t.invisible];
  }
})(Zt(({
  theme: e
}) => ({
  display: "flex",
  flexDirection: "row",
  flexWrap: "wrap",
  justifyContent: "center",
  alignContent: "center",
  alignItems: "center",
  position: "absolute",
  boxSizing: "border-box",
  fontFamily: e.typography.fontFamily,
  fontWeight: e.typography.fontWeightMedium,
  fontSize: e.typography.pxToRem(12),
  lineHeight: 1,
  padding: "0 6px",
  zIndex: 1,
  // Render the badge on top of potential ripples.
  transition: e.transitions.create("transform", {
    easing: e.transitions.easing.easeInOut,
    duration: e.transitions.duration.enteringScreen
  }),
    props: {
      color: t
    },
    style: {
      backgroundColor: (e.vars || e).palette[t].main,
      color: (e.vars || e).palette[t].contrastText
    }
  })), {
    props: {
      variant: "dot"
    },
    style: {
      padding: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "top" && t.anchorOrigin.horizontal === "right" && t.overlap === "rectangular",
    style: {
      top: 0,
      right: 0,
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
        transform: "scale(0) translate(50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "bottom" && t.anchorOrigin.horizontal === "right" && t.overlap === "rectangular",
    style: {
      bottom: 0,
      right: 0,
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
        transform: "scale(0) translate(50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "top" && t.anchorOrigin.horizontal === "left" && t.overlap === "rectangular",
    style: {
      top: 0,
      left: 0,
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
        transform: "scale(0) translate(-50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "bottom" && t.anchorOrigin.horizontal === "left" && t.overlap === "rectangular",
    style: {
      bottom: 0,
      left: 0,
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
        transform: "scale(0) translate(-50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "top" && t.anchorOrigin.horizontal === "right" && t.overlap === "circular",
    style: {
      top: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, -50%)",
      transformOrigin: "100% 0%",
        transform: "scale(0) translate(50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "bottom" && t.anchorOrigin.horizontal === "right" && t.overlap === "circular",
    style: {
      bottom: "14%",
      right: "14%",
      transform: "scale(1) translate(50%, 50%)",
      transformOrigin: "100% 100%",
        transform: "scale(0) translate(50%, 50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "top" && t.anchorOrigin.horizontal === "left" && t.overlap === "circular",
    style: {
      top: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, -50%)",
      transformOrigin: "0% 0%",
        transform: "scale(0) translate(-50%, -50%)"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchorOrigin.vertical === "bottom" && t.anchorOrigin.horizontal === "left" && t.overlap === "circular",
    style: {
      bottom: "14%",
      left: "14%",
      transform: "scale(1) translate(-50%, 50%)",
      transformOrigin: "0% 100%",
        transform: "scale(0) translate(-50%, 50%)"
      }
    }
  }, {
    props: {
      invisible: !0
    },
    style: {
      transition: e.transitions.create("transform", {
        easing: e.transitions.easing.easeInOut,
        duration: e.transitions.duration.leavingScreen
      })
    }
  }]
})));
  return {
    vertical: (e == null ? void 0 : e.vertical) ?? "top",
    horizontal: (e == null ? void 0 : e.horizontal) ?? "right"
  };
}
    props: t,
    name: "MuiBadge"
  }), {
    anchorOrigin: o,
    className: s,
    classes: a,
    component: c,
    components: f = {},
    children: g,
    color: w = "default",
    invisible: C = !1,
    max: T = 99,
    badgeContent: E,
    slots: O,
    showZero: I = !1,
    variant: M = "standard",
  } = r, {
    max: T,
    invisible: C,
    badgeContent: E,
    showZero: I
    color: w,
    variant: M,
    badgeContent: E
    color: q = w,
    variant: ee = M
    ...r,
    showZero: I,
    anchorOrigin: G,
    color: q,
    variant: ee
    slots: {
      root: (O == null ? void 0 : O.root) ?? f.Root,
      badge: (O == null ? void 0 : O.badge) ?? f.Badge
    },
    slotProps: {
    }
    externalForwardedProps: {
      ...re,
    },
    ownerState: X,
    className: et(te.root, s),
    ref: n,
    additionalProps: {
      as: c
    }
    externalForwardedProps: re,
    ownerState: X,
    className: te.badge
  });
  return /* @__PURE__ */ $.jsxs(Q, {
    children: [g, /* @__PURE__ */ $.jsx(ie, {
      ...de,
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: u.shape({
    horizontal: u.oneOf(["left", "right"]),
    vertical: u.oneOf(["bottom", "top"])
  }),
  /**
   * The content rendered within the badge.
   */
  badgeContent: u.node,
  /**
   * The badge will be added relative to this node.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: u.oneOfType([u.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Badge: u.elementType,
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    badge: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: u.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: u.number,
  /**
   * Wrapped shape the badge should overlap.
   * @default 'rectangular'
   */
  overlap: u.oneOf(["circular", "rectangular"]),
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: u.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    badge: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    badge: u.elementType,
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: u.oneOfType([u.oneOf(["dot", "standard"]), u.string])
});
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: u.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    color: t,
    disableElevation: n,
    fullWidth: r,
    size: o,
    variant: s,
    loading: a,
    loadingPosition: c,
    classes: f
    root: ["root", a && "loading", s, `${s}${He(t)}`, `size${He(o)}`, `${s}Size${He(o)}`, `color${He(t)}`, n && "disableElevation", r && "fullWidth", a && `loadingPosition${He(c)}`],
    startIcon: ["icon", "startIcon", `iconSize${He(o)}`],
    endIcon: ["icon", "endIcon", `iconSize${He(o)}`],
    loadingIndicator: ["loadingIndicator"],
    loadingWrapper: ["loadingWrapper"]
  return {
    ...f,
    // forward the focused, disabled, etc. classes to the ButtonBase
    ...g
  };
  props: {
    size: "small"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }
}, {
  props: {
    size: "medium"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }
}, {
  props: {
    size: "large"
  },
  style: {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  }
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`${n.variant}${He(n.color)}`], t[`size${He(n.size)}`], t[`${n.variant}Size${He(n.size)}`], n.color === "inherit" && t.colorInherit, n.disableElevation && t.disableElevation, n.fullWidth && t.fullWidth, n.loading && t.loading];
  }
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? e.palette.grey[300] : e.palette.grey[800], n = e.palette.mode === "light" ? e.palette.grey.A100 : e.palette.grey[700];
  return {
    ...e.typography.button,
    minWidth: 64,
    padding: "6px 16px",
    border: 0,
    borderRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
      duration: e.transitions.duration.short
    }),
    "&:hover": {
      textDecoration: "none"
    },
      color: (e.vars || e).palette.action.disabled
    },
    variants: [{
      props: {
        variant: "contained"
      },
      style: {
        color: "var(--variant-containedColor)",
        backgroundColor: "var(--variant-containedBg)",
        boxShadow: (e.vars || e).shadows[2],
        "&:hover": {
          boxShadow: (e.vars || e).shadows[4],
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            boxShadow: (e.vars || e).shadows[2]
          }
        },
        "&:active": {
          boxShadow: (e.vars || e).shadows[8]
        },
          boxShadow: (e.vars || e).shadows[6]
        },
          color: (e.vars || e).palette.action.disabled,
          boxShadow: (e.vars || e).shadows[0],
          backgroundColor: (e.vars || e).palette.action.disabledBackground
        }
      }
    }, {
      props: {
        variant: "outlined"
      },
      style: {
        padding: "5px 15px",
        border: "1px solid currentColor",
        borderColor: "var(--variant-outlinedBorder, currentColor)",
        backgroundColor: "var(--variant-outlinedBg)",
        color: "var(--variant-outlinedColor)",
          border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
        }
      }
    }, {
      props: {
        variant: "text"
      },
      style: {
        padding: "6px 8px",
        color: "var(--variant-textColor)",
        backgroundColor: "var(--variant-textBg)"
      }
      props: {
        color: r
      },
      style: {
        "--variant-textColor": (e.vars || e).palette[r].main,
        "--variant-outlinedColor": (e.vars || e).palette[r].main,
        "--variant-containedColor": (e.vars || e).palette[r].contrastText,
        "--variant-containedBg": (e.vars || e).palette[r].main,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": (e.vars || e).palette[r].dark,
            "--variant-outlinedBorder": (e.vars || e).palette[r].main,
          }
        }
      }
    })), {
      props: {
        color: "inherit"
      },
      style: {
        color: "inherit",
        borderColor: "currentColor",
        "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedBg : t,
        "@media (hover: hover)": {
          "&:hover": {
            "--variant-containedBg": e.vars ? e.vars.palette.Button.inheritContainedHoverBg : n,
          }
        }
      }
    }, {
      props: {
        size: "small",
        variant: "text"
      },
      style: {
        padding: "4px 5px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "text"
      },
      style: {
        padding: "8px 11px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "outlined"
      },
      style: {
        padding: "3px 9px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "outlined"
      },
      style: {
        padding: "7px 21px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        size: "small",
        variant: "contained"
      },
      style: {
        padding: "4px 10px",
        fontSize: e.typography.pxToRem(13)
      }
    }, {
      props: {
        size: "large",
        variant: "contained"
      },
      style: {
        padding: "8px 22px",
        fontSize: e.typography.pxToRem(15)
      }
    }, {
      props: {
        disableElevation: !0
      },
      style: {
        boxShadow: "none",
        "&:hover": {
          boxShadow: "none"
        },
          boxShadow: "none"
        },
        "&:active": {
          boxShadow: "none"
        },
          boxShadow: "none"
        }
      }
    }, {
      props: {
        fullWidth: !0
      },
      style: {
        width: "100%"
      }
    }, {
      props: {
        loadingPosition: "center"
      },
      style: {
        transition: e.transitions.create(["background-color", "box-shadow", "border-color"], {
          duration: e.transitions.duration.short
        }),
          color: "transparent"
        }
      }
    }]
  };
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.startIcon, n.loading && t.startIconLoadingStart, t[`iconSize${He(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginLeft: -2
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "start",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginRight: -8
    }
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.endIcon, n.loading && t.endIconLoadingEnd, t[`iconSize${He(n.size)}`]];
  }
})(({
  theme: e
}) => ({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8,
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginRight: -2
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0
    },
    style: {
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.short
      }),
      opacity: 0
    }
  }, {
    props: {
      loadingPosition: "end",
      loading: !0,
      fullWidth: !0
    },
    style: {
      marginLeft: -8
    }
  name: "MuiButton",
  slot: "LoadingIndicator",
  overridesResolver: (e, t) => t.loadingIndicator
})(({
  theme: e
}) => ({
  display: "none",
  position: "absolute",
  visibility: "visible",
  variants: [{
    props: {
      loading: !0
    },
    style: {
      display: "flex"
    }
  }, {
    props: {
      loadingPosition: "start"
    },
    style: {
      left: 14
    }
  }, {
    props: {
      loadingPosition: "start",
      size: "small"
    },
    style: {
      left: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "start"
    },
    style: {
      left: 6
    }
  }, {
    props: {
      loadingPosition: "center"
    },
    style: {
      left: "50%",
      transform: "translate(-50%)",
      color: (e.vars || e).palette.action.disabled
    }
  }, {
    props: {
      loadingPosition: "end"
    },
    style: {
      right: 14
    }
  }, {
    props: {
      loadingPosition: "end",
      size: "small"
    },
    style: {
      right: 10
    }
  }, {
    props: {
      variant: "text",
      loadingPosition: "end"
    },
    style: {
      right: 6
    }
  }, {
    props: {
      loadingPosition: "start",
      fullWidth: !0
    },
    style: {
      position: "relative",
      left: -10
    }
  }, {
    props: {
      loadingPosition: "end",
      fullWidth: !0
    },
    style: {
      position: "relative",
      right: -10
    }
  }]
  name: "MuiButton",
  slot: "LoadingIconPlaceholder",
  overridesResolver: (e, t) => t.loadingIconPlaceholder
})({
  display: "inline-block",
  width: "1em",
  height: "1em"
    props: s,
    name: "MuiButton"
  }), {
    children: c,
    color: f = "primary",
    className: g,
    disableElevation: w = !1,
    disableFocusRipple: C = !1,
    endIcon: T,
    focusVisibleClassName: E,
    fullWidth: O = !1,
    loading: I = null,
    loadingIndicator: M,
    color: "inherit",
    size: 16
    ...a,
    color: f,
    disableElevation: w,
    disableFocusRipple: C,
    fullWidth: O,
    loading: I,
    loadingIndicator: q,
    })
    })
    // use plain HTML span to minimize the runtime overhead
    /* @__PURE__ */ $.jsx("span", {
      style: {
        display: "contents"
      },
        children: q
      })
    })
  ) : null;
    focusRipple: !C,
    ref: n,
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: u.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: u.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: u.bool,
  /**
   * Element placed after the children.
   */
  endIcon: u.node,
  /**
   * @ignore
   */
  focusVisibleClassName: u.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: u.string,
  /**
   * @ignore
   */
  id: u.string,
  /**
   * If `true`, the loading indicator is visible and the button is disabled.
   * If `true | false`, the loading wrapper is always rendered before the children to prevent [Google Translation Crash](https://github.com/mui/material-ui/issues/27853).
   * @default null
   */
  loading: u.bool,
  /**
   * Element placed before the children if the button is in loading state.
   * The node should contain an element with `role="progressbar"` with an accessible name.
   * By default, it renders a `CircularProgress` that is labeled by the button itself.
   * @default <CircularProgress color="inherit" size={16} />
   */
  loadingIndicator: u.node,
  /**
   * The loading indicator can be positioned on the start, end, or the center of the button.
   * @default 'center'
   */
  loadingPosition: u.oneOf(["center", "end", "start"]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["small", "medium", "large"]), u.string]),
  /**
   * Element placed before the children.
   */
  startIcon: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * @ignore
   */
  type: u.oneOfType([u.oneOf(["button", "reset", "submit"]), u.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: u.oneOfType([u.oneOf(["contained", "outlined", "text"]), u.string])
});
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"]
  name: "MuiCard",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})({
  overflow: "hidden"
    props: t,
    name: "MuiCard"
  }), {
    className: o,
    raised: s = !1,
    ...a
  } = r, c = {
    ...r,
    raised: s
    className: et(f.root, o),
    elevation: s ? 8 : void 0,
    ref: n,
    ownerState: c,
    ...a
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * If `true`, the card will use raised styling.
   * @default false
   */
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"]
  name: "MuiCardContent",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})({
  padding: 16,
  "&:last-child": {
    paddingBottom: 24
  }
    props: t,
    name: "MuiCardContent"
  }), {
    className: o,
    component: s = "div",
    ...a
  } = r, c = {
    ...r,
    component: s
    as: s,
    className: et(f.root, o),
    ownerState: c,
    ref: n,
    ...a
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
}
  const {
    classes: t,
    checked: n,
    disabled: r,
    edge: o
  } = e, s = {
    root: ["root", n && "checked", r && "disabled", o && `edge${He(o)}`],
    input: ["input"]
  };
  name: "MuiSwitchBase"
})({
  padding: 9,
  borderRadius: "50%",
  variants: [{
    props: {
      edge: "start",
      size: "small"
    },
    style: {
      marginLeft: -3
    }
  }, {
    props: ({
      edge: e,
      ownerState: t
    }) => e === "start" && t.size !== "small",
    style: {
      marginLeft: -12
    }
  }, {
    props: {
      edge: "end",
      size: "small"
    },
    style: {
      marginRight: -3
    }
  }, {
    props: ({
      edge: e,
      ownerState: t
    }) => e === "end" && t.size !== "small",
    style: {
      marginRight: -12
    }
  }]
  name: "MuiSwitchBase",
})({
  cursor: "inherit",
  position: "absolute",
  opacity: 0,
  width: "100%",
  height: "100%",
  top: 0,
  left: 0,
  margin: 0,
  padding: 0,
  zIndex: 1
  const {
    autoFocus: r,
    checked: o,
    checkedIcon: s,
    defaultChecked: a,
    disabled: c,
    disableFocusRipple: f = !1,
    icon: g,
    inputProps: w,
    inputRef: C,
    name: T,
    onBlur: E,
    onChange: O,
    readOnly: I,
    required: M = !1,
    controlled: o,
    default: !!a,
    name: "SwitchBase",
    state: "checked"
  }, ee = (he) => {
  }, G = (he) => {
    if (he.nativeEvent.defaultPrevented)
      return;
    const ge = he.target.checked;
    q(ge), O && O(he, ge);
  };
    ...t,
    disableFocusRipple: f,
    slotProps: {
      input: w,
    }
    ref: n,
    className: re.root,
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      ...Q,
      component: "span",
    },
    getSlotProps: (he) => ({
      ...he,
      onFocus: (ge) => {
        var fe;
      },
      onBlur: (ge) => {
        var fe;
        (fe = he.onBlur) == null || fe.call(he, ge), ee(ge);
      }
    }),
    ownerState: te,
    additionalProps: {
      centerRipple: !0,
      focusRipple: !f,
      role: void 0,
      tabIndex: null
    }
    ref: C,
    className: re.input,
    externalForwardedProps: Q,
    getSlotProps: (he) => ({
      onChange: (ge) => {
        var fe;
        (fe = he.onChange) == null || fe.call(he, ge), G(ge);
      }
    }),
    ownerState: te,
    additionalProps: {
      autoFocus: r,
      checked: o,
      defaultChecked: a,
      name: T,
      readOnly: I,
      required: M,
      }
    }
  });
    ...ie,
    children: [/* @__PURE__ */ $.jsx(de, {
      ...ue
  });
});
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: u.bool,
  /**
   * If `true`, the component is checked.
   */
  checked: u.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: u.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * @ignore
   */
  defaultChecked: u.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: u.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: u.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: u.oneOf(["end", "start", !1]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: u.node.isRequired,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /*
   * @ignore
   */
  name: u.string,
  /**
   * @ignore
   */
  onBlur: u.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: u.func,
  /**
   * @ignore
   */
  onFocus: u.func,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: u.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: u.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    input: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.object,
  /**
   * @ignore
   */
  tabIndex: u.oneOfType([u.number, u.string]),
  /**
   * The input component prop `type`.
   */
  type: u.string.isRequired,
  /**
   * The value of the component.
   */
  value: u.any
});
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), "IndeterminateCheckBox");
}
  const {
    classes: t,
    indeterminate: n,
    color: r,
    size: o
  } = e, s = {
    root: ["root", n && "indeterminate", `color${He(r)}`, `size${He(o)}`]
  return {
    ...t,
    // forward the disabled and checked classes to the SwitchBase
    ...a
  };
  name: "MuiCheckbox",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.indeterminate && t.indeterminate, t[`size${He(n.size)}`], n.color !== "default" && t[`color${He(n.color)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  variants: [{
    props: {
      color: "default",
      disableRipple: !1
    },
    style: {
      "&:hover": {
      }
    }
    props: {
      color: t,
      disableRipple: !1
    },
    style: {
      "&:hover": {
      }
    }
    props: {
      color: t
    },
    style: {
        color: (e.vars || e).palette[t].main
      },
        color: (e.vars || e).palette.action.disabled
      }
    }
  })), {
    // Should be last to override other colors
    props: {
      disableRipple: !1
    },
    style: {
      // Reset on touch devices, it doesn't add specificity
      "&:hover": {
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }
    }
  }]
    props: t,
    name: "MuiCheckbox"
  }), {
    color: s = "primary",
    indeterminate: c = !1,
    size: g = "medium",
    className: w,
    slots: C = {},
    slotProps: T = {},
    ...E
    ...r,
    color: s,
    indeterminate: c,
    size: g
    ref: n,
    className: et(M.root, w),
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      slots: C,
      slotProps: T,
      ...E
    },
    ownerState: I,
    additionalProps: {
      type: "checkbox",
      icon: /* @__PURE__ */ x.cloneElement(O, {
        fontSize: O.props.fontSize ?? g
      }),
      }),
      slots: C,
      slotProps: {
          "data-indeterminate": c
        })
      }
    }
  });
    classes: M
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: u.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */
  checkedIcon: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: u.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: u.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */
  icon: u.node,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: u.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: u.node,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: u.object,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: u.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: u.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    input: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: u.any
});
  return e.substring(2).toLowerCase();
}
  return t.documentElement.clientWidth < e.clientX || t.documentElement.clientHeight < e.clientY;
}
  const {
    children: t,
    disableReactTree: n = !1,
    mouseEvent: r = "onClick",
    onClickAway: o,
    touchEvent: s = "onTouchEnd"
  x.useEffect(() => (setTimeout(() => {
    f.current = !0;
  }, 0), () => {
    f.current = !1;
  }), []);
      return;
    if (a.current) {
      a.current = !1;
      return;
    }
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      T.target
    ) || c.current.contains(
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      T.target
  }), w = (T) => (E) => {
    const O = t.props[T];
    O && O(E);
  }, C = {
    ref: g
  };
  return s !== !1 && (C[s] = w(s)), x.useEffect(() => {
    if (s !== !1) {
        a.current = !0;
      };
      };
    }
    if (r !== !1) {
      };
    }
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The wrapped element.
   */
  /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */
  disableReactTree: u.bool,
  /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */
  mouseEvent: u.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", !1]),
  /**
   * Callback fired when a "click away" event is detected.
   */
  onClickAway: u.func.isRequired,
  /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */
  touchEvent: u.oneOf(["onTouchEnd", "onTouchStart", !1])
});
  createStyledComponent: Ue("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (e, t) => {
      const {
        ownerState: n
      } = e;
      return [t.root, t[`maxWidth${He(String(n.maxWidth))}`], n.fixed && t.fixed, n.disableGutters && t.disableGutters];
    }
  }),
    props: e,
    name: "MuiContainer"
  })
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: u.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: u.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: u.oneOfType([u.oneOf(["xs", "sm", "md", "lg", "xl", !1]), u.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  WebkitFontSmoothing: "antialiased",
  // Antialiasing.
  MozOsxFontSmoothing: "grayscale",
  // Antialiasing.
  // Change from `box-sizing: content-box` so that `width`
  // is not affected by `padding` or `border`.
  boxSizing: "border-box",
  // Fix font resize problem in iOS
  WebkitTextSizeAdjust: "100%",
  // When used under CssVarsProvider, colorScheme should not be applied dynamically because it will generate the stylesheet twice for server-rendered applications.
  ...t && !e.vars && {
    colorScheme: e.palette.mode
  }
  color: (e.vars || e).palette.text.primary,
  ...e.typography.body1,
  backgroundColor: (e.vars || e).palette.background.default,
  "@media print": {
    // Save printer ink.
    backgroundColor: (e.vars || e).palette.common.white
  }
  var s, a;
  const n = {};
  t && e.colorSchemes && typeof e.getColorSchemeSelector == "function" && Object.entries(e.colorSchemes).forEach(([c, f]) => {
      ":root": {
        colorScheme: (g = f.palette) == null ? void 0 : g.mode
      }
    };
  });
  let r = {
    "*, *::before, *::after": {
      boxSizing: "inherit"
    },
    "strong, b": {
      fontWeight: e.typography.fontWeightBold
    },
    body: {
      margin: 0,
      // Remove the margin in all browsers.
      // Add support for document.body.requestFullScreen().
      // Other elements, if background transparent, are not supported.
      "&::backdrop": {
        backgroundColor: (e.vars || e).palette.background.default
      }
    },
    ...n
  };
  const o = (a = (s = e.components) == null ? void 0 : s.MuiCssBaseline) == null ? void 0 : a.styleOverrides;
  return o && (r = [r, o]), r;
    colorScheme: e.palette.mode
  }), e.colorSchemes && Object.entries(e.colorSchemes).forEach(([r, o]) => {
    var a, c;
    const s = e.getColorSchemeSelector(r);
    s.startsWith("@") ? n[s] = {
        colorScheme: (a = o.palette) == null ? void 0 : a.mode
      }
    } : n[s.replace(/\s*&/, "")] = {
        colorScheme: (c = o.palette) == null ? void 0 : c.mode
      }
    };
  }), t;
  theme: e,
  enableColorScheme: t
  theme: e
    props: e,
    name: "MuiCssBaseline"
  }), {
    children: n,
    enableColorScheme: r = !1
  } = t;
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      enableColorScheme: r
      style: {
        display: "none"
      }
    }), n]
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: u.node,
  /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  enableColorScheme: u.bool
});
}
  t ? e.setAttribute("aria-hidden", "true") : e.removeAttribute("aria-hidden");
}
}
  const n = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"].includes(e.tagName), r = e.tagName === "INPUT" && e.getAttribute("type") === "hidden";
  return n || r;
}
  const s = [t, n, ...r];
  [].forEach.call(e.children, (a) => {
  });
}
  let n = -1;
  return e.some((r, o) => t(r) ? (n = o, !0) : !1), n;
}
  const n = [], r = e.container;
  if (!t.disableScrollLock) {
      n.push({
        value: r.style.paddingRight,
        property: "padding-right",
        el: r
      [].forEach.call(c, (f) => {
        n.push({
          value: f.style.paddingRight,
          property: "padding-right",
          el: f
      });
    }
    let s;
    if (r.parentNode instanceof DocumentFragment)
    else {
      s = (a == null ? void 0 : a.nodeName) === "HTML" && c.getComputedStyle(a).overflowY === "scroll" ? a : r;
    }
    n.push({
      value: s.style.overflow,
      property: "overflow",
      el: s
    }, {
      value: s.style.overflowX,
      property: "overflow-x",
      el: s
    }, {
      value: s.style.overflowY,
      property: "overflow-y",
      el: s
    }), s.style.overflow = "hidden";
  }
  return () => {
    n.forEach(({
      value: s,
      el: a,
      property: c
    }) => {
      s ? a.style.setProperty(c, s) : a.style.removeProperty(c);
    });
  };
}
  const t = [];
  return [].forEach.call(e.children, (n) => {
    n.getAttribute("aria-hidden") === "true" && t.push(n);
  }), t;
}
  constructor() {
    this.modals = [], this.containers = [];
  }
  add(t, n) {
    let r = this.modals.indexOf(t);
    if (r !== -1)
      return r;
    return s !== -1 ? (this.containers[s].modals.push(t), r) : (this.containers.push({
      modals: [t],
      container: n,
      restore: null,
      hiddenSiblings: o
    }), r);
  }
  mount(t, n) {
  }
  remove(t, n = !0) {
    const r = this.modals.indexOf(t);
    if (r === -1)
      return r;
    if (s.modals.splice(s.modals.indexOf(t), 1), this.modals.splice(r, 1), s.modals.length === 0)
    else {
      const a = s.modals[s.modals.length - 1];
    }
    return r;
  }
  isTopModal(t) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === t;
  }
}
  const t = parseInt(e.getAttribute("tabindex") || "", 10);
  return Number.isNaN(t) ? e.contentEditable === "true" || (e.nodeName === "AUDIO" || e.nodeName === "VIDEO" || e.nodeName === "DETAILS") && e.getAttribute("tabindex") === null ? 0 : e.tabIndex : t;
}
  if (e.tagName !== "INPUT" || e.type !== "radio" || !e.name)
    return !1;
  const t = (r) => e.ownerDocument.querySelector(`input[type="radio"]${r}`);
  let n = t(`[name="${e.name}"]:checked`);
  return n || (n = t(`[name="${e.name}"]`)), n !== e;
}
}
  const t = [], n = [];
      documentOrder: o,
      tabIndex: s,
      node: r
    }));
  }), n.sort((r, o) => r.tabIndex === o.tabIndex ? r.documentOrder - o.documentOrder : r.tabIndex - o.tabIndex).map((r) => r.node).concat(t);
}
  return !0;
}
  const {
    children: t,
    disableAutoFocus: n = !1,
    disableEnforceFocus: r = !1,
    disableRestoreFocus: o = !1,
    open: c
  x.useEffect(() => {
    !c || !T.current || (C.current = !n);
  }, [n, c]), x.useEffect(() => {
    if (!c || !T.current)
      return;
    return T.current.contains(M.activeElement) || (T.current.hasAttribute("tabIndex") || (process.env.NODE_ENV !== "production" && console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join(`
`)), T.current.setAttribute("tabIndex", "-1")), C.current && T.current.focus()), () => {
    };
  }, [c]), x.useEffect(() => {
    if (!c || !T.current)
      return;
        return;
      if (!M.hasFocus() || !a() || f.current) {
        f.current = !1;
        return;
      }
        return;
      if (M.activeElement !== w.current)
        w.current = null;
      else if (w.current !== null)
        return;
      if (!C.current)
        return;
      } else
    };
    }, 50);
    return () => {
    };
  }, [n, r, o, a, c, s]);
  }, I = (M) => {
  };
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ $.jsx("div", {
      tabIndex: c ? 0 : -1,
      onFocus: I,
      "data-testid": "sentinelStart"
    }), /* @__PURE__ */ x.cloneElement(t, {
      ref: E,
    }), /* @__PURE__ */ $.jsx("div", {
      tabIndex: c ? 0 : -1,
      onFocus: I,
      ref: g,
      "data-testid": "sentinelEnd"
    })]
  });
}
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: u.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: u.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: u.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: u.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: u.func,
  /**
   * If `true`, focus is locked.
   */
  open: u.bool.isRequired
});
  return typeof e == "function" ? e() : e;
}
  return e ? e.props.hasOwnProperty("in") : !1;
}
  const {
    container: t,
    disableEscapeKeyDown: n = !1,
    disableScrollLock: r = !1,
    closeAfterTransition: o = !1,
    onTransitionEnter: s,
    onTransitionExited: a,
    children: c,
    onClose: f,
    rootRef: g
  let I = !0;
  (e["aria-hidden"] === "false" || e["aria-hidden"] === !1) && (I = !1);
      disableScrollLock: r
    }), C.current && (C.current.scrollTop = 0);
  }, [I]);
  x.useEffect(() => () => {
    var X;
    var X;
  };
  return {
    getRootProps: (G = {}) => {
      const X = {
        ...G
      };
      return {
        /*
         * Marking an element with the role presentation indicates to assistive technology
         * that this element should be ignored; it exists to support the web application and
         * is not meant for humans to interact with directly.
         * https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/no-static-element-interactions.md
         */
        role: "presentation",
        ...X,
        ref: T
      };
    },
    getBackdropProps: (G = {}) => {
      return {
        "aria-hidden": !0,
      };
    },
    getTransitionProps: () => {
      const G = () => {
        O(!1), s && s();
      };
      return {
      };
    },
    rootRef: T,
    exited: E,
  };
}
}
  const {
    open: t,
    exited: n,
    classes: r
  } = e;
  return mt({
    root: ["root", !t && n && "hidden"],
    backdrop: ["backdrop"]
  name: "MuiModal",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.open && n.exited && t.hidden];
  }
})(Zt(({
  theme: e
}) => ({
  position: "fixed",
  zIndex: (e.vars || e).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  variants: [{
    props: ({
      ownerState: t
    }) => !t.open && t.exited,
    style: {
      visibility: "hidden"
    }
  }]
  name: "MuiModal",
  slot: "Backdrop",
  overridesResolver: (e, t) => t.backdrop
})({
  zIndex: -1
    name: "MuiModal",
    props: t
  }), {
    BackdropProps: s,
    classes: a,
    className: c,
    closeAfterTransition: f = !1,
    container: g,
    components: w = {},
    componentsProps: C = {},
    disableAutoFocus: T = !1,
    disableEnforceFocus: E = !1,
    disableEscapeKeyDown: O = !1,
    disableRestoreFocus: I = !1,
    disableScrollLock: M = !1,
    slotProps: q = {},
    // eslint-disable-next-line react/prop-types
    ...ee
  } = r, G = {
    ...r,
    closeAfterTransition: f,
    disableAutoFocus: T,
    disableEnforceFocus: E,
    disableEscapeKeyDown: O,
    disableRestoreFocus: I,
    disableScrollLock: M,
  }, {
    getBackdropProps: X,
    getTransitionProps: te,
    portalRef: re,
    isTopModal: Q,
    hasTransition: ie
    ...G,
    rootRef: n
  }), de = {
    ...G,
    const {
      onEnter: _e,
      onExited: ce
    } = te();
    he.onEnter = _e, he.onExited = ce;
  }
  const ge = {
    slots: {
      root: w.Root,
      backdrop: w.Backdrop,
    },
    slotProps: {
      ...C,
      ...q
    }
    ref: n,
    externalForwardedProps: {
      ...ge,
      ...ee,
    },
    ownerState: de,
    className: et(c, ue == null ? void 0 : ue.root, !de.open && de.exited && (ue == null ? void 0 : ue.hidden))
    ref: s == null ? void 0 : s.ref,
    elementType: o,
    externalForwardedProps: ge,
    shouldForwardComponentProp: !0,
    additionalProps: s,
    getSlotProps: (_e) => X({
      ..._e,
      onClick: (ce) => {
      }
    }),
    className: et(s == null ? void 0 : s.className, ue == null ? void 0 : ue.backdrop),
    ownerState: de
  });
    ref: re,
    container: g,
    children: /* @__PURE__ */ $.jsxs(fe, {
      ...pe,
        ...we
        disableEnforceFocus: E,
        disableAutoFocus: T,
        disableRestoreFocus: I,
        isEnabled: Q,
      })]
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: u.elementType,
  /**
   * Props applied to the [`Backdrop`](https://mui.com/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */
  BackdropProps: u.object,
  /**
   * A single child content element.
   */
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: u.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The components used for each slot inside.
   *
   * @deprecated Use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Backdrop: u.elementType,
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated Use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    backdrop: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: u.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: u.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: u.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: u.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: u.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: u.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: u.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: u.bool,
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: u.func,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: u.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: u.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: u.shape({
    backdrop: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: u.shape({
    backdrop: u.elementType,
    root: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
}
  const {
    absolute: t,
    children: n,
    classes: r,
    flexItem: o,
    light: s,
    orientation: a,
    textAlign: c,
    variant: f
  } = e;
  return mt({
    root: ["root", t && "absolute", f, s && "light", a === "vertical" && "vertical", o && "flexItem", n && "withChildren", n && a === "vertical" && "withChildrenVertical", c === "right" && a !== "vertical" && "textAlignRight", c === "left" && a !== "vertical" && "textAlignLeft"],
    wrapper: ["wrapper", a === "vertical" && "wrapperVertical"]
  name: "MuiDivider",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.absolute && t.absolute, t[n.variant], n.light && t.light, n.orientation === "vertical" && t.vertical, n.flexItem && t.flexItem, n.children && t.withChildren, n.children && n.orientation === "vertical" && t.withChildrenVertical, n.textAlign === "right" && n.orientation !== "vertical" && t.textAlignRight, n.textAlign === "left" && n.orientation !== "vertical" && t.textAlignLeft];
  }
})(Zt(({
  theme: e
}) => ({
  margin: 0,
  // Reset browser default style.
  flexShrink: 0,
  borderWidth: 0,
  borderStyle: "solid",
  borderColor: (e.vars || e).palette.divider,
  borderBottomWidth: "thin",
  variants: [{
    props: {
      absolute: !0
    },
    style: {
      position: "absolute",
      bottom: 0,
      left: 0,
      width: "100%"
    }
  }, {
    props: {
      light: !0
    },
    style: {
    }
  }, {
    props: {
      variant: "inset"
    },
    style: {
      marginLeft: 72
    }
  }, {
    props: {
      variant: "middle",
      orientation: "horizontal"
    },
    style: {
      marginLeft: e.spacing(2),
      marginRight: e.spacing(2)
    }
  }, {
    props: {
      variant: "middle",
      orientation: "vertical"
    },
    style: {
      marginTop: e.spacing(1),
      marginBottom: e.spacing(1)
    }
  }, {
    props: {
      orientation: "vertical"
    },
    style: {
      height: "100%",
      borderBottomWidth: 0,
      borderRightWidth: "thin"
    }
  }, {
    props: {
      flexItem: !0
    },
    style: {
      alignSelf: "stretch",
      height: "auto"
    }
  }, {
    props: ({
      ownerState: t
    }) => !!t.children,
    style: {
      display: "flex",
      textAlign: "center",
      border: 0,
      borderTopStyle: "solid",
      borderLeftStyle: "solid",
      "&::before, &::after": {
        content: '""',
        alignSelf: "center"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.children && t.orientation !== "vertical",
    style: {
      "&::before, &::after": {
        width: "100%",
        borderTop: `thin solid ${(e.vars || e).palette.divider}`,
        borderTopStyle: "inherit"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.orientation === "vertical" && t.children,
    style: {
      flexDirection: "column",
      "&::before, &::after": {
        height: "100%",
        borderLeft: `thin solid ${(e.vars || e).palette.divider}`,
        borderLeftStyle: "inherit"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.textAlign === "right" && t.orientation !== "vertical",
    style: {
      "&::before": {
        width: "90%"
      },
      "&::after": {
        width: "10%"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.textAlign === "left" && t.orientation !== "vertical",
    style: {
      "&::before": {
        width: "10%"
      },
      "&::after": {
        width: "90%"
      }
    }
  }]
  name: "MuiDivider",
  slot: "Wrapper",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.wrapper, n.orientation === "vertical" && t.wrapperVertical];
  }
})(Zt(({
  theme: e
}) => ({
  display: "inline-block",
  paddingLeft: `calc(${e.spacing(1)} * 1.2)`,
  paddingRight: `calc(${e.spacing(1)} * 1.2)`,
  whiteSpace: "nowrap",
  variants: [{
    props: {
      orientation: "vertical"
    },
    style: {
      paddingTop: `calc(${e.spacing(1)} * 1.2)`,
      paddingBottom: `calc(${e.spacing(1)} * 1.2)`
    }
  }]
    props: t,
    name: "MuiDivider"
  }), {
    absolute: o = !1,
    children: s,
    className: a,
    orientation: c = "horizontal",
    component: f = s || c === "vertical" ? "div" : "hr",
    light: g = !1,
    textAlign: w = "center",
    variant: C = "fullWidth",
    ...T
  } = r, E = {
    ...r,
    absolute: o,
    component: f,
    light: g,
    orientation: c,
    textAlign: w,
    variant: C
    as: f,
    className: et(O.root, a),
    ref: n,
    ownerState: E,
    ...T,
      className: O.wrapper,
      ownerState: E,
      children: s
    }) : null
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Absolutely position the element.
   * @default false
   */
  absolute: u.bool,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, a vertical divider will have the correct height when used in flex container.
   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
   * @default false
   */
  flexItem: u.bool,
  /**
   * If `true`, the divider will have a lighter color.
   * @default false
   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  light: u.bool,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: u.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: u.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The text alignment.
   * @default 'center'
   */
  textAlign: u.oneOf(["center", "left", "right"]),
  /**
   * The variant to use.
   * @default 'fullWidth'
   */
  variant: u.oneOfType([u.oneOf(["fullWidth", "inset", "middle"]), u.string])
});
  let a;
  if (t.fakeTransform)
    a = t.fakeTransform;
  else {
  }
  let c = 0, f = 0;
  if (a && a !== "none" && typeof a == "string") {
  }
  return e === "left" ? o ? `translateX(${o.right + c - r.left}px)` : `translateX(${s.innerWidth + c - r.left}px)` : e === "right" ? o ? `translateX(-${r.right - o.left - c}px)` : `translateX(-${r.left + r.width - c}px)` : e === "up" ? o ? `translateY(${o.bottom + f - r.top}px)` : `translateY(${s.innerHeight + f - r.top}px)` : o ? `translateY(-${r.top - o.top + r.height - f}px)` : `translateY(-${r.top + r.height - f}px)`;
}
  return typeof e == "function" ? e() : e;
}
  o && (t.style.webkitTransform = o, t.style.transform = o);
}
    enter: r.transitions.easing.easeOut,
    exit: r.transitions.easing.sharp
  }, s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: a,
    appear: c = !0,
    children: f,
    direction: g = "down",
    in: w,
    onEnter: C,
    onEntered: T,
    onEntering: E,
    onExit: O,
    onExiting: I,
    style: M,
    // eslint-disable-next-line react/prop-types
      style: M,
    }, {
      mode: "enter"
    });
    te.style.webkitTransition = r.transitions.create("-webkit-transform", {
      ...Q
    }), te.style.transition = r.transitions.create("transform", {
      ...Q
    }), te.style.webkitTransform = "none", te.style.transform = "none", E && E(te, re);
      style: M,
    }, {
      mode: "exit"
    });
  }, X = x.useCallback(() => {
  return x.useEffect(() => {
    if (w || g === "down" || g === "right")
      return;
    return re.addEventListener("resize", te), () => {
      te.clear(), re.removeEventListener("resize", te);
    };
    w || X();
    onEntering: q,
    onExit: ee,
    onExited: G,
    appear: c,
    in: w,
    children: (te, {
      ownerState: re,
      ...Q
    }) => /* @__PURE__ */ x.cloneElement(f, {
      style: {
        visibility: te === "exited" && !w ? "hidden" : void 0,
        ...M,
        ...f.props.style
      },
      ...Q
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: u.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: u.bool,
  /**
   * A single child content element.
   */
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the container the Slide is transitioning from.
   */
    if (e.open) {
      if (t && t.nodeType === 1) {
        const n = t.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!t || typeof t.getBoundingClientRect != "function" || t.contextElement != null && t.contextElement.nodeType !== 1)
        return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join(`
`));
    }
    return null;
  }),
  /**
   * Direction the child node will enter from.
   * @default 'down'
   */
  direction: u.oneOf(["down", "left", "right", "up"]),
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   * @default {
   *   enter: theme.transitions.easing.easeOut,
   *   exit: theme.transitions.easing.sharp,
   * }
   */
  easing: u.oneOfType([u.shape({
    enter: u.string,
    exit: u.string
  }), u.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: u.bool,
  /**
   * @ignore
   */
  onEnter: u.func,
  /**
   * @ignore
   */
  onEntered: u.func,
  /**
   * @ignore
   */
  onEntering: u.func,
  /**
   * @ignore
   */
  onExit: u.func,
  /**
   * @ignore
   */
  onExited: u.func,
  /**
   * @ignore
   */
  onExiting: u.func,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: u.oneOfType([u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })])
});
}
  const {
    ownerState: n
  } = e;
  return [t.root, (n.variant === "permanent" || n.variant === "persistent") && t.docked, t.modal];
  const {
    classes: t,
    anchor: n,
    variant: r
  } = e, o = {
    root: ["root", `anchor${He(n)}`],
    docked: [(r === "permanent" || r === "persistent") && "docked"],
    modal: ["modal"],
    paper: ["paper", `paperAnchor${He(n)}`, r !== "temporary" && `paperAnchorDocked${He(n)}`]
  };
  name: "MuiDrawer",
  slot: "Root",
})(Zt(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.drawer
  name: "MuiDrawer",
  slot: "Docked",
  skipVariantsResolver: !1,
})({
  flex: "0 0 auto"
  name: "MuiDrawer",
  slot: "Paper",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.paper, t[`paperAnchor${He(n.anchor)}`], n.variant !== "temporary" && t[`paperAnchorDocked${He(n.anchor)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  height: "100%",
  flex: "1 0 auto",
  zIndex: (e.vars || e).zIndex.drawer,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  // temporary style
  position: "fixed",
  top: 0,
  // We disable the focus ring for mouse, touch and keyboard users.
  // At some point, it would be better to keep it for keyboard users.
  // :focus-ring CSS pseudo-class will help.
  outline: 0,
  variants: [{
    props: {
      anchor: "left"
    },
    style: {
      left: 0
    }
  }, {
    props: {
      anchor: "top"
    },
    style: {
      top: 0,
      left: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    }
  }, {
    props: {
      anchor: "right"
    },
    style: {
      right: 0
    }
  }, {
    props: {
      anchor: "bottom"
    },
    style: {
      top: "auto",
      left: 0,
      bottom: 0,
      right: 0,
      height: "auto",
      maxHeight: "100%"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchor === "left" && t.variant !== "temporary",
    style: {
      borderRight: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchor === "top" && t.variant !== "temporary",
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchor === "right" && t.variant !== "temporary",
    style: {
      borderLeft: `1px solid ${(e.vars || e).palette.divider}`
    }
  }, {
    props: ({
      ownerState: t
    }) => t.anchor === "bottom" && t.variant !== "temporary",
    style: {
      borderTop: `1px solid ${(e.vars || e).palette.divider}`
    }
  }]
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
  return ["left", "right"].includes(e);
}
  direction: e
}, t) {
}
    props: t,
    name: "MuiDrawer"
    enter: o.transitions.duration.enteringScreen,
    exit: o.transitions.duration.leavingScreen
  }, {
    anchor: c = "left",
    BackdropProps: f,
    className: g,
    hideBackdrop: w = !1,
    ModalProps: {
      BackdropProps: C,
      ...T
    } = {},
    onClose: E,
    open: O = !1,
    SlideProps: I,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: M,
  x.useEffect(() => {
  }, []);
    direction: s ? "rtl" : "ltr"
    ...r,
    anchor: c,
    open: O,
    slots: {
      transition: M,
    },
    slotProps: {
      transition: I,
        ...f,
        ...C
      }, {
      })
    }
    ref: n,
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      ...ee,
      ...T
    },
    additionalProps: {
      open: O,
      onClose: E,
      hideBackdrop: w,
      slots: {
        backdrop: ee.slots.backdrop
      },
      slotProps: {
        backdrop: ee.slotProps.backdrop
      }
    }
    shouldForwardComponentProp: !0,
    externalForwardedProps: ee,
    additionalProps: {
      square: !0
    }
    ref: n,
    externalForwardedProps: ee,
    // pass `other` here because `DockedSlot` is also a root slot for some variants
    externalForwardedProps: ee,
    additionalProps: {
      in: O,
    }
  }), de = /* @__PURE__ */ $.jsx(X, {
    ...te,
  });
    return /* @__PURE__ */ $.jsx(re, {
      ...Q,
      children: de
    });
    ...ie,
    children: de
  });
    ...Q,
    children: ue
  }) : /* @__PURE__ */ $.jsx(G, {
    children: ue
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: u.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  BackdropProps: u.object,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The elevation of the drawer.
   * @default 16
   */
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: u.bool,
  /**
   * Props applied to the [`Modal`](https://mui.com/material-ui/api/modal/) element.
   * @default {}
   */
  ModalProps: u.object,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: u.func,
  /**
   * If `true`, the component is shown.
   * @default false
   */
  open: u.bool,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   * @deprecated use the `slotProps.paper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  PaperProps: u.object,
  /**
   * Props applied to the [`Slide`](https://mui.com/material-ui/api/slide/) element.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  SlideProps: u.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    backdrop: u.oneOfType([u.func, u.object]),
    docked: u.oneOfType([u.func, u.object]),
    paper: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object]),
    transition: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    backdrop: u.elementType,
    docked: u.elementType,
    paper: u.elementType,
    root: u.elementType,
    transition: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: u.oneOfType([u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })]),
  /**
   * The variant to use.
   * @default 'temporary'
   */
  variant: u.oneOf(["permanent", "persistent", "temporary"])
});
  const {
    classes: t,
    disableUnderline: n,
    startAdornment: r,
    endAdornment: o,
    size: s,
    hiddenLabel: a,
    multiline: c
  } = e, f = {
    root: ["root", !n && "underline", r && "adornedStart", o && "adornedEnd", s === "small" && `size${He(s)}`, a && "hiddenLabel", c && "multiline"],
    input: ["input"]
  return {
    ...t,
    // forward classes to the InputBase
  };
  name: "MuiFilledInput",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
  }
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light", n = t ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", r = t ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", o = t ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", s = t ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return {
    position: "relative",
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : o,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
      }
    },
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : r
    },
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : s
    },
    variants: [{
      props: ({
        ownerState: a
      }) => !a.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})` : n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
          borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
        },
          borderBottomStyle: "dotted"
        }
      }
      var c;
      return {
        props: {
          disableUnderline: !1,
          color: a
        },
        style: {
          "&::after": {
            borderBottom: `2px solid ${(c = (e.vars || e).palette[a]) == null ? void 0 : c.main}`
          }
        }
      };
    }), {
      props: ({
        ownerState: a
      }) => a.startAdornment,
      style: {
        paddingLeft: 12
      }
    }, {
      props: ({
        ownerState: a
      }) => a.endAdornment,
      style: {
        paddingRight: 12
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline,
      style: {
        padding: "25px 12px 8px"
      }
    }, {
      props: ({
        ownerState: a,
        size: c
      }) => a.multiline && c === "small",
      style: {
        paddingTop: 21,
        paddingBottom: 4
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline && a.hiddenLabel,
      style: {
        paddingTop: 16,
        paddingBottom: 17
      }
    }, {
      props: ({
        ownerState: a
      }) => a.multiline && a.hiddenLabel && a.size === "small",
      style: {
        paddingTop: 8,
        paddingBottom: 9
      }
    }]
  };
  name: "MuiFilledInput",
  slot: "Input",
})(Zt(({
  theme: e
}) => ({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12,
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      paddingTop: 21,
      paddingBottom: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => t.hiddenLabel,
    style: {
      paddingTop: 16,
      paddingBottom: 17
    }
  }, {
    props: ({
      ownerState: t
    }) => t.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.endAdornment,
    style: {
      paddingRight: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.hiddenLabel && t.size === "small",
    style: {
      paddingTop: 8,
      paddingBottom: 9
    }
  }, {
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      paddingTop: 0,
      paddingBottom: 0,
      paddingLeft: 0,
      paddingRight: 0
    }
  }]
    props: t,
    name: "MuiFilledInput"
  }), {
    disableUnderline: o = !1,
    components: s = {},
    componentsProps: a,
    fullWidth: c = !1,
    hiddenLabel: f,
    // declare here to prevent spreading to DOM
    multiline: g = !1,
    slots: w = {},
    type: C = "text",
    ...T
  } = r, E = {
    ...r,
    disableUnderline: o,
    fullWidth: c,
    multiline: g,
    type: C
    root: {
      ownerState: E
    },
    input: {
      ownerState: E
    }
    slots: {
      root: M,
    },
    slotProps: I,
    fullWidth: c,
    multiline: g,
    ref: n,
    type: C,
    ...T,
    classes: O
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: u.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary"]), u.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Input: u.elementType,
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: u.bool,
  /**
   * If `true`, the input will not have an underline.
   * @default false
   */
  disableUnderline: u.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: u.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: u.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: u.bool,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: u.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: u.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: u.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: u.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: u.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: u.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: u.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: u.oneOfType([u.number, u.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    root: u.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: u.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: u.any
});
}
  const {
    classes: t,
    margin: n,
    fullWidth: r
  } = e, o = {
    root: ["root", n !== "none" && `margin${He(n)}`, r && "fullWidth"]
  };
  name: "MuiFormControl",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[`margin${He(n.margin)}`], n.fullWidth && t.fullWidth];
  }
})({
  display: "inline-flex",
  flexDirection: "column",
  position: "relative",
  // Reset fieldset default style.
  minWidth: 0,
  padding: 0,
  margin: 0,
  border: 0,
  verticalAlign: "top",
  // Fix alignment issue on Safari.
  variants: [{
    props: {
      margin: "normal"
    },
    style: {
      marginTop: 16,
      marginBottom: 8
    }
  }, {
    props: {
      margin: "dense"
    },
    style: {
      marginTop: 8,
      marginBottom: 4
    }
  }, {
    props: {
      fullWidth: !0
    },
    style: {
      width: "100%"
    }
  }]
    props: t,
    name: "MuiFormControl"
  }), {
    children: o,
    className: s,
    color: a = "primary",
    component: c = "div",
    disabled: f = !1,
    focused: g,
    hiddenLabel: w = !1,
    margin: C = "none",
    required: T = !1,
    size: E = "medium",
    variant: O = "outlined",
  } = r, I = {
    ...r,
    color: a,
    component: c,
    disabled: f,
    hiddenLabel: w,
    margin: C,
    required: T,
    size: E,
    variant: O
    return o && x.Children.forEach(o, (X) => {
        return;
    return o && x.Children.forEach(o, (X) => {
  let q;
  }));
  }, []), ee = x.useCallback(() => {
  }, []), G = x.useMemo(() => ({
    color: a,
    disabled: f,
    hiddenLabel: w,
    size: E,
    onBlur: () => {
    },
    onFocus: () => {
    },
    onEmpty: ee,
    registerEffect: q,
    required: T,
    variant: O
    value: G,
      as: c,
      ownerState: I,
      className: et(M.root, s),
      ref: n,
      children: o
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: u.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: u.bool,
  /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: u.bool,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: u.oneOf(["dense", "none", "normal"]),
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: u.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: u.oneOf(["filled", "outlined", "standard"])
});
}
  const {
    classes: t,
    disabled: n,
    labelPlacement: r,
    error: o,
    required: s
  } = e, a = {
    root: ["root", n && "disabled", `labelPlacement${He(r)}`, o && "error", s && "required"],
    label: ["label", n && "disabled"],
    asterisk: ["asterisk", o && "error"]
  };
  name: "MuiFormControlLabel",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [{
    }, t.root, t[`labelPlacement${He(n.labelPlacement)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  display: "inline-flex",
  alignItems: "center",
  cursor: "pointer",
  // For correct alignment with the text.
  verticalAlign: "middle",
  WebkitTapHighlightColor: "transparent",
  marginLeft: -11,
  marginRight: 16,
  // used for row presentation of radio/checkbox
    cursor: "default"
  },
      color: (e.vars || e).palette.text.disabled
    }
  },
  variants: [{
    props: {
      labelPlacement: "start"
    },
    style: {
      flexDirection: "row-reverse",
      marginRight: -11
    }
  }, {
    props: {
      labelPlacement: "top"
    },
    style: {
      flexDirection: "column-reverse"
    }
  }, {
    props: {
      labelPlacement: "bottom"
    },
    style: {
      flexDirection: "column"
    }
  }, {
    props: ({
      labelPlacement: t
    }) => t === "start" || t === "top" || t === "bottom",
    style: {
      marginLeft: 16
      // used for row presentation of radio/checkbox
    }
  }]
  name: "MuiFormControlLabel",
  slot: "Asterisk",
  overridesResolver: (e, t) => t.asterisk
})(Zt(({
  theme: e
}) => ({
    color: (e.vars || e).palette.error.main
  }
    props: t,
    name: "MuiFormControlLabel"
  }), {
    checked: o,
    className: s,
    componentsProps: a = {},
    control: c,
    disabled: f,
    inputRef: g,
    labelPlacement: w = "end",
    name: C,
    onChange: T,
    required: E,
    slots: O = {},
    value: I,
    ...M
  };
  ["checked", "name", "onChange", "value", "inputRef"].forEach((G) => {
  });
    props: r,
    states: ["error"]
    ...r,
    labelPlacement: w,
    slots: O,
    slotProps: {
      ...a,
    }
    externalForwardedProps: q,
  });
    component: "span",
    children: ee
    ref: n,
    ...M,
        "aria-hidden": !0,
        children: [" ", "*"]
      })]
    }) : ee]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component appears selected.
   */
  checked: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The props used for each slot inside.
   * @default {}
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  componentsProps: u.shape({
    typography: u.object
  }),
  /**
   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
   */
  control: u.element.isRequired,
  /**
   * If `true`, the control is disabled.
   */
  disabled: u.bool,
  /**
   * If `true`, the label is rendered as it is passed without an additional typography node.
   */
  disableTypography: u.bool,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * A text or an element to be used in an enclosing label element.
   */
  label: u.node,
  /**
   * The position of the label.
   * @default 'end'
   */
  labelPlacement: u.oneOf(["bottom", "end", "start", "top"]),
  /**
   * @ignore
   */
  name: u.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: u.func,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: u.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    typography: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    typography: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The value of the component.
   */
  value: u.any
});
}
  const {
    classes: t,
    contained: n,
    size: r,
    disabled: o,
    error: s,
    filled: a,
    focused: c,
    required: f
    root: ["root", o && "disabled", s && "error", r && `size${He(r)}`, n && "contained", c && "focused", a && "filled", f && "required"]
  };
  name: "MuiFormHelperText",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.size && t[`size${He(n.size)}`], n.contained && t.contained, n.filled && t.filled];
  }
})(Zt(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.caption,
  textAlign: "left",
  marginTop: 3,
  marginRight: 0,
  marginBottom: 0,
  marginLeft: 0,
    color: (e.vars || e).palette.text.disabled
  },
    color: (e.vars || e).palette.error.main
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      marginTop: 4
    }
  }, {
    props: ({
      ownerState: t
    }) => t.contained,
    style: {
      marginLeft: 14,
      marginRight: 14
    }
  }]
    props: t,
    name: "MuiFormHelperText"
  }), {
    children: o,
    className: s,
    component: a = "p",
    disabled: c,
    error: f,
    focused: g,
    required: w,
    variant: C,
    ...T
    props: r,
    muiFormControl: E,
    states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    ...r,
    component: a,
    contained: O.variant === "filled" || O.variant === "outlined",
    variant: O.variant,
    size: O.size,
    disabled: O.disabled,
    error: O.error,
    filled: O.filled,
    focused: O.focused,
    required: O.required
  };
    as: a,
    className: et(I.root, s),
    ref: n,
    ...T,
    children: o === " " ? (
      // notranslate needed while Google Translate will not fix zero-width space issue
        className: "notranslate",
        "aria-hidden": !0,
        children: "​"
      }))
    ) : o
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: u.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: u.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: u.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: u.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: u.oneOf(["dense"]),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   */
  variant: u.oneOfType([u.oneOf(["filled", "outlined", "standard"]), u.string])
});
}
  const {
    classes: t,
    color: n,
    focused: r,
    disabled: o,
    error: s,
    filled: a,
    required: c
  } = e, f = {
    root: ["root", `color${He(n)}`, o && "disabled", s && "error", a && "filled", r && "focused", c && "required"],
    asterisk: ["asterisk", s && "error"]
  };
  name: "MuiFormLabel",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.color === "secondary" && t.colorSecondary, n.filled && t.filled];
  }
})(Zt(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  ...e.typography.body1,
  lineHeight: "1.4375em",
  padding: 0,
  position: "relative",
    props: {
      color: t
    },
    style: {
        color: (e.vars || e).palette[t].main
      }
    }
  })), {
    props: {},
    style: {
        color: (e.vars || e).palette.text.disabled
      },
        color: (e.vars || e).palette.error.main
      }
    }
  }]
  name: "MuiFormLabel",
  slot: "Asterisk",
  overridesResolver: (e, t) => t.asterisk
})(Zt(({
  theme: e
}) => ({
    color: (e.vars || e).palette.error.main
  }
    props: t,
    name: "MuiFormLabel"
  }), {
    children: o,
    className: s,
    color: a,
    component: c = "label",
    disabled: f,
    filled: g,
    required: w,
    ...C
    props: r,
    muiFormControl: T,
    states: ["color", "required", "focused", "disabled", "error", "filled"]
  }), O = {
    ...r,
    color: E.color || "primary",
    component: c,
    disabled: E.disabled,
    error: E.error,
    filled: E.filled,
    focused: E.focused,
    required: E.required
    as: c,
    ownerState: O,
    ref: n,
    ...C,
      ownerState: O,
      "aria-hidden": !0,
      children: [" ", "*"]
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: u.oneOfType([u.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), u.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: u.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: u.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: u.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: u.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  createStyledComponent: Ue("div", {
    name: "MuiGrid2",
    slot: "Root",
    overridesResolver: (e, t) => {
      const {
        ownerState: n
      } = e;
      return [t.root, n.container && t.container];
    }
  }),
  componentName: "MuiGrid2",
    props: e,
    name: "MuiGrid2"
  }),
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * The number of columns.
   * @default 12
   */
  columns: u.oneOfType([u.arrayOf(u.number), u.number, u.object]),
  /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  columnSpacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
  /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  container: u.bool,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */
  direction: u.oneOfType([u.oneOf(["column-reverse", "column", "row-reverse", "row"]), u.arrayOf(u.oneOf(["column-reverse", "column", "row-reverse", "row"])), u.object]),
  /**
   * Defines the offset value for the type `item` components.
   */
  offset: u.oneOfType([u.string, u.number, u.arrayOf(u.oneOfType([u.string, u.number])), u.object]),
  /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  rowSpacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
  /**
   * Defines the size of the the type `item` components.
   */
  size: u.oneOfType([u.string, u.bool, u.number, u.arrayOf(u.oneOfType([u.string, u.bool, u.number])), u.object]),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
  /**
   * @ignore
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * @internal
   * The level of the grid starts from `0` and increases when the grid nests
   * inside another grid. Nesting is defined as a container Grid being a direct
   * child of a container Grid.
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid container> // level 1
   *     <Grid container> // level 2
   * ```
   *
   * Only consecutive grid is considered nesting. A grid container will start at
   * `0` if there are non-Grid container element above it.
   *
   * ```js
   * <Grid container> // level 0
   *   <div>
   *     <Grid container> // level 0
   * ```
   *
   * ```js
   * <Grid container> // level 0
   *   <Grid>
   *     <Grid container> // level 0
   * ```
   */
  unstable_level: u.number,
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: u.oneOf(["nowrap", "wrap-reverse", "wrap"])
});
if (process.env.NODE_ENV !== "production") {
  e.propTypes = {
    // eslint-disable-next-line react/forbid-foreign-prop-types
    ...e.propTypes,
    direction: t("container"),
    spacing: t("container"),
    wrap: t("container")
  };
}
  return `scale(${e}, ${e ** 2})`;
}
  entering: {
    opacity: 1,
  },
  entered: {
    opacity: 1,
    transform: "none"
  }
  const {
    addEndListener: r,
    appear: o = !0,
    children: s,
    easing: a,
    in: c,
    onEnter: f,
    onEntering: g,
    onExited: w,
    onExiting: C,
    style: T,
    timeout: E = "auto",
    // eslint-disable-next-line react/prop-types
    if (G) {
    }
    const {
      duration: X,
      delay: te,
      easing: re
      style: T,
      timeout: E,
      easing: a
    }, {
      mode: "enter"
    });
    let Q;
      duration: Q,
      delay: te
      delay: te,
      easing: re
    const {
      delay: X,
      easing: te
      style: T,
      timeout: E,
      easing: a
    }, {
      mode: "exit"
    });
    let re;
      duration: re,
      delay: X
      easing: te
  };
  return /* @__PURE__ */ $.jsx(O, {
    appear: o,
    in: c,
    onExiting: q,
    addEndListener: ee,
    timeout: E === "auto" ? null : E,
    children: (G, {
      ...X
    }) => /* @__PURE__ */ x.cloneElement(s, {
      style: {
        opacity: 0,
        visibility: G === "exited" && !c ? "hidden" : void 0,
        ...T,
        ...s.props.style
      },
      ...X
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: u.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: u.bool,
  /**
   * A single child content element.
   */
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: u.oneOfType([u.shape({
    enter: u.string,
    exit: u.string
  }), u.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: u.bool,
  /**
   * @ignore
   */
  onEnter: u.func,
  /**
   * @ignore
   */
  onEntered: u.func,
  /**
   * @ignore
   */
  onEntering: u.func,
  /**
   * @ignore
   */
  onExit: u.func,
  /**
   * @ignore
   */
  onExited: u.func,
  /**
   * @ignore
   */
  onExiting: u.func,
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  timeout: u.oneOfType([u.oneOf(["auto"]), u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })])
});
  const {
    classes: t,
    disableUnderline: n
  } = e, o = mt({
    root: ["root", !n && "underline"],
    input: ["input"]
  return {
    ...t,
    // forward classes to the InputBase
    ...o
  };
  name: "MuiInput",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
  }
})(Zt(({
  theme: e
}) => {
  let n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (n = `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`), {
    position: "relative",
    variants: [{
      props: ({
        ownerState: r
      }) => r.formControl,
      style: {
        "label + &": {
          marginTop: 16
        }
      }
    }, {
      props: ({
        ownerState: r
      }) => !r.disableUnderline,
      style: {
        "&::after": {
          left: 0,
          bottom: 0,
          content: '""',
          position: "absolute",
          right: 0,
          transform: "scaleX(0)",
          transition: e.transitions.create("transform", {
            duration: e.transitions.duration.shorter,
            easing: e.transitions.easing.easeOut
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
          // translateX(0) is a workaround for Safari transform scale bug
          // See https://github.com/mui/material-ui/issues/31766
          transform: "scaleX(1) translateX(0)"
        },
          "&::before, &::after": {
            borderBottomColor: (e.vars || e).palette.error.main
          }
        },
        "&::before": {
          borderBottom: `1px solid ${n}`,
          left: 0,
          bottom: 0,
          content: '"\\00a0"',
          position: "absolute",
          right: 0,
          transition: e.transitions.create("border-bottom-color", {
            duration: e.transitions.duration.shorter
          }),
          pointerEvents: "none"
          // Transparent to the hover style.
        },
          borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            borderBottom: `1px solid ${n}`
          }
        },
          borderBottomStyle: "dotted"
        }
      }
      props: {
        color: r,
        disableUnderline: !1
      },
      style: {
        "&::after": {
          borderBottom: `2px solid ${(e.vars || e).palette[r].main}`
        }
      }
    }))]
  };
  name: "MuiInput",
  slot: "Input",
    props: t,
    name: "MuiInput"
  }), {
    disableUnderline: o = !1,
    components: s = {},
    componentsProps: a,
    fullWidth: c = !1,
    inputComponent: f = "input",
    slotProps: g,
    type: w = "text",
    ...C
    root: {
      ownerState: {
        disableUnderline: o
      }
    }
    slots: {
      root: I,
      input: M
    },
    fullWidth: c,
    inputComponent: f,
    ref: n,
    type: w,
    ...C,
    classes: T
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: u.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary"]), u.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Input: u.elementType,
    Root: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: u.bool,
  /**
   * If `true`, the `input` will not have an underline.
   * @default false
   */
  disableUnderline: u.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: u.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: u.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: u.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: u.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: u.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: u.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: u.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: u.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: u.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: u.oneOfType([u.number, u.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: u.shape({
    input: u.object,
    root: u.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    root: u.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: u.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: u.any
});
}
  const {
    ownerState: n
  } = e;
  return [t.root, t[`position${He(n.position)}`], n.disablePointerEvents === !0 && t.disablePointerEvents, t[n.variant]];
  const {
    classes: t,
    disablePointerEvents: n,
    hiddenLabel: r,
    position: o,
    size: s,
    variant: a
  } = e, c = {
    root: ["root", n && "disablePointerEvents", o && `position${He(o)}`, a, r && "hiddenLabel", s && `size${He(s)}`]
  };
  name: "MuiInputAdornment",
  slot: "Root",
})(Zt(({
  theme: e
}) => ({
  display: "flex",
  maxHeight: "2em",
  alignItems: "center",
  whiteSpace: "nowrap",
  color: (e.vars || e).palette.action.active,
  variants: [{
    props: {
      variant: "filled"
    },
    style: {
        marginTop: 16
      }
    }
  }, {
    props: {
      position: "start"
    },
    style: {
      marginRight: 8
    }
  }, {
    props: {
      position: "end"
    },
    style: {
      marginLeft: 8
    }
  }, {
    props: {
      disablePointerEvents: !0
    },
    style: {
      pointerEvents: "none"
    }
  }]
    props: t,
    name: "MuiInputAdornment"
  }), {
    children: o,
    className: s,
    component: a = "div",
    disablePointerEvents: c = !1,
    disableTypography: f = !1,
    variant: g,
  let C = g;
  g && w.variant && process.env.NODE_ENV !== "production" && g === w.variant && console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one."), w && !C && (C = w.variant);
  const T = {
    ...r,
    hiddenLabel: w.hiddenLabel,
    size: w.size,
    disablePointerEvents: c,
    variant: C
    value: null,
      as: a,
      ownerState: T,
      className: et(E.root, s),
      ref: n,
        color: "textSecondary",
        children: o
      }) : /* @__PURE__ */ $.jsxs(x.Fragment, {
          /* notranslate needed while Google Translate will not fix zero-width space issue */
            className: "notranslate",
            "aria-hidden": !0,
            children: "​"
          }))
        ) : null, o]
      })
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */
  disablePointerEvents: u.bool,
  /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */
  disableTypography: u.bool,
  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: u.oneOf(["end", "start"]).isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: u.oneOf(["filled", "outlined", "standard"])
});
}
  const {
    classes: t,
    formControl: n,
    size: r,
    shrink: o,
    disableAnimation: s,
    variant: a,
    required: c
  } = e, f = {
    root: ["root", n && "formControl", !s && "animated", o && "shrink", r && r !== "normal" && `size${He(r)}`, a],
    asterisk: [c && "asterisk"]
  return {
    ...t,
    // forward the focused, disabled, etc. classes to the FormLabel
  };
  name: "MuiInputLabel",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [{
    }, t.root, n.formControl && t.formControl, n.size === "small" && t.sizeSmall, n.shrink && t.shrink, !n.disableAnimation && t.animated, n.focused && t.focused, t[n.variant]];
  }
})(Zt(({
  theme: e
}) => ({
  display: "block",
  transformOrigin: "top left",
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
  maxWidth: "100%",
  variants: [{
    props: ({
      ownerState: t
    }) => t.formControl,
    style: {
      position: "absolute",
      left: 0,
      top: 0,
      // slight alteration to spec spacing to match visual spec result
      transform: "translate(0, 20px) scale(1)"
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      // Compensation for the `Input.inputSizeSmall` style.
      transform: "translate(0, 17px) scale(1)"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.shrink,
    style: {
      transform: "translate(0, -1.5px) scale(0.75)",
      transformOrigin: "top left",
      maxWidth: "133%"
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.disableAnimation,
    style: {
      transition: e.transitions.create(["color", "transform", "max-width"], {
        duration: e.transitions.duration.shorter,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      // Chrome's autofill feature gives the input field a yellow background.
      // Since the input field is behind the label in the HTML tree,
      // the input field is drawn last and hides the label with an opaque background color.
      // zIndex: 1 will raise the label above opaque background-colors of input.
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(12px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "filled",
      size: "small"
    },
    style: {
      transform: "translate(12px, 13px) scale(1)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n
    }) => t === "filled" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      transform: "translate(12px, 7px) scale(0.75)",
      maxWidth: "calc(133% - 24px)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n,
      size: r
    }) => t === "filled" && n.shrink && r === "small",
    style: {
      transform: "translate(12px, 4px) scale(0.75)"
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      // see comment above on filled.zIndex
      zIndex: 1,
      pointerEvents: "none",
      transform: "translate(14px, 16px) scale(1)",
      maxWidth: "calc(100% - 24px)"
    }
  }, {
    props: {
      variant: "outlined",
      size: "small"
    },
    style: {
      transform: "translate(14px, 9px) scale(1)"
    }
  }, {
    props: ({
      variant: t,
      ownerState: n
    }) => t === "outlined" && n.shrink,
    style: {
      userSelect: "none",
      pointerEvents: "auto",
      // Theoretically, we should have (8+5)*2/0.75 = 34px
      // but it feels a better when it bleeds a bit on the left, so 32px.
      maxWidth: "calc(133% - 32px)",
      transform: "translate(14px, -9px) scale(0.75)"
    }
  }]
    name: "MuiInputLabel",
    props: t
  }), {
    disableAnimation: o = !1,
    margin: s,
    shrink: a,
    variant: c,
    className: f,
    props: r,
    muiFormControl: g,
    states: ["size", "variant", "required", "focused"]
  }), C = {
    ...r,
    disableAnimation: o,
    formControl: g,
    size: w.size,
    variant: w.variant,
    required: w.required,
    focused: w.focused
    ref: n,
    className: et(T.root, f),
    ownerState: C,
    classes: T
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: u.oneOfType([u.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), u.string]),
  /**
   * If `true`, the transition animation is disabled.
   * @default false
   */
  disableAnimation: u.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: u.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: u.bool,
  /**
   * If `true`, the `input` of this label is focused.
   */
  focused: u.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: u.oneOf(["dense"]),
  /**
   * if `true`, the label will indicate that the `input` is required.
   */
  required: u.bool,
  /**
   * If `true`, the label is shrunk.
   */
  shrink: u.bool,
  /**
   * The size of the component.
   * @default 'normal'
   */
  size: u.oneOfType([u.oneOf(["normal", "small"]), u.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   */
  variant: u.oneOf(["filled", "outlined", "standard"])
});
}
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
  const {
    classes: t,
    variant: n,
    color: r
  } = e, o = {
    root: ["root", `color${He(r)}`, n],
    dashed: ["dashed", `dashedColor${He(r)}`],
    bar1: ["bar", "bar1", `barColor${He(r)}`, (n === "indeterminate" || n === "query") && "bar1Indeterminate", n === "determinate" && "bar1Determinate", n === "buffer" && "bar1Buffer"],
    bar2: ["bar", "bar2", n !== "buffer" && `barColor${He(r)}`, n === "buffer" && `color${He(r)}`, (n === "indeterminate" || n === "query") && "bar2Indeterminate", n === "buffer" && "bar2Buffer"]
  };
  name: "MuiLinearProgress",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[`color${He(n.color)}`], t[n.variant]];
  }
})(Zt(({
  theme: e
}) => ({
  position: "relative",
  overflow: "hidden",
  display: "block",
  height: 4,
  // Fix Safari's bug during composition of different paint.
  zIndex: 0,
  "@media print": {
    colorAdjust: "exact"
  },
    props: {
      color: t
    },
    style: {
    }
  })), {
    props: ({
      ownerState: t
    }) => t.color === "inherit" && t.variant !== "buffer",
    style: {
      "&::before": {
        content: '""',
        position: "absolute",
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
        backgroundColor: "currentColor",
        opacity: 0.3
      }
    }
  }, {
    props: {
      variant: "buffer"
    },
    style: {
      backgroundColor: "transparent"
    }
  }, {
    props: {
      variant: "query"
    },
    style: {
      transform: "rotate(180deg)"
    }
  }]
  name: "MuiLinearProgress",
  slot: "Dashed",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.dashed, t[`dashedColor${He(n.color)}`]];
  }
})(Zt(({
  theme: e
}) => ({
  position: "absolute",
  marginTop: 0,
  height: "100%",
  width: "100%",
  backgroundSize: "10px 10px",
  backgroundPosition: "0 -23px",
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      opacity: 0.3,
      backgroundImage: "radial-gradient(currentColor 0%, currentColor 16%, transparent 42%)"
    }
    return {
      props: {
        color: t
      },
      style: {
        backgroundImage: `radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`
      }
    };
  })]
  // At runtime for Pigment CSS, `bufferAnimation` will be null and the generated keyframe will be used.
  name: "MuiLinearProgress",
  slot: "Bar1",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.bar, t.bar1, t[`barColor${He(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && t.bar1Indeterminate, n.variant === "determinate" && t.bar1Determinate, n.variant === "buffer" && t.bar1Buffer];
  }
})(Zt(({
  theme: e
}) => ({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
  variants: [{
    props: {
      color: "inherit"
    },
    style: {
      backgroundColor: "currentColor"
    }
    props: {
      color: t
    },
    style: {
      backgroundColor: (e.vars || e).palette[t].main
    }
  })), {
    props: {
      variant: "determinate"
    },
    style: {
    }
  }, {
    props: {
      variant: "buffer"
    },
    style: {
      zIndex: 1,
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" || t.variant === "query",
    style: {
      width: "auto"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" || t.variant === "query",
    }
  }]
  name: "MuiLinearProgress",
  slot: "Bar2",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.bar, t.bar2, t[`barColor${He(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && t.bar2Indeterminate, n.variant === "buffer" && t.bar2Buffer];
  }
})(Zt(({
  theme: e
}) => ({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
    props: {
      color: t
    },
    style: {
      "--LinearProgressBar2-barColor": (e.vars || e).palette[t].main
    }
  })), {
    props: ({
      ownerState: t
    }) => t.variant !== "buffer" && t.color !== "inherit",
    style: {
      backgroundColor: "var(--LinearProgressBar2-barColor, currentColor)"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant !== "buffer" && t.color === "inherit",
    style: {
      backgroundColor: "currentColor"
    }
  }, {
    props: {
      color: "inherit"
    },
    style: {
      opacity: 0.3
    }
    props: {
      color: t,
      variant: "buffer"
    },
    style: {
    }
  })), {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" || t.variant === "query",
    style: {
      width: "auto"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.variant === "indeterminate" || t.variant === "query",
    }
  }]
    props: t,
    name: "MuiLinearProgress"
  }), {
    className: o,
    color: s = "primary",
    value: a,
    valueBuffer: c,
    variant: f = "indeterminate",
  } = r, g = {
    ...r,
    color: s,
    variant: f
    bar1: {},
    bar2: {}
  };
  if (f === "determinate" || f === "buffer")
    if (a !== void 0) {
      C["aria-valuenow"] = Math.round(a), C["aria-valuemin"] = 0, C["aria-valuemax"] = 100;
      let E = a - 100;
      w && (E = -E), T.bar1.transform = `translateX(${E}%)`;
    } else process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
  if (f === "buffer")
    if (c !== void 0) {
      let E = (c || 0) - 100;
      w && (E = -E), T.bar2.transform = `translateX(${E}%)`;
    } else process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
    ownerState: g,
    role: "progressbar",
    ...C,
    ref: n,
      ownerState: g
      ownerState: g,
      style: T.bar1
      ownerState: g,
      style: T.bar2
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["inherit", "primary", "secondary"]), u.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The value of the progress indicator for the determinate and buffer variants.
   * Value between 0 and 100.
   */
  value: u.number,
  /**
   * The value for the buffer variant.
   * Value between 0 and 100.
   */
  valueBuffer: u.number,
  /**
   * The variant to use.
   * Use indeterminate or query when there is no progress value.
   * @default 'indeterminate'
   */
  variant: u.oneOf(["buffer", "determinate", "indeterminate", "query"])
});
}
  const {
    classes: t,
    disablePadding: n,
    dense: r,
    subheader: o
  } = e;
  return mt({
    root: ["root", !n && "padding", r && "dense", o && "subheader"]
  name: "MuiList",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.disablePadding && t.padding, n.dense && t.dense, n.subheader && t.subheader];
  }
})({
  listStyle: "none",
  margin: 0,
  padding: 0,
  position: "relative",
  variants: [{
    props: ({
      ownerState: e
    }) => !e.disablePadding,
    style: {
      paddingTop: 8,
      paddingBottom: 8
    }
  }, {
    props: ({
      ownerState: e
    }) => e.subheader,
    style: {
      paddingTop: 0
    }
  }]
    props: t,
    name: "MuiList"
  }), {
    children: o,
    className: s,
    component: a = "ul",
    dense: c = !1,
    disablePadding: f = !1,
    ...g
    dense: c
  }), [c]), w = {
    ...r,
    component: a,
    dense: c,
    disablePadding: f
      as: a,
      className: et(C.root, s),
      ref: n,
      ownerState: w,
      ...g,
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: u.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: u.bool,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
}
  const {
    alignItems: t,
    classes: n
  } = e;
  return mt({
    root: ["root", t === "flex-start" && "alignItemsFlexStart"]
  name: "MuiListItemIcon",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, n.alignItems === "flex-start" && t.alignItemsFlexStart];
  }
})(Zt(({
  theme: e
}) => ({
  minWidth: 56,
  color: (e.vars || e).palette.action.active,
  flexShrink: 0,
  display: "inline-flex",
  variants: [{
    props: {
      alignItems: "flex-start"
    },
    style: {
      marginTop: 8
    }
  }]
    props: t,
    name: "MuiListItemIcon"
  }), {
    className: o,
    ...s
    ...r,
    alignItems: a.alignItems
    className: et(f.root, o),
    ownerState: c,
    ref: n,
    ...s
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `Icon`, `SvgIcon`,
   * or a `@mui/icons-material` SVG icon element.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
}
  const {
    classes: t,
    inset: n,
    primary: r,
    secondary: o,
    dense: s
  } = e;
  return mt({
    root: ["root", n && "inset", s && "dense", r && o && "multiline"],
    primary: ["primary"],
    secondary: ["secondary"]
  name: "MuiListItemText",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [{
    }, {
    }, t.root, n.inset && t.inset, n.primary && n.secondary && t.multiline, n.dense && t.dense];
  }
})({
  flex: "1 1 auto",
  minWidth: 0,
  marginTop: 4,
  marginBottom: 4,
    display: "block"
  },
    display: "block"
  },
  variants: [{
    props: ({
      ownerState: e
    }) => e.primary && e.secondary,
    style: {
      marginTop: 6,
      marginBottom: 6
    }
  }, {
    props: ({
      ownerState: e
    }) => e.inset,
    style: {
      paddingLeft: 56
    }
  }]
    props: t,
    name: "MuiListItemText"
  }), {
    children: o,
    className: s,
    disableTypography: a = !1,
    inset: c = !1,
    primary: f,
    secondary: g,
    slots: w = {},
    slotProps: C = {},
    ...T
  } = r, {
    dense: E
  const I = {
    ...r,
    disableTypography: a,
    inset: c,
    primary: !!O,
    dense: E
    slots: w,
    slotProps: {
      ...C
    }
    className: et(M.root, s),
    externalForwardedProps: {
      ...T
    },
    ownerState: I,
    ref: n
    className: M.primary,
    ownerState: I
    className: M.secondary,
    ownerState: I
  });
    variant: E ? "body2" : "body1",
    children: O
    variant: "body2",
    color: "textSecondary",
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Alias for the `primary` prop.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * If `true`, the children won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `children` (or `primary`) text, and optional `secondary` text
   * with the Typography component.
   * @default false
   */
  disableTypography: u.bool,
  /**
   * If `true`, the children are indented.
   * This should be used if there is no left avatar or left icon.
   * @default false
   */
  inset: u.bool,
  /**
   * The main content element.
   */
  primary: u.node,
  /**
   * These props will be forwarded to the primary typography component
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.primary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  primaryTypographyProps: u.object,
  /**
   * The secondary content element.
   */
  secondary: u.node,
  /**
   * These props will be forwarded to the secondary typography component
   * (as long as disableTypography is not `true`).
   * @deprecated Use `slotProps.secondary` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  secondaryTypographyProps: u.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    primary: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object]),
    secondary: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    primary: u.elementType,
    root: u.elementType,
    secondary: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  return e === t ? e.firstChild : t && t.nextElementSibling ? t.nextElementSibling : n ? null : e.firstChild;
}
  return e === t ? n ? e.firstChild : e.lastChild : t && t.previousElementSibling ? t.previousElementSibling : n ? null : e.lastChild;
}
  if (t === void 0)
    return !0;
  let n = e.innerText;
  return n === void 0 && (n = e.textContent), n = n.trim().toLowerCase(), n.length === 0 ? !1 : t.repeating ? n[0] === t.keys[0] : n.startsWith(t.keys.join(""));
}
  let a = !1, c = o(e, t, t ? n : !1);
  for (; c; ) {
    if (c === e.firstChild) {
      if (a)
        return !1;
      a = !0;
    }
    const f = r ? !1 : c.disabled || c.getAttribute("aria-disabled") === "true";
      c = o(e, c, n);
    else
      return c.focus(), !0;
  }
  return !1;
}
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    autoFocus: o = !1,
    autoFocusItem: s = !1,
    children: a,
    className: c,
    disabledItemsFocusable: f = !1,
    onKeyDown: g,
    ...w
  } = t, C = x.useRef(null), T = x.useRef({
    keys: [],
    repeating: !0,
    previousKeyMatched: !0,
    lastTime: null
  });
    o && C.current.focus();
  }, [o]), x.useImperativeHandle(r, () => ({
    adjustStyleForScrollbar: (M, {
    }) => {
      }
      return C.current;
    }
  }), []);
  const E = (M) => {
    if (M.ctrlKey || M.metaKey || M.altKey) {
      g && g(M);
      return;
    }
    }
    g && g(M);
    if (!/* @__PURE__ */ x.isValidElement(M)) {
      return;
    }
  });
    }
    return M;
  });
    role: "menu",
    ref: O,
    className: c,
    onKeyDown: E,
    tabIndex: o ? 0 : -1,
    ...w,
    children: I
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */
  autoFocus: u.bool,
  /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */
  autoFocusItem: u.bool,
  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: u.node,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: u.bool,
  /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */
  disableListWrap: u.bool,
  /**
   * @ignore
   */
  onKeyDown: u.func,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */
  variant: u.oneOf(["menu", "selectedMenu"])
});
}
  let n = 0;
  return typeof t == "number" ? n = t : t === "center" ? n = e.height / 2 : t === "bottom" && (n = e.height), n;
}
  let n = 0;
  return typeof t == "number" ? n = t : t === "center" ? n = e.width / 2 : t === "right" && (n = e.width), n;
}
  return [e.horizontal, e.vertical].map((t) => typeof t == "number" ? `${t}px` : t).join(" ");
}
  return typeof e == "function" ? e() : e;
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"],
    paper: ["paper"]
  name: "MuiPopover",
  slot: "Root",
  overridesResolver: (e, t) => t.root
  name: "MuiPopover",
  slot: "Paper",
  overridesResolver: (e, t) => t.paper
})({
  position: "absolute",
  overflowY: "auto",
  overflowX: "hidden",
  // So we see the popover when it's empty.
  // It's most likely on issue on userland.
  minWidth: 16,
  minHeight: 16,
  maxWidth: "calc(100% - 32px)",
  maxHeight: "calc(100% - 32px)",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
    props: t,
    name: "MuiPopover"
  }), {
    action: o,
    anchorEl: s,
    anchorOrigin: a = {
      vertical: "top",
      horizontal: "left"
    },
    anchorPosition: c,
    anchorReference: f = "anchorEl",
    className: g,
    elevation: w = 8,
    marginThreshold: C = 16,
    open: T,
    PaperProps: E = {},
    // TODO: remove in v7
    slots: O = {},
    transformOrigin: I = {
      vertical: "top",
      horizontal: "left"
    },
    TransitionComponent: M,
    // TODO: remove in v7
    // TODO: remove in v7
    ...r,
    anchorOrigin: a,
    anchorReference: f,
    elevation: w,
    marginThreshold: C,
    transformOrigin: I,
    TransitionComponent: M,
    if (f === "anchorPosition")
      return process.env.NODE_ENV !== "production" && (c || console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.')), c;
    if (process.env.NODE_ENV !== "production") {
      const Ce = _e.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && Ce.top === 0 && Ce.left === 0 && Ce.right === 0 && Ce.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    return {
    };
    const _e = {
      width: we.offsetWidth,
      height: we.offsetHeight
    if (f === "none")
      return {
        top: null,
        left: null,
      };
    const Ce = q();
    let Ne = Ce.top - ce.vertical, Be = Ce.left - ce.horizontal;
    if (C !== null && Ne < C) {
      const gt = Ne - C;
      Ne -= gt, ce.vertical += gt;
    } else if (C !== null && tt > ot) {
      const gt = tt - ot;
      Ne -= gt, ce.vertical += gt;
    }
    if (process.env.NODE_ENV !== "production" && _e.height > ot && _e.height && ot && console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${_e.height - ot}px).`, "Please consider adding a `max-height` to improve the user-experience."].join(`
`)), C !== null && Be < C) {
      const gt = Be - C;
      Be -= gt, ce.horizontal += gt;
      Be -= gt, ce.horizontal += gt;
    }
    return {
      top: `${Math.round(Ne)}px`,
      left: `${Math.round(Be)}px`,
    };
    if (!we)
      return;
    _e.top !== null && we.style.setProperty("top", _e.top), _e.left !== null && (we.style.left = _e.left), we.style.transformOrigin = _e.transformOrigin, G(!0);
  const X = () => {
  }, te = () => {
    G(!1);
  };
  x.useEffect(() => {
  }), x.useImperativeHandle(o, () => T ? {
    updatePosition: () => {
    }
    if (!T)
      return;
    return _e.addEventListener("resize", we), () => {
      we.clear(), _e.removeEventListener("resize", we);
    };
  const Q = {
    slots: {
      transition: M,
      ...O
    },
    slotProps: {
      paper: E,
    }
    externalForwardedProps: Q,
    getSlotProps: (we) => ({
      ...we,
      onEntering: (_e, ce) => {
        var Ce;
        (Ce = we.onEntering) == null || Ce.call(we, _e, ce), X();
      },
      onExited: (_e) => {
        var ce;
        (ce = we.onExited) == null || ce.call(we, _e), te();
      }
    }),
    additionalProps: {
      appear: !0,
      in: T
    }
  });
    slots: he,
    slotProps: ge,
    ...fe
    ref: n,
    externalForwardedProps: {
      ...Q,
    },
    shouldForwardComponentProp: !0,
    additionalProps: {
      slots: {
        backdrop: O.backdrop
      },
      slotProps: {
          invisible: !0
        })
      },
      container: de,
      open: T
    },
    externalForwardedProps: Q,
    shouldForwardComponentProp: !0,
    additionalProps: {
      elevation: w,
      style: ee ? void 0 : {
        opacity: 0
      }
    },
  });
  return /* @__PURE__ */ $.jsx(ue, {
    ...fe,
      slots: he,
      slotProps: ge,
    },
      ...ie,
      timeout: re,
      children: /* @__PURE__ */ $.jsx(pe, {
        ...be,
      })
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */
  /**
   * An HTML element, [PopoverVirtualElement](https://mui.com/material-ui/react-popover/#virtual-element),
   * or a function that returns either.
   * It's used to set the position of the popover.
   */
    if (e.open && (!e.anchorReference || e.anchorReference === "anchorEl")) {
      if (t && t.nodeType === 1) {
        const n = t.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${t}\` instead.`].join(`
`));
    }
    return null;
  }),
  /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  anchorOrigin: u.shape({
    horizontal: u.oneOfType([u.oneOf(["center", "left", "right"]), u.number]).isRequired,
    vertical: u.oneOfType([u.oneOf(["bottom", "center", "top"]), u.number]).isRequired
  }),
  /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */
  anchorPosition: u.shape({
    left: u.number.isRequired,
    top: u.number.isRequired
  }),
  /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */
  anchorReference: u.oneOf(["anchorEl", "anchorPosition", "none"]),
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: u.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  BackdropProps: u.object,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: u.bool,
  /**
   * The elevation of the popover.
   * @default 8
   */
  /**
   * Specifies how close to the edge of the window the popover can appear.
   * If null, the popover will not be constrained by the window.
   * @default 16
   */
  marginThreshold: u.number,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */
  onClose: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * Props applied to the [`Paper`](https://mui.com/material-ui/api/paper/) element.
   *
   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.paper` instead.
   *
   * @default {}
   */
  PaperProps: u.shape({
  }),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    backdrop: u.oneOfType([u.func, u.object]),
    paper: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object]),
    transition: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    backdrop: u.elementType,
    paper: u.elementType,
    root: u.elementType,
    transition: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  transformOrigin: u.shape({
    horizontal: u.oneOfType([u.oneOf(["center", "left", "right"]), u.number]).isRequired,
    vertical: u.oneOfType([u.oneOf(["bottom", "center", "top"]), u.number]).isRequired
  }),
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated use the `slots.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default Grow
   */
  TransitionComponent: u.elementType,
  /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: u.oneOfType([u.oneOf(["auto"]), u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: u.object
});
}
  vertical: "top",
  horizontal: "right"
  vertical: "top",
  horizontal: "left"
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"],
    paper: ["paper"],
    list: ["list"]
  name: "MuiMenu",
  slot: "Root",
  overridesResolver: (e, t) => t.root
  name: "MuiMenu",
  slot: "Paper",
  overridesResolver: (e, t) => t.paper
})({
  // specZ: The maximum height of a simple menu should be one or more rows less than the view
  // height. This ensures a tappable area outside of the simple menu with which to dismiss
  // the menu.
  maxHeight: "calc(100% - 96px)",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
  name: "MuiMenu",
  slot: "List",
  overridesResolver: (e, t) => t.list
})({
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
    props: t,
    name: "MuiMenu"
  }), {
    autoFocus: o = !0,
    children: s,
    className: a,
    disableAutoFocusItem: c = !1,
    MenuListProps: f = {},
    open: g,
    PopoverClasses: w,
    transitionDuration: C = "auto",
    TransitionProps: {
      onEntering: T,
      ...E
    } = {},
    variant: O = "selectedMenu",
    slotProps: I = {},
    ...M
    ...r,
    autoFocus: o,
    disableAutoFocusItem: c,
    MenuListProps: f,
    onEntering: T,
    transitionDuration: C,
    TransitionProps: E,
    variant: O
    }), T && T(re, Q);
  };
  let q = -1;
  x.Children.map(s, (re, Q) => {
`)), re.props.disabled || (O === "selectedMenu" && re.props.selected || q === -1) && (q = Q));
  });
    slotProps: {
      list: f,
      transition: E,
      ...I
    }
    externalSlotProps: I.root,
    shouldForwardComponentProp: !0,
    shouldForwardComponentProp: !0,
    getSlotProps: (re) => ({
      ...re,
      onKeyDown: (Q) => {
      }
    }),
    anchorOrigin: {
      vertical: "bottom",
    },
    slots: {
      paper: ee,
        // TODO: pass `slots.transition` directly once `TransitionComponent` is removed from Popover
      }
    },
    slotProps: {
      paper: G,
      transition: {
        ...te,
        onEntering: (...re) => {
          var Q;
        }
      }
    },
    open: g,
    ref: n,
    transitionDuration: C,
    ...M,
    classes: w,
      autoFocus: o && (q === -1 || c),
      variant: O,
      ...X,
      children: s
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */
  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */
  autoFocus: u.bool,
  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */
  disableAutoFocusItem: u.bool,
  /**
   * Props applied to the [`MenuList`](https://mui.com/material-ui/api/menu-list/) element.
   * @deprecated use the `slotProps.list` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  MenuListProps: u.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: u.object,
  /**
   * `classes` prop applied to the [`Popover`](https://mui.com/material-ui/api/popover/) element.
   */
  PopoverClasses: u.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    backdrop: u.oneOfType([u.func, u.object]),
    list: u.oneOfType([u.func, u.object]),
    paper: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object]),
    transition: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    backdrop: u.elementType,
    list: u.elementType,
    paper: u.elementType,
    root: u.elementType,
    transition: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */
  transitionDuration: u.oneOfType([u.oneOf(["auto"]), u.number, u.shape({
    appear: u.number,
    enter: u.number,
    exit: u.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: u.object,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */
  variant: u.oneOf(["menu", "selectedMenu"])
});
}
  const {
    ownerState: n
  } = e;
  return [t.root, n.dense && t.dense, n.divider && t.divider, !n.disableGutters && t.gutters];
  const {
    disabled: t,
    dense: n,
    divider: r,
    disableGutters: o,
    selected: s,
    classes: a
  } = e, f = mt({
    root: ["root", n && "dense", t && "disabled", !o && "gutters", r && "divider", s && "selected"]
  return {
    ...a,
    ...f
  };
  name: "MuiMenuItem",
  slot: "Root",
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body1,
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minHeight: 48,
  paddingTop: 6,
  paddingBottom: 6,
  boxSizing: "border-box",
  whiteSpace: "nowrap",
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
    }
  },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
    }
  },
    backgroundColor: (e.vars || e).palette.action.focus
  },
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
    marginTop: e.spacing(1),
    marginBottom: e.spacing(1)
  },
    marginLeft: 52
  },
    marginTop: 0,
    marginBottom: 0
  },
    paddingLeft: 36
  },
    minWidth: 36
  },
  variants: [{
    props: ({
      ownerState: t
    }) => !t.disableGutters,
    style: {
      paddingLeft: 16,
      paddingRight: 16
    }
  }, {
    props: ({
      ownerState: t
    }) => t.divider,
    style: {
      borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
      backgroundClip: "padding-box"
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.dense,
    style: {
      [e.breakpoints.up("sm")]: {
        minHeight: "auto"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.dense,
    style: {
      minHeight: 32,
      // https://m2.material.io/components/menus#specs > Dense
      paddingTop: 4,
      paddingBottom: 4,
      ...e.typography.body2,
        fontSize: "1.25rem"
      }
    }
  }]
    props: t,
    name: "MuiMenuItem"
  }), {
    autoFocus: o = !1,
    component: s = "li",
    dense: a = !1,
    divider: c = !1,
    disableGutters: f = !1,
    role: g = "menuitem",
    className: w,
    ...C
    dense: a || T.dense || !1,
    disableGutters: f
  }), [T.dense, a, f]), O = x.useRef(null);
    o && (O.current ? O.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered."));
  }, [o]);
    ...r,
    dense: E.dense,
    divider: c,
    disableGutters: f
    value: E,
      ref: M,
      role: g,
      component: s,
      className: et(I.root, w),
      ...C,
      classes: I
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: u.bool,
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent Menu component.
   * @default false
   */
  dense: u.bool,
  /**
   * @ignore
   */
  disabled: u.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: u.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the menu item.
   * @default false
   */
  divider: u.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: u.string,
  /**
   * @ignore
   */
  role: u.string,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * @default 0
   */
  tabIndex: u.number
});
}
  const {
    classes: t,
    variant: n,
    disabled: r,
    multiple: o,
    open: s,
    error: a
  } = e, c = {
    select: ["select", n, r && "disabled", o && "multiple", a && "error"],
    icon: ["icon", `icon${He(n)}`, s && "iconOpen", r && "disabled"]
  };
  name: "MuiNativeSelect"
})(({
  theme: e
}) => ({
  // Reset
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // When interacting quickly, the text can end up selected.
  // Native select can't be selected either.
  userSelect: "none",
  // Reset
  borderRadius: 0,
  cursor: "pointer",
  "&:focus": {
    // Reset Chrome style
    borderRadius: 0
  },
    cursor: "default"
  },
  "&[multiple]": {
    height: "auto"
  },
  "&:not([multiple]) option, &:not([multiple]) optgroup": {
    backgroundColor: (e.vars || e).palette.background.paper
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.variant !== "filled" && t.variant !== "outlined",
    style: {
      // Bump specificity to allow extending custom inputs
      "&&&": {
        paddingRight: 24,
        minWidth: 16
        // So it doesn't collapse.
      }
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      "&&&": {
        paddingRight: 32
      }
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius,
      "&:focus": {
        borderRadius: (e.vars || e).shape.borderRadius
        // Reset the reset for Chrome style
      },
      "&&&": {
        paddingRight: 32
      }
    }
  }]
  name: "MuiNativeSelect",
  slot: "Select",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.select, t[n.variant], n.error && t.error, {
    }];
  }
  name: "MuiNativeSelect"
})(({
  theme: e
}) => ({
  // We use a position absolute over a flexbox in order to forward the pointer events
  // to the input and to support wrapping tags..
  position: "absolute",
  right: 0,
  // Center vertically, height is 1em
  top: "calc(50% - .5em)",
  // Don't block pointer events on the select under the icon.
  pointerEvents: "none",
  color: (e.vars || e).palette.action.active,
    color: (e.vars || e).palette.action.disabled
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.open,
    style: {
      transform: "rotate(180deg)"
    }
  }, {
    props: {
      variant: "filled"
    },
    style: {
      right: 7
    }
  }, {
    props: {
      variant: "outlined"
    },
    style: {
      right: 7
    }
  }]
  name: "MuiNativeSelect",
  slot: "Icon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.icon, n.variant && t[`icon${He(n.variant)}`], n.open && t.iconOpen];
  }
  const {
    className: r,
    disabled: o,
    error: s,
    IconComponent: a,
    inputRef: c,
    variant: f = "standard",
  } = t, g = {
    ...t,
    disabled: o,
    variant: f,
    error: s
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      ownerState: g,
      disabled: o,
      ref: c || n,
      as: a,
      ownerState: g,
    })]
  });
});
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The CSS class name of the select element.
   */
  className: u.string,
  /**
   * If `true`, the select is disabled.
   */
  disabled: u.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: u.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: u.elementType.isRequired,
  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  /**
   * @ignore
   */
  multiple: u.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: u.string,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * The input value.
   */
  value: u.any,
  /**
   * The variant to use.
   */
  variant: u.oneOf(["standard", "outlined", "filled"])
});
  name: "MuiNotchedOutlined",
})({
  textAlign: "left",
  position: "absolute",
  bottom: 0,
  right: 0,
  top: -5,
  left: 0,
  margin: 0,
  padding: "0 8px",
  pointerEvents: "none",
  borderRadius: "inherit",
  borderStyle: "solid",
  borderWidth: 1,
  overflow: "hidden",
  minWidth: "0%"
  name: "MuiNotchedOutlined",
})(Zt(({
  theme: e
}) => ({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden",
  // Fix Horizontal scroll when label too long
  variants: [{
    props: ({
      ownerState: t
    }) => !t.withLabel,
    style: {
      padding: 0,
      lineHeight: "11px",
      // sync with `height` in `legend` styles
      transition: e.transitions.create("width", {
        duration: 150,
        easing: e.transitions.easing.easeOut
      })
    }
  }, {
    props: ({
      ownerState: t
    }) => t.withLabel,
    style: {
      display: "block",
      // Fix conflict with normalize.css and sanitize.css
      padding: 0,
      height: 11,
      // sync with `lineHeight` in `legend` styles
      fontSize: "0.75em",
      visibility: "hidden",
      maxWidth: 0.01,
      transition: e.transitions.create("max-width", {
        duration: 50,
        easing: e.transitions.easing.easeOut
      }),
      whiteSpace: "nowrap",
      "& > span": {
        paddingLeft: 5,
        paddingRight: 5,
        display: "inline-block",
        opacity: 0,
        visibility: "visible"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.withLabel && t.notched,
    style: {
      maxWidth: "100%",
      transition: e.transitions.create("max-width", {
        duration: 100,
        easing: e.transitions.easing.easeOut,
        delay: 50
      })
    }
  }]
})));
  const {
    children: t,
    classes: n,
    className: r,
    label: o,
    notched: s,
    ...a
  } = e, c = o != null && o !== "", f = {
    ...e,
    notched: s,
    withLabel: c
  };
    "aria-hidden": !0,
    className: r,
    ownerState: f,
    ...a,
      ownerState: f,
      children: c ? /* @__PURE__ */ $.jsx("span", {
        children: o
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      )
    })
  });
}
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The label.
   */
  label: u.node,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: u.bool.isRequired,
  /**
   * @ignore
   */
  style: u.object
});
  const {
    classes: t
  } = e, r = mt({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  return {
    ...t,
    // forward classes to the InputBase
    ...r
  };
  name: "MuiOutlinedInput",
  slot: "Root",
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    position: "relative",
    borderRadius: (e.vars || e).shape.borderRadius,
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
        borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : t
      }
    },
      borderWidth: 2
    },
      props: {
        color: n
      },
      style: {
          borderColor: (e.vars || e).palette[n].main
        }
      }
    })), {
      props: {},
      // to overide the above style
      style: {
          borderColor: (e.vars || e).palette.error.main
        },
          borderColor: (e.vars || e).palette.action.disabled
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.startAdornment,
      style: {
        paddingLeft: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.endAdornment,
      style: {
        paddingRight: 14
      }
    }, {
      props: ({
        ownerState: n
      }) => n.multiline,
      style: {
        padding: "16.5px 14px"
      }
    }, {
      props: ({
        ownerState: n,
        size: r
      }) => n.multiline && r === "small",
      style: {
        padding: "8.5px 14px"
      }
    }]
  };
  name: "MuiOutlinedInput",
  slot: "NotchedOutline",
  overridesResolver: (e, t) => t.notchedOutline
})(Zt(({
  theme: e
}) => {
  const t = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : t
  };
  name: "MuiOutlinedInput",
  slot: "Input",
})(Zt(({
  theme: e
}) => ({
  padding: "16.5px 14px",
  ...!e.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
      caretColor: e.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  },
  ...e.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [e.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  },
  variants: [{
    props: {
      size: "small"
    },
    style: {
      padding: "8.5px 14px"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.multiline,
    style: {
      padding: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.startAdornment,
    style: {
      paddingLeft: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.endAdornment,
    style: {
      paddingRight: 0
    }
  }]
    props: t,
    name: "MuiOutlinedInput"
  }), {
    components: o = {},
    fullWidth: s = !1,
    inputComponent: a = "input",
    label: c,
    multiline: f = !1,
    slots: g = {},
    type: w = "text",
    ...C
    props: r,
    muiFormControl: E,
    states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    ...r,
    color: O.color || "primary",
    disabled: O.disabled,
    error: O.error,
    focused: O.focused,
    formControl: E,
    fullWidth: s,
    hiddenLabel: O.hiddenLabel,
    multiline: f,
    size: O.size,
    type: w
    className: T.notchedOutline,
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      slots: g,
    },
    additionalProps: {
      label: c != null && c !== "" && O.required ? /* @__PURE__ */ $.jsxs(x.Fragment, {
        children: [c, " ", "*"]
      }) : c
    }
  });
    slots: {
      root: I,
      input: M
    },
    }),
    fullWidth: s,
    inputComponent: a,
    multiline: f,
    ref: n,
    type: w,
    ...C,
    classes: {
      ...T,
      notchedOutline: null
    }
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: u.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary"]), u.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Input: u.elementType,
    Root: u.elementType
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: u.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: u.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: u.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The id of the `input` element.
   */
  id: u.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: u.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * The label of the `input`. It is only used for layout. The actual labelling
   * is handled by `InputLabel`.
   */
  label: u.node,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: u.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * If `true`, a [TextareaAutosize](https://mui.com/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: u.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: u.string,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: u.bool,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: u.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: u.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: u.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: u.oneOfType([u.number, u.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    input: u.object,
    notchedOutline: u.oneOfType([u.func, u.object]),
    root: u.object
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    input: u.elementType,
    notchedOutline: u.elementType,
    root: u.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: u.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: u.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: u.any
});
  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
}), "LastPage");
}
  name: "MuiSelect",
  slot: "Select",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [
      // Win specificity over the input base
      {
      },
      {
      },
      {
      },
      {
      }
    ];
  }
})({
  // Win specificity over the input base
    height: "auto",
    // Resets for multiple select with chips
    minHeight: "1.4375em",
    // Required for select\text-field height consistency
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
  name: "MuiSelect",
  slot: "Icon",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.icon, n.variant && t[`icon${He(n.variant)}`], n.open && t.iconOpen];
  }
  name: "MuiSelect",
  slot: "NativeInput",
  overridesResolver: (e, t) => t.nativeInput
})({
  bottom: 0,
  left: 0,
  position: "absolute",
  opacity: 0,
  pointerEvents: "none",
  width: "100%",
  boxSizing: "border-box"
});
  return typeof t == "object" && t !== null ? e === t : String(e) === String(t);
}
  return e == null || typeof e == "string" && !e.trim();
}
  const {
    classes: t,
    variant: n,
    disabled: r,
    multiple: o,
    open: s,
    error: a
  } = e, c = {
    select: ["select", n, r && "disabled", o && "multiple", a && "error"],
    icon: ["icon", `icon${He(n)}`, s && "iconOpen", r && "disabled"],
    nativeInput: ["nativeInput"]
  };
  var bt;
  const {
    "aria-describedby": r,
    "aria-label": o,
    autoFocus: s,
    autoWidth: a,
    children: c,
    className: f,
    defaultValue: g,
    displayEmpty: w,
    error: C = !1,
    IconComponent: T,
    inputRef: E,
    labelId: O,
    multiple: I,
    name: M,
    renderValue: q,
    tabIndex: ee,
    // catching `type` from Input which makes no sense for SelectInput
    type: G,
    variant: X = "standard",
    ...te
    default: g,
    name: "Select"
    name: "Select"
  }), de = x.useRef(null), ue = x.useRef(null), [he, ge] = x.useState(null), {
    current: fe
    ue.current = We, We && ge(We);
  }, []), ce = he == null ? void 0 : he.parentNode;
  x.useImperativeHandle(we, () => ({
    focus: () => {
      ue.current.focus();
    },
    node: de.current,
    value: re
  }), [re]), x.useEffect(() => {
  }, [he, a]), x.useEffect(() => {
    s && ue.current.focus();
  }, [s]), x.useEffect(() => {
    if (!O)
      return;
    if (We) {
      const St = () => {
        getSelection().isCollapsed && ue.current.focus();
      };
      return We.addEventListener("click", St), () => {
        We.removeEventListener("click", St);
      };
    }
  }, [O]);
  const Ce = (We, St) => {
  }, Ne = (We) => {
    We.button === 0 && (We.preventDefault(), ue.current.focus(), Ce(!0, We));
  }, Be = (We) => {
    Ce(!1, We);
  }, rt = (We) => (St) => {
    if (St.currentTarget.hasAttribute("tabindex")) {
      if (I) {
      } else
          writable: !0,
          value: {
            name: M
          }
      }
      I || Ce(!1, St);
    }
  }, ot = (We) => {
      " ",
      "ArrowUp",
      "ArrowDown",
      // The native select doesn't respond to enter on macOS, but it's recommended by
      // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
      "Enter"
    ].includes(We.key) && (We.preventDefault(), Ce(!0, We));
      writable: !0,
      value: {
        value: re,
        name: M
      }
  };
  delete te["aria-invalid"];
  let nt, Ft;
  const ut = [];
  let Et = !1, Tt = !1;
    value: re
  }) || w) && (q ? nt = q(re) : Et = !0);
  const At = tt.map((We) => {
    if (!/* @__PURE__ */ x.isValidElement(We))
      return null;
`));
    let St;
    if (I) {
      if (!Array.isArray(re))
    } else
    return St && (Tt = !0), /* @__PURE__ */ x.cloneElement(We, {
      "aria-selected": St ? "true" : "false",
      onClick: rt(We),
      },
      role: "option",
      selected: St,
      value: void 0,
      // The value is most likely not a valid HTML attribute.
      "data-value": We.props.value
      // Instead, we provide it as a data attribute.
    });
  });
  process.env.NODE_ENV !== "production" && x.useEffect(() => {
    if (!Tt && !I && re !== "") {
      const We = tt.map((St) => St.props.value);
      console.warn([`MUI: You have provided an out-of-range value \`${re}\` for the select ${M ? `(name="${M}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${We.filter((St) => St != null).map((St) => `\`${St}\``).join(", ") || '""'}.`].join(`
`));
    }
  let vt = pe;
  !a && fe && he && (vt = ce.clientWidth);
  let Xe;
    ...t,
    variant: X,
    value: re,
    open: wt,
    error: C
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      as: "div",
      ref: _e,
      tabIndex: Xe,
      role: "combobox",
      "aria-controls": wt ? zt : void 0,
      "aria-expanded": wt ? "true" : "false",
      "aria-haspopup": "listbox",
      "aria-label": o,
      "aria-labelledby": [O, Oe].filter(Boolean).join(" ") || void 0,
      "aria-describedby": r,
      "aria-invalid": C ? "true" : void 0,
      onKeyDown: ot,
      onBlur: gt,
      ownerState: Ie,
      id: Oe,
        // notranslate needed while Google Translate will not fix zero-width space issue
          className: "notranslate",
          "aria-hidden": !0,
          children: "​"
        }))
      ) : nt
      "aria-invalid": C,
      value: Array.isArray(re) ? re.join(",") : re,
      name: M,
      ref: de,
      "aria-hidden": !0,
      tabIndex: -1,
      className: pt.nativeInput,
      autoFocus: s,
      ...te,
      ownerState: Ie
      as: T,
      className: pt.icon,
      ownerState: Ie
      id: `menu-${M || ""}`,
      anchorEl: ce,
      open: wt,
      onClose: Be,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "center"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "center"
      },
      slotProps: {
        list: {
          "aria-labelledby": O,
          role: "listbox",
          "aria-multiselectable": I ? "true" : void 0,
          disableListWrap: !0,
          id: zt,
        },
        paper: {
          ...yt,
          style: {
            minWidth: vt,
            ...yt != null ? yt.style : null
          }
        }
      },
      children: At
    })]
  });
});
  /**
   * @ignore
   */
  "aria-describedby": u.string,
  /**
   * @ignore
   */
  "aria-label": u.string,
  /**
   * @ignore
   */
  autoFocus: u.bool,
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: u.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The CSS class name of the select element.
   */
  className: u.string,
  /**
   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
   * You can only use it when the `native` prop is `false` (default).
   */
  defaultOpen: u.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the select is disabled.
   */
  disabled: u.bool,
  /**
   * If `true`, the selected item is displayed even if its value is empty.
   */
  displayEmpty: u.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: u.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: u.elementType.isRequired,
  /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: u.string,
  /**
   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
   */
  MenuProps: u.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */
  multiple: u.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: u.string,
  /**
   * @ignore
   */
  onBlur: u.func,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */
  onChange: u.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: u.func,
  /**
   * @ignore
   */
  onFocus: u.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool,
  /**
   * @ignore
   */
  readOnly: u.bool,
  /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: u.func,
  /**
   * If `true`, the component is required.
   */
  required: u.bool,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: u.object,
  /**
   * @ignore
   */
  tabIndex: u.oneOfType([u.number, u.string]),
  /**
   * @ignore
   */
  type: u.any,
  /**
   * The input value.
   */
  value: u.any,
  /**
   * The variant to use.
   */
  variant: u.oneOf(["standard", "outlined", "filled"])
});
  const {
    classes: t
  } = e, r = mt({
    root: ["root"]
  return {
    ...t,
    ...r
  };
  name: "MuiSelect",
  overridesResolver: (e, t) => t.root,
  slot: "Root"
    name: "MuiSelect",
    props: t
  }), {
    autoWidth: o = !1,
    children: s,
    classes: a = {},
    className: c,
    defaultOpen: f = !1,
    input: w,
    inputProps: C,
    label: T,
    labelId: E,
    MenuProps: O,
    native: I = !1,
    onClose: M,
    props: r,
    muiFormControl: q,
    states: ["variant", "error"]
    ...r,
    classes: a
    ...X
  } = G, te = w || {
      ownerState: ee
    }),
      label: T,
      ownerState: ee
    }),
      ownerState: ee
    })
  return /* @__PURE__ */ $.jsx(x.Fragment, {
    children: /* @__PURE__ */ x.cloneElement(te, {
      // Most of the logic is implemented in `SelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputProps: {
        children: s,
        IconComponent: g,
        type: void 0,
        // We render a select. We can ignore the type provided by the `Input`.
        ...I ? {
        } : {
          autoWidth: o,
          defaultOpen: f,
          labelId: E,
          MenuProps: O,
          onClose: M,
          SelectDisplayProps: {
          }
        },
        ...C,
        ...w ? w.props.inputProps : {}
      },
        notched: !0
      } : {},
      ref: re,
      className: et(te.props.className, c, G.root),
      // If a custom input is provided via 'input' prop, do not allow 'variant' to be propagated to it's root element. See https://github.com/mui/material-ui/issues/33894.
      ...!w && {
      },
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   * @default false
   */
  autoWidth: u.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
   * You can only use it when the `native` prop is `false` (default).
   * @default false
   */
  defaultOpen: u.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
   * returns the value to be displayed when no items are selected.
   *
   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
   * The label should either be hidden or forced to a shrunk state.
   * @default false
   */
  displayEmpty: u.bool,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: u.elementType,
  /**
   * The `id` of the wrapper element or the `select` element when `native`.
   */
  id: u.string,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: u.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */
  inputProps: u.object,
  /**
   * See [OutlinedInput#label](https://mui.com/material-ui/api/outlined-input/#props)
   */
  label: u.node,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: u.string,
  /**
   * Props applied to the [`Menu`](https://mui.com/material-ui/api/menu/) element.
   */
  MenuProps: u.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: u.bool,
  /**
   * If `true`, the component uses a native `select` element.
   * @default false
   */
  native: u.bool,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {SelectChangeEvent<Value>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */
  onChange: u.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: u.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: u.func,
  /**
   * If `true`, the component is shown.
   * You can only use it when the `native` prop is `false` (default).
   */
  open: u.bool,
  /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: u.func,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: u.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The `input` value. Providing an empty string will select no options.
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   *
   * If the value is an object it must have reference equality with the option in order to be selected.
   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
   */
  value: u.oneOfType([u.oneOf([""]), u.any]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: u.oneOf(["filled", "outlined", "standard"])
});
}
  const {
    classes: t,
    variant: n,
    animation: r,
    hasChildren: o,
    width: s,
    height: a
  } = e;
  return mt({
    root: ["root", n, r, o && "withChildren", o && !s && "fitContent", o && !a && "heightAuto"]
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
        &::after {
        }
  name: "MuiSkeleton",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], n.animation !== !1 && t[n.animation], n.hasChildren && t.withChildren, n.hasChildren && !n.width && t.fitContent, n.hasChildren && !n.height && t.heightAuto];
  }
})(Zt(({
  theme: e
}) => {
  return {
    display: "block",
    // Create a "on paper" color with sufficient contrast retaining the color
    height: "1.2em",
    variants: [{
      props: {
        variant: "text"
      },
      style: {
        marginTop: 0,
        marginBottom: 0,
        height: "auto",
        transformOrigin: "0 55%",
        transform: "scale(1, 0.60)",
        borderRadius: `${n}${t}/${Math.round(n / 0.6 * 10) / 10}${t}`,
        "&:empty:before": {
          content: '"\\00a0"'
        }
      }
    }, {
      props: {
        variant: "circular"
      },
      style: {
        borderRadius: "50%"
      }
    }, {
      props: {
        variant: "rounded"
      },
      style: {
        borderRadius: (e.vars || e).shape.borderRadius
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren,
      style: {
        "& > *": {
          visibility: "hidden"
        }
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren && !r.width,
      style: {
        maxWidth: "fit-content"
      }
    }, {
      props: ({
        ownerState: r
      }) => r.hasChildren && !r.height,
      style: {
        height: "auto"
      }
    }, {
      props: {
        animation: "pulse"
      },
      }
    }, {
      props: {
        animation: "wave"
      },
      style: {
        position: "relative",
        overflow: "hidden",
        /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
        WebkitMaskImage: "-webkit-radial-gradient(white, black)",
        "&::after": {
          background: `linear-gradient(
                90deg,
                transparent,
                ${(e.vars || e).palette.action.hover},
                transparent
              )`,
          content: '""',
          position: "absolute",
          transform: "translateX(-100%)",
          bottom: 0,
          left: 0,
          right: 0,
          top: 0
        }
      }
    }, {
      props: {
        animation: "wave"
      },
        "&::after": {
        }
      }
    }]
  };
    props: t,
    name: "MuiSkeleton"
  }), {
    animation: o = "pulse",
    className: s,
    component: a = "span",
    height: c,
    style: f,
    width: g,
  } = r, w = {
    ...r,
    animation: o,
    component: a,
    as: a,
    ref: n,
    className: et(C.root, s),
    ownerState: w,
    style: {
      width: g,
      height: c,
      ...f
    }
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: u.oneOf(["pulse", "wave", !1]),
  /**
   * Optional children to infer width and height from.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: u.oneOfType([u.number, u.string]),
  /**
   * @ignore
   */
  style: u.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The type of content that will be rendered.
   * @default 'text'
   */
  variant: u.oneOfType([u.oneOf(["circular", "rectangular", "rounded", "text"]), u.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: u.oneOfType([u.number, u.string])
});
}
  return Math.round(e * 1e5) / 1e5;
}
  const {
    classes: t,
    disableInteractive: n,
    arrow: r,
    touch: o,
    placement: s
  } = e, a = {
    popper: ["popper", !n && "popperInteractive", r && "popperArrow"],
    tooltip: ["tooltip", r && "tooltipArrow", o && "touch", `tooltipPlacement${He(s.split("-")[0])}`],
    arrow: ["arrow"]
  };
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.popper, !n.disableInteractive && t.popperInteractive, n.arrow && t.popperArrow, !n.open && t.popperClose];
  }
})(Zt(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.tooltip,
  pointerEvents: "none",
  variants: [{
    props: ({
      ownerState: t
    }) => !t.disableInteractive,
    style: {
      pointerEvents: "auto"
    }
  }, {
    props: ({
      open: t
    }) => !t,
    style: {
      pointerEvents: "none"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.arrow,
    style: {
        top: 0,
        marginTop: "-0.71em",
        "&::before": {
          transformOrigin: "0 100%"
        }
      },
        bottom: 0,
        marginBottom: "-0.71em",
        "&::before": {
          transformOrigin: "100% 0"
        }
      },
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "100% 100%"
        }
      },
        height: "1em",
        width: "0.71em",
        "&::before": {
          transformOrigin: "0 0"
        }
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.arrow && !t.isRtl,
    style: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.arrow && !!t.isRtl,
    style: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.arrow && !t.isRtl,
    style: {
        right: 0,
        marginRight: "-0.71em"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.arrow && !!t.isRtl,
    style: {
        left: 0,
        marginLeft: "-0.71em"
      }
    }
  }]
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.tooltip, n.touch && t.touch, n.arrow && t.tooltipArrow, t[`tooltipPlacement${He(n.placement.split("-")[0])}`]];
  }
})(Zt(({
  theme: e
}) => ({
  borderRadius: (e.vars || e).shape.borderRadius,
  color: (e.vars || e).palette.common.white,
  fontFamily: e.typography.fontFamily,
  padding: "4px 8px",
  fontSize: e.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: e.typography.fontWeightMedium,
    transformOrigin: "right center"
  },
    transformOrigin: "left center"
  },
    transformOrigin: "center bottom",
    marginBottom: "14px"
  },
    transformOrigin: "center top",
    marginTop: "14px"
  },
  variants: [{
    props: ({
      ownerState: t
    }) => t.arrow,
    style: {
      position: "relative",
      margin: 0
    }
  }, {
    props: ({
      ownerState: t
    }) => t.touch,
    style: {
      padding: "8px 16px",
      fontSize: e.typography.pxToRem(14),
      fontWeight: e.typography.fontWeightRegular
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.isRtl,
    style: {
        marginRight: "14px"
      },
        marginLeft: "14px"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => !t.isRtl && t.touch,
    style: {
        marginRight: "24px"
      },
        marginLeft: "24px"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => !!t.isRtl,
    style: {
        marginLeft: "14px"
      },
        marginRight: "14px"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => !!t.isRtl && t.touch,
    style: {
        marginLeft: "24px"
      },
        marginRight: "24px"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.touch,
    style: {
        marginBottom: "24px"
      }
    }
  }, {
    props: ({
      ownerState: t
    }) => t.touch,
    style: {
        marginTop: "24px"
      }
    }
  }]
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (e, t) => t.arrow
})(Zt(({
  theme: e
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
})));
  x: 0,
  y: 0
};
  return (n, ...r) => {
    t && t(n, ...r), e(n, ...r);
  };
}
    props: t,
    name: "MuiTooltip"
  }), {
    arrow: o = !1,
    children: s,
    classes: a,
    components: c = {},
    componentsProps: f = {},
    disableFocusListener: g = !1,
    disableInteractive: w = !1,
    disableTouchListener: C = !1,
    enterDelay: T = 100,
    enterNextDelay: E = 0,
    enterTouchDelay: O = 700,
    id: I,
    leaveDelay: M = 0,
    slotProps: q = {},
    TransitionComponent: ee,
    TransitionProps: G,
  } = r, X = /* @__PURE__ */ x.isValidElement(s) ? s : /* @__PURE__ */ $.jsx("span", {
    children: s
    default: !1,
    name: "Tooltip",
    state: "open"
  });
  let ce = we;
  if (process.env.NODE_ENV !== "production") {
    const {
      current: Wt
    x.useEffect(() => {
`));
  }
    Ne.current !== void 0 && (document.body.style.WebkitUserSelect = Ne.current, Ne.current = void 0), be.clear();
  });
  x.useEffect(() => Be, [Be]);
  const tt = (Wt) => {
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    (Wt) => {
        ue.current = !1;
      });
    }
  ), rt = (Wt) => {
      tt(Wt);
    }) : tt(Wt));
  }, ot = (Wt) => {
    fe.clear(), pe.start(M, () => {
    });
  }, [, wt] = x.useState(!1), gt = (Wt) => {
  }, nt = (Wt) => {
  }, Ft = (Wt) => {
    ue.current = !0;
  }, ut = (Wt) => {
    Ft(Wt), pe.clear(), ge.clear(), Be(), Ne.current = document.body.style.WebkitUserSelect, document.body.style.WebkitUserSelect = "none", be.start(O, () => {
      document.body.style.WebkitUserSelect = Ne.current, rt(Wt);
    });
  }, Et = (Wt) => {
    });
  };
  x.useEffect(() => {
    if (!ce)
      return;
    }
    return document.addEventListener("keydown", Wt), () => {
      document.removeEventListener("keydown", Wt);
    };
  const At = x.useRef(), vt = (Wt) => {
      x: Wt.clientX,
      y: Wt.clientY
    }, At.current && At.current.update();
  const Ie = {
    ...Xe,
    ...X.props,
    onTouchStart: Ft,
    ref: Tt,
      onMouseMove: vt
    } : {}
  };
  process.env.NODE_ENV !== "production" && (Ie["data-mui-internal-clone-element"] = !0, x.useEffect(() => {
    Q && !Q.getAttribute("data-mui-internal-clone-element") && console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join(`
`));
  }, [Q]));
  const pt = {};
`));
  const yt = {
    ...r,
    isRtl: re,
    arrow: o,
    disableInteractive: he,
    touch: ue.current
  }, zt = typeof q.popper == "function" ? q.popper(yt) : q.popper, bt = x.useMemo(() => {
    let Wt = [{
      name: "arrow",
      enabled: !!ie,
      options: {
        element: ie,
        padding: 4
      }
    }];
      ...zt == null ? void 0 : zt.popperOptions,
      modifiers: Wt
    };
    slots: {
      popper: c.Popper,
      transition: c.Transition ?? ee,
      tooltip: c.Tooltip,
      arrow: c.Arrow,
    },
    slotProps: {
      arrow: q.arrow ?? f.arrow,
      popper: {
        ...zt ?? f.popper
      },
      // resolvedPopperProps can be spread because it's already an object
      tooltip: q.tooltip ?? f.tooltip,
      transition: {
        ...G,
        ...St ?? f.transition
      }
    }
    ownerState: yt,
    ownerState: yt
    className: We.tooltip,
    ownerState: yt
    className: We.arrow,
    ownerState: yt,
    ref: de
  });
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
        getBoundingClientRect: () => ({
          width: 0,
          height: 0
        })
      } : Q,
      popperRef: At,
      open: Q ? ce : !1,
      id: Ce,
      transition: !0,
      ...pt,
      popperOptions: bt,
      children: ({
        TransitionProps: Wt
        timeout: te.transitions.duration.shorter,
        ...Wt,
          }) : null]
        })
      })
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: u.bool,
  /**
   * Tooltip reference element.
   */
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  components: u.shape({
    Arrow: u.elementType,
    Popper: u.elementType,
    Tooltip: u.elementType,
    Transition: u.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   *
   * @default {}
   */
  componentsProps: u.shape({
    arrow: u.object,
    popper: u.object,
    tooltip: u.object,
    transition: u.object
  }),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: u.bool,
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: u.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: u.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: u.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: u.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: u.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: u.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: u.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: u.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: u.string,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: u.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: u.number,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: u.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: u.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The component used for the popper.
   * @deprecated use the `slots.popper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  PopperComponent: u.elementType,
  /**
   * Props applied to the [`Popper`](https://mui.com/material-ui/api/popper/) element.
   * @deprecated use the `slotProps.popper` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  PopperProps: u.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    arrow: u.oneOfType([u.func, u.object]),
    popper: u.oneOfType([u.func, u.object]),
    tooltip: u.oneOfType([u.func, u.object]),
    transition: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    arrow: u.elementType,
    popper: u.elementType,
    tooltip: u.elementType,
    transition: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: u.node,
  /**
   * The component used for the transition.
   * [Follow this guide](https://mui.com/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated use the `slots.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  TransitionComponent: u.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated use the `slotProps.transition` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   * @default {}
   */
  TransitionProps: u.object
});
  createStyledComponent: Ue("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (e, t) => t.root
  }),
    props: e,
    name: "MuiStack"
  })
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: u.oneOfType([u.oneOf(["column-reverse", "column", "row-reverse", "row"]), u.arrayOf(u.oneOf(["column-reverse", "column", "row-reverse", "row"])), u.object]),
  /**
   * Add an element between each child.
   */
  divider: u.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string])), u.number, u.object, u.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: u.bool
});
  const {
    classes: t,
    variant: n,
    align: r,
    padding: o,
    size: s,
    stickyHeader: a
  } = e, c = {
    root: ["root", n, a && "stickyHeader", r !== "inherit" && `align${He(r)}`, o !== "normal" && `padding${He(o)}`, `size${He(s)}`]
  };
  name: "MuiTableCell",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, t[n.variant], t[`size${He(n.size)}`], n.padding !== "normal" && t[`padding${He(n.padding)}`], n.align !== "inherit" && t[`align${He(n.align)}`], n.stickyHeader && t.stickyHeader];
  }
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body2,
  display: "table-cell",
  verticalAlign: "inherit",
  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
  borderBottom: e.vars ? `1px solid ${e.vars.palette.TableCell.border}` : `1px solid
  textAlign: "left",
  padding: 16,
  variants: [{
    props: {
      variant: "head"
    },
    style: {
      color: (e.vars || e).palette.text.primary,
      lineHeight: e.typography.pxToRem(24),
      fontWeight: e.typography.fontWeightMedium
    }
  }, {
    props: {
      variant: "body"
    },
    style: {
      color: (e.vars || e).palette.text.primary
    }
  }, {
    props: {
      variant: "footer"
    },
    style: {
      color: (e.vars || e).palette.text.secondary,
      lineHeight: e.typography.pxToRem(21),
      fontSize: e.typography.pxToRem(12)
    }
  }, {
    props: {
      size: "small"
    },
    style: {
      padding: "6px 16px",
        width: 24,
        // prevent the checkbox column from growing
        padding: "0 12px 0 16px",
        "& > *": {
          padding: 0
        }
      }
    }
  }, {
    props: {
      padding: "checkbox"
    },
    style: {
      width: 48,
      // prevent the checkbox column from growing
      padding: "0 0 0 4px"
    }
  }, {
    props: {
      padding: "none"
    },
    style: {
      padding: 0
    }
  }, {
    props: {
      align: "left"
    },
    style: {
      textAlign: "left"
    }
  }, {
    props: {
      align: "center"
    },
    style: {
      textAlign: "center"
    }
  }, {
    props: {
      align: "right"
    },
    style: {
      textAlign: "right",
      flexDirection: "row-reverse"
    }
  }, {
    props: {
      align: "justify"
    },
    style: {
      textAlign: "justify"
    }
  }, {
    props: ({
      ownerState: t
    }) => t.stickyHeader,
    style: {
      position: "sticky",
      top: 0,
      zIndex: 2,
      backgroundColor: (e.vars || e).palette.background.default
    }
  }]
    props: t,
    name: "MuiTableCell"
  }), {
    align: o = "inherit",
    className: s,
    component: a,
    padding: c,
    scope: f,
    sortDirection: g,
    ...w
  let O;
  a ? O = a : O = E ? "th" : "td";
    ...r,
    align: o,
    component: O,
    padding: c || (C && C.padding ? C.padding : "normal"),
    sortDirection: g,
    stickyHeader: I === "head" && C && C.stickyHeader,
    variant: I
    as: O,
    ref: n,
    ownerState: M,
    ...w
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the table cell content.
   *
   * Monetary or generally number fields **should be right aligned** as that allows
   * you to add them up quickly in your head without having to worry about decimals.
   * @default 'inherit'
   */
  align: u.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * Sets the padding applied to the cell.
   * The prop defaults to the value (`'default'`) inherited from the parent Table component.
   */
  padding: u.oneOf(["checkbox", "none", "normal"]),
  /**
   * Set scope attribute.
   */
  scope: u.string,
  /**
   * Specify the size of the cell.
   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * Set aria-sort direction.
   */
  sortDirection: u.oneOf(["asc", "desc", !1]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Specify the cell type.
   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
   */
  variant: u.oneOfType([u.oneOf(["body", "footer", "head"]), u.string])
});
}
  const {
    classes: t,
    disableGutters: n,
    variant: r
  } = e;
  return mt({
    root: ["root", !n && "gutters", r]
  name: "MuiToolbar",
  slot: "Root",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.root, !n.disableGutters && t.gutters, t[n.variant]];
  }
})(Zt(({
  theme: e
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  variants: [{
    props: ({
      ownerState: t
    }) => !t.disableGutters,
    style: {
      paddingLeft: e.spacing(2),
      paddingRight: e.spacing(2),
      [e.breakpoints.up("sm")]: {
        paddingLeft: e.spacing(3),
        paddingRight: e.spacing(3)
      }
    }
  }, {
    props: {
      variant: "dense"
    },
    style: {
      minHeight: 48
    }
  }, {
    props: {
      variant: "regular"
    },
    style: e.mixins.toolbar
  }]
    props: t,
    name: "MuiToolbar"
  }), {
    className: o,
    component: s = "div",
    disableGutters: a = !1,
    variant: c = "regular",
    ...f
    ...r,
    component: s,
    disableGutters: a,
    variant: c
    as: s,
    className: et(g.root, o),
    ref: n,
    ...f
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
   * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * If `true`, disables gutter padding.
   * @default false
   */
  disableGutters: u.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant to use.
   * @default 'regular'
   */
  variant: u.oneOfType([u.oneOf(["dense", "regular"]), u.string])
});
  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  const {
    backIconButtonProps: r,
    count: o,
    disabled: s = !1,
    getItemAriaLabel: a,
    nextIconButtonProps: c,
    onPageChange: f,
    rowsPerPage: g,
    showLastButton: w,
    slots: C = {},
    slotProps: T = {},
    ...E
  return /* @__PURE__ */ $.jsxs("div", {
    ref: n,
    ...E,
      ...X,
        ...T.lastButtonIcon
        ...T.firstButtonIcon
      })
    }), /* @__PURE__ */ $.jsx(ee, {
      onClick: I,
      color: "inherit",
      ...te ?? r,
      children: O ? /* @__PURE__ */ $.jsx(q, {
        ...T.nextButtonIcon
        ...T.previousButtonIcon
      })
    }), /* @__PURE__ */ $.jsx(G, {
      onClick: M,
      color: "inherit",
      ...re ?? c,
        ...T.previousButtonIcon
      }) : /* @__PURE__ */ $.jsx(q, {
        ...T.nextButtonIcon
      })
      ...Q,
        ...T.firstButtonIcon
        ...T.lastButtonIcon
      })
    })]
  });
});
  /**
   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  backIconButtonProps: u.object,
  /**
   * The total number of rows.
   */
  count: u.number.isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @returns {string}
   */
  getItemAriaLabel: u.func.isRequired,
  /**
   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  nextIconButtonProps: u.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: u.func.isRequired,
  /**
   * The zero-based index of the current page.
   */
  page: u.number.isRequired,
  /**
   * The number of rows per page.
   */
  rowsPerPage: u.number.isRequired,
  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: u.bool.isRequired,
  /**
   * If `true`, show the last-page button.
   */
  showLastButton: u.bool.isRequired,
  /**
   * The props used for each slot inside the TablePaginationActions.
   * @default {}
   */
  slotProps: u.shape({
    firstButton: u.object,
    firstButtonIcon: u.object,
    lastButton: u.object,
    lastButtonIcon: u.object,
    nextButton: u.object,
    nextButtonIcon: u.object,
    previousButton: u.object,
    previousButtonIcon: u.object
  }),
  /**
   * The components used for each slot inside the TablePaginationActions.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: u.shape({
    firstButton: u.elementType,
    firstButtonIcon: u.elementType,
    lastButton: u.elementType,
    lastButtonIcon: u.elementType,
    nextButton: u.elementType,
    nextButtonIcon: u.elementType,
    previousButton: u.elementType,
    previousButtonIcon: u.elementType
  })
});
}
  name: "MuiTablePagination",
  slot: "Root",
  overridesResolver: (e, t) => t.root
})(Zt(({
  theme: e
}) => ({
  overflow: "auto",
  color: (e.vars || e).palette.text.primary,
  fontSize: e.typography.pxToRem(14),
  // Increase the specificity to override TableCell.
  "&:last-child": {
    padding: 0
  }
  name: "MuiTablePagination",
  slot: "Toolbar",
  overridesResolver: (e, t) => ({
    ...t.toolbar
  })
})(Zt(({
  theme: e
}) => ({
  minHeight: 52,
  paddingRight: 2,
  [`${e.breakpoints.up("xs")} and (orientation: landscape)`]: {
    minHeight: 52
  },
  [e.breakpoints.up("sm")]: {
    minHeight: 52,
    paddingRight: 2
  },
    flexShrink: 0,
    marginLeft: 20
  }
  name: "MuiTablePagination",
  slot: "Spacer",
  overridesResolver: (e, t) => t.spacer
})({
  flex: "1 1 100%"
  name: "MuiTablePagination",
  slot: "SelectLabel",
  overridesResolver: (e, t) => t.selectLabel
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body2,
  flexShrink: 0
  name: "MuiTablePagination",
  slot: "Select",
  overridesResolver: (e, t) => ({
    ...t.input,
    ...t.selectRoot
  })
})({
  color: "inherit",
  fontSize: "inherit",
  flexShrink: 0,
  marginRight: 32,
  marginLeft: 8,
    paddingLeft: 8,
    paddingRight: 24,
    textAlign: "right",
    textAlignLast: "right"
    // Align <select> on Chrome.
  }
  name: "MuiTablePagination",
  slot: "MenuItem",
  overridesResolver: (e, t) => t.menuItem
  name: "MuiTablePagination",
  slot: "DisplayedRows",
  overridesResolver: (e, t) => t.displayedRows
})(Zt(({
  theme: e
}) => ({
  ...e.typography.body2,
  flexShrink: 0
})));
  from: e,
  to: t,
  count: n
}) {
  return `${e}–${t} of ${n !== -1 ? n : `more than ${t}`}`;
}
  return `Go to ${e} page`;
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"],
    toolbar: ["toolbar"],
    spacer: ["spacer"],
    selectLabel: ["selectLabel"],
    select: ["select"],
    input: ["input"],
    selectIcon: ["selectIcon"],
    menuItem: ["menuItem"],
    displayedRows: ["displayedRows"],
    actions: ["actions"]
    props: t,
    name: "MuiTablePagination"
  }), {
    backIconButtonProps: s,
    colSpan: a,
    count: f,
    labelRowsPerPage: w = "Rows per page:",
    nextIconButtonProps: C,
    onPageChange: T,
    onRowsPerPageChange: E,
    page: O,
    rowsPerPageOptions: I = [10, 25, 50, 100],
    SelectProps: M = {},
    ref: n,
    externalForwardedProps: {
      ...X,
      component: c,
    },
    additionalProps: {
    }
    externalForwardedProps: X,
    externalForwardedProps: X,
    externalForwardedProps: X,
    additionalProps: {
      id: G
    }
    externalForwardedProps: X,
    externalForwardedProps: X,
    externalForwardedProps: X,
  });
  return /* @__PURE__ */ $.jsx(te, {
    ...re,
    children: /* @__PURE__ */ $.jsxs(Q, {
      children: [/* @__PURE__ */ $.jsx(ie, {
        ...de
      }), I.length > 1 && /* @__PURE__ */ $.jsx(ue, {
        ...he,
        children: w
      }), I.length > 1 && /* @__PURE__ */ $.jsx(ge, {
        variant: "standard",
        ...!q.variant && {
        },
        onChange: E,
        id: ee,
        labelId: G,
        ...q,
        classes: {
          ...q.classes,
          // TODO v5 remove `classes.input`
          // TODO v5 remove `selectIcon`
        },
        ...fe,
        children: I.map((ce) => /* @__PURE__ */ x.createElement(pe, {
          ...be,
          key: ce.label ? ce.label : ce,
          value: ce.value ? ce.value : ce
        }, ce.label ? ce.label : ce))
      }), /* @__PURE__ */ $.jsx(we, {
        ..._e,
          count: f === -1 ? -1 : f,
          page: O
        })
      }), /* @__PURE__ */ $.jsx(o, {
        backIconButtonProps: s,
        count: f,
        nextIconButtonProps: C,
        onPageChange: T,
        page: O,
        getItemAriaLabel: g,
      })]
    })
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The component used for displaying the actions.
   * Either a string to use a HTML element or a component.
   * @default TablePaginationActions
   */
  ActionsComponent: u.elementType,
  /**
   * Props applied to the back arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) component.
   *
   * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.previousButton` instead.
   */
  backIconButtonProps: u.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  colSpan: u.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: u.elementType,
  /**
   * The total number of rows.
   *
   * To enable server side pagination for an unknown number of items, provide -1.
   */
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
   * @returns {string}
   * @default function defaultGetAriaLabel(type) {
   *   return `Go to ${type} page`;
   * }
   */
  getItemAriaLabel: u.func,
  /**
   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
   * object.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default function defaultLabelDisplayedRows({ from, to, count }) {
   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
   * }
   */
  labelDisplayedRows: u.func,
  /**
   * Customize the rows per page label.
   *
   * For localization purposes, you can use the provided [translations](https://mui.com/material-ui/guides/localization/).
   * @default 'Rows per page:'
   */
  labelRowsPerPage: u.node,
  /**
   * Props applied to the next arrow [`IconButton`](https://mui.com/material-ui/api/icon-button/) element.
   *
   * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.nextButton` instead.
   */
  nextIconButtonProps: u.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: u.func.isRequired,
  /**
   * Callback fired when the number of rows per page is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   */
  onRowsPerPageChange: u.func,
  /**
   * The zero-based index of the current page.
   */
    const {
      count: t,
      page: n,
      rowsPerPage: r
    } = e;
    if (t === -1)
      return null;
    const o = Math.max(0, Math.ceil(t / r) - 1);
    return n < 0 || n > o ? new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${o}, but page is ${n}).`) : null;
  }),
  /**
   * The number of rows per page.
   *
   * Set -1 to display all the rows.
   */
  /**
   * Customizes the options of the rows per page select field. If less than two options are
   * available, no select field will be displayed.
   * Use -1 for the value with a custom label to show all the rows.
   * @default [10, 25, 50, 100]
   */
  rowsPerPageOptions: u.arrayOf(u.oneOfType([u.number, u.shape({
    label: u.string.isRequired,
    value: u.number.isRequired
  })]).isRequired),
  /**
   * Props applied to the rows per page [`Select`](https://mui.com/material-ui/api/select/) element.
   *
   * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.select` instead.
   *
   * @default {}
   */
  SelectProps: u.object,
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: u.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: u.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    actions: u.shape({
      firstButton: u.object,
      firstButtonIcon: u.object,
      lastButton: u.object,
      lastButtonIcon: u.object,
      nextButton: u.object,
      nextButtonIcon: u.object,
      previousButton: u.object,
      previousButtonIcon: u.object
    }),
    displayedRows: u.oneOfType([u.func, u.object]),
    menuItem: u.oneOfType([u.func, u.object]),
    root: u.oneOfType([u.func, u.object]),
    select: u.object,
    selectLabel: u.oneOfType([u.func, u.object]),
    spacer: u.oneOfType([u.func, u.object]),
    toolbar: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    actions: u.shape({
      firstButton: u.elementType,
      firstButtonIcon: u.elementType,
      lastButton: u.elementType,
      lastButtonIcon: u.elementType,
      nextButton: u.elementType,
      nextButtonIcon: u.elementType,
      previousButton: u.elementType,
      previousButtonIcon: u.elementType
    }),
    displayedRows: u.elementType,
    menuItem: u.elementType,
    root: u.elementType,
    select: u.elementType,
    selectLabel: u.elementType,
    spacer: u.elementType,
    toolbar: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["root"]
  name: "MuiTextField",
  slot: "Root",
  overridesResolver: (e, t) => t.root
    props: t,
    name: "MuiTextField"
  }), {
    autoComplete: o,
    autoFocus: s = !1,
    children: a,
    className: c,
    color: f = "primary",
    disabled: g = !1,
    FormHelperTextProps: w,
    fullWidth: C = !1,
    helperText: T,
    id: E,
    InputLabelProps: O,
    InputProps: I,
    inputRef: M,
    onFocus: q,
    rows: ee,
    select: G = !1,
    slots: X = {},
    slotProps: te = {},
    type: re,
    value: Q,
    ...ie
  } = r, de = {
    ...r,
    autoFocus: s,
    color: f,
    disabled: g,
    fullWidth: C,
    select: G,
  process.env.NODE_ENV !== "production" && G && !a && console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
    slots: X,
    slotProps: {
      input: I,
      inputLabel: O,
      formHelperText: w,
      ...te
    }
  }, we = {}, _e = be.slotProps.inputLabel;
    shouldForwardComponentProp: !0,
    externalForwardedProps: {
      ...be,
      ...ie
    },
    ownerState: de,
    className: et(ue.root, c),
    ref: n,
    additionalProps: {
      disabled: g,
      fullWidth: C,
      color: f,
    }
    elementType: pe,
    externalForwardedProps: be,
    additionalProps: we,
    ownerState: de
    externalForwardedProps: be,
    ownerState: de
    elementType: "input",
    externalForwardedProps: be,
    ownerState: de
    externalForwardedProps: be,
    ownerState: de
    externalForwardedProps: be,
    ownerState: de
  }), ut = /* @__PURE__ */ $.jsx(Ne, {
    "aria-describedby": ge,
    autoComplete: o,
    autoFocus: s,
    fullWidth: C,
    rows: ee,
    type: re,
    value: Q,
    id: he,
    inputRef: M,
    onFocus: q,
    inputProps: ot,
    slots: {
      input: X.htmlInput ? rt : void 0
    },
    ...Be
  });
  return /* @__PURE__ */ $.jsxs(ce, {
    ...Ce,
      htmlFor: he,
      id: fe,
    }), G ? /* @__PURE__ */ $.jsx(nt, {
      "aria-describedby": ge,
      id: he,
      labelId: fe,
      value: Q,
      input: ut,
      ...Ft,
      children: a
    }) : ut, T && /* @__PURE__ */ $.jsx(wt, {
      id: ge,
      ...gt,
      children: T
    })]
  });
});
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: u.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: u.bool,
  /**
   * @ignore
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * @ignore
   */
  className: u.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: u.oneOfType([u.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), u.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: u.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: u.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: u.bool,
  /**
   * Props applied to the [`FormHelperText`](https://mui.com/material-ui/api/form-helper-text/) element.
   * @deprecated Use `slotProps.formHelperText` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  FormHelperTextProps: u.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: u.bool,
  /**
   * The helper text content.
   */
  helperText: u.node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: u.string,
  /**
   * Props applied to the [`InputLabel`](https://mui.com/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   * @deprecated Use `slotProps.inputLabel` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputLabelProps: u.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @deprecated Use `slotProps.htmlInput` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  inputProps: u.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](https://mui.com/material-ui/api/filled-input/),
   * [`OutlinedInput`](https://mui.com/material-ui/api/outlined-input/) or [`Input`](https://mui.com/material-ui/api/input/)
   * component depending on the `variant` prop value.
   * @deprecated Use `slotProps.input` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  InputProps: u.object,
  /**
   * Pass a ref to the `input` element.
   */
  /**
   * The label content.
   */
  label: u.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: u.oneOf(["dense", "none", "normal"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: u.oneOfType([u.number, u.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: u.oneOfType([u.number, u.string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: u.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: u.string,
  /**
   * @ignore
   */
  onBlur: u.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: u.func,
  /**
   * @ignore
   */
  onFocus: u.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: u.string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: u.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: u.oneOfType([u.number, u.string]),
  /**
   * Render a [`Select`](https://mui.com/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: u.bool,
  /**
   * Props applied to the [`Select`](https://mui.com/material-ui/api/select/) element.
   * @deprecated Use `slotProps.select` instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
   */
  SelectProps: u.object,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: u.oneOfType([u.oneOf(["medium", "small"]), u.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.shape({
    formHelperText: u.oneOfType([u.func, u.object]),
    htmlInput: u.oneOfType([u.func, u.object]),
    input: u.oneOfType([u.func, u.object]),
    inputLabel: u.oneOfType([u.func, u.object]),
    select: u.oneOfType([u.func, u.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: u.shape({
    formHelperText: u.elementType,
    htmlInput: u.elementType,
    input: u.elementType,
    inputLabel: u.elementType,
    root: u.elementType,
    select: u.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: u.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: u.any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: u.oneOf(["filled", "outlined", "standard"])
});
  let t;
};
  constructor(t, n = "FunctionsError", r) {
    super(t), this.name = n, this.context = r;
  }
}
  constructor(t) {
    super("Failed to send a request to the Edge Function", "FunctionsFetchError", t);
  }
}
  constructor(t) {
    super("Relay Error invoking the Edge Function", "FunctionsRelayError", t);
  }
}
  constructor(t) {
    super("Edge Function returned a non-2xx status code", "FunctionsHttpError", t);
  }
}
(function(e) {
  e.Any = "any", e.ApNortheast1 = "ap-northeast-1", e.ApNortheast2 = "ap-northeast-2", e.ApSouth1 = "ap-south-1", e.ApSoutheast1 = "ap-southeast-1", e.ApSoutheast2 = "ap-southeast-2", e.CaCentral1 = "ca-central-1", e.EuCentral1 = "eu-central-1", e.EuWest1 = "eu-west-1", e.EuWest2 = "eu-west-2", e.EuWest3 = "eu-west-3", e.SaEast1 = "sa-east-1", e.UsEast1 = "us-east-1", e.UsWest1 = "us-west-1", e.UsWest2 = "us-west-2";
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  }
  /**
   * Updates the authorization header
   * @param token - the new jwt token sent in the authorisation header
   */
  setAuth(t) {
    this.headers.Authorization = `Bearer ${t}`;
  }
  /**
   * Invokes a function
   * @param functionName - The name of the Function to invoke.
   * @param options - Options for invoking the Function.
   */
  invoke(t) {
      var o;
      try {
        const { headers: s, method: a, body: c, signal: f } = r;
        g || (g = this.region);
        let w;
          method: a || "POST",
          // headers priority is (high to low):
          // 1. invoke-level headers
          // 2. client-level headers
          // 3. default Content-Type header
          body: w,
          signal: f
        }), T = C.headers.get("x-relay-error");
        if (T && T === "true")
        if (!C.ok)
        let E = ((o = C.headers.get("Content-Type")) !== null && o !== void 0 ? o : "text/plain").split(";")[0].trim(), O;
        return E === "application/json" ? O = yield C.json() : E === "application/octet-stream" ? O = yield C.blob() : E === "text/event-stream" ? O = C : E === "multipart/form-data" ? O = yield C.formData() : O = yield C.text(), { data: O, error: null, response: C };
      } catch (s) {
          data: null,
          error: s,
        };
      }
    });
  }
}
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof global < "u")
    return global;
  throw new Error("unable to locate global object");
  __proto__: null,
  constructor(t) {
    super(t.message), this.name = "PostgrestError", this.details = t.details, this.hint = t.hint, this.code = t.code;
  }
};
  return e && e.__esModule ? e : { default: e };
};
  constructor(t) {
    var n, r;
  }
  /**
   * If there's an error with the query, throwOnError will reject the promise by
   * throwing the error instead of returning it as part of a successful response.
   *
   * {@link https://github.com/supabase/supabase-js/issues/92}
   */
  throwOnError() {
    return this.shouldThrowOnError = !0, this;
  }
  /**
   * Set an HTTP header for the request.
   */
  setHeader(t, n) {
    return this.headers = new Headers(this.headers), this.headers.set(t, n), this;
  }
  then(t, n) {
    this.schema === void 0 || (["GET", "HEAD"].includes(this.method) ? this.headers.set("Accept-Profile", this.schema) : this.headers.set("Content-Profile", this.schema)), this.method !== "GET" && this.method !== "HEAD" && this.headers.set("Content-Type", "application/json");
    const r = this.fetch;
    let o = r(this.url.toString(), {
      method: this.method,
      headers: this.headers,
      body: JSON.stringify(this.body),
      signal: this.signal
    }).then(async (s) => {
      if (s.ok) {
        if (this.method !== "HEAD") {
          const I = await s.text();
        }
          // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553
          code: "PGRST116",
          hint: null,
          message: "JSON object requested, multiple (or no) rows returned"
      } else {
        const O = await s.text();
        try {
        } catch {
          s.status === 404 && O === "" ? (C = 204, T = "No Content") : g = {
            message: O
          };
        }
      }
      return {
        error: g,
        count: w,
        status: C,
        statusText: T
      };
    });
    return this.shouldThrowOnError || (o = o.catch((s) => {
      var a, c, f;
      return {
        error: {
          message: `${(a = s == null ? void 0 : s.name) !== null && a !== void 0 ? a : "FetchError"}: ${s == null ? void 0 : s.message}`,
          details: `${(c = s == null ? void 0 : s.stack) !== null && c !== void 0 ? c : ""}`,
          hint: "",
          code: `${(f = s == null ? void 0 : s.code) !== null && f !== void 0 ? f : ""}`
        },
        data: null,
        count: null,
        status: 0,
        statusText: ""
      };
    })), o.then(t, n);
  }
  /**
   * Override the type of the returned `data`.
   *
   * @typeParam NewResult - The new result type to override with
   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
   */
  returns() {
    return this;
  }
  /**
   * Override the type of the returned `data` field in the response.
   *
   * @typeParam NewResult - The new type to cast the response data to
   * @typeParam Options - Optional type configuration (defaults to { merge: true })
   * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)
   * @example
   * ```typescript
   * // Merge with existing types (default behavior)
   * const query = supabase
   *   .from('users')
   *   .select()
   *   .overrideTypes<{ custom_field: string }>()
   *
   * // Replace existing types completely
   * const replaceQuery = supabase
   *   .from('users')
   *   .select()
   *   .overrideTypes<{ id: number; name: string }, { merge: false }>()
   * ```
   * @returns A PostgrestBuilder instance with the new type
   */
  overrideTypes() {
    return this;
  }
};
  return e && e.__esModule ? e : { default: e };
};
  /**
   * Perform a SELECT on the query result.
   *
   * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not
   * return modified rows. By calling this method, modified rows are returned in
   * `data`.
   *
   * @param columns - The columns to retrieve, separated by commas
   */
  select(t) {
    let n = !1;
    const r = (t ?? "*").split("").map((o) => /\s/.test(o) && !n ? "" : (o === '"' && (n = !n), o)).join("");
    return this.url.searchParams.set("select", r), this.headers.append("Prefer", "return=representation"), this;
  }
  /**
   * Order the query result by `column`.
   *
   * You can call this method multiple times to order by multiple columns.
   *
   * You can order referenced tables, but it only affects the ordering of the
   * parent table if you use `!inner` in the query.
   *
   * @param column - The column to order by
   * @param options - Named parameters
   * @param options.ascending - If `true`, the result will be in ascending order
   * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,
   * `null`s appear last.
   * @param options.referencedTable - Set this to order a referenced table by
   * its columns
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  order(t, { ascending: n = !0, nullsFirst: r, foreignTable: o, referencedTable: s = o } = {}) {
    const a = s ? `${s}.order` : "order", c = this.url.searchParams.get(a);
    return this.url.searchParams.set(a, `${c ? `${c},` : ""}${t}.${n ? "asc" : "desc"}${r === void 0 ? "" : r ? ".nullsfirst" : ".nullslast"}`), this;
  }
  /**
   * Limit the query result by `count`.
   *
   * @param count - The maximum number of rows to return
   * @param options - Named parameters
   * @param options.referencedTable - Set this to limit rows of referenced
   * tables instead of the parent table
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  limit(t, { foreignTable: n, referencedTable: r = n } = {}) {
    const o = typeof r > "u" ? "limit" : `${r}.limit`;
    return this.url.searchParams.set(o, `${t}`), this;
  }
  /**
   * Limit the query result by starting at an offset `from` and ending at the offset `to`.
   * Only records within this range are returned.
   * This respects the query order and if there is no order clause the range could behave unexpectedly.
   * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third
   * and fourth rows of the query.
   *
   * @param from - The starting index from which to limit the result
   * @param to - The last index to which to limit the result
   * @param options - Named parameters
   * @param options.referencedTable - Set this to limit rows of referenced
   * tables instead of the parent table
   * @param options.foreignTable - Deprecated, use `options.referencedTable`
   * instead
   */
  range(t, n, { foreignTable: r, referencedTable: o = r } = {}) {
    const s = typeof o > "u" ? "offset" : `${o}.offset`, a = typeof o > "u" ? "limit" : `${o}.limit`;
    return this.url.searchParams.set(s, `${t}`), this.url.searchParams.set(a, `${n - t + 1}`), this;
  }
  /**
   * Set the AbortSignal for the fetch request.
   *
   * @param signal - The AbortSignal to use for the fetch request
   */
  abortSignal(t) {
    return this.signal = t, this;
  }
  /**
   * Return `data` as a single object instead of an array of objects.
   *
   * Query result must be one row (e.g. using `.limit(1)`), otherwise this
   * returns an error.
   */
  single() {
    return this.headers.set("Accept", "application/vnd.pgrst.object+json"), this;
  }
  /**
   * Return `data` as a single object instead of an array of objects.
   *
   * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise
   * this returns an error.
   */
  maybeSingle() {
    return this.method === "GET" ? this.headers.set("Accept", "application/json") : this.headers.set("Accept", "application/vnd.pgrst.object+json"), this.isMaybeSingle = !0, this;
  }
  /**
   * Return `data` as a string in CSV format.
   */
  csv() {
    return this.headers.set("Accept", "text/csv"), this;
  }
  /**
   * Return `data` as an object in [GeoJSON](https://geojson.org) format.
   */
  geojson() {
    return this.headers.set("Accept", "application/geo+json"), this;
  }
  /**
   * Return `data` as the EXPLAIN plan for the query.
   *
   * You need to enable the
   * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)
   * setting before using this method.
   *
   * @param options - Named parameters
   *
   * @param options.analyze - If `true`, the query will be executed and the
   * actual run time will be returned
   *
   * @param options.verbose - If `true`, the query identifier will be returned
   * and `data` will include the output columns of the query
   *
   * @param options.settings - If `true`, include information on configuration
   * parameters that affect query planning
   *
   * @param options.buffers - If `true`, include information on buffer usage
   *
   * @param options.wal - If `true`, include information on WAL record generation
   *
   * @param options.format - The format of the output, can be `"text"` (default)
   * or `"json"`
   */
  explain({ analyze: t = !1, verbose: n = !1, settings: r = !1, buffers: o = !1, wal: s = !1, format: a = "text" } = {}) {
    var c;
    const f = [
      t ? "analyze" : null,
      n ? "verbose" : null,
      r ? "settings" : null,
      o ? "buffers" : null,
      s ? "wal" : null
  }
  /**
   * Rollback the query.
   *
   * `data` will still be returned, but the query is not committed.
   */
  rollback() {
    return this.headers.append("Prefer", "tx=rollback"), this;
  }
  /**
   * Override the type of the returned `data`.
   *
   * @typeParam NewResult - The new result type to override with
   * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead
   */
  returns() {
    return this;
  }
  /**
   * Set the maximum number of rows that can be affected by the query.
   * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.
   *
   * @param value - The maximum number of rows that can be affected
   */
  maxAffected(t) {
    return this.headers.append("Prefer", "handling=strict"), this.headers.append("Prefer", `max-affected=${t}`), this;
  }
};
  return e && e.__esModule ? e : { default: e };
};
  /**
   * Match only rows where `column` is equal to `value`.
   *
   * To check if the value of `column` is NULL, you should use `.is()` instead.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  eq(t, n) {
    return this.url.searchParams.append(t, `eq.${n}`), this;
  }
  /**
   * Match only rows where `column` is not equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  neq(t, n) {
    return this.url.searchParams.append(t, `neq.${n}`), this;
  }
  /**
   * Match only rows where `column` is greater than `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  gt(t, n) {
    return this.url.searchParams.append(t, `gt.${n}`), this;
  }
  /**
   * Match only rows where `column` is greater than or equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  gte(t, n) {
    return this.url.searchParams.append(t, `gte.${n}`), this;
  }
  /**
   * Match only rows where `column` is less than `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  lt(t, n) {
    return this.url.searchParams.append(t, `lt.${n}`), this;
  }
  /**
   * Match only rows where `column` is less than or equal to `value`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  lte(t, n) {
    return this.url.searchParams.append(t, `lte.${n}`), this;
  }
  /**
   * Match only rows where `column` matches `pattern` case-sensitively.
   *
   * @param column - The column to filter on
   * @param pattern - The pattern to match with
   */
  like(t, n) {
    return this.url.searchParams.append(t, `like.${n}`), this;
  }
  /**
   * Match only rows where `column` matches all of `patterns` case-sensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  likeAllOf(t, n) {
    return this.url.searchParams.append(t, `like(all).{${n.join(",")}}`), this;
  }
  /**
   * Match only rows where `column` matches any of `patterns` case-sensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  likeAnyOf(t, n) {
    return this.url.searchParams.append(t, `like(any).{${n.join(",")}}`), this;
  }
  /**
   * Match only rows where `column` matches `pattern` case-insensitively.
   *
   * @param column - The column to filter on
   * @param pattern - The pattern to match with
   */
  ilike(t, n) {
    return this.url.searchParams.append(t, `ilike.${n}`), this;
  }
  /**
   * Match only rows where `column` matches all of `patterns` case-insensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  ilikeAllOf(t, n) {
    return this.url.searchParams.append(t, `ilike(all).{${n.join(",")}}`), this;
  }
  /**
   * Match only rows where `column` matches any of `patterns` case-insensitively.
   *
   * @param column - The column to filter on
   * @param patterns - The patterns to match with
   */
  ilikeAnyOf(t, n) {
    return this.url.searchParams.append(t, `ilike(any).{${n.join(",")}}`), this;
  }
  /**
   * Match only rows where `column` IS `value`.
   *
   * For non-boolean columns, this is only relevant for checking if the value of
   * `column` is NULL by setting `value` to `null`.
   *
   * For boolean columns, you can also set `value` to `true` or `false` and it
   * will behave the same way as `.eq()`.
   *
   * @param column - The column to filter on
   * @param value - The value to filter with
   */
  is(t, n) {
    return this.url.searchParams.append(t, `is.${n}`), this;
  }
  /**
   * Match only rows where `column` is included in the `values` array.
   *
   * @param column - The column to filter on
   * @param values - The values array to filter with
   */
  in(t, n) {
    const r = Array.from(new Set(n)).map((o) => typeof o == "string" && new RegExp("[,()]").test(o) ? `"${o}"` : `${o}`).join(",");
    return this.url.searchParams.append(t, `in.(${r})`), this;
  }
  /**
   * Only relevant for jsonb, array, and range columns. Match only rows where
   * `column` contains every element appearing in `value`.
   *
   * @param column - The jsonb, array, or range column to filter on
   * @param value - The jsonb, array, or range value to filter with
   */
  contains(t, n) {
    return typeof n == "string" ? this.url.searchParams.append(t, `cs.${n}`) : Array.isArray(n) ? this.url.searchParams.append(t, `cs.{${n.join(",")}}`) : this.url.searchParams.append(t, `cs.${JSON.stringify(n)}`), this;
  }
  /**
   * Only relevant for jsonb, array, and range columns. Match only rows where
   * every element appearing in `column` is contained by `value`.
   *
   * @param column - The jsonb, array, or range column to filter on
   * @param value - The jsonb, array, or range value to filter with
   */
  containedBy(t, n) {
    return typeof n == "string" ? this.url.searchParams.append(t, `cd.${n}`) : Array.isArray(n) ? this.url.searchParams.append(t, `cd.{${n.join(",")}}`) : this.url.searchParams.append(t, `cd.${JSON.stringify(n)}`), this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is greater than any element in `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeGt(t, n) {
    return this.url.searchParams.append(t, `sr.${n}`), this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is either contained in `range` or greater than any element in
   * `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeGte(t, n) {
    return this.url.searchParams.append(t, `nxl.${n}`), this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is less than any element in `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeLt(t, n) {
    return this.url.searchParams.append(t, `sl.${n}`), this;
  }
  /**
   * Only relevant for range columns. Match only rows where every element in
   * `column` is either contained in `range` or less than any element in
   * `range`.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeLte(t, n) {
    return this.url.searchParams.append(t, `nxr.${n}`), this;
  }
  /**
   * Only relevant for range columns. Match only rows where `column` is
   * mutually exclusive to `range` and there can be no element between the two
   * ranges.
   *
   * @param column - The range column to filter on
   * @param range - The range to filter with
   */
  rangeAdjacent(t, n) {
    return this.url.searchParams.append(t, `adj.${n}`), this;
  }
  /**
   * Only relevant for array and range columns. Match only rows where
   * `column` and `value` have an element in common.
   *
   * @param column - The array or range column to filter on
   * @param value - The array or range value to filter with
   */
  overlaps(t, n) {
    return typeof n == "string" ? this.url.searchParams.append(t, `ov.${n}`) : this.url.searchParams.append(t, `ov.{${n.join(",")}}`), this;
  }
  /**
   * Only relevant for text and tsvector columns. Match only rows where
   * `column` matches the query string in `query`.
   *
   * @param column - The text or tsvector column to filter on
   * @param query - The query text to match with
   * @param options - Named parameters
   * @param options.config - The text search configuration to use
   * @param options.type - Change how the `query` text is interpreted
   */
  textSearch(t, n, { config: r, type: o } = {}) {
    let s = "";
    o === "plain" ? s = "pl" : o === "phrase" ? s = "ph" : o === "websearch" && (s = "w");
    const a = r === void 0 ? "" : `(${r})`;
    return this.url.searchParams.append(t, `${s}fts${a}.${n}`), this;
  }
  /**
   * Match only rows where each column in `query` keys is equal to its
   * associated value. Shorthand for multiple `.eq()`s.
   *
   * @param query - The object to filter with, with column names as keys mapped
   * to their filter values
   */
  match(t) {
    return Object.entries(t).forEach(([n, r]) => {
      this.url.searchParams.append(n, `eq.${r}`);
    }), this;
  }
  /**
   * Match only rows which doesn't satisfy the filter.
   *
   * Unlike most filters, `opearator` and `value` are used as-is and need to
   * follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure they are properly sanitized.
   *
   * @param column - The column to filter on
   * @param operator - The operator to be negated to filter with, following
   * PostgREST syntax
   * @param value - The value to filter with, following PostgREST syntax
   */
  not(t, n, r) {
    return this.url.searchParams.append(t, `not.${n}.${r}`), this;
  }
  /**
   * Match only rows which satisfy at least one of the filters.
   *
   * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure it's properly sanitized.
   *
   * It's currently not possible to do an `.or()` filter across multiple tables.
   *
   * @param filters - The filters to use, following PostgREST syntax
   * @param options - Named parameters
   * @param options.referencedTable - Set this to filter on referenced tables
   * instead of the parent table
   * @param options.foreignTable - Deprecated, use `referencedTable` instead
   */
  or(t, { foreignTable: n, referencedTable: r = n } = {}) {
    const o = r ? `${r}.or` : "or";
    return this.url.searchParams.append(o, `(${t})`), this;
  }
  /**
   * Match only rows which satisfy the filter. This is an escape hatch - you
   * should use the specific filter methods wherever possible.
   *
   * Unlike most filters, `opearator` and `value` are used as-is and need to
   * follow [PostgREST
   * syntax](https://postgrest.org/en/stable/api.html#operators). You also need
   * to make sure they are properly sanitized.
   *
   * @param column - The column to filter on
   * @param operator - The operator to filter with, following PostgREST syntax
   * @param value - The value to filter with, following PostgREST syntax
   */
  filter(t, n, r) {
    return this.url.searchParams.append(t, `${n}.${r}`), this;
  }
};
  return e && e.__esModule ? e : { default: e };
};
  constructor(t, { headers: n = {}, schema: r, fetch: o }) {
    this.url = t, this.headers = new Headers(n), this.schema = r, this.fetch = o;
  }
  /**
   * Perform a SELECT query on the table or view.
   *
   * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`
   *
   * @param options - Named parameters
   *
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   *
   * @param options.count - Count algorithm to use to count rows in the table or view.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  select(t, n) {
    const { head: r = !1, count: o } = n ?? {}, s = r ? "HEAD" : "GET";
    let a = !1;
    const c = (t ?? "*").split("").map((f) => /\s/.test(f) && !a ? "" : (f === '"' && (a = !a), f)).join("");
      method: s,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: this.fetch
    });
  }
  /**
   * Perform an INSERT into the table or view.
   *
   * By default, inserted rows are not returned. To return it, chain the call
   * with `.select()`.
   *
   * @param values - The values to insert. Pass an object to insert a single row
   * or an array to insert multiple rows.
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count inserted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   *
   * @param options.defaultToNull - Make missing fields default to `null`.
   * Otherwise, use the default value for the column. Only applies for bulk
   * inserts.
   */
  insert(t, { count: n, defaultToNull: r = !0 } = {}) {
    var o;
    const s = "POST";
    if (n && this.headers.append("Prefer", `count=${n}`), r || this.headers.append("Prefer", "missing=default"), Array.isArray(t)) {
      const a = t.reduce((c, f) => c.concat(Object.keys(f)), []);
      if (a.length > 0) {
        const c = [...new Set(a)].map((f) => `"${f}"`);
        this.url.searchParams.set("columns", c.join(","));
      }
    }
      method: s,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: t,
      fetch: (o = this.fetch) !== null && o !== void 0 ? o : fetch
    });
  }
  /**
   * Perform an UPSERT on the table or view. Depending on the column(s) passed
   * to `onConflict`, `.upsert()` allows you to perform the equivalent of
   * `.insert()` if a row with the corresponding `onConflict` columns doesn't
   * exist, or if it does exist, perform an alternative action depending on
   * `ignoreDuplicates`.
   *
   * By default, upserted rows are not returned. To return it, chain the call
   * with `.select()`.
   *
   * @param values - The values to upsert with. Pass an object to upsert a
   * single row or an array to upsert multiple rows.
   *
   * @param options - Named parameters
   *
   * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how
   * duplicate rows are determined. Two rows are duplicates if all the
   * `onConflict` columns are equal.
   *
   * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If
   * `false`, duplicate rows are merged with existing rows.
   *
   * @param options.count - Count algorithm to use to count upserted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   *
   * @param options.defaultToNull - Make missing fields default to `null`.
   * Otherwise, use the default value for the column. This only applies when
   * inserting new rows, not when merging with existing rows under
   * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.
   */
  upsert(t, { onConflict: n, ignoreDuplicates: r = !1, count: o, defaultToNull: s = !0 } = {}) {
    var a;
    const c = "POST";
    if (this.headers.append("Prefer", `resolution=${r ? "ignore" : "merge"}-duplicates`), n !== void 0 && this.url.searchParams.set("on_conflict", n), o && this.headers.append("Prefer", `count=${o}`), s || this.headers.append("Prefer", "missing=default"), Array.isArray(t)) {
      if (f.length > 0) {
      }
    }
      method: c,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: t,
      fetch: (a = this.fetch) !== null && a !== void 0 ? a : fetch
    });
  }
  /**
   * Perform an UPDATE on the table or view.
   *
   * By default, updated rows are not returned. To return it, chain the call
   * with `.select()` after filters.
   *
   * @param values - The values to update with
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count updated rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  update(t, { count: n } = {}) {
    var r;
    const o = "PATCH";
      method: o,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      body: t,
      fetch: (r = this.fetch) !== null && r !== void 0 ? r : fetch
    });
  }
  /**
   * Perform a DELETE on the table or view.
   *
   * By default, deleted rows are not returned. To return it, chain the call
   * with `.select()` after filters.
   *
   * @param options - Named parameters
   *
   * @param options.count - Count algorithm to use to count deleted rows.
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  delete({ count: t } = {}) {
    var n;
    const r = "DELETE";
      method: r,
      url: this.url,
      headers: this.headers,
      schema: this.schema,
      fetch: (n = this.fetch) !== null && n !== void 0 ? n : fetch
    });
  }
};
  return e && e.__esModule ? e : { default: e };
};
  // TODO: Add back shouldThrowOnError once we figure out the typings
  /**
   * Creates a PostgREST client.
   *
   * @param url - URL of the PostgREST endpoint
   * @param options - Named parameters
   * @param options.headers - Custom headers
   * @param options.schema - Postgres schema to switch to
   * @param options.fetch - Custom fetch
   */
  constructor(t, { headers: n = {}, schema: r, fetch: o } = {}) {
    this.url = t, this.headers = new Headers(n), this.schemaName = r, this.fetch = o;
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(t) {
    const n = new URL(`${this.url}/${t}`);
      headers: new Headers(this.headers),
      schema: this.schemaName,
      fetch: this.fetch
    });
  }
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(t) {
      headers: this.headers,
      schema: t,
      fetch: this.fetch
    });
  }
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(t, n = {}, { head: r = !1, get: o = !1, count: s } = {}) {
    var a;
    let c;
    const f = new URL(`${this.url}/rpc/${t}`);
    const g = new Headers(this.headers);
      method: c,
      url: f,
      headers: g,
      schema: this.schemaName,
      fetch: (a = this.fetch) !== null && a !== void 0 ? a : fetch
    });
  }
};
  return e && e.__esModule ? e : { default: e };
};
};
const {
  static detectEnvironment() {
    var t;
    if (typeof WebSocket < "u")
      return { type: "native", constructor: WebSocket };
    if (typeof globalThis < "u" && typeof globalThis.WebSocket < "u")
      return { type: "native", constructor: globalThis.WebSocket };
    if (typeof global < "u" && typeof global.WebSocket < "u")
      return { type: "native", constructor: global.WebSocket };
    if (typeof globalThis < "u" && typeof globalThis.WebSocketPair < "u" && typeof globalThis.WebSocket > "u")
      return {
        type: "cloudflare",
        error: "Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.",
        workaround: "Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime."
      };
    if (typeof globalThis < "u" && globalThis.EdgeRuntime || typeof navigator < "u" && (!((t = navigator.userAgent) === null || t === void 0) && t.includes("Vercel-Edge")))
      return {
        type: "unsupported",
        error: "Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.",
        workaround: "Use serverless functions or a different deployment target for WebSocket functionality."
      };
    if (typeof process < "u") {
      const n = process.versions;
      if (n && n.node) {
        const r = n.node, o = parseInt(r.replace(/^v/, "").split(".")[0]);
        return o >= 22 ? typeof globalThis.WebSocket < "u" ? { type: "native", constructor: globalThis.WebSocket } : {
          type: "unsupported",
          error: `Node.js ${o} detected but native WebSocket not found.`,
          workaround: "Provide a WebSocket implementation via the transport option."
        } : {
          type: "unsupported",
          error: `Node.js ${o} detected without native WebSocket support.`,
          workaround: `For Node.js < 22, install "ws" package and provide it via the transport option:
import ws from "ws"
new RealtimeClient(url, { transport: ws })`
        };
      }
    }
    return {
      type: "unsupported",
      error: "Unknown JavaScript runtime without WebSocket support.",
      workaround: "Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation."
    };
  }
  static getWebSocketConstructor() {
    const t = this.detectEnvironment();
    if (t.constructor)
      return t.constructor;
    let n = t.error || "WebSocket not supported in this environment.";
    throw t.workaround && (n += `

Suggested solution: ${t.workaround}`), new Error(n);
  }
  static createWebSocket(t, n) {
    const r = this.getWebSocketConstructor();
    return new r(t, n);
  }
  static isWebSocketSupported() {
    try {
      const t = this.detectEnvironment();
      return t.type === "native" || t.type === "ws";
    } catch {
      return !1;
    }
  }
}
(function(e) {
  e[e.connecting = 0] = "connecting", e[e.open = 1] = "open", e[e.closing = 2] = "closing", e[e.closed = 3] = "closed";
(function(e) {
  e.closed = "closed", e.errored = "errored", e.joined = "joined", e.joining = "joining", e.leaving = "leaving";
(function(e) {
  e.close = "phx_close", e.error = "phx_error", e.join = "phx_join", e.reply = "phx_reply", e.leave = "phx_leave", e.access_token = "access_token";
(function(e) {
  e.websocket = "websocket";
(function(e) {
  e.Connecting = "connecting", e.Open = "open", e.Closing = "closing", e.Closed = "closed";
  constructor() {
    this.HEADER_LENGTH = 1;
  }
  decode(t, n) {
    return t.constructor === ArrayBuffer ? n(this._binaryDecode(t)) : n(typeof t == "string" ? JSON.parse(t) : {});
  }
  _binaryDecode(t) {
    const n = new DataView(t), r = new TextDecoder();
    return this._decodeBroadcast(t, n, r);
  }
  _decodeBroadcast(t, n, r) {
    const o = n.getUint8(1), s = n.getUint8(2);
    let a = this.HEADER_LENGTH + 2;
    const c = r.decode(t.slice(a, a + o));
    a = a + o;
    const f = r.decode(t.slice(a, a + s));
    a = a + s;
  }
}
  constructor(t, n) {
    this.callback = t, this.timerCalc = n, this.timer = void 0, this.tries = 0, this.callback = t, this.timerCalc = n;
  }
  reset() {
    this.tries = 0, clearTimeout(this.timer), this.timer = void 0;
  }
  // Cancels any previous scheduleTimeout and schedules callback
  scheduleTimeout() {
    clearTimeout(this.timer), this.timer = setTimeout(() => {
      this.tries = this.tries + 1, this.callback();
    }, this.timerCalc(this.tries + 1));
  }
}
(function(e) {
  e.abstime = "abstime", e.bool = "bool", e.date = "date", e.daterange = "daterange", e.float4 = "float4", e.float8 = "float8", e.int2 = "int2", e.int4 = "int4", e.int4range = "int4range", e.int8 = "int8", e.int8range = "int8range", e.json = "json", e.jsonb = "jsonb", e.money = "money", e.numeric = "numeric", e.oid = "oid", e.reltime = "reltime", e.text = "text", e.time = "time", e.timestamp = "timestamp", e.timestamptz = "timestamptz", e.timetz = "timetz", e.tsrange = "tsrange", e.tstzrange = "tstzrange";
  var r;
  const o = (r = n.skipTypes) !== null && r !== void 0 ? r : [];
  const o = t.find((c) => c.name === e), s = o == null ? void 0 : o.type, a = n[e];
  if (e.charAt(0) === "_") {
    const n = e.slice(1, e.length);
  }
  switch (e) {
    default:
  }
  switch (e) {
    case "t":
      return !0;
    case "f":
      return !1;
    default:
      return e;
  }
  if (typeof e == "string") {
    const t = parseFloat(e);
    if (!Number.isNaN(t))
      return t;
  }
  return e;
  if (typeof e == "string")
    try {
      return JSON.parse(e);
    } catch (t) {
      return console.log(`JSON parse error: ${t}`), e;
    }
  return e;
  if (typeof e != "string")
    return e;
  const n = e.length - 1, r = e[n];
  if (e[0] === "{" && r === "}") {
    let s;
    const a = e.slice(1, n);
    try {
      s = JSON.parse("[" + a + "]");
    } catch {
      s = a ? a.split(",") : [];
    }
  }
  return e;
  let t = e;
  return t = t.replace(/^ws/i, "http"), t = t.replace(/(\/socket\/websocket|\/socket|\/websocket)\/?$/i, ""), t.replace(/\/+$/, "") + "/api/broadcast";
};
  /**
   * Initializes the Push
   *
   * @param channel The Channel
   * @param event The event, for example `"phx_join"`
   * @param payload The payload, for example `{user_id: 123}`
   * @param timeout The push timeout in milliseconds
   */
    this.channel = t, this.event = n, this.payload = r, this.timeout = o, this.sent = !1, this.timeoutTimer = void 0, this.ref = "", this.receivedResp = null, this.recHooks = [], this.refEvent = null;
  }
  resend(t) {
    this.timeout = t, this._cancelRefEvent(), this.ref = "", this.refEvent = null, this.receivedResp = null, this.sent = !1, this.send();
  }
  send() {
    this._hasReceived("timeout") || (this.startTimeout(), this.sent = !0, this.channel.socket.push({
      topic: this.channel.topic,
      event: this.event,
      payload: this.payload,
      ref: this.ref,
      join_ref: this.channel._joinRef()
    }));
  }
  updatePayload(t) {
    this.payload = Object.assign(Object.assign({}, this.payload), t);
  }
  receive(t, n) {
    var r;
    return this._hasReceived(t) && n((r = this.receivedResp) === null || r === void 0 ? void 0 : r.response), this.recHooks.push({ status: t, callback: n }), this;
  }
  startTimeout() {
    if (this.timeoutTimer)
      return;
    this.ref = this.channel.socket._makeRef(), this.refEvent = this.channel._replyEventName(this.ref);
    const t = (n) => {
      this._cancelRefEvent(), this._cancelTimeout(), this.receivedResp = n, this._matchReceive(n);
    };
    this.channel._on(this.refEvent, {}, t), this.timeoutTimer = setTimeout(() => {
      this.trigger("timeout", {});
    }, this.timeout);
  }
  trigger(t, n) {
    this.refEvent && this.channel._trigger(this.refEvent, { status: t, response: n });
  }
  destroy() {
    this._cancelRefEvent(), this._cancelTimeout();
  }
  _cancelRefEvent() {
    this.refEvent && this.channel._off(this.refEvent, {});
  }
  _cancelTimeout() {
    clearTimeout(this.timeoutTimer), this.timeoutTimer = void 0;
  }
  _matchReceive({ status: t, response: n }) {
    this.recHooks.filter((r) => r.status === t).forEach((r) => r.callback(n));
  }
  _hasReceived(t) {
    return this.receivedResp && this.receivedResp.status === t;
  }
}
(function(e) {
  e.SYNC = "sync", e.JOIN = "join", e.LEAVE = "leave";
  /**
   * Initializes the Presence.
   *
   * @param channel - The RealtimeChannel
   * @param opts - The options,
   *        for example `{events: {state: 'state', diff: 'diff'}}`
   */
  constructor(t, n) {
    this.channel = t, this.state = {}, this.pendingDiffs = [], this.joinRef = null, this.enabled = !1, this.caller = {
      onJoin: () => {
      },
      onLeave: () => {
      },
      onSync: () => {
      }
    };
    const r = (n == null ? void 0 : n.events) || {
      state: "presence_state",
      diff: "presence_diff"
    };
    this.channel._on(r.state, {}, (o) => {
      const { onJoin: s, onLeave: a, onSync: c } = this.caller;
      }), this.pendingDiffs = [], c();
    }), this.channel._on(r.diff, {}, (o) => {
      const { onJoin: s, onLeave: a, onSync: c } = this.caller;
    }), this.onJoin((o, s, a) => {
      this.channel._trigger("presence", {
        event: "join",
        key: o,
        currentPresences: s,
        newPresences: a
      });
    }), this.onLeave((o, s, a) => {
      this.channel._trigger("presence", {
        event: "leave",
        key: o,
        currentPresences: s,
        leftPresences: a
      });
    }), this.onSync(() => {
      this.channel._trigger("presence", { event: "sync" });
    });
  }
  /**
   * Used to sync the list of presences on the server with the
   * client's state.
   *
   * An optional `onJoin` and `onLeave` callback can be provided to
   * react to changes in the client's local presences across
   * disconnects and reconnects with the server.
   *
   * @internal
   */
  static syncState(t, n, r, o) {
    const s = this.cloneDeep(t), a = this.transformState(n), c = {}, f = {};
      } else
    }), this.syncDiff(s, { joins: c, leaves: f }, r, o);
  }
  /**
   * Used to sync a diff of presence join and leave events from the
   * server, as they happen.
   *
   * Like `syncState`, `syncDiff` accepts optional `onJoin` and
   * `onLeave` callbacks to react to a user joining or leaving from a
   * device.
   *
   * @internal
   */
  static syncDiff(t, n, r, o) {
    const { joins: s, leaves: a } = {
      joins: this.transformState(n.joins),
      leaves: this.transformState(n.leaves)
    };
    return r || (r = () => {
    }), o || (o = () => {
    }), this.map(s, (c, f) => {
      if (t[c] = this.cloneDeep(f), g.length > 0) {
        t[c].unshift(...w);
      }
      r(c, g, f);
    }), this.map(a, (c, f) => {
        return;
    }), t;
  }
  /** @internal */
  static map(t, n) {
    return Object.getOwnPropertyNames(t).map((r) => n(r, t[r]));
  }
  /**
   * Remove 'metas' key
   * Change 'phx_ref' to 'presence_ref'
   * Remove 'phx_ref' and 'phx_ref_prev'
   *
   * @example
   * // returns {
   *  abc123: [
   *    { presence_ref: '2', user_id: 1 },
   *    { presence_ref: '3', user_id: 2 }
   *  ]
   * }
   * RealtimePresence.transformState({
   *  abc123: {
   *    metas: [
   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },
   *      { phx_ref: '3', user_id: 2 }
   *    ]
   *  }
   * })
   *
   * @internal
   */
  static transformState(t) {
    return t = this.cloneDeep(t), Object.getOwnPropertyNames(t).reduce((n, r) => {
      const o = t[r];
      return "metas" in o ? n[r] = o.metas.map((s) => (s.presence_ref = s.phx_ref, delete s.phx_ref, delete s.phx_ref_prev, s)) : n[r] = o, n;
    }, {});
  }
  /** @internal */
  static cloneDeep(t) {
    return JSON.parse(JSON.stringify(t));
  }
  /** @internal */
  onJoin(t) {
    this.caller.onJoin = t;
  }
  /** @internal */
  onLeave(t) {
    this.caller.onLeave = t;
  }
  /** @internal */
  onSync(t) {
    this.caller.onSync = t;
  }
  /** @internal */
  inPendingSyncState() {
    return !this.joinRef || this.joinRef !== this.channel._joinRef();
  }
}
(function(e) {
  e.ALL = "*", e.INSERT = "INSERT", e.UPDATE = "UPDATE", e.DELETE = "DELETE";
(function(e) {
  e.BROADCAST = "broadcast", e.PRESENCE = "presence", e.POSTGRES_CHANGES = "postgres_changes", e.SYSTEM = "system";
(function(e) {
  e.SUBSCRIBED = "SUBSCRIBED", e.TIMED_OUT = "TIMED_OUT", e.CLOSED = "CLOSED", e.CHANNEL_ERROR = "CHANNEL_ERROR";
  constructor(t, n = { config: {} }, r) {
    var o, s;
      broadcast: { ack: !1, self: !1 },
      presence: { key: "", enabled: !1 },
      private: !1
    }), this._onClose(() => {
    }), this._onError((a) => {
    }), this.joinPush.receive("timeout", () => {
    }), this.joinPush.receive("error", (a) => {
      this._trigger(this._replyEventName(c), a);
      throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`;
  }
  /** Subscribe registers your client with the server */
  subscribe(t, n = this.timeout) {
    var r, o, s;
        broadcast: a,
        presence: Object.assign(Object.assign({}, c), { enabled: g }),
        private: f
      };
        var T;
        if (this.socket.setAuth(), C === void 0) {
          return;
        } else {
          for (let I = 0; I < O; I++) {
            else {
              return;
            }
          }
          return;
        }
      }).receive("error", (C) => {
      }).receive("timeout", () => {
      });
    }
    return this;
  }
  presenceState() {
    return this.presence.state;
  }
  async track(t, n = {}) {
    return await this.send({
      type: "presence",
      event: "track",
      payload: t
    }, n.timeout || this.timeout);
  }
  async untrack(t = {}) {
    return await this.send({
      type: "presence",
      event: "untrack"
    }, t);
  }
  on(t, n, r) {
  }
  /**
   * Sends a message into the channel.
   *
   * @param args Arguments to send to channel
   * @param args.type The type of event to send
   * @param args.event The name of the event being sent
   * @param args.payload Payload to be sent
   * @param opts Options to be used during the send process
   */
  async send(t, n = {}) {
    var r, o;
    if (!this._canPush() && t.type === "broadcast") {
      const { event: s, payload: a } = t, f = {
        method: "POST",
        headers: {
          Authorization: this.socket.accessTokenValue ? `Bearer ${this.socket.accessTokenValue}` : "",
          apikey: this.socket.apiKey ? this.socket.apiKey : "",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          messages: [
            {
              topic: this.subTopic,
              event: s,
              payload: a,
              private: this.private
            }
          ]
        })
      };
      try {
      }
    } else
      return new Promise((s) => {
        var a, c, f;
      });
  }
  updateJoinPayload(t) {
    this.joinPush.updatePayload(t);
  }
  /**
   * Leaves the channel.
   *
   * Unsubscribes from server events, and instructs channel to terminate on server.
   * Triggers onClose() hooks.
   *
   * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:
   * channel.unsubscribe().receive("ok", () => alert("left!") )
   */
  unsubscribe(t = this.timeout) {
    const n = () => {
    };
    this.joinPush.destroy();
    let r = null;
    return new Promise((o) => {
        n(), o("ok");
      }).receive("timeout", () => {
        n(), o("timed out");
      }).receive("error", () => {
        o("error");
      }), r.send(), this._canPush() || r.trigger("ok", {});
    }).finally(() => {
      r == null || r.destroy();
    });
  }
  /**
   * Teardown the channel.
   *
   * Destroys and stops related timers.
   */
  teardown() {
  }
  /** @internal */
  async _fetchWithTimeout(t, n, r) {
    const o = new AbortController(), s = setTimeout(() => o.abort(), r), a = await this.socket.fetch(t, Object.assign(Object.assign({}, n), { signal: o.signal }));
    return clearTimeout(s), a;
  }
  /** @internal */
  _push(t, n, r = this.timeout) {
    if (!this.joinedOnce)
      throw `tried to push '${t}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;
    return this._canPush() ? o.send() : this._addToPushBuffer(o), o;
  }
  /** @internal */
  _addToPushBuffer(t) {
      const n = this.pushBuffer.shift();
      n && (n.destroy(), this.socket.log("channel", `discarded push due to buffer overflow: ${n.event}`, n.payload));
    }
  }
  /**
   * Overridable message hook
   *
   * Receives all events for specialized message handling before dispatching to the channel callbacks.
   * Must return the payload, modified or unmodified.
   *
   * @internal
   */
  _onMessage(t, n, r) {
    return n;
  }
  /** @internal */
  _isMember(t) {
    return this.topic === t;
  }
  /** @internal */
  _joinRef() {
    return this.joinPush.ref;
  }
  /** @internal */
  _trigger(t, n, r) {
    var o, s;
      return;
    let w = this._onMessage(a, n, r);
    if (n && !w)
      throw "channel onMessage callbacks must return the payload, modified or unmodified";
    ["insert", "update", "delete"].includes(a) ? (o = this.bindings.postgres_changes) === null || o === void 0 || o.filter((C) => {
      var T, E, O;
      return ((T = C.filter) === null || T === void 0 ? void 0 : T.event) === "*" || ((O = (E = C.filter) === null || E === void 0 ? void 0 : E.event) === null || O === void 0 ? void 0 : O.toLocaleLowerCase()) === a;
    }).map((C) => C.callback(w, r)) : (s = this.bindings[a]) === null || s === void 0 || s.filter((C) => {
      if (["broadcast", "presence", "postgres_changes"].includes(a))
        if ("id" in C) {
        } else {
        }
      else
        return C.type.toLocaleLowerCase() === a;
    }).map((C) => {
      if (typeof w == "object" && "ids" in w) {
        w = Object.assign(Object.assign({}, {
          schema: E,
          table: O,
          eventType: I,
          new: {},
          old: {},
          errors: M
        }), this._getPayloadRecords(T));
      }
      C.callback(w, r);
    });
  }
  /** @internal */
  _isClosed() {
  }
  /** @internal */
  _isJoined() {
  }
  /** @internal */
  _isJoining() {
  }
  /** @internal */
  _isLeaving() {
  }
  /** @internal */
  _replyEventName(t) {
    return `chan_reply_${t}`;
  }
  /** @internal */
  _on(t, n, r) {
    const o = t.toLocaleLowerCase(), s = {
      type: o,
      filter: n,
      callback: r
    };
    return this.bindings[o] ? this.bindings[o].push(s) : this.bindings[o] = [s], this;
  }
  /** @internal */
  _off(t, n) {
    const r = t.toLocaleLowerCase();
    return this.bindings[r] && (this.bindings[r] = this.bindings[r].filter((o) => {
      var s;
    })), this;
  }
  /** @internal */
  static isEqual(t, n) {
    if (Object.keys(t).length !== Object.keys(n).length)
      return !1;
    for (const r in t)
      if (t[r] !== n[r])
        return !1;
    return !0;
  }
  /** @internal */
  _rejoinUntilConnected() {
    this.rejoinTimer.scheduleTimeout(), this.socket.isConnected() && this._rejoin();
  }
  /**
   * Registers a callback that will be executed when the channel closes.
   *
   * @internal
   */
  _onClose(t) {
  }
  /**
   * Registers a callback that will be executed when the channel encounteres an error.
   *
   * @internal
   */
  _onError(t) {
  }
  /**
   * Returns `true` if the socket is connected and the channel has been joined.
   *
   * @internal
   */
  _canPush() {
    return this.socket.isConnected() && this._isJoined();
  }
  /** @internal */
  _rejoin(t = this.timeout) {
  }
  /** @internal */
  _getPayloadRecords(t) {
    const n = {
      new: {},
      old: {}
    };
  }
}
  HEARTBEAT_INTERVAL: 25e3,
  RECONNECT_DELAY: 10,
  HEARTBEAT_TIMEOUT_FALLBACK: 100
  addEventListener("message", (e) => {
    if (e.data.event === "start") {
      setInterval(() => postMessage({ event: "keepAlive" }), e.data.interval);
    }
  });`;
  /**
   * Initializes the Socket.
   *
   * @param endPoint The string WebSocket endpoint, ie, "ws://example.com/socket", "wss://example.com", "/socket" (inherited host & protocol)
   * @param httpEndpoint The string HTTP endpoint, ie, "https://example.com", "/" (inherited host & protocol)
   * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation
   * @param options.timeout The default timeout in milliseconds to trigger push timeouts.
   * @param options.params The optional params to pass when connecting.
   * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.
   * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.
   * @param options.heartbeatCallback The optional function to handle heartbeat status.
   * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }
   * @param options.logLevel Sets the log level for Realtime
   * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))
   * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.
   * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.
   * @param options.worker Use Web Worker to set a side flow. Defaults to false.
   * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.
   */
  constructor(t, n) {
    var r;
      open: [],
      close: [],
      error: [],
      message: []
    }, this.accessToken = null, this._connectionState = "disconnected", this._wasManualDisconnect = !1, this._authPromise = null, this._resolveFetch = (o) => {
      let s;
        throw new Error(`Failed to load @supabase/node-fetch: ${c.message}. This is required for HTTP requests in Node.js environments without native fetch.`);
      }) : s = fetch, (...a) => s(...a);
    }, !(!((r = n == null ? void 0 : n.params) === null || r === void 0) && r.apikey))
      throw new Error("API key is required to connect to Realtime");
  }
  /**
   * Connects the socket, unless already connected.
   */
  connect() {
    if (!(this.isConnecting() || this.isDisconnecting() || this.conn !== null && this.isConnected())) {
      if (this._setConnectionState("connecting"), this._setAuthSafely("connect"), this.transport)
        this.conn = new this.transport(this.endpointURL());
      else
        try {
        } catch (t) {
          this._setConnectionState("disconnected");
          const n = t.message;
          throw n.includes("Node.js") ? new Error(`${n}

To use Realtime in Node.js, you need to provide a WebSocket implementation:

Option 1: Use Node.js 22+ which has native WebSocket support
Option 2: Install and provide the "ws" package:

  npm install ws

  import ws from "ws"
  const client = new RealtimeClient(url, {
    ...options,
    transport: ws
  })`) : new Error(`WebSocket not available: ${n}`);
        }
      this._setupConnectionHandlers();
    }
  }
  /**
   * Returns the URL of the websocket.
   * @returns string The URL of the websocket.
   */
  endpointURL() {
  }
  /**
   * Disconnects the socket.
   *
   * @param code A numeric status code to send on disconnect.
   * @param reason A custom reason for the disconnect.
   */
  disconnect(t, n) {
    if (!this.isDisconnecting())
      if (this._setConnectionState("disconnecting", !0), this.conn) {
        const r = setTimeout(() => {
          this._setConnectionState("disconnected");
        }, 100);
        this.conn.onclose = () => {
          clearTimeout(r), this._setConnectionState("disconnected");
        }, t ? this.conn.close(t, n ?? "") : this.conn.close(), this._teardownConnection();
      } else
        this._setConnectionState("disconnected");
  }
  /**
   * Returns all created channels
   */
  getChannels() {
    return this.channels;
  }
  /**
   * Unsubscribes and removes a single channel
   * @param channel A RealtimeChannel instance
   */
  async removeChannel(t) {
    const n = await t.unsubscribe();
    return this.channels.length === 0 && this.disconnect(), n;
  }
  /**
   * Unsubscribes and removes all channels
   */
  async removeAllChannels() {
    const t = await Promise.all(this.channels.map((n) => n.unsubscribe()));
    return this.channels = [], this.disconnect(), t;
  }
  /**
   * Logs the message.
   *
   * For customized logging, `this.logger` can be overridden.
   */
  log(t, n, r) {
    this.logger(t, n, r);
  }
  /**
   * Returns the current state of the socket.
   */
  connectionState() {
    switch (this.conn && this.conn.readyState) {
      default:
    }
  }
  /**
   * Returns `true` is the connection is open.
   */
  isConnected() {
  }
  /**
   * Returns `true` if the connection is currently connecting.
   */
  isConnecting() {
    return this._connectionState === "connecting";
  }
  /**
   * Returns `true` if the connection is currently disconnecting.
   */
  isDisconnecting() {
    return this._connectionState === "disconnecting";
  }
  channel(t, n = { config: {} }) {
    const r = `realtime:${t}`, o = this.getChannels().find((s) => s.topic === r);
    if (o)
      return o;
    {
      return this.channels.push(s), s;
    }
  }
  /**
   * Push out a message if the socket is connected.
   *
   * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.
   */
  push(t) {
    const { topic: n, event: r, payload: o, ref: s } = t, a = () => {
      this.encode(t, (c) => {
        var f;
        (f = this.conn) === null || f === void 0 || f.send(c);
      });
    };
    this.log("push", `${n} ${r} (${s})`, o), this.isConnected() ? a() : this.sendBuffer.push(a);
  }
  /**
   * Sets the JWT access token used for channel subscription authorization and Realtime RLS.
   *
   * If param is null it will use the `accessToken` callback function or the token set on the client.
   *
   * On callback used, it will set the value of the token internal to the client.
   *
   * @param token A JWT string to override the token set on the client.
   */
  async setAuth(t = null) {
    this._authPromise = this._performAuth(t);
    try {
      await this._authPromise;
    } finally {
      this._authPromise = null;
    }
  }
  /**
   * Sends a heartbeat message if the socket is connected.
   */
  async sendHeartbeat() {
    var t;
    if (!this.isConnected()) {
      try {
        this.heartbeatCallback("disconnected");
      } catch (n) {
        this.log("error", "error in heartbeat callback", n);
      }
      return;
    }
    if (this.pendingHeartbeatRef) {
      this.pendingHeartbeatRef = null, this.log("transport", "heartbeat timeout. Attempting to re-establish connection");
      try {
        this.heartbeatCallback("timeout");
      } catch (n) {
        this.log("error", "error in heartbeat callback", n);
      }
        var n;
        this.isConnected() || (n = this.reconnectTimer) === null || n === void 0 || n.scheduleTimeout();
      return;
    }
    this.pendingHeartbeatRef = this._makeRef(), this.push({
      topic: "phoenix",
      event: "heartbeat",
      payload: {},
      ref: this.pendingHeartbeatRef
    });
    try {
      this.heartbeatCallback("sent");
    } catch (n) {
      this.log("error", "error in heartbeat callback", n);
    }
    this._setAuthSafely("heartbeat");
  }
  onHeartbeat(t) {
    this.heartbeatCallback = t;
  }
  /**
   * Flushes send buffer
   */
  flushSendBuffer() {
    this.isConnected() && this.sendBuffer.length > 0 && (this.sendBuffer.forEach((t) => t()), this.sendBuffer = []);
  }
  /**
   * Return the next message ref, accounting for overflows
   *
   * @internal
   */
  _makeRef() {
    let t = this.ref + 1;
    return t === this.ref ? this.ref = 0 : this.ref = t, this.ref.toString();
  }
  /**
   * Unsubscribe from channels with the specified topic.
   *
   * @internal
   */
  _leaveOpenTopic(t) {
    let n = this.channels.find((r) => r.topic === t && (r._isJoined() || r._isJoining()));
    n && (this.log("transport", `leaving duplicate topic "${t}"`), n.unsubscribe());
  }
  /**
   * Removes a subscription from the socket.
   *
   * @param channel An open subscription.
   *
   * @internal
   */
  _remove(t) {
    this.channels = this.channels.filter((n) => n.topic !== t.topic);
  }
  /** @internal */
  _onConnMessage(t) {
    this.decode(t.data, (n) => {
      if (n.topic === "phoenix" && n.event === "phx_reply")
        try {
          this.heartbeatCallback(n.payload.status === "ok" ? "ok" : "error");
        }
      n.ref && n.ref === this.pendingHeartbeatRef && (this.pendingHeartbeatRef = null);
      const { topic: r, event: o, payload: s, ref: a } = n, c = a ? `(${a})` : "", f = s.status || "";
    });
  }
  /**
   * Clear specific timer
   * @internal
   */
  _clearTimer(t) {
    var n;
    t === "heartbeat" && this.heartbeatTimer ? (clearInterval(this.heartbeatTimer), this.heartbeatTimer = void 0) : t === "reconnect" && ((n = this.reconnectTimer) === null || n === void 0 || n.reset());
  }
  /**
   * Clear all timers
   * @internal
   */
  _clearAllTimers() {
    this._clearTimer("heartbeat"), this._clearTimer("reconnect");
  }
  /**
   * Setup connection handlers for WebSocket events
   * @internal
   */
  _setupConnectionHandlers() {
    this.conn && ("binaryType" in this.conn && (this.conn.binaryType = "arraybuffer"), this.conn.onopen = () => this._onConnOpen(), this.conn.onerror = (t) => this._onConnError(t), this.conn.onmessage = (t) => this._onConnMessage(t), this.conn.onclose = (t) => this._onConnClose(t));
  }
  /**
   * Teardown connection and cleanup resources
   * @internal
   */
  _teardownConnection() {
    this.conn && (this.conn.onopen = null, this.conn.onerror = null, this.conn.onmessage = null, this.conn.onclose = null, this.conn = null), this._clearAllTimers(), this.channels.forEach((t) => t.teardown());
  }
  /** @internal */
  _onConnOpen() {
    this._setConnectionState("connected"), this.log("transport", `connected to ${this.endpointURL()}`), this.flushSendBuffer(), this._clearTimer("reconnect"), this.worker ? this.workerRef || this._startWorkerHeartbeat() : this._startHeartbeat(), this._triggerStateCallbacks("open");
  }
  /** @internal */
  _startHeartbeat() {
    this.heartbeatTimer && clearInterval(this.heartbeatTimer), this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);
  }
  /** @internal */
  _startWorkerHeartbeat() {
    this.workerUrl ? this.log("worker", `starting worker for from ${this.workerUrl}`) : this.log("worker", "starting default worker");
    const t = this._workerObjectUrl(this.workerUrl);
    this.workerRef = new Worker(t), this.workerRef.onerror = (n) => {
      this.log("worker", "worker error", n.message), this.workerRef.terminate();
    }, this.workerRef.onmessage = (n) => {
      n.data.event === "keepAlive" && this.sendHeartbeat();
    }, this.workerRef.postMessage({
      event: "start",
      interval: this.heartbeatIntervalMs
    });
  }
  /** @internal */
  _onConnClose(t) {
    var n;
    this._setConnectionState("disconnected"), this.log("transport", "close", t), this._triggerChanError(), this._clearTimer("heartbeat"), this._wasManualDisconnect || (n = this.reconnectTimer) === null || n === void 0 || n.scheduleTimeout(), this._triggerStateCallbacks("close", t);
  }
  /** @internal */
  _onConnError(t) {
    this._setConnectionState("disconnected"), this.log("transport", `${t}`), this._triggerChanError(), this._triggerStateCallbacks("error", t);
  }
  /** @internal */
  _triggerChanError() {
  }
  /** @internal */
  _appendParams(t, n) {
    if (Object.keys(n).length === 0)
      return t;
    const r = t.match(/\?/) ? "&" : "?", o = new URLSearchParams(n);
    return `${t}${r}${o}`;
  }
  _workerObjectUrl(t) {
    let n;
    if (t)
      n = t;
    else {
      n = URL.createObjectURL(r);
    }
    return n;
  }
  /**
   * Set connection state with proper state management
   * @internal
   */
  _setConnectionState(t, n = !1) {
    this._connectionState = t, t === "connecting" ? this._wasManualDisconnect = !1 : t === "disconnecting" && (this._wasManualDisconnect = n);
  }
  /**
   * Perform the actual auth operation
   * @internal
   */
  async _performAuth(t = null) {
    let n;
    t ? n = t : this.accessToken ? n = await this.accessToken() : n = this.accessTokenValue, this.accessTokenValue != n && (this.accessTokenValue = n, this.channels.forEach((r) => {
      const o = {
        access_token: n,
      };
        access_token: n
      });
    }));
  }
  /**
   * Wait for any in-flight auth operations to complete
   * @internal
   */
  async _waitForAuthIfNeeded() {
    this._authPromise && await this._authPromise;
  }
  /**
   * Safely call setAuth with standardized error handling
   * @internal
   */
  _setAuthSafely(t = "general") {
    this.setAuth().catch((n) => {
      this.log("error", `error setting auth in ${t}`, n);
    });
  }
  /**
   * Trigger state change callbacks with proper error handling
   * @internal
   */
  _triggerStateCallbacks(t, n) {
    try {
      this.stateChangeCallbacks[t].forEach((r) => {
        try {
          r(n);
        } catch (o) {
          this.log("error", `error in ${t} callback`, o);
        }
      });
    } catch (r) {
      this.log("error", `error triggering ${t} callbacks`, r);
    }
  }
  /**
   * Setup reconnection timer with proper configuration
   * @internal
   */
  _setupReconnectionTimer() {
      setTimeout(async () => {
        await this._waitForAuthIfNeeded(), this.isConnected() || this.connect();
    }, this.reconnectAfterMs);
  }
  /**
   * Initialize client options with defaults
   * @internal
   */
  _initializeOptions(t) {
      if (typeof window < "u" && !window.Worker)
        throw new Error("Web Worker is not supported");
      this.workerUrl = t == null ? void 0 : t.workerUrl;
    }
  }
}
  constructor(t) {
    super(t), this.__isStorageError = !0, this.name = "StorageError";
  }
}
  return typeof e == "object" && e !== null && "__isStorageError" in e;
}
  constructor(t, n, r) {
    super(t), this.name = "StorageApiError", this.status = n, this.statusCode = r;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      statusCode: this.statusCode
    };
  }
}
  constructor(t, n) {
    super(t), this.name = "StorageUnknownError", this.originalError = n;
  }
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  let t;
  if (Array.isArray(e))
  if (typeof e == "function" || e !== Object(e))
    return e;
  const t = {};
  return Object.entries(e).forEach(([n, r]) => {
    const o = n.replace(/([-_][a-z])/gi, (s) => s.toUpperCase().replace(/[-_]/g, ""));
  }), t;
  if (typeof e != "object" || e === null)
    return !1;
  const t = Object.getPrototypeOf(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
};
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  e instanceof r && !(n != null && n.noResolveJson) ? e.json().then((o) => {
    const s = e.status || 500, a = (o == null ? void 0 : o.statusCode) || s + "";
  }).catch((o) => {
  const o = { method: e, headers: (t == null ? void 0 : t.headers) || {} };
};
    return new Promise((a, c) => {
        if (!f.ok)
          throw f;
        return r != null && r.noResolveJson ? f : f.json();
    });
  });
}
  });
}
  });
}
  });
}
  });
}
  });
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  constructor(t, n) {
    this.downloadFn = t, this.shouldThrowOnError = n;
  }
  then(t, n) {
    return this.execute().then(t, n);
  }
  execute() {
      try {
        return {
          data: (yield this.downloadFn()).body,
          error: null
        };
      } catch (t) {
        if (this.shouldThrowOnError)
          throw t;
          return { data: null, error: t };
        throw t;
      }
    });
  }
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  constructor(t, n) {
    this.downloadFn = t, this.shouldThrowOnError = n;
  }
  asStream() {
  }
  then(t, n) {
    return this.execute().then(t, n);
  }
  execute() {
      try {
        return {
          data: yield (yield this.downloadFn()).blob(),
          error: null
        };
      } catch (t) {
        if (this.shouldThrowOnError)
          throw t;
          return { data: null, error: t };
        throw t;
      }
    });
  }
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  limit: 100,
  offset: 0,
  sortBy: {
    column: "name",
    order: "asc"
  }
  cacheControl: "3600",
  contentType: "text/plain;charset=UTF-8",
  upsert: !1
};
  constructor(t, n = {}, r, o) {
  }
  /**
   * Enable throwing errors instead of returning them.
   */
  throwOnError() {
    return this.shouldThrowOnError = !0, this;
  }
  /**
   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.
   *
   * @param method HTTP method.
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadOrUpdate(t, n, r, o) {
      try {
        let s;
        let c = Object.assign(Object.assign({}, this.headers), t === "POST" && { "x-upsert": String(a.upsert) });
        const f = a.metadata;
        typeof Blob < "u" && r instanceof Blob ? (s = new FormData(), s.append("cacheControl", a.cacheControl), f && s.append("metadata", this.encodeMetadata(f)), s.append("", r)) : typeof FormData < "u" && r instanceof FormData ? (s = r, s.append("cacheControl", a.cacheControl), f && s.append("metadata", this.encodeMetadata(f))) : (s = r, c["cache-control"] = `max-age=${a.cacheControl}`, c["content-type"] = a.contentType, f && (c["x-metadata"] = this.toBase64(this.encodeMetadata(f)))), o != null && o.headers && (c = Object.assign(Object.assign({}, c), o.headers));
        return {
          error: null
        };
      } catch (s) {
        if (this.shouldThrowOnError)
          throw s;
          return { data: null, error: s };
        throw s;
      }
    });
  }
  /**
   * Uploads a file to an existing bucket.
   *
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  upload(t, n, r) {
      return this.uploadOrUpdate("POST", t, n, r);
    });
  }
  /**
   * Upload a file with a token generated from `createSignedUploadUrl`.
   * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.
   * @param token The token generated from `createSignedUploadUrl`
   * @param fileBody The body of the file to be stored in the bucket.
   */
  uploadToSignedUrl(t, n, r, o) {
      const s = this._removeEmptyFolders(t), a = this._getFinalPath(s), c = new URL(this.url + `/object/upload/sign/${a}`);
      c.searchParams.set("token", n);
      try {
        let f;
        return {
          error: null
        };
      } catch (f) {
        if (this.shouldThrowOnError)
          throw f;
          return { data: null, error: f };
        throw f;
      }
    });
  }
  /**
   * Creates a signed upload URL.
   * Signed upload URLs can be used to upload files to the bucket without further authentication.
   * They are valid for 2 hours.
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param options.upsert If set to true, allows the file to be overwritten if it already exists.
   */
  createSignedUploadUrl(t, n) {
      try {
        let r = this._getFinalPath(t);
        const o = Object.assign({}, this.headers);
        n != null && n.upsert && (o["x-upsert"] = "true");
        if (!c)
        return { data: { signedUrl: a.toString(), path: t, token: c }, error: null };
      } catch (r) {
        if (this.shouldThrowOnError)
          throw r;
          return { data: null, error: r };
        throw r;
      }
    });
  }
  /**
   * Replaces an existing file at the specified path with a new one.
   *
   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.
   * @param fileBody The body of the file to be stored in the bucket.
   */
  update(t, n, r) {
      return this.uploadOrUpdate("PUT", t, n, r);
    });
  }
  /**
   * Moves an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.
   * @param options The destination options.
   */
  move(t, n, r) {
      try {
          bucketId: this.bucketId,
          sourceKey: t,
          destinationKey: n,
          destinationBucket: r == null ? void 0 : r.destinationBucket
        }, { headers: this.headers }), error: null };
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * Copies an existing file to a new path in the same bucket.
   *
   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.
   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.
   * @param options The destination options.
   */
  copy(t, n, r) {
      try {
          bucketId: this.bucketId,
          sourceKey: t,
          destinationKey: n,
          destinationBucket: r == null ? void 0 : r.destinationBucket
        }, { headers: this.headers })).Key }, error: null };
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param path The file path, including the current file name. For example `folder/image.png`.
   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  createSignedUrl(t, n, r) {
      try {
        const a = r != null && r.download ? `&download=${r.download === !0 ? "" : r.download}` : "";
        return s = { signedUrl: encodeURI(`${this.url}${s.signedURL}${a}`) }, { data: s, error: null };
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.
   *
   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.
   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.
   * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   */
  createSignedUrls(t, n, r) {
      try {
        return {
          data: o.map((a) => Object.assign(Object.assign({}, a), { signedUrl: a.signedURL ? encodeURI(`${this.url}${a.signedURL}${s}`) : null })),
          error: null
        };
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.
   *
   * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.
   * @param options.transform Transform the asset before serving it to the client.
   */
  download(t, n) {
      headers: this.headers,
      noResolveJson: !0
    });
  }
  /**
   * Retrieves the details of an existing file.
   * @param path
   */
  info(t) {
      const n = this._getFinalPath(t);
      try {
          headers: this.headers
        });
      } catch (r) {
        if (this.shouldThrowOnError)
          throw r;
          return { data: null, error: r };
        throw r;
      }
    });
  }
  /**
   * Checks the existence of a file.
   * @param path
   */
  exists(t) {
      const n = this._getFinalPath(t);
      try {
          headers: this.headers
        }), { data: !0, error: null };
      } catch (r) {
        if (this.shouldThrowOnError)
          throw r;
          const o = r.originalError;
          if ([400, 404].includes(o == null ? void 0 : o.status))
            return { data: !1, error: r };
        }
        throw r;
      }
    });
  }
  /**
   * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.
   * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.
   *
   * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.
   * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.
   * @param options.transform Transform the asset before serving it to the client.
   */
  getPublicUrl(t, n) {
    const r = this._getFinalPath(t), o = [], s = n != null && n.download ? `download=${n.download === !0 ? "" : n.download}` : "";
    s !== "" && o.push(s);
    const c = typeof (n == null ? void 0 : n.transform) < "u" ? "render/image" : "object", f = this.transformOptsToQueryString((n == null ? void 0 : n.transform) || {});
    f !== "" && o.push(f);
    };
  }
  /**
   * Deletes files within the same bucket
   *
   * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].
   */
  remove(t) {
      try {
      } catch (n) {
        if (this.shouldThrowOnError)
          throw n;
          return { data: null, error: n };
        throw n;
      }
    });
  }
  /**
   * Get file metadata
   * @param id the file id to retrieve metadata
   */
  // async getMetadata(
  //   id: string
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Update file metadata
   * @param id the file id to update metadata
   * @param meta the new file metadata
   */
  // async updateMetadata(
  //   id: string,
  //   meta: Metadata
  // ): Promise<
  //   | {
  //       data: Metadata
  //       error: null
  //     }
  //   | {
  //       data: null
  //       error: StorageError
  //     }
  // > {
  //   try {
  //     const data = await post(
  //       this.fetch,
  //       `${this.url}/metadata/${id}`,
  //       { ...meta },
  //       { headers: this.headers }
  //     )
  //     return { data, error: null }
  //   } catch (error) {
  //     if (isStorageError(error)) {
  //       return { data: null, error }
  //     }
  //     throw error
  //   }
  // }
  /**
   * Lists all the files and folders within a path of the bucket.
   * @param path The folder path.
   * @param options Search options including limit (defaults to 100), offset, sortBy, and search
   */
  list(t, n, r) {
      try {
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * @experimental this method signature might change in the future
   * @param options search options
   * @param parameters
   */
  listV2(t, n) {
      try {
        const r = Object.assign({}, t);
      } catch (r) {
        if (this.shouldThrowOnError)
          throw r;
          return { data: null, error: r };
        throw r;
      }
    });
  }
  encodeMetadata(t) {
    return JSON.stringify(t);
  }
  toBase64(t) {
    return typeof Buffer < "u" ? Buffer.from(t).toString("base64") : btoa(t);
  }
  _getFinalPath(t) {
    return `${this.bucketId}/${t.replace(/^\/+/, "")}`;
  }
  _removeEmptyFolders(t) {
    return t.replace(/^\/|\/$/g, "").replace(/\/+/g, "/");
  }
  transformOptsToQueryString(t) {
    const n = [];
    return t.width && n.push(`width=${t.width}`), t.height && n.push(`height=${t.height}`), t.resize && n.push(`resize=${t.resize}`), t.format && n.push(`format=${t.format}`), t.quality && n.push(`quality=${t.quality}`), n.join("&");
  }
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  constructor(t, n = {}, r, o) {
    this.shouldThrowOnError = !1;
    const s = new URL(t);
  }
  /**
   * Enable throwing errors instead of returning them.
   */
  throwOnError() {
    return this.shouldThrowOnError = !0, this;
  }
  /**
   * Retrieves the details of all Storage buckets within an existing project.
   */
  listBuckets() {
      try {
      } catch (t) {
        if (this.shouldThrowOnError)
          throw t;
          return { data: null, error: t };
        throw t;
      }
    });
  }
  /**
   * Retrieves the details of an existing Storage bucket.
   *
   * @param id The unique identifier of the bucket you would like to retrieve.
   */
  getBucket(t) {
      try {
      } catch (n) {
        if (this.shouldThrowOnError)
          throw n;
          return { data: null, error: n };
        throw n;
      }
    });
  }
  /**
   * Creates a new Storage bucket
   *
   * @param id A unique identifier for the bucket you are creating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   * @returns newly created bucket id
   * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.
   *   - default bucket type is `STANDARD`
   */
  createBucket(t) {
      public: !1
    }) {
      try {
          id: n,
          name: n,
          type: r.type,
          public: r.public,
          file_size_limit: r.fileSizeLimit,
          allowed_mime_types: r.allowedMimeTypes
        }, { headers: this.headers }), error: null };
      } catch (o) {
        if (this.shouldThrowOnError)
          throw o;
          return { data: null, error: o };
        throw o;
      }
    });
  }
  /**
   * Updates a Storage bucket
   *
   * @param id A unique identifier for the bucket you are updating.
   * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.
   * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.
   * The global file size limit takes precedence over this value.
   * The default value is null, which doesn't set a per bucket file size limit.
   * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.
   * The default value is null, which allows files with all mime types to be uploaded.
   * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.
   */
  updateBucket(t, n) {
      try {
          id: t,
          name: t,
          public: n.public,
          file_size_limit: n.fileSizeLimit,
          allowed_mime_types: n.allowedMimeTypes
        }, { headers: this.headers }), error: null };
      } catch (r) {
        if (this.shouldThrowOnError)
          throw r;
          return { data: null, error: r };
        throw r;
      }
    });
  }
  /**
   * Removes all objects inside a single bucket.
   *
   * @param id The unique identifier of the bucket you would like to empty.
   */
  emptyBucket(t) {
      try {
      } catch (n) {
        if (this.shouldThrowOnError)
          throw n;
          return { data: null, error: n };
        throw n;
      }
    });
  }
  /**
   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.
   * You must first `empty()` the bucket.
   *
   * @param id The unique identifier of the bucket you would like to delete.
   */
  deleteBucket(t) {
      try {
      } catch (n) {
        if (this.shouldThrowOnError)
          throw n;
          return { data: null, error: n };
        throw n;
      }
    });
  }
}
  constructor(t, n = {}, r, o) {
    super(t, n, r, o);
  }
  /**
   * Perform file operation in a bucket.
   *
   * @param id The bucket id to operate on.
   */
  from(t) {
  }
}
  schema: "public"
  autoRefreshToken: !0,
  persistSession: !0,
  detectSessionInUrl: !0,
  flowType: "implicit"
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  let t;
    var c;
    const f = (c = yield t()) !== null && c !== void 0 ? c : e;
  });
};
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  return e.endsWith("/") ? e : e + "/";
}
  var n, r;
    db: Object.assign(Object.assign({}, f), o),
    realtime: Object.assign(Object.assign({}, g), a),
    storage: {},
      return "";
    })
  };
  return e.accessToken ? w.accessToken = e.accessToken : delete w.accessToken, w;
}
  const t = e == null ? void 0 : e.trim();
  if (!t)
    throw new Error("supabaseUrl is required.");
  if (!t.match(/^https?:\/\//i))
    throw new Error("Invalid supabaseUrl: Must be a valid HTTP or HTTPS URL.");
  try {
  } catch {
    throw Error("Invalid supabaseUrl: Provided URL is malformed.");
  }
}
  "2024-01-01": {
    timestamp: Date.parse("2024-01-01T00:00:00.0Z"),
    name: "2024-01-01"
  }
  constructor(t, n, r) {
    super(t), this.__isAuthError = !0, this.name = "AuthError", this.status = n, this.code = r;
  }
}
  return typeof e == "object" && e !== null && "__isAuthError" in e;
}
  constructor(t, n, r) {
    super(t, n, r), this.name = "AuthApiError", this.status = n, this.code = r;
  }
}
}
  constructor(t, n) {
    super(t), this.name = "AuthUnknownError", this.originalError = n;
  }
}
  constructor(t, n, r, o) {
    super(t, r, o), this.name = n, this.status = r;
  }
}
  constructor() {
    super("Auth session missing!", "AuthSessionMissingError", 400, void 0);
  }
}
}
  constructor() {
    super("Auth session or user missing", "AuthInvalidTokenResponseError", 500, void 0);
  }
}
  constructor(t) {
    super(t, "AuthInvalidCredentialsError", 400, void 0);
  }
}
  constructor(t, n = null) {
    super(t, "AuthImplicitGrantRedirectError", 500, void 0), this.details = null, this.details = n;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
}
  constructor(t, n = null) {
    super(t, "AuthPKCEGrantCodeExchangeError", 500, void 0), this.details = null, this.details = n;
  }
  toJSON() {
    return {
      name: this.name,
      message: this.message,
      status: this.status,
      details: this.details
    };
  }
}
  constructor(t, n) {
    super(t, "AuthRetryableFetchError", n, void 0);
  }
}
}
  constructor(t, n, r) {
    super(t, "AuthWeakPasswordError", n, "weak_password"), this.reasons = r;
  }
}
  constructor(t) {
    super(t, "AuthInvalidJwtError", 400, "invalid_jwt");
  }
}
  const e = new Array(128);
  for (let t = 0; t < e.length; t += 1)
    e[t] = -1;
  return e;
})();
  if (e !== null)
    for (t.queue = t.queue << 8 | e, t.queuedBits += 8; t.queuedBits >= 6; ) {
      const r = t.queue >> t.queuedBits - 6 & 63;
    }
  else if (t.queuedBits > 0)
    for (t.queue = t.queue << 6 - t.queuedBits, t.queuedBits = 6; t.queuedBits >= 6; ) {
      const r = t.queue >> t.queuedBits - 6 & 63;
    }
}
  if (r > -1)
    for (t.queue = t.queue << 6 | r, t.queuedBits += 6; t.queuedBits >= 8; )
      n(t.queue >> t.queuedBits - 8 & 255), t.queuedBits -= 8;
  else {
    if (r === -2)
      return;
    throw new Error(`Invalid Base64-URL character "${String.fromCharCode(e)}"`);
  }
}
  const t = [], n = (a) => {
    t.push(String.fromCodePoint(a));
  }, r = {
    utf8seq: 0,
    codepoint: 0
  }, o = { queue: 0, queuedBits: 0 }, s = (a) => {
  };
  for (let a = 0; a < e.length; a += 1)
  return t.join("");
}
  if (e <= 127) {
    t(e);
    return;
  } else if (e <= 2047) {
    t(192 | e >> 6), t(128 | e & 63);
    return;
  } else if (e <= 65535) {
    t(224 | e >> 12), t(128 | e >> 6 & 63), t(128 | e & 63);
    return;
  } else if (e <= 1114111) {
    t(240 | e >> 18), t(128 | e >> 12 & 63), t(128 | e >> 6 & 63), t(128 | e & 63);
    return;
  }
  throw new Error(`Unrecognized Unicode codepoint: ${e.toString(16)}`);
}
  for (let n = 0; n < e.length; n += 1) {
    let r = e.charCodeAt(n);
    if (r > 55295 && r <= 56319) {
      const o = (r - 55296) * 1024 & 65535;
      r = (e.charCodeAt(n + 1) - 56320 & 65535 | o) + 65536, n += 1;
    }
  }
}
  if (t.utf8seq === 0) {
    if (e <= 127) {
      n(e);
      return;
    }
    for (let r = 1; r < 6; r += 1)
      if (!(e >> 7 - r & 1)) {
        t.utf8seq = r;
        break;
      }
    if (t.utf8seq === 2)
      t.codepoint = e & 31;
    else if (t.utf8seq === 3)
      t.codepoint = e & 15;
    else if (t.utf8seq === 4)
      t.codepoint = e & 7;
    else
      throw new Error("Invalid UTF-8 sequence");
    t.utf8seq -= 1;
  } else if (t.utf8seq > 0) {
    if (e <= 127)
      throw new Error("Invalid UTF-8 sequence");
    t.codepoint = t.codepoint << 6 | e & 63, t.utf8seq -= 1, t.utf8seq === 0 && n(t.codepoint);
  }
}
  const t = [], n = { queue: 0, queuedBits: 0 }, r = (o) => {
    t.push(o);
  };
  for (let o = 0; o < e.length; o += 1)
  return new Uint8Array(t);
}
  const t = [];
}
  const t = [], n = { queue: 0, queuedBits: 0 }, r = (o) => {
    t.push(o);
  };
}
  return Math.round(Date.now() / 1e3) + e;
}
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(e) {
    const t = Math.random() * 16 | 0;
    return (e == "x" ? t : t & 3 | 8).toString(16);
  });
}
  tested: !1,
  writable: !1
    return !1;
  try {
    if (typeof globalThis.localStorage != "object")
      return !1;
  } catch {
    return !1;
  }
  const e = `lswt-${Math.random()}${Math.random()}`;
  try {
  } catch {
  }
};
  const t = {}, n = new URL(e);
  if (n.hash && n.hash[0] === "#")
    try {
      new URLSearchParams(n.hash.substring(1)).forEach((o, s) => {
        t[s] = o;
      });
    } catch {
    }
  return n.searchParams.forEach((r, o) => {
    t[o] = r;
  }), t;
}
  let t;
  await e.setItem(t, JSON.stringify(n));
  const n = await e.getItem(t);
  if (!n)
    return null;
  try {
    return JSON.parse(n);
  } catch {
    return n;
  }
  await e.removeItem(t);
};
  constructor() {
      this.resolve = t, this.reject = n;
    });
  }
}
  const t = e.split(".");
  if (t.length !== 3)
  for (let r = 0; r < t.length; r++)
  return {
    // using base64url lib
    raw: {
      header: t[0],
      payload: t[1]
    }
  };
}
  return await new Promise((t) => {
    setTimeout(() => t(null), e);
  });
}
  return new Promise((r, o) => {
    (async () => {
      for (let s = 0; s < 1 / 0; s++)
        try {
          const a = await e(s);
          if (!t(s, null, a)) {
            r(a);
            return;
          }
        } catch (a) {
          if (!t(s, a)) {
            o(a);
            return;
          }
        }
    })();
  });
}
  return ("0" + e.toString(16)).substr(-2);
}
  const t = new Uint32Array(56);
  if (typeof crypto > "u") {
    const n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~", r = n.length;
    let o = "";
    for (let s = 0; s < 56; s++)
      o += n.charAt(Math.floor(Math.random() * r));
    return o;
  }
}
  const n = new TextEncoder().encode(e), r = await crypto.subtle.digest("SHA-256", n), o = new Uint8Array(r);
  return Array.from(o).map((s) => String.fromCharCode(s)).join("");
}
  if (!(typeof crypto < "u" && typeof crypto.subtle < "u" && typeof TextEncoder < "u"))
    return console.warn("WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256."), e;
  return btoa(n).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
}
  let o = r;
  return [s, r === s ? "plain" : "s256"];
}
    return null;
  try {
    return /* @__PURE__ */ new Date(`${t}T00:00:00.0Z`);
  } catch {
    return null;
  }
}
  if (!e)
    throw new Error("Missing exp claim");
  const t = Math.floor(Date.now() / 1e3);
  if (e <= t)
    throw new Error("JWT has expired");
}
  switch (e) {
    case "RS256":
      return {
        name: "RSASSA-PKCS1-v1_5",
        hash: { name: "SHA-256" }
      };
    case "ES256":
      return {
        name: "ECDSA",
        namedCurve: "P-256",
        hash: { name: "SHA-256" }
      };
    default:
      throw new Error("Invalid alg claim");
  }
}
    throw new Error("@supabase/auth-js: Expected parameter to be UUID but is not");
}
  const e = {};
  return new Proxy(e, {
    get: (t, n) => {
      if (n === "__isUserNotAvailableProxy")
        return !0;
      if (typeof n == "symbol") {
        const r = n.toString();
        if (r === "Symbol(Symbol.toPrimitive)" || r === "Symbol(Symbol.toStringTag)" || r === "Symbol(util.inspect.custom)")
          return;
      }
      throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Accessing the "${n}" property of the session object is not supported. Please use getUser() instead.`);
    },
    set: (t, n) => {
      throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Setting the "${n}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
    },
    deleteProperty: (t, n) => {
      throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Deleting the "${n}" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);
    }
  });
}
  return JSON.parse(JSON.stringify(e));
}
  var n = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(e); o < r.length; o++)
      t.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (n[r[o]] = e[r[o]]);
  return n;
};
  var t;
  let n;
  try {
    n = await e.json();
  } catch (s) {
  }
  let r;
    if (r === "weak_password")
    if (r === "session_not_found")
  } else if (typeof n == "object" && n && typeof n.weak_password == "object" && n.weak_password && Array.isArray(n.weak_password.reasons) && n.weak_password.reasons.length && n.weak_password.reasons.reduce((s, a) => s && typeof a == "string", !0))
}
  const o = { method: e, headers: (t == null ? void 0 : t.headers) || {} };
  return e === "GET" ? o : (o.headers = Object.assign({ "Content-Type": "application/json;charset=UTF-8" }, t == null ? void 0 : t.headers), o.body = JSON.stringify(r), Object.assign(Object.assign({}, o), n));
};
  var o;
  const s = Object.assign({}, r == null ? void 0 : r.headers);
  const a = (o = r == null ? void 0 : r.query) !== null && o !== void 0 ? o : {};
  r != null && r.redirectTo && (a.redirect_to = r.redirectTo);
    headers: s,
    noResolveJson: r == null ? void 0 : r.noResolveJson
  }, {}, r == null ? void 0 : r.body);
  return r != null && r.xform ? r == null ? void 0 : r.xform(f) : { data: Object.assign({}, f), error: null };
}
  let c;
  try {
    c = await e(n, Object.assign({}, a));
  } catch (f) {
  }
    return c;
  try {
    return await c.json();
  } catch (f) {
  }
}
  var t;
  let n = null;
  const r = (t = e.user) !== null && t !== void 0 ? t : e;
  return { data: { session: n, user: r }, error: null };
}
  return !t.error && e.weak_password && typeof e.weak_password == "object" && Array.isArray(e.weak_password.reasons) && e.weak_password.reasons.length && e.weak_password.message && typeof e.weak_password.message == "string" && e.weak_password.reasons.reduce((n, r) => n && typeof r == "string", !0) && (t.data.weak_password = e.weak_password), t;
}
  var t;
  return { data: { user: (t = e.user) !== null && t !== void 0 ? t : e }, error: null };
}
  return { data: e, error: null };
}
    action_link: t,
    email_otp: n,
    hashed_token: r,
    redirect_to: o,
    verification_type: s
  }, f = Object.assign({}, a);
  return {
    data: {
      properties: c,
      user: f
    },
    error: null
  };
}
  return e;
}
  return e.access_token && e.refresh_token && e.expires_in;
}
  var n = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(e); o < r.length; o++)
      t.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (n[r[o]] = e[r[o]]);
  return n;
};
  constructor({ url: t = "", headers: n = {}, fetch: r }) {
      listFactors: this._listFactors.bind(this),
      deleteFactor: this._deleteFactor.bind(this)
    }, this.oauth = {
      listClients: this._listOAuthClients.bind(this),
      createClient: this._createOAuthClient.bind(this),
      getClient: this._getOAuthClient.bind(this),
      deleteClient: this._deleteOAuthClient.bind(this),
      regenerateClientSecret: this._regenerateOAuthClientSecret.bind(this)
    };
  }
  /**
   * Removes a logged-in session.
   * @param jwt A valid, logged-in JWT.
   * @param scope The logout sope.
   */
    try {
        headers: this.headers,
        jwt: t,
        noResolveJson: !0
      }), { data: null, error: null };
    } catch (r) {
        return { data: null, error: r };
      throw r;
    }
  }
  /**
   * Sends an invite link to an email address.
   * @param email The email address of the user.
   * @param options Additional options to be included when inviting.
   */
  async inviteUserByEmail(t, n = {}) {
    try {
        body: { email: t, data: n.data },
        headers: this.headers,
        redirectTo: n.redirectTo,
      });
    } catch (r) {
        return { data: { user: null }, error: r };
      throw r;
    }
  }
  /**
   * Generates email links and OTPs to be sent via a custom email provider.
   * @param email The user's email.
   * @param options.password User password. For signup only.
   * @param options.data Optional user metadata. For signup only.
   * @param options.redirectTo The redirect url which should be appended to the generated link
   */
  async generateLink(t) {
    try {
        body: o,
        headers: this.headers,
        redirectTo: n == null ? void 0 : n.redirectTo
      });
    } catch (n) {
        return {
          data: {
            properties: null,
            user: null
          },
          error: n
        };
      throw n;
    }
  }
  // User Admin API
  /**
   * Creates a new user.
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async createUser(t) {
    try {
        body: t,
        headers: this.headers,
      });
    } catch (n) {
        return { data: { user: null }, error: n };
      throw n;
    }
  }
  /**
   * Get a list of users.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.
   */
  async listUsers(t) {
    var n, r, o, s, a, c, f;
    try {
        headers: this.headers,
        noResolveJson: !0,
        query: {
          page: (r = (n = t == null ? void 0 : t.page) === null || n === void 0 ? void 0 : n.toString()) !== null && r !== void 0 ? r : "",
          per_page: (s = (o = t == null ? void 0 : t.perPage) === null || o === void 0 ? void 0 : o.toString()) !== null && s !== void 0 ? s : ""
        },
      });
      if (g.error)
        throw g.error;
      return C.length > 0 && (C.forEach((T) => {
        const E = parseInt(T.split(";")[0].split("=")[1].substring(0, 1)), O = JSON.parse(T.split(";")[1].split("=")[1]);
    }
  }
  /**
   * Get user by id.
   *
   * @param uid The user's unique identifier
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async getUserById(t) {
    try {
        headers: this.headers,
      });
    } catch (n) {
        return { data: { user: null }, error: n };
      throw n;
    }
  }
  /**
   * Updates the user data.
   *
   * @param attributes The data you want to update.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async updateUserById(t, n) {
    try {
        body: n,
        headers: this.headers,
      });
    } catch (r) {
        return { data: { user: null }, error: r };
      throw r;
    }
  }
  /**
   * Delete a user. Requires a `service_role` key.
   *
   * @param id The user id you want to remove.
   * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.
   * Defaults to false for backward compatibility.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async deleteUser(t, n = !1) {
    try {
        headers: this.headers,
        body: {
          should_soft_delete: n
        },
      });
    } catch (r) {
        return { data: { user: null }, error: r };
      throw r;
    }
  }
  async _listFactors(t) {
    try {
        headers: this.headers,
        xform: (o) => ({ data: { factors: o }, error: null })
      });
      return { data: n, error: r };
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  async _deleteFactor(t) {
    try {
        headers: this.headers
      }), error: null };
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  /**
   * Lists all OAuth clients with optional pagination.
   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async _listOAuthClients(t) {
    var n, r, o, s, a, c, f;
    try {
        headers: this.headers,
        noResolveJson: !0,
        query: {
          page: (r = (n = t == null ? void 0 : t.page) === null || n === void 0 ? void 0 : n.toString()) !== null && r !== void 0 ? r : "",
          per_page: (s = (o = t == null ? void 0 : t.perPage) === null || o === void 0 ? void 0 : o.toString()) !== null && s !== void 0 ? s : ""
        },
      });
      if (g.error)
        throw g.error;
      return C.length > 0 && (C.forEach((T) => {
        const E = parseInt(T.split(";")[0].split("=")[1].substring(0, 1)), O = JSON.parse(T.split(";")[1].split("=")[1]);
    }
  }
  /**
   * Creates a new OAuth client.
   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async _createOAuthClient(t) {
    try {
        body: t,
        headers: this.headers,
        xform: (n) => ({ data: n, error: null })
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  /**
   * Gets details of a specific OAuth client.
   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async _getOAuthClient(t) {
    try {
        headers: this.headers,
        xform: (n) => ({ data: n, error: null })
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  /**
   * Deletes an OAuth client.
   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async _deleteOAuthClient(t) {
    try {
        headers: this.headers,
        xform: (n) => ({ data: n, error: null })
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  /**
   * Regenerates the secret for an OAuth client.
   * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.
   *
   * This function should only be called on a server. Never expose your `service_role` key in the browser.
   */
  async _regenerateOAuthClientSecret(t) {
    try {
        headers: this.headers,
        xform: (n) => ({ data: n, error: null })
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
}
  return {
    getItem: (t) => e[t] || null,
    setItem: (t, n) => {
      e[t] = n;
    },
    removeItem: (t) => {
      delete e[t];
    }
  };
}
  /**
   * @experimental
   */
};
  constructor(t) {
    super(t), this.isAcquireTimeout = !0;
  }
}
}
  const r = new globalThis.AbortController();
  return t > 0 && setTimeout(() => {
  }, t), await Promise.resolve().then(() => globalThis.navigator.locks.request(e, t === 0 ? {
    mode: "exclusive",
    ifAvailable: !0
  } : {
    mode: "exclusive",
    signal: r.signal
  }, async (o) => {
    if (o) {
      try {
        return await n();
      } finally {
      }
    } else {
      if (t === 0)
        try {
          const s = await globalThis.navigator.locks.query();
          console.log("@supabase/gotrue-js: Navigator LockManager state", JSON.stringify(s, null, "  "));
        } catch (s) {
          console.warn("@supabase/gotrue-js: Error when querying Navigator LockManager state", s);
        }
      return console.warn("@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request"), await n();
    }
  }));
}
  if (typeof globalThis != "object")
    try {
      Object.defineProperty(Object.prototype, "__magic__", {
        get: function() {
          return this;
        },
        configurable: !0
      }), __magic__.globalThis = __magic__, delete Object.prototype.__magic__;
    } catch {
      typeof self < "u" && (self.globalThis = self);
    }
}
  if (!/^0x[a-fA-F0-9]{40}$/.test(e))
    throw new Error(`@supabase/auth-js: Address "${e}" is invalid.`);
  return e.toLowerCase();
}
  return parseInt(e, 16);
}
  const t = new TextEncoder().encode(e);
  return "0x" + Array.from(t, (r) => r.toString(16).padStart(2, "0")).join("");
}
  var t;
  {
    if (!Number.isInteger(n))
      throw new Error(`@supabase/auth-js: Invalid SIWE message field "chainId". Chain ID must be a EIP-155 chain ID. Provided value: ${n}`);
    if (!r)
      throw new Error('@supabase/auth-js: Invalid SIWE message field "domain". Domain must be provided.');
    if (a && a.length < 8)
      throw new Error(`@supabase/auth-js: Invalid SIWE message field "nonce". Nonce must be at least 8 characters. Provided value: ${a}`);
      throw new Error('@supabase/auth-js: Invalid SIWE message field "uri". URI must be provided.');
    if (w !== "1")
      throw new Error(`@supabase/auth-js: Invalid SIWE message field "version". Version must be '1'. Provided value: ${w}`);
    if (!((t = e.statement) === null || t === void 0) && t.includes(`
`))
      throw new Error(`@supabase/auth-js: Invalid SIWE message field "statement". Statement must not include '\\n'. Provided value: ${e.statement}`);
  }
` : "", O = `${T} wants you to sign in with your Ethereum account:
${C}

${E}`;
Version: ${w}
Chain ID: ${n}${a ? `
Nonce: ${a}` : ""}
Issued At: ${s.toISOString()}`;
    let I = `
Resources:`;
      if (!M || typeof M != "string")
        throw new Error(`@supabase/auth-js: Invalid SIWE message field "resources". Every resource must be a valid string. Provided value: ${M}`);
      I += `
- ${M}`;
    }
  }
  return `${O}
}
  constructor({ message: t, code: n, cause: r, name: o }) {
    var s;
    super(t, { cause: r }), this.__isWebAuthnError = !0, this.name = (s = o ?? (r instanceof Error ? r.name : void 0)) !== null && s !== void 0 ? s : "Unknown Error", this.code = n;
  }
}
  constructor(t, n) {
    super({
      code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
      cause: n,
      message: t
    }), this.name = "WebAuthnUnknownError", this.originalError = n;
  }
}
  var n, r, o;
  const { publicKey: s } = t;
  if (!s)
    throw Error("options was missing required publicKey property");
  if (e.name === "AbortError") {
    if (t.signal instanceof AbortSignal)
        message: "Registration ceremony was sent an abort signal",
        code: "ERROR_CEREMONY_ABORTED",
        cause: e
      });
  } else if (e.name === "ConstraintError") {
    if (((n = s.authenticatorSelection) === null || n === void 0 ? void 0 : n.requireResidentKey) === !0)
        message: "Discoverable credentials were required but no available authenticator supported it",
        code: "ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT",
        cause: e
      });
    if (
      // @ts-ignore: `mediation` doesn't yet exist on CredentialCreationOptions but it's possible as of Sept 2024
      t.mediation === "conditional" && ((r = s.authenticatorSelection) === null || r === void 0 ? void 0 : r.userVerification) === "required"
    )
        message: "User verification was required during automatic registration but it could not be performed",
        code: "ERROR_AUTO_REGISTER_USER_VERIFICATION_FAILURE",
        cause: e
      });
    if (((o = s.authenticatorSelection) === null || o === void 0 ? void 0 : o.userVerification) === "required")
        message: "User verification was required but no available authenticator supported it",
        code: "ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT",
        cause: e
      });
  } else {
    if (e.name === "InvalidStateError")
        message: "The authenticator was previously registered",
        code: "ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED",
        cause: e
      });
    if (e.name === "NotAllowedError")
        message: e.message,
        code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
        cause: e
      });
    if (e.name === "NotSupportedError")
        message: 'No entry in pubKeyCredParams was of type "public-key"',
        code: "ERROR_MALFORMED_PUBKEYCREDPARAMS",
        cause: e
        message: "No available authenticator supported any of the specified pubKeyCredParams algorithms",
        code: "ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG",
        cause: e
      });
    if (e.name === "SecurityError") {
      const a = window.location.hostname;
        if (s.rp.id !== a)
            message: `The RP ID "${s.rp.id}" is invalid for this domain`,
            code: "ERROR_INVALID_RP_ID",
            cause: e
          });
        message: `${window.location.hostname} is an invalid domain`,
        code: "ERROR_INVALID_DOMAIN",
        cause: e
      });
    } else if (e.name === "TypeError") {
      if (s.user.id.byteLength < 1 || s.user.id.byteLength > 64)
          message: "User ID was not between 1 and 64 characters",
          code: "ERROR_INVALID_USER_ID_LENGTH",
          cause: e
        });
    } else if (e.name === "UnknownError")
        message: "The authenticator was unable to process the specified options, or could not create a new credential",
        code: "ERROR_AUTHENTICATOR_GENERAL_ERROR",
        cause: e
      });
  }
    message: "a Non-Webauthn related error has occurred",
    code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
    cause: e
  });
}
  const { publicKey: n } = t;
  if (!n)
    throw Error("options was missing required publicKey property");
  if (e.name === "AbortError") {
    if (t.signal instanceof AbortSignal)
        message: "Authentication ceremony was sent an abort signal",
        code: "ERROR_CEREMONY_ABORTED",
        cause: e
      });
  } else {
    if (e.name === "NotAllowedError")
        message: e.message,
        code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
        cause: e
      });
    if (e.name === "SecurityError") {
      const r = window.location.hostname;
        if (n.rpId !== r)
            message: `The RP ID "${n.rpId}" is invalid for this domain`,
            code: "ERROR_INVALID_RP_ID",
            cause: e
          });
        message: `${window.location.hostname} is an invalid domain`,
        code: "ERROR_INVALID_DOMAIN",
        cause: e
      });
    } else if (e.name === "UnknownError")
        message: "The authenticator was unable to process the specified options, or could not create a new assertion signature",
        code: "ERROR_AUTHENTICATOR_GENERAL_ERROR",
        cause: e
      });
  }
    message: "a Non-Webauthn related error has occurred",
    code: "ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY",
    cause: e
  });
}
  var n = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(e); o < r.length; o++)
      t.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (n[r[o]] = e[r[o]]);
  return n;
};
  /**
   * Create an abort signal for a new WebAuthn operation.
   * Automatically cancels any existing operation.
   *
   * @returns {AbortSignal} Signal to pass to navigator.credentials.create() or .get()
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal MDN - AbortSignal}
   */
  createNewAbortSignal() {
    if (this.controller) {
      const n = new Error("Cancelling existing WebAuthn API call for new one");
      n.name = "AbortError", this.controller.abort(n);
    }
    const t = new AbortController();
    return this.controller = t, t.signal;
  }
  /**
   * Manually cancel the current WebAuthn operation.
   * Useful for cleaning up when user cancels or navigates away.
   *
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort MDN - AbortController.abort}
   */
  cancelCeremony() {
    if (this.controller) {
      const t = new Error("Manually cancelling existing WebAuthn API call");
      t.name = "AbortError", this.controller.abort(t), this.controller = void 0;
    }
  }
}
  if (!e)
    throw new Error("Credential creation options are required");
  if (typeof PublicKeyCredential < "u" && "parseCreationOptionsFromJSON" in PublicKeyCredential && typeof PublicKeyCredential.parseCreationOptionsFromJSON == "function")
    return PublicKeyCredential.parseCreationOptionsFromJSON(
      /** we assert the options here as typescript still doesn't know about future webauthn types */
      e
    );
    e,
    ["challenge", "user", "excludeCredentials"]
    challenge: s,
    user: a
  });
  if (r && r.length > 0) {
    c.excludeCredentials = new Array(r.length);
    for (let f = 0; f < r.length; f++) {
        // Cast transports to handle future transport types like "cable"
      });
    }
  }
  return c;
}
  if (!e)
    throw new Error("Credential request options are required");
  if (typeof PublicKeyCredential < "u" && "parseRequestOptionsFromJSON" in PublicKeyCredential && typeof PublicKeyCredential.parseRequestOptionsFromJSON == "function")
    return PublicKeyCredential.parseRequestOptionsFromJSON(e);
    e,
    ["challenge", "allowCredentials"]
  if (n && n.length > 0) {
    s.allowCredentials = new Array(n.length);
    for (let a = 0; a < n.length; a++) {
      const c = n[a];
      s.allowCredentials[a] = Object.assign(Object.assign({}, c), {
        type: c.type || "public-key",
        // Cast transports to handle future transport types like "cable"
        transports: c.transports
      });
    }
  }
  return s;
}
  var t;
  if ("toJSON" in e && typeof e.toJSON == "function")
    return e.toJSON();
  const n = e;
  return {
    id: e.id,
    rawId: e.id,
    response: {
    },
    type: "public-key",
    clientExtensionResults: e.getClientExtensionResults(),
    // Convert null to undefined and cast to AuthenticatorAttachment type
    authenticatorAttachment: (t = n.authenticatorAttachment) !== null && t !== void 0 ? t : void 0
  };
}
  var t;
  if ("toJSON" in e && typeof e.toJSON == "function")
    return e.toJSON();
  const n = e, r = e.getClientExtensionResults(), o = e.response;
  return {
    id: e.id,
    rawId: e.id,
    // W3C spec expects rawId to match id for JSON format
    response: {
    },
    type: "public-key",
    clientExtensionResults: r,
    // Convert null to undefined and cast to AuthenticatorAttachment type
    authenticatorAttachment: (t = n.authenticatorAttachment) !== null && t !== void 0 ? t : void 0
  };
}
  return (
    // Consider localhost valid as well since it's okay wrt Secure Contexts
    e === "localhost" || /^([a-z0-9]+(-[a-z0-9]+)*\.)+[a-z]{2,}$/i.test(e)
  );
}
  var e, t;
}
  try {
    const t = await navigator.credentials.create(
      /** we assert the type here until typescript types are updated */
      e
    );
    return t ? t instanceof PublicKeyCredential ? { data: t, error: null } : {
      data: null,
    } : {
      data: null,
    };
  } catch (t) {
    return {
      data: null,
        error: t,
        options: e
      })
    };
  }
}
  try {
    const t = await navigator.credentials.get(
      /** we assert the type here until typescript types are updated */
      e
    );
    return t ? t instanceof PublicKeyCredential ? { data: t, error: null } : {
      data: null,
    } : {
      data: null,
    };
  } catch (t) {
    return {
      data: null,
        error: t,
        options: e
      })
    };
  }
}
  hints: ["security-key"],
  authenticatorSelection: {
    authenticatorAttachment: "cross-platform",
    requireResidentKey: !1,
    /** set to preferred because older yubikeys don't have PIN/Biometric */
    userVerification: "preferred",
    residentKey: "discouraged"
  },
  attestation: "none"
  /** set to preferred because older yubikeys don't have PIN/Biometric */
  userVerification: "preferred",
  hints: ["security-key"]
};
  const t = (o) => o !== null && typeof o == "object" && !Array.isArray(o), n = (o) => o instanceof ArrayBuffer || ArrayBuffer.isView(o), r = {};
  for (const o of e)
    if (o)
      for (const s in o) {
        const a = o[s];
        if (a !== void 0)
          if (Array.isArray(a))
            r[s] = a;
          else if (n(a))
            r[s] = a;
          else if (t(a)) {
            const c = r[s];
          } else
            r[s] = a;
      }
  return r;
}
}
}
  constructor(t) {
    this.client = t, this.enroll = this._enroll.bind(this), this.challenge = this._challenge.bind(this), this.verify = this._verify.bind(this), this.authenticate = this._authenticate.bind(this), this.register = this._register.bind(this);
  }
  /**
   * Enroll a new WebAuthn factor.
   * Creates an unverified WebAuthn factor that must be verified with a credential.
   *
   * @experimental This method is experimental and may change in future releases
   * @param {Omit<MFAEnrollWebauthnParams, 'factorType'>} params - Enrollment parameters (friendlyName required)
   * @returns {Promise<AuthMFAEnrollWebauthnResponse>} Enrolled factor details or error
   * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registering a New Credential}
   */
  async _enroll(t) {
    return this.client.mfa.enroll(Object.assign(Object.assign({}, t), { factorType: "webauthn" }));
  }
  /**
   * Challenge for WebAuthn credential creation or authentication.
   * Combines server challenge with browser credential operations.
   * Handles both registration (create) and authentication (request) flows.
   *
   * @experimental This method is experimental and may change in future releases
   * @param {MFAChallengeWebauthnParams & { friendlyName?: string; signal?: AbortSignal }} params - Challenge parameters including factorId
   * @param {Object} overrides - Allows you to override the parameters passed to navigator.credentials
   * @param {PublicKeyCredentialCreationOptionsFuture} overrides.create - Override options for credential creation
   * @param {PublicKeyCredentialRequestOptionsFuture} overrides.request - Override options for credential request
   * @returns {Promise<RequestResult>} Challenge response with credential or error
   * @see {@link https://w3c.github.io/webauthn/#sctn-credential-creation W3C WebAuthn Spec - Credential Creation}
   * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying Assertion}
   */
  async _challenge({ factorId: t, webauthn: n, friendlyName: r, signal: o }, s) {
    try {
      const { data: a, error: c } = await this.client.mfa.challenge({
        factorId: t,
        webauthn: n
      });
      if (!a)
        return { data: null, error: c };
      if (a.webauthn.type === "create") {
      }
      switch (a.webauthn.type) {
        case "create": {
            signal: f
          });
          return g ? {
            data: {
              factorId: t,
              challengeId: a.id,
              webauthn: {
                type: a.webauthn.type,
                credential_response: g
              }
            },
            error: null
        }
        case "request": {
          return g ? {
            data: {
              factorId: t,
              challengeId: a.id,
              webauthn: {
                type: a.webauthn.type,
                credential_response: g
              }
            },
            error: null
        }
      }
    } catch (a) {
        data: null,
      };
    }
  }
  /**
   * Verify a WebAuthn credential with the server.
   * Completes the WebAuthn ceremony by sending the credential to the server for verification.
   *
   * @experimental This method is experimental and may change in future releases
   * @param {Object} params - Verification parameters
   * @param {string} params.challengeId - ID of the challenge being verified
   * @param {string} params.factorId - ID of the WebAuthn factor
   * @param {MFAVerifyWebauthnParams<T>['webauthn']} params.webauthn - WebAuthn credential response
   * @returns {Promise<AuthMFAVerifyResponse>} Verification result with session or error
   * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying an Authentication Assertion}
   * */
  async _verify({ challengeId: t, factorId: n, webauthn: r }) {
    return this.client.mfa.verify({
      factorId: n,
      challengeId: t,
      webauthn: r
    });
  }
  /**
   * Complete WebAuthn authentication flow.
   * Performs challenge and verification in a single operation for existing credentials.
   *
   * @experimental This method is experimental and may change in future releases
   * @param {Object} params - Authentication parameters
   * @param {string} params.factorId - ID of the WebAuthn factor to authenticate with
   * @param {Object} params.webauthn - WebAuthn configuration
   * @param {string} params.webauthn.rpId - Relying Party ID (defaults to current hostname)
   * @param {string[]} params.webauthn.rpOrigins - Allowed origins (defaults to current origin)
   * @param {AbortSignal} params.webauthn.signal - Optional abort signal
   * @param {PublicKeyCredentialRequestOptionsFuture} overrides - Override options for navigator.credentials.get
   * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Authentication result
   * @see {@link https://w3c.github.io/webauthn/#sctn-authentication W3C WebAuthn Spec - Authentication Ceremony}
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions MDN - PublicKeyCredentialRequestOptions}
   */
  async _authenticate({ factorId: t, webauthn: { rpId: n = typeof window < "u" ? window.location.hostname : void 0, rpOrigins: r = typeof window < "u" ? [window.location.origin] : void 0, signal: o } }, s) {
    if (!n)
      return {
        data: null,
      };
    try {
        return {
          data: null,
        };
      const { data: a, error: c } = await this.challenge({
        factorId: t,
        webauthn: { rpId: n, rpOrigins: r },
        signal: o
      }, { request: s });
      if (!a)
        return { data: null, error: c };
      const { webauthn: f } = a;
      return this._verify({
        factorId: t,
        challengeId: a.challengeId,
        webauthn: {
          type: f.type,
          rpId: n,
          rpOrigins: r,
          credential_response: f.credential_response
        }
      });
    } catch (a) {
        data: null,
      };
    }
  }
  /**
   * Complete WebAuthn registration flow.
   * Performs enrollment, challenge, and verification in a single operation for new credentials.
   *
   * @experimental This method is experimental and may change in future releases
   * @param {Object} params - Registration parameters
   * @param {string} params.friendlyName - User-friendly name for the credential
   * @param {string} params.rpId - Relying Party ID (defaults to current hostname)
   * @param {string[]} params.rpOrigins - Allowed origins (defaults to current origin)
   * @param {AbortSignal} params.signal - Optional abort signal
   * @param {PublicKeyCredentialCreationOptionsFuture} overrides - Override options for navigator.credentials.create
   * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Registration result
   * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registration Ceremony}
   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions MDN - PublicKeyCredentialCreationOptions}
   */
  async _register({ friendlyName: t, rpId: n = typeof window < "u" ? window.location.hostname : void 0, rpOrigins: r = typeof window < "u" ? [window.location.origin] : void 0, signal: o }, s) {
    if (!n)
      return {
        data: null,
      };
    try {
        return {
          data: null,
        };
      const { data: a, error: c } = await this._enroll({
        friendlyName: t
      });
      if (!a)
        return await this.client.mfa.listFactors().then((g) => {
        }).then((g) => g ? this.client.mfa.unenroll({ factorId: g == null ? void 0 : g.id }) : void 0), { data: null, error: c };
        factorId: a.id,
        friendlyName: a.friendly_name,
        webauthn: { rpId: n, rpOrigins: r },
        signal: o
      }, {
        create: s
      });
      return f ? this._verify({
        factorId: a.id,
        challengeId: f.challengeId,
        webauthn: {
          rpId: n,
          rpOrigins: r,
          type: f.webauthn.type,
          credential_response: f.webauthn.credential_response
        }
    } catch (a) {
        data: null,
      };
    }
  }
}
  autoRefreshToken: !0,
  persistSession: !0,
  detectSessionInUrl: !0,
  flowType: "implicit",
  debug: !1,
  hasCustomAuthorizationHeader: !1
};
  return await n();
}
  /**
   * The JWKS used for verifying asymmetric JWTs
   */
  get jwks() {
    var t, n;
  }
  set jwks(t) {
  }
  get jwks_cached_at() {
    var t, n;
  }
  set jwks_cached_at(t) {
  }
  /**
   * Create a new client for use in the browser.
   */
  constructor(t) {
    var n, r;
      url: o.url,
      headers: o.headers,
      fetch: o.fetch
      verify: this._verify.bind(this),
      enroll: this._enroll.bind(this),
      unenroll: this._unenroll.bind(this),
      challenge: this._challenge.bind(this),
      listFactors: this._listFactors.bind(this),
      challengeAndVerify: this._challengeAndVerify.bind(this),
      getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),
      try {
        this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);
      } catch (s) {
        console.error("Failed to create a new BroadcastChannel, multi-tab state changes will not be available", s);
      }
      (r = this.broadcastChannel) === null || r === void 0 || r.addEventListener("message", async (s) => {
        this._debug("received broadcast notification from other tab or client", s), await this._notifyAllSubscribers(s.data.event, s.data.session, !1);
      });
    }
    this.initialize();
  }
  _debug(...t) {
  }
  /**
   * Initializes the client session either from the url or from storage.
   * This method is automatically called when instantiating the client, but should also be called
   * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).
   */
  async initialize() {
    return this.initializePromise ? await this.initializePromise : (this.initializePromise = (async () => await this._acquireLock(-1, async () => await this._initialize()))(), await this.initializePromise);
  }
  /**
   * IMPORTANT:
   * 1. Never throw in this method, as it is called from the constructor
   * 2. Never return a session from this method as it would be cached over
   *    the whole lifetime of the client
   */
  async _initialize() {
    var t;
    try {
      let r = "none";
        const { data: o, error: s } = await this._getSessionFromURL(n, r);
        if (s) {
            const f = (t = s.details) === null || t === void 0 ? void 0 : t.code;
            if (f === "identity_already_exists" || f === "identity_not_found" || f === "single_identity_not_deletable")
              return { error: s };
          }
          return await this._removeSession(), { error: s };
        }
        const { session: a, redirectType: c } = o;
        return this._debug("#_initialize()", "detected session in URL", a, "redirect type", c), await this._saveSession(a), setTimeout(async () => {
          c === "recovery" ? await this._notifyAllSubscribers("PASSWORD_RECOVERY", a) : await this._notifyAllSubscribers("SIGNED_IN", a);
        }, 0), { error: null };
      }
      return await this._recoverAndRefresh(), { error: null };
    } catch (n) {
      };
    } finally {
      await this._handleVisibilityChange(), this._debug("#_initialize()", "end");
    }
  }
  /**
   * Creates a new anonymous user.
   *
   * @returns A session where the is_anonymous claim in the access token JWT set to true
   */
  async signInAnonymously(t) {
    var n, r, o;
    try {
        headers: this.headers,
        body: {
          data: (r = (n = t == null ? void 0 : t.options) === null || n === void 0 ? void 0 : n.data) !== null && r !== void 0 ? r : {},
          gotrue_meta_security: { captcha_token: (o = t == null ? void 0 : t.options) === null || o === void 0 ? void 0 : o.captchaToken }
        },
      }), { data: a, error: c } = s;
      if (c || !a)
        return { data: { user: null, session: null }, error: c };
    } catch (s) {
        return { data: { user: null, session: null }, error: s };
      throw s;
    }
  }
  /**
   * Creates a new user.
   *
   * Be aware that if a user account exists in the system you may get back an
   * error message that attempts to hide this information from the user.
   * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.
   *
   * @returns A logged-in session if the server has "autoconfirm" ON
   * @returns A user if the server has "autoconfirm" OFF
   */
  async signUp(t) {
    var n, r, o;
    try {
      let s;
      if ("email" in t) {
        let C = null, T = null;
          headers: this.headers,
          redirectTo: w == null ? void 0 : w.emailRedirectTo,
          body: {
            email: g,
            data: (n = w == null ? void 0 : w.data) !== null && n !== void 0 ? n : {},
            gotrue_meta_security: { captcha_token: w == null ? void 0 : w.captchaToken },
            code_challenge: C,
            code_challenge_method: T
          },
        });
      } else if ("phone" in t) {
          headers: this.headers,
          body: {
            phone: g,
            data: (r = w == null ? void 0 : w.data) !== null && r !== void 0 ? r : {},
            channel: (o = w == null ? void 0 : w.channel) !== null && o !== void 0 ? o : "sms",
            gotrue_meta_security: { captcha_token: w == null ? void 0 : w.captchaToken }
          },
        });
      } else
      const { data: a, error: c } = s;
      if (c || !a)
        return { data: { user: null, session: null }, error: c };
    } catch (s) {
        return { data: { user: null, session: null }, error: s };
      throw s;
    }
  }
  /**
   * Log in an existing user with an email and password or phone and password.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or that the
   * email/phone and password combination is wrong or that the account can only
   * be accessed via social login.
   */
  async signInWithPassword(t) {
    try {
      let n;
      if ("email" in t) {
        const { email: s, password: a, options: c } = t;
          headers: this.headers,
          body: {
            email: s,
            password: a,
            gotrue_meta_security: { captcha_token: c == null ? void 0 : c.captchaToken }
          },
        });
      } else if ("phone" in t) {
        const { phone: s, password: a, options: c } = t;
          headers: this.headers,
          body: {
            phone: s,
            password: a,
            gotrue_meta_security: { captcha_token: c == null ? void 0 : c.captchaToken }
          },
        });
      } else
      const { data: r, error: o } = n;
        data: Object.assign({ user: r.user, session: r.session }, r.weak_password ? { weakPassword: r.weak_password } : null),
        error: o
      });
    } catch (n) {
        return { data: { user: null, session: null }, error: n };
      throw n;
    }
  }
  /**
   * Log in an existing user via a third-party provider.
   * This method supports the PKCE flow.
   */
  async signInWithOAuth(t) {
    var n, r, o, s;
    return await this._handleProviderSignIn(t.provider, {
      redirectTo: (n = t.options) === null || n === void 0 ? void 0 : n.redirectTo,
      scopes: (r = t.options) === null || r === void 0 ? void 0 : r.scopes,
      queryParams: (o = t.options) === null || o === void 0 ? void 0 : o.queryParams,
      skipBrowserRedirect: (s = t.options) === null || s === void 0 ? void 0 : s.skipBrowserRedirect
    });
  }
  /**
   * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.
   */
  async exchangeCodeForSession(t) {
    return await this.initializePromise, this._acquireLock(-1, async () => this._exchangeCodeForSession(t));
  }
  /**
   * Signs in a user by verifying a message signed by the user's private key.
   * Supports Ethereum (via Sign-In-With-Ethereum) & Solana (Sign-In-With-Solana) standards,
   * both of which derive from the EIP-4361 standard
   * With slight variation on Solana's side.
   * @reference https://eips.ethereum.org/EIPS/eip-4361
   */
  async signInWithWeb3(t) {
    const { chain: n } = t;
    switch (n) {
      case "ethereum":
        return await this.signInWithEthereum(t);
      case "solana":
        return await this.signInWithSolana(t);
      default:
        throw new Error(`@supabase/auth-js: Unsupported chain "${n}"`);
    }
  }
  async signInWithEthereum(t) {
    let C, T;
    if ("message" in t)
      C = t.message, T = t.signature;
    else {
      let M;
        if (typeof O == "object")
          M = O;
        else {
          else
            throw new Error("@supabase/auth-js: No compatible Ethereum wallet interface on the window object (window.ethereum) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'ethereum', wallet: resolvedUserWallet }) instead.");
        }
      else {
        if (typeof O != "object" || !(I != null && I.url))
          throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");
        M = O;
      }
        method: "eth_requestAccounts"
        throw new Error("@supabase/auth-js: Wallet method eth_requestAccounts is missing or invalid");
      });
        throw new Error("@supabase/auth-js: No accounts available. Please ensure the wallet is connected.");
          method: "eth_chainId"
        });
      }
        version: "1",
        nonce: (o = I == null ? void 0 : I.signInWithEthereum) === null || o === void 0 ? void 0 : o.nonce,
        issuedAt: (a = (s = I == null ? void 0 : I.signInWithEthereum) === null || s === void 0 ? void 0 : s.issuedAt) !== null && a !== void 0 ? a : /* @__PURE__ */ new Date(),
        expirationTime: (c = I == null ? void 0 : I.signInWithEthereum) === null || c === void 0 ? void 0 : c.expirationTime,
        notBefore: (f = I == null ? void 0 : I.signInWithEthereum) === null || f === void 0 ? void 0 : f.notBefore,
        resources: (g = I == null ? void 0 : I.signInWithEthereum) === null || g === void 0 ? void 0 : g.resources
      };
        method: "personal_sign",
      });
    }
    try {
        headers: this.headers,
        body: Object.assign({
          chain: "ethereum",
          message: C,
          signature: T
      });
      if (O)
        throw O;
      return !E || !E.session || !E.user ? {
        data: { user: null, session: null },
      } : (E.session && (await this._saveSession(E.session), await this._notifyAllSubscribers("SIGNED_IN", E.session)), { data: Object.assign({}, E), error: O });
    } catch (E) {
        return { data: { user: null, session: null }, error: E };
      throw E;
    }
  }
  async signInWithSolana(t) {
    let T, E;
    if ("message" in t)
      T = t.message, E = t.signature;
    else {
        else {
          else
            throw new Error("@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.");
        }
      else {
          throw new Error("@supabase/auth-js: Both wallet and url must be specified in non-browser environments.");
      }
          // non-overridable properties
          version: "1",
        }), I ? { statement: I } : null));
        else
          throw new Error("@supabase/auth-js: Wallet method signIn() returned unrecognized value");
        else
          throw new Error("@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields");
      } else {
          throw new Error("@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API");
        T = [
          ...I ? ["", I, ""] : [""],
          "Version: 1",
          `Issued At: ${(o = (r = M == null ? void 0 : M.signInWithSolana) === null || r === void 0 ? void 0 : r.issuedAt) !== null && o !== void 0 ? o : (/* @__PURE__ */ new Date()).toISOString()}`,
          ...!((s = M == null ? void 0 : M.signInWithSolana) === null || s === void 0) && s.notBefore ? [`Not Before: ${M.signInWithSolana.notBefore}`] : [],
          ...!((a = M == null ? void 0 : M.signInWithSolana) === null || a === void 0) && a.expirationTime ? [`Expiration Time: ${M.signInWithSolana.expirationTime}`] : [],
          ...!((c = M == null ? void 0 : M.signInWithSolana) === null || c === void 0) && c.chainId ? [`Chain ID: ${M.signInWithSolana.chainId}`] : [],
          ...!((f = M == null ? void 0 : M.signInWithSolana) === null || f === void 0) && f.nonce ? [`Nonce: ${M.signInWithSolana.nonce}`] : [],
            "Resources",
          ] : []
        ].join(`
`);
          throw new Error("@supabase/auth-js: Wallet signMessage() API returned an recognized value");
      }
    }
    try {
        headers: this.headers,
      });
      return !O || !O.session || !O.user ? {
        data: { user: null, session: null },
    } catch (O) {
        return { data: { user: null, session: null }, error: O };
      throw O;
    }
  }
  async _exchangeCodeForSession(t) {
    try {
        headers: this.headers,
        body: {
          auth_code: t,
          code_verifier: r
        },
      });
        throw a;
      return !s || !s.session || !s.user ? {
        data: { user: null, session: null, redirectType: null },
      } : (s.session && (await this._saveSession(s.session), await this._notifyAllSubscribers("SIGNED_IN", s.session)), { data: Object.assign(Object.assign({}, s), { redirectType: o ?? null }), error: a });
    } catch (s) {
        return { data: { user: null, session: null, redirectType: null }, error: s };
      throw s;
    }
  }
  /**
   * Allows signing in with an OIDC ID token. The authentication provider used
   * should be enabled and configured.
   */
  async signInWithIdToken(t) {
    try {
        headers: this.headers,
        body: {
          provider: r,
          id_token: o,
          access_token: s,
          nonce: a,
          gotrue_meta_security: { captcha_token: n == null ? void 0 : n.captchaToken }
        },
        data: { user: null, session: null },
    } catch (n) {
        return { data: { user: null, session: null }, error: n };
      throw n;
    }
  }
  /**
   * Log in a user using magiclink or a one-time password (OTP).
   *
   * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.
   * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.
   * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.
   *
   * Be aware that you may get back an error message that will not distinguish
   * between the cases where the account does not exist or, that the account
   * can only be accessed via social login.
   *
   * Do note that you will need to configure a Whatsapp sender on Twilio
   * if you are using phone sign in with the 'whatsapp' channel. The whatsapp
   * channel is not supported on other providers
   * at this time.
   * This method supports PKCE when an email is passed.
   */
  async signInWithOtp(t) {
    var n, r, o, s, a;
    try {
      if ("email" in t) {
        const { email: c, options: f } = t;
          headers: this.headers,
          body: {
            email: c,
            data: (n = f == null ? void 0 : f.data) !== null && n !== void 0 ? n : {},
            create_user: (r = f == null ? void 0 : f.shouldCreateUser) !== null && r !== void 0 ? r : !0,
            gotrue_meta_security: { captcha_token: f == null ? void 0 : f.captchaToken },
            code_challenge_method: g
          },
          redirectTo: f == null ? void 0 : f.emailRedirectTo
        });
      }
      if ("phone" in t) {
          headers: this.headers,
          body: {
            phone: c,
            data: (o = f == null ? void 0 : f.data) !== null && o !== void 0 ? o : {},
            create_user: (s = f == null ? void 0 : f.shouldCreateUser) !== null && s !== void 0 ? s : !0,
            gotrue_meta_security: { captcha_token: f == null ? void 0 : f.captchaToken },
            channel: (a = f == null ? void 0 : f.channel) !== null && a !== void 0 ? a : "sms"
          }
        });
      }
    } catch (c) {
        return { data: { user: null, session: null }, error: c };
      throw c;
    }
  }
  /**
   * Log in a user given a User supplied OTP or TokenHash received through mobile or email.
   */
  async verifyOtp(t) {
    var n, r;
    try {
      let o, s;
      "options" in t && (o = (n = t.options) === null || n === void 0 ? void 0 : n.redirectTo, s = (r = t.options) === null || r === void 0 ? void 0 : r.captchaToken);
        headers: this.headers,
        body: Object.assign(Object.assign({}, t), { gotrue_meta_security: { captcha_token: s } }),
        redirectTo: o,
      });
      if (c)
        throw c;
      if (!a)
        throw new Error("An error occurred on token verification.");
    } catch (o) {
        return { data: { user: null, session: null }, error: o };
      throw o;
    }
  }
  /**
   * Attempts a single-sign on using an enterprise Identity Provider. A
   * successful SSO attempt will redirect the current page to the identity
   * provider authorization page. The redirect URL is implementation and SSO
   * protocol specific.
   *
   * You can use it by providing a SSO domain. Typically you can extract this
   * domain by asking users for their email address. If this domain is
   * registered on the Auth instance the redirect will use that organization's
   * currently active SSO Identity Provider for the login.
   *
   * If you have built an organization-specific login page, you can use the
   * organization's SSO Identity Provider UUID directly instead.
   */
  async signInWithSSO(t) {
    var n, r, o;
    try {
      let s = null, a = null;
        body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "providerId" in t ? { provider_id: t.providerId } : null), "domain" in t ? { domain: t.domain } : null), { redirect_to: (r = (n = t.options) === null || n === void 0 ? void 0 : n.redirectTo) !== null && r !== void 0 ? r : void 0 }), !((o = t == null ? void 0 : t.options) === null || o === void 0) && o.captchaToken ? { gotrue_meta_security: { captcha_token: t.options.captchaToken } } : null), { skip_http_redirect: !0, code_challenge: s, code_challenge_method: a }),
        headers: this.headers,
      });
    } catch (s) {
        return { data: null, error: s };
      throw s;
    }
  }
  /**
   * Sends a reauthentication OTP to the user's email or phone number.
   * Requires the user to be signed-in.
   */
  async reauthenticate() {
    return await this.initializePromise, await this._acquireLock(-1, async () => await this._reauthenticate());
  }
  async _reauthenticate() {
    try {
      return await this._useSession(async (t) => {
        const { data: { session: n }, error: r } = t;
        if (r)
          throw r;
        if (!n)
          headers: this.headers,
          jwt: n.access_token
        });
        return { data: { user: null, session: null }, error: o };
      });
    } catch (t) {
        return { data: { user: null, session: null }, error: t };
      throw t;
    }
  }
  /**
   * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.
   */
  async resend(t) {
    try {
      const n = `${this.url}/resend`;
      if ("email" in t) {
          headers: this.headers,
          body: {
            email: r,
            type: o,
            gotrue_meta_security: { captcha_token: s == null ? void 0 : s.captchaToken }
          },
          redirectTo: s == null ? void 0 : s.emailRedirectTo
        });
        return { data: { user: null, session: null }, error: a };
      } else if ("phone" in t) {
          headers: this.headers,
          body: {
            phone: r,
            type: o,
            gotrue_meta_security: { captcha_token: s == null ? void 0 : s.captchaToken }
          }
        });
        return { data: { user: null, session: null, messageId: a == null ? void 0 : a.message_id }, error: c };
      }
    } catch (n) {
        return { data: { user: null, session: null }, error: n };
      throw n;
    }
  }
  /**
   * Returns the session, refreshing it if necessary.
   *
   * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.
   *
   * **IMPORTANT:** This method loads values directly from the storage attached
   * to the client. If that storage is based on request cookies for example,
   * the values in it may not be authentic and therefore it's strongly advised
   * against using this method and its results in such circumstances. A warning
   * will be emitted if this is detected. Use {@link #getUser()} instead.
   */
  async getSession() {
    return await this.initializePromise, await this._acquireLock(-1, async () => this._useSession(async (n) => n));
  }
  /**
   * Acquires a global lock based on the storage key.
   */
  async _acquireLock(t, n) {
    this._debug("#_acquireLock", "begin", t);
    try {
      if (this.lockAcquired) {
        const r = this.pendingInLock.length ? this.pendingInLock[this.pendingInLock.length - 1] : Promise.resolve(), o = (async () => (await r, await n()))();
        return this.pendingInLock.push((async () => {
          try {
            await o;
          } catch {
          }
        })()), o;
      }
      return await this.lock(`lock:${this.storageKey}`, t, async () => {
        this._debug("#_acquireLock", "lock acquired for storage key", this.storageKey);
        try {
          this.lockAcquired = !0;
          const r = n();
          for (this.pendingInLock.push((async () => {
            try {
              await r;
            } catch {
            }
          })()), await r; this.pendingInLock.length; ) {
            const o = [...this.pendingInLock];
            await Promise.all(o), this.pendingInLock.splice(0, o.length);
          }
          return await r;
        } finally {
          this._debug("#_acquireLock", "lock released for storage key", this.storageKey), this.lockAcquired = !1;
        }
      });
    } finally {
      this._debug("#_acquireLock", "end");
    }
  }
  /**
   * Use instead of {@link #getSession} inside the library. It is
   * semantically usually what you want, as getting a session involves some
   * processing afterwards that requires only one client operating on the
   * session at once across multiple tabs or processes.
   */
  async _useSession(t) {
    this._debug("#_useSession", "begin");
    try {
      const n = await this.__loadSession();
      return await t(n);
    } finally {
      this._debug("#_useSession", "end");
    }
  }
  /**
   * NEVER USE DIRECTLY!
   *
   * Always use {@link #_useSession}.
   */
  async __loadSession() {
    this._debug("#__loadSession()", "begin"), this.lockAcquired || this._debug("#__loadSession()", "used outside of an acquired lock!", new Error().stack);
    try {
      let t = null;
      if (this._debug("#getSession()", "session from storage", n), n !== null && (this._isValidSession(n) ? t = n : (this._debug("#getSession()", "session from storage is not valid"), await this._removeSession())), !t)
        return { data: { session: null }, error: null };
      if (this._debug("#__loadSession()", `session has${r ? "" : " not"} expired`, "expires_at", t.expires_at), !r) {
        if (this.userStorage) {
        }
        if (this.storage.isServer && t.user) {
          let a = this.suppressGetSessionWarning;
          t = new Proxy(t, {
          });
        }
        return { data: { session: t }, error: null };
      }
      const { data: o, error: s } = await this._callRefreshToken(t.refresh_token);
      return s ? { data: { session: null }, error: s } : { data: { session: o }, error: null };
    } finally {
      this._debug("#__loadSession()", "end");
    }
  }
  /**
   * Gets the current user details if there is an existing session. This method
   * performs a network request to the Supabase Auth server, so the returned
   * value is authentic and can be used to base authorization rules on.
   *
   * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.
   */
  async getUser(t) {
    return t ? await this._getUser(t) : (await this.initializePromise, await this._acquireLock(-1, async () => await this._getUser()));
  }
  async _getUser(t) {
    try {
        headers: this.headers,
        jwt: t,
      }) : await this._useSession(async (n) => {
        var r, o, s;
        const { data: a, error: c } = n;
        if (c)
          throw c;
          headers: this.headers,
          jwt: (s = (o = a.session) === null || o === void 0 ? void 0 : o.access_token) !== null && s !== void 0 ? s : void 0,
        });
      });
    } catch (n) {
      throw n;
    }
  }
  /**
   * Updates user data for a logged in user.
   */
  async updateUser(t, n = {}) {
    return await this.initializePromise, await this._acquireLock(-1, async () => await this._updateUser(t, n));
  }
  async _updateUser(t, n = {}) {
    try {
      return await this._useSession(async (r) => {
        const { data: o, error: s } = r;
        if (s)
          throw s;
        if (!o.session)
        const a = o.session;
        let c = null, f = null;
          headers: this.headers,
          redirectTo: n == null ? void 0 : n.emailRedirectTo,
          body: Object.assign(Object.assign({}, t), { code_challenge: c, code_challenge_method: f }),
          jwt: a.access_token,
        });
        if (g)
          throw g;
      });
    } catch (r) {
        return { data: { user: null }, error: r };
      throw r;
    }
  }
  /**
   * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.
   * If the refresh token or access token in the current session is invalid, an error will be thrown.
   * @param currentSession The current session that minimally contains an access token and refresh token.
   */
  async setSession(t) {
    return await this.initializePromise, await this._acquireLock(-1, async () => await this._setSession(t));
  }
  async _setSession(t) {
    try {
      if (!t.access_token || !t.refresh_token)
      const n = Date.now() / 1e3;
      let r = n, o = !0, s = null;
      if (a.exp && (r = a.exp, o = r <= n), o) {
        const { data: c, error: f } = await this._callRefreshToken(t.refresh_token);
        if (f)
          return { data: { user: null, session: null }, error: f };
        if (!c)
          return { data: { user: null, session: null }, error: null };
        s = c;
      } else {
        const { data: c, error: f } = await this._getUser(t.access_token);
        if (f)
          throw f;
        s = {
          access_token: t.access_token,
          refresh_token: t.refresh_token,
          user: c.user,
          token_type: "bearer",
          expires_in: r - n,
          expires_at: r
        }, await this._saveSession(s), await this._notifyAllSubscribers("SIGNED_IN", s);
      }
      return { data: { user: s.user, session: s }, error: null };
    } catch (n) {
        return { data: { session: null, user: null }, error: n };
      throw n;
    }
  }
  /**
   * Returns a new session, regardless of expiry status.
   * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().
   * If the current session's refresh token is invalid, an error will be thrown.
   * @param currentSession The current session. If passed in, it must contain a refresh token.
   */
  async refreshSession(t) {
    return await this.initializePromise, await this._acquireLock(-1, async () => await this._refreshSession(t));
  }
  async _refreshSession(t) {
    try {
      return await this._useSession(async (n) => {
        var r;
        if (!t) {
          const { data: a, error: c } = n;
          if (c)
            throw c;
          t = (r = a.session) !== null && r !== void 0 ? r : void 0;
        }
        if (!(t != null && t.refresh_token))
        const { data: o, error: s } = await this._callRefreshToken(t.refresh_token);
        return s ? { data: { user: null, session: null }, error: s } : o ? { data: { user: o.user, session: o }, error: null } : { data: { user: null, session: null }, error: null };
      });
    } catch (n) {
        return { data: { user: null, session: null }, error: n };
      throw n;
    }
  }
  /**
   * Gets the session data from a URL string
   */
  async _getSessionFromURL(t, n) {
    try {
      if (t.error || t.error_description || t.error_code)
          error: t.error || "unspecified_error",
          code: t.error_code || "unspecified_code"
        });
      switch (n) {
        case "implicit":
          if (this.flowType === "pkce")
          break;
        case "pkce":
          if (this.flowType === "implicit")
          break;
        default:
      }
      if (n === "pkce") {
        if (this._debug("#_initialize()", "begin", "is PKCE flow", !0), !t.code)
        const { data: I, error: M } = await this._exchangeCodeForSession(t.code);
        if (M)
          throw M;
      f && (w = parseInt(f));
      const C = w - g;
      g - T >= 120 ? console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale", T, w, g) : g - T < 0 && console.warn("@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew", T, w, g);
      const { data: E, error: O } = await this._getUser(s);
      if (O)
        throw O;
        provider_token: r,
        provider_refresh_token: o,
        access_token: s,
        expires_at: w,
        refresh_token: a,
        user: E.user
      };
    } catch (r) {
        return { data: { session: null, redirectType: null }, error: r };
      throw r;
    }
  }
  /**
   * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)
   */
  _isImplicitGrantCallback(t) {
    return !!(t.access_token || t.error_description);
  }
  /**
   * Checks if the current URL and backing storage contain parameters given by a PKCE flow
   */
  async _isPKCECallback(t) {
    return !!(t.code && n);
  }
  /**
   * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `"SIGNED_OUT"` event.
   *
   * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.
   * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.
   *
   * If using `others` scope, no `SIGNED_OUT` event is fired!
   */
  async signOut(t = { scope: "global" }) {
    return await this.initializePromise, await this._acquireLock(-1, async () => await this._signOut(t));
  }
  async _signOut({ scope: t } = { scope: "global" }) {
    return await this._useSession(async (n) => {
      var r;
      const { data: o, error: s } = n;
      if (s)
        return { error: s };
      const a = (r = o.session) === null || r === void 0 ? void 0 : r.access_token;
      if (a) {
        const { error: c } = await this.admin.signOut(a, t);
          return { error: c };
      }
    });
  }
  onAuthStateChange(t) {
      id: n,
      callback: t,
      unsubscribe: () => {
        this._debug("#unsubscribe()", "state change callback with id removed", n), this.stateChangeEmitters.delete(n);
      }
    };
    return this._debug("#onAuthStateChange()", "registered callback with id", n), this.stateChangeEmitters.set(n, r), (async () => (await this.initializePromise, await this._acquireLock(-1, async () => {
      this._emitInitialSession(n);
    })))(), { data: { subscription: r } };
  }
  async _emitInitialSession(t) {
    return await this._useSession(async (n) => {
      var r, o;
      try {
        const { data: { session: s }, error: a } = n;
        if (a)
          throw a;
        await ((r = this.stateChangeEmitters.get(t)) === null || r === void 0 ? void 0 : r.callback("INITIAL_SESSION", s)), this._debug("INITIAL_SESSION", "callback id", t, "session", s);
      } catch (s) {
        await ((o = this.stateChangeEmitters.get(t)) === null || o === void 0 ? void 0 : o.callback("INITIAL_SESSION", null)), this._debug("INITIAL_SESSION", "callback id", t, "error", s), console.error(s);
      }
    });
  }
  /**
   * Sends a password reset request to an email address. This method supports the PKCE flow.
   *
   * @param email The email address of the user.
   * @param options.redirectTo The URL to send the user to after they click the password reset link.
   * @param options.captchaToken Verification token received when the user completes the captcha on the site.
   */
  async resetPasswordForEmail(t, n = {}) {
    let r = null, o = null;
      this.storage,
      this.storageKey,
      !0
      // isPasswordRecovery
    ));
    try {
        body: {
          email: t,
          code_challenge: r,
          code_challenge_method: o,
          gotrue_meta_security: { captcha_token: n.captchaToken }
        },
        headers: this.headers,
        redirectTo: n.redirectTo
      });
    } catch (s) {
        return { data: null, error: s };
      throw s;
    }
  }
  /**
   * Gets all the identities linked to a user.
   */
  async getUserIdentities() {
    var t;
    try {
      const { data: n, error: r } = await this.getUser();
      if (r)
        throw r;
      return { data: { identities: (t = n.user.identities) !== null && t !== void 0 ? t : [] }, error: null };
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  async linkIdentity(t) {
    return "token" in t ? this.linkIdentityIdToken(t) : this.linkIdentityOAuth(t);
  }
  async linkIdentityOAuth(t) {
    var n;
    try {
      const { data: r, error: o } = await this._useSession(async (s) => {
        if (w)
          throw w;
        const C = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, t.provider, {
          redirectTo: (a = t.options) === null || a === void 0 ? void 0 : a.redirectTo,
          scopes: (c = t.options) === null || c === void 0 ? void 0 : c.scopes,
          queryParams: (f = t.options) === null || f === void 0 ? void 0 : f.queryParams,
          skipBrowserRedirect: !0
        });
          headers: this.headers,
        });
      });
      if (o)
        throw o;
    } catch (r) {
        return { data: { provider: t.provider, url: null }, error: r };
      throw r;
    }
  }
  async linkIdentityIdToken(t) {
    return await this._useSession(async (n) => {
      var r;
      try {
        const { error: o, data: { session: s } } = n;
        if (o)
          throw o;
          headers: this.headers,
          jwt: (r = s == null ? void 0 : s.access_token) !== null && r !== void 0 ? r : void 0,
          body: {
            provider: c,
            id_token: f,
            nonce: g,
            link_identity: !0,
            gotrue_meta_security: { captcha_token: a == null ? void 0 : a.captchaToken }
          },
        return C ? { data: { user: null, session: null }, error: C } : !w || !w.session || !w.user ? {
          data: { user: null, session: null },
        } : (w.session && (await this._saveSession(w.session), await this._notifyAllSubscribers("USER_UPDATED", w.session)), { data: w, error: C });
      } catch (o) {
          return { data: { user: null, session: null }, error: o };
        throw o;
      }
    });
  }
  /**
   * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.
   */
  async unlinkIdentity(t) {
    try {
      return await this._useSession(async (n) => {
        var r, o;
        const { data: s, error: a } = n;
        if (a)
          throw a;
          headers: this.headers,
          jwt: (o = (r = s.session) === null || r === void 0 ? void 0 : r.access_token) !== null && o !== void 0 ? o : void 0
        });
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  /**
   * Generates a new JWT.
   * @param refreshToken A valid refresh token that was returned on login.
   */
  async _refreshAccessToken(t) {
    const n = `#_refreshAccessToken(${t.substring(0, 5)}...)`;
    this._debug(n, "begin");
    try {
      const r = Date.now();
        body: { refresh_token: t },
        headers: this.headers,
      })), (o, s) => {
        const a = 200 * Math.pow(2, o);
      });
    } catch (r) {
        return { data: { session: null, user: null }, error: r };
      throw r;
    } finally {
      this._debug(n, "end");
    }
  }
  _isValidSession(t) {
    return typeof t == "object" && t !== null && "access_token" in t && "refresh_token" in t && "expires_at" in t;
  }
  async _handleProviderSignIn(t, n) {
    const r = await this._getUrlForProvider(`${this.url}/authorize`, t, {
      redirectTo: n.redirectTo,
      scopes: n.scopes,
      queryParams: n.queryParams
    });
  }
  /**
   * Recovers the session from LocalStorage and refreshes the token
   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.
   */
  async _recoverAndRefresh() {
    var t, n;
    const r = "#_recoverAndRefresh()";
    this._debug(r, "begin");
    try {
      if (o && this.userStorage) {
      } else if (o && !o.user && !o.user) {
      }
      if (this._debug(r, "session from storage", o), !this._isValidSession(o)) {
        this._debug(r, "session is not valid"), o !== null && await this._removeSession();
        return;
      }
        if (this.autoRefreshToken && o.refresh_token) {
          const { error: a } = await this._callRefreshToken(o.refresh_token);
        }
      } else if (o.user && o.user.__isUserNotAvailableProxy === !0)
        try {
          const { data: a, error: c } = await this._getUser(o.access_token);
          !c && (a != null && a.user) ? (o.user = a.user, await this._saveSession(o), await this._notifyAllSubscribers("SIGNED_IN", o)) : this._debug(r, "could not get user data, skipping SIGNED_IN notification");
        } catch (a) {
          console.error("Error getting user data:", a), this._debug(r, "error getting user data, skipping SIGNED_IN notification", a);
        }
      else
        await this._notifyAllSubscribers("SIGNED_IN", o);
    } catch (o) {
      this._debug(r, "error", o), console.error(o);
      return;
    } finally {
      this._debug(r, "end");
    }
  }
  async _callRefreshToken(t) {
    var n, r;
    if (!t)
    if (this.refreshingDeferred)
      return this.refreshingDeferred.promise;
    const o = `#_callRefreshToken(${t.substring(0, 5)}...)`;
    this._debug(o, "begin");
    try {
      const { data: s, error: a } = await this._refreshAccessToken(t);
      if (a)
        throw a;
      if (!s.session)
      await this._saveSession(s.session), await this._notifyAllSubscribers("TOKEN_REFRESHED", s.session);
      const c = { data: s.session, error: null };
      return this.refreshingDeferred.resolve(c), c;
    } catch (s) {
        const a = { data: null, error: s };
      }
      throw (r = this.refreshingDeferred) === null || r === void 0 || r.reject(s), s;
    } finally {
      this.refreshingDeferred = null, this._debug(o, "end");
    }
  }
  async _notifyAllSubscribers(t, n, r = !0) {
    const o = `#_notifyAllSubscribers(${t})`;
    this._debug(o, "begin", n, `broadcast = ${r}`);
    try {
      this.broadcastChannel && r && this.broadcastChannel.postMessage({ event: t, session: n });
      const s = [], a = Array.from(this.stateChangeEmitters.values()).map(async (c) => {
        try {
          await c.callback(t, n);
        } catch (f) {
          s.push(f);
        }
      });
      if (await Promise.all(a), s.length > 0) {
        for (let c = 0; c < s.length; c += 1)
          console.error(s[c]);
        throw s[0];
      }
    } finally {
      this._debug(o, "end");
    }
  }
  /**
   * set currentSession and currentUser
   * process to _startAutoRefreshToken if possible
   */
  async _saveSession(t) {
    this._debug("#_saveSession()", t), this.suppressGetSessionWarning = !0;
    const n = Object.assign({}, t), r = n.user && n.user.__isUserNotAvailableProxy === !0;
    if (this.userStorage) {
        user: n.user
      });
      const o = Object.assign({}, n);
      delete o.user;
    } else {
    }
  }
  async _removeSession() {
  }
  /**
   * Removes any registered visibilitychange callback.
   *
   * {@see #startAutoRefresh}
   * {@see #stopAutoRefresh}
   */
  _removeVisibilityChangedCallback() {
    this._debug("#_removeVisibilityChangedCallback()");
    const t = this.visibilityChangedCallback;
    this.visibilityChangedCallback = null;
    try {
    } catch (n) {
      console.error("removing visibilitychange callback failed", n);
    }
  }
  /**
   * This is the private implementation of {@link #startAutoRefresh}. Use this
   * within the library.
   */
  async _startAutoRefresh() {
    await this._stopAutoRefresh(), this._debug("#_startAutoRefresh()");
    this.autoRefreshTicker = t, t && typeof t == "object" && typeof t.unref == "function" ? t.unref() : typeof Deno < "u" && typeof Deno.unrefTimer == "function" && Deno.unrefTimer(t), setTimeout(async () => {
      await this.initializePromise, await this._autoRefreshTokenTick();
    }, 0);
  }
  /**
   * This is the private implementation of {@link #stopAutoRefresh}. Use this
   * within the library.
   */
  async _stopAutoRefresh() {
    this._debug("#_stopAutoRefresh()");
    const t = this.autoRefreshTicker;
    this.autoRefreshTicker = null, t && clearInterval(t);
  }
  /**
   * Starts an auto-refresh process in the background. The session is checked
   * every few seconds. Close to the time of expiration a process is started to
   * refresh the session. If refreshing fails it will be retried for as long as
   * necessary.
   *
   * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need
   * to call this function, it will be called for you.
   *
   * On browsers the refresh process works only when the tab/window is in the
   * foreground to conserve resources as well as prevent race conditions and
   * flooding auth with requests. If you call this method any managed
   * visibility change callback will be removed and you must manage visibility
   * changes on your own.
   *
   * On non-browser platforms the refresh process works *continuously* in the
   * background, which may not be desirable. You should hook into your
   * platform's foreground indication mechanism and call these methods
   * appropriately to conserve resources.
   *
   * {@see #stopAutoRefresh}
   */
  async startAutoRefresh() {
    this._removeVisibilityChangedCallback(), await this._startAutoRefresh();
  }
  /**
   * Stops an active auto refresh process running in the background (if any).
   *
   * If you call this method any managed visibility change callback will be
   * removed and you must manage visibility changes on your own.
   *
   * See {@link #startAutoRefresh} for more details.
   */
  async stopAutoRefresh() {
    this._removeVisibilityChangedCallback(), await this._stopAutoRefresh();
  }
  /**
   * Runs the auto refresh token tick.
   */
  async _autoRefreshTokenTick() {
    this._debug("#_autoRefreshTokenTick()", "begin");
    try {
      await this._acquireLock(0, async () => {
        try {
          const t = Date.now();
          try {
            return await this._useSession(async (n) => {
              const { data: { session: r } } = n;
              if (!r || !r.refresh_token || !r.expires_at) {
                this._debug("#_autoRefreshTokenTick()", "no session");
                return;
              }
            });
          } catch (n) {
            console.error("Auto refresh tick failed with error. This is likely a transient error.", n);
          }
        } finally {
          this._debug("#_autoRefreshTokenTick()", "end");
        }
      });
    } catch (t) {
        this._debug("auto refresh token tick lock not available");
      else
        throw t;
    }
  }
  /**
   * Registers callbacks on the browser / platform, which in-turn run
   * algorithms when the browser window/tab are in foreground. On non-browser
   * platforms it assumes always foreground.
   */
  async _handleVisibilityChange() {
      return this.autoRefreshToken && this.startAutoRefresh(), !1;
    try {
      this.visibilityChangedCallback = async () => await this._onVisibilityChanged(!1), window == null || window.addEventListener("visibilitychange", this.visibilityChangedCallback), await this._onVisibilityChanged(!0);
    } catch (t) {
      console.error("_handleVisibilityChange", t);
    }
  }
  /**
   * Callback registered with `window.addEventListener('visibilitychange')`.
   */
  async _onVisibilityChanged(t) {
    const n = `#_onVisibilityChanged(${t})`;
    this._debug(n, "visibilityState", document.visibilityState), document.visibilityState === "visible" ? (this.autoRefreshToken && this._startAutoRefresh(), t || (await this.initializePromise, await this._acquireLock(-1, async () => {
      if (document.visibilityState !== "visible") {
        this._debug(n, "acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting");
        return;
      }
      await this._recoverAndRefresh();
    }))) : document.visibilityState === "hidden" && this.autoRefreshToken && this._stopAutoRefresh();
  }
  /**
   * Generates the relevant login URL for a third-party provider.
   * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.
   * @param options.scopes A space-separated list of scopes granted to the OAuth application.
   * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.
   */
  async _getUrlForProvider(t, n, r) {
    const o = [`provider=${encodeURIComponent(n)}`];
    if (r != null && r.redirectTo && o.push(`redirect_to=${encodeURIComponent(r.redirectTo)}`), r != null && r.scopes && o.push(`scopes=${encodeURIComponent(r.scopes)}`), this.flowType === "pkce") {
        code_challenge: `${encodeURIComponent(s)}`,
        code_challenge_method: `${encodeURIComponent(a)}`
      });
      o.push(c.toString());
    }
    if (r != null && r.queryParams) {
      const s = new URLSearchParams(r.queryParams);
      o.push(s.toString());
    }
    return r != null && r.skipBrowserRedirect && o.push(`skip_http_redirect=${r.skipBrowserRedirect}`), `${t}?${o.join("&")}`;
  }
  async _unenroll(t) {
    try {
      return await this._useSession(async (n) => {
        var r;
        const { data: o, error: s } = n;
          headers: this.headers,
          jwt: (r = o == null ? void 0 : o.session) === null || r === void 0 ? void 0 : r.access_token
        });
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  async _enroll(t) {
    try {
      return await this._useSession(async (n) => {
        var r, o;
        const { data: s, error: a } = n;
        if (a)
          return { data: null, error: a };
          body: c,
          headers: this.headers,
          jwt: (r = s == null ? void 0 : s.session) === null || r === void 0 ? void 0 : r.access_token
        });
      });
    } catch (n) {
        return { data: null, error: n };
      throw n;
    }
  }
  async _verify(t) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (n) => {
          var r;
          const { data: o, error: s } = n;
          if (s)
            return { data: null, error: s };
          const a = Object.assign({ challenge_id: t.challengeId }, "webauthn" in t ? {
            body: a,
            headers: this.headers,
            jwt: (r = o == null ? void 0 : o.session) === null || r === void 0 ? void 0 : r.access_token
          });
          return f ? { data: null, error: f } : (await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1e3) + c.expires_in }, c)), await this._notifyAllSubscribers("MFA_CHALLENGE_VERIFIED", c), { data: c, error: f });
        });
      } catch (n) {
          return { data: null, error: n };
        throw n;
      }
    });
  }
  async _challenge(t) {
    return this._acquireLock(-1, async () => {
      try {
        return await this._useSession(async (n) => {
          var r;
          const { data: o, error: s } = n;
          if (s)
            return { data: null, error: s };
            body: t,
            headers: this.headers,
            jwt: (r = o == null ? void 0 : o.session) === null || r === void 0 ? void 0 : r.access_token
          });
          if (a.error)
            return a;
          const { data: c } = a;
          if (c.type !== "webauthn")
            return { data: c, error: null };
          switch (c.webauthn.type) {
            case "create":
              return {
                error: null
              };
            case "request":
              return {
                error: null
              };
          }
        });
      } catch (n) {
          return { data: null, error: n };
        throw n;
      }
    });
  }
  /**
   * {@see GoTrueMFAApi#challengeAndVerify}
   */
  async _challengeAndVerify(t) {
    const { data: n, error: r } = await this._challenge({
      factorId: t.factorId
    });
    return r ? { data: null, error: r } : await this._verify({
      factorId: t.factorId,
      challengeId: n.id,
      code: t.code
    });
  }
  /**
   * {@see GoTrueMFAApi#listFactors}
   */
  async _listFactors() {
    var t;
    const { data: { user: n }, error: r } = await this.getUser();
    if (r)
      return { data: null, error: r };
    const o = {
      all: [],
      phone: [],
      totp: [],
      webauthn: []
    };
    for (const s of (t = n == null ? void 0 : n.factors) !== null && t !== void 0 ? t : [])
      o.all.push(s), s.status === "verified" && o[s.factor_type].push(s);
    return {
      data: o,
      error: null
    };
  }
  /**
   * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}
   */
  async _getAuthenticatorAssuranceLevel() {
    return this._acquireLock(-1, async () => await this._useSession(async (t) => {
      var n, r;
      const { data: { session: o }, error: s } = t;
      if (s)
        return { data: null, error: s };
      if (!o)
        return {
          data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },
          error: null
        };
      let c = null;
      a.aal && (c = a.aal);
      let f = c;
      const g = a.amr || [];
      return { data: { currentLevel: c, nextLevel: f, currentAuthenticationMethods: g }, error: null };
    }));
  }
  async fetchJwk(t, n = { keys: [] }) {
    let r = n.keys.find((c) => c.kid === t);
    if (r)
      return r;
    const o = Date.now();
      return r;
      headers: this.headers
    });
    if (a)
      throw a;
    return !s.keys || s.keys.length === 0 || (this.jwks = s, this.jwks_cached_at = o, r = s.keys.find((c) => c.kid === t), !r) ? null : r;
  }
  /**
   * Extracts the JWT claims present in the access token by first verifying the
   * JWT against the server's JSON Web Key Set endpoint
   * `/.well-known/jwks.json` which is often cached, resulting in significantly
   * faster responses. Prefer this method over {@link #getUser} which always
   * sends a request to the Auth server for each JWT.
   *
   * If the project is not using an asymmetric JWT signing key (like ECC or
   * RSA) it always sends a request to the Auth server (similar to {@link
   * #getUser}) to verify the JWT.
   *
   * @param jwt An optional specific JWT you wish to verify, not the one you
   *            can obtain from {@link #getSession}.
   * @param options Various additional options that allow you to customize the
   *                behavior of this method.
   */
  async getClaims(t, n = {}) {
    try {
      let r = t;
      if (!r) {
        const { data: C, error: T } = await this.getSession();
        if (T || !C.session)
          return { data: null, error: T };
        r = C.session.access_token;
      }
        const { error: C } = await this.getUser(r);
        if (C)
          throw C;
        return {
          data: {
            claims: s,
            header: o,
            signature: a
          },
          error: null
        };
      }
        "verify"
      ]);
      return {
        data: {
          claims: s,
          header: o,
          signature: a
        },
        error: null
      };
    } catch (r) {
        return { data: null, error: r };
      throw r;
    }
  }
}
  constructor(t) {
    super(t);
  }
}
  function o(s) {
    return s instanceof n ? s : new n(function(a) {
      a(s);
    });
  }
  return new (n || (n = Promise))(function(s, a) {
    function c(g) {
      try {
      }
    }
    function f(g) {
      try {
      }
    }
      g.done ? s(g.value) : o(g.value).then(c, f);
    }
  });
};
  /**
   * Create a new client for use in the browser.
   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.
   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.
   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.
   * @param options.auth.autoRefreshToken Set to "true" if you want to automatically refresh the token before expiring.
   * @param options.auth.persistSession Set to "true" if you want to automatically save the user session into local storage.
   * @param options.auth.detectSessionInUrl Set to "true" if you want to automatically detects OAuth grants in the URL and signs in the user.
   * @param options.realtime Options passed along to realtime-js constructor.
   * @param options.storage Options passed along to the storage-js constructor.
   * @param options.global.fetch A custom fetch implementation.
   * @param options.global.headers Any additional headers to send with each network request.
   */
  constructor(t, n, r) {
    var o, s, a;
    this.supabaseUrl = t, this.supabaseKey = n;
    if (!n)
      throw new Error("supabaseKey is required.");
    this.realtimeUrl = new URL("realtime/v1", c), this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace("http", "ws"), this.authUrl = new URL("auth/v1", c), this.storageUrl = new URL("storage/v1", c), this.functionsUrl = new URL("functions/v1", c);
    this.storageKey = (o = g.auth.storageKey) !== null && o !== void 0 ? o : "", this.headers = (s = g.global.headers) !== null && s !== void 0 ? s : {}, g.accessToken ? (this.accessToken = g.accessToken, this.auth = new Proxy({}, {
        throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(w)} is not possible`);
      }
      headers: this.headers,
      schema: g.db.schema,
      fetch: this.fetch
  }
  /**
   * Supabase Functions allows you to deploy and invoke edge functions.
   */
  get functions() {
      headers: this.headers,
      customFetch: this.fetch
    });
  }
  /**
   * Perform a query on a table or a view.
   *
   * @param relation - The table or view name to query
   */
  from(t) {
    return this.rest.from(t);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.schema
  /**
   * Select a schema to query or perform an function (rpc) call.
   *
   * The schema needs to be on the list of exposed schemas inside Supabase.
   *
   * @param schema - The schema to query
   */
  schema(t) {
    return this.rest.schema(t);
  }
  // NOTE: signatures must be kept in sync with PostgrestClient.rpc
  /**
   * Perform a function call.
   *
   * @param fn - The function name to call
   * @param args - The arguments to pass to the function call
   * @param options - Named parameters
   * @param options.head - When set to `true`, `data` will not be returned.
   * Useful if you only need the count.
   * @param options.get - When set to `true`, the function will be called with
   * read-only access mode.
   * @param options.count - Count algorithm to use to count rows returned by the
   * function. Only applicable for [set-returning
   * functions](https://www.postgresql.org/docs/current/functions-srf.html).
   *
   * `"exact"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the
   * hood.
   *
   * `"planned"`: Approximated but fast count algorithm. Uses the Postgres
   * statistics under the hood.
   *
   * `"estimated"`: Uses exact count for low numbers and planned count for high
   * numbers.
   */
  rpc(t, n = {}, r = {
    head: !1,
    get: !1,
    count: void 0
  }) {
    return this.rest.rpc(t, n, r);
  }
  /**
   * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.
   *
   * @param {string} name - The name of the Realtime channel.
   * @param {Object} opts - The options to pass to the Realtime channel.
   *
   */
  channel(t, n = { config: {} }) {
    return this.realtime.channel(t, n);
  }
  /**
   * Returns all Realtime channels.
   */
  getChannels() {
    return this.realtime.getChannels();
  }
  /**
   * Unsubscribes and removes Realtime channel from Realtime client.
   *
   * @param {RealtimeChannel} channel - The name of the Realtime channel.
   *
   */
  removeChannel(t) {
    return this.realtime.removeChannel(t);
  }
  /**
   * Unsubscribes and removes all Realtime channels from Realtime client.
   */
  removeAllChannels() {
    return this.realtime.removeAllChannels();
  }
  _getAccessToken() {
      var t, n;
      if (this.accessToken)
        return yield this.accessToken();
      const { data: r } = yield this.auth.getSession();
      return (n = (t = r.session) === null || t === void 0 ? void 0 : t.access_token) !== null && n !== void 0 ? n : this.supabaseKey;
    });
  }
    const w = {
      Authorization: `Bearer ${this.supabaseKey}`,
      apikey: `${this.supabaseKey}`
    };
      url: this.authUrl.href,
      headers: Object.assign(Object.assign({}, w), g),
      storageKey: a,
      autoRefreshToken: t,
      persistSession: n,
      detectSessionInUrl: r,
      storage: o,
      userStorage: s,
      flowType: c,
      lock: f,
      // auth checks if there is a custom authorizaiton header using this flag
      // so it knows whether to return an error when getUser is called with no session
      hasCustomAuthorizationHeader: Object.keys(this.headers).some((C) => C.toLowerCase() === "authorization")
    });
  }
  _initRealtimeClient(t) {
  }
  _listenForAuthEvents() {
    return this.auth.onAuthStateChange((n, r) => {
      this._handleTokenChanged(n, "CLIENT", r == null ? void 0 : r.access_token);
    });
  }
  _handleTokenChanged(t, n, r) {
    (t === "TOKEN_REFRESHED" || t === "SIGNED_IN") && this.changedAccessToken !== r ? (this.changedAccessToken = r, this.realtime.setAuth(r)) : t === "SIGNED_OUT" && (this.realtime.setAuth(), n == "STORAGE" && this.auth.signOut(), this.changedAccessToken = void 0);
  }
}
  if (typeof window < "u" || typeof process > "u")
    return !1;
  const e = process.version;
  if (e == null)
    return !1;
  const t = e.match(/^v(\d+)\./);
  return t ? parseInt(t[1], 10) <= 18 : !1;
}
  for (const t of e)
    if (typeof t == "string") {
      const n = t.trim();
      if (n)
        return n;
    }
}
  return t.reduce((n, r) => {
    if (n && typeof n == "object" && r in n)
      return n[r];
  }, e);
}
  if (typeof document > "u") return;
  const t = document.querySelector(`meta[name="${e}"]`), n = t == null ? void 0 : t.content;
  return typeof n == "string" && n.trim() ? n.trim() : void 0;
}
);
  return typeof e == "string" ? e.trim().toLowerCase() : "";
}
  return t.reduce((n, r) => {
    if (n && typeof n == "object" && r in n)
      return n[r];
  }, e);
}
  if (e === !0) return !0;
  if (typeof e == "number")
    return Number.isFinite(e) && e !== 0;
  if (typeof e == "string") {
    const t = e.trim().toLowerCase();
    return t ? ["true", "1", "yes", "y", "on", "enabled", "admin", "owner"].includes(t) : !1;
  }
  return !1;
}
  if (!e) return !1;
  if (Array.isArray(e))
  if (typeof e == "string") {
    const t = e.trim().toLowerCase();
  }
}
}
}
}
  if (!e || typeof e != "object") return !1;
    return !0;
    const s = [
    ];
    for (const c of s)
        return !0;
    const a = [
    ];
    for (const c of a)
      if (c) {
        if (Array.isArray(c)) {
            return !0;
          return !0;
      }
  }
  if (typeof e.role == "string" && e.role.trim().toLowerCase() === "admin")
    return !0;
  const n = [
  ];
  for (const s of n)
    if (Array.isArray(s)) {
      if (s.some((a) => typeof a == "string" && a.trim().toLowerCase() === "admin"))
        return !0;
    } else if (typeof s == "string" && s.trim().toLowerCase() === "admin")
      return !0;
  );
  if (r && r.trim().toLowerCase() === "admin")
    return !0;
  const o = [
    ["app_metadata", "is_admin"],
    ["user_metadata", "is_admin"],
    ["app_metadata", "admin"],
    ["user_metadata", "admin"],
    ["app_metadata", "isAdmin"],
    ["user_metadata", "isAdmin"],
    ["app_metadata", "adminUser"],
    ["user_metadata", "adminUser"],
    ["app_metadata", "admin_user"],
    ["user_metadata", "admin_user"],
    ["app_metadata", "is_owner"],
    ["user_metadata", "is_owner"],
    ["app_metadata", "owner"],
    ["user_metadata", "owner"],
    ["app_metadata", "claims", "admin"],
    ["user_metadata", "claims", "admin"],
    ["app_metadata", "claims_admin"],
    ["user_metadata", "claims_admin"],
    ["app_metadata", "permissions"],
    ["user_metadata", "permissions"],
    ["app_metadata", "features"],
    ["user_metadata", "features"],
    ["app_metadata", "flags"],
    ["user_metadata", "flags"]
  ];
  for (const s of o) {
      return !0;
  }
  return !1;
}
  d: "m17 7-1.41 1.41L18.17 11H8v2h10.17l-2.58 2.58L17 17l5-5zM4 5h8V3H4c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h8v-2H4z"
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6z"
}), "Add");
  if (t) throw t;
  return e ?? [];
}
    body: e
  });
  if (n) throw n;
  return t;
}
    body: e
  });
  if (n) throw n;
  return t;
}
  d: "m16 6 2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"
  d: "m16 18 2.29-2.29-4.88-4.88-4 4L2 7.41 3.41 6l6 6 4-4 6.3 6.29L22 12v6z"
}), "TrendingDown");
  }) });
}
/*!
 * @kurkle/color v0.3.4
 * https://github.com/kurkle/color#readme
 * (c) 2024 Jukka Kurkela
 * Released under the MIT License
 */
  return e + 0.5 | 0;
}
}
}
}
}
  var t = e.length, n;
  return e[0] === "#" && (t === 4 || t === 5 ? n = {
  } : (t === 7 || t === 9) && (n = {
  })), n;
}
}
  const r = t * Math.min(n, 1 - n), o = (s, a = (s + e / 30) % 12) => n - r * Math.max(Math.min(a - 3, 9 - a, 1), -1);
  return [o(0), o(8), o(4)];
}
  const r = (o, s = (o + e / 60) % 6) => n - n * t * Math.max(Math.min(s, 4 - s, 1), 0);
  return [r(5), r(3), r(1)];
}
  let o;
  for (t + n > 1 && (o = 1 / (t + n), t *= o, n *= o), o = 0; o < 3; o++)
    r[o] *= 1 - t - n, r[o] += t;
  return r;
}
  return e === o ? (t - n) / r + (t < n ? 6 : 0) : t === o ? (n - e) / r + 2 : (e - t) / r + 4;
}
  const n = e.r / 255, r = e.g / 255, o = e.b / 255, s = Math.max(n, r, o), a = Math.min(n, r, o), c = (s + a) / 2;
}
}
}
}
}
  return (e % 360 + 360) % 360;
}
  let n = 255, r;
  if (!t)
    return;
    r: r[0],
    g: r[1],
    b: r[2],
    a: n
  };
}
}
  if (!e)
    return;
}
  x: "dark",
  Z: "light",
  Y: "re",
  X: "blu",
  W: "gr",
  V: "medium",
  U: "slate",
  A: "ee",
  T: "ol",
  S: "or",
  B: "ra",
  C: "lateg",
  D: "ights",
  R: "in",
  Q: "turquois",
  E: "hi",
  P: "ro",
  O: "al",
  N: "le",
  M: "de",
  L: "yello",
  F: "en",
  K: "ch",
  G: "arks",
  H: "ea",
  I: "ightg",
  J: "wh"
  OiceXe: "f0f8ff",
  antiquewEte: "faebd7",
  aqua: "ffff",
  aquamarRe: "7fffd4",
  azuY: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "0",
  blanKedOmond: "ffebcd",
  Xe: "ff",
  XeviTet: "8a2be2",
  bPwn: "a52a2a",
  burlywood: "deb887",
  caMtXe: "5f9ea0",
  KartYuse: "7fff00",
  KocTate: "d2691e",
  cSO: "ff7f50",
  cSnflowerXe: "6495ed",
  cSnsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "ffff",
  xXe: "8b",
  xcyan: "8b8b",
  xgTMnPd: "b8860b",
  xWay: "a9a9a9",
  xgYF: "6400",
  xgYy: "a9a9a9",
  xkhaki: "bdb76b",
  xmagFta: "8b008b",
  xTivegYF: "556b2f",
  xSange: "ff8c00",
  xScEd: "9932cc",
  xYd: "8b0000",
  xsOmon: "e9967a",
  xsHgYF: "8fbc8f",
  xUXe: "483d8b",
  xUWay: "2f4f4f",
  xUgYy: "2f4f4f",
  xQe: "ced1",
  xviTet: "9400d3",
  dAppRk: "ff1493",
  dApskyXe: "bfff",
  dimWay: "696969",
  dimgYy: "696969",
  dodgerXe: "1e90ff",
  fiYbrick: "b22222",
  flSOwEte: "fffaf0",
  foYstWAn: "228b22",
  fuKsia: "ff00ff",
  gaRsbSo: "dcdcdc",
  ghostwEte: "f8f8ff",
  gTd: "ffd700",
  gTMnPd: "daa520",
  Way: "808080",
  gYF: "8000",
  gYFLw: "adff2f",
  gYy: "808080",
  honeyMw: "f0fff0",
  hotpRk: "ff69b4",
  RdianYd: "cd5c5c",
  Rdigo: "4b0082",
  ivSy: "fffff0",
  khaki: "f0e68c",
  lavFMr: "e6e6fa",
  lavFMrXsh: "fff0f5",
  lawngYF: "7cfc00",
  NmoncEffon: "fffacd",
  ZXe: "add8e6",
  ZcSO: "f08080",
  Zcyan: "e0ffff",
  ZgTMnPdLw: "fafad2",
  ZWay: "d3d3d3",
  ZgYF: "90ee90",
  ZgYy: "d3d3d3",
  ZpRk: "ffb6c1",
  ZsOmon: "ffa07a",
  ZsHgYF: "20b2aa",
  ZskyXe: "87cefa",
  ZUWay: "778899",
  ZUgYy: "778899",
  ZstAlXe: "b0c4de",
  ZLw: "ffffe0",
  lime: "ff00",
  limegYF: "32cd32",
  lRF: "faf0e6",
  magFta: "ff00ff",
  maPon: "800000",
  VaquamarRe: "66cdaa",
  VXe: "cd",
  VScEd: "ba55d3",
  VpurpN: "9370db",
  VsHgYF: "3cb371",
  VUXe: "7b68ee",
  VsprRggYF: "fa9a",
  VQe: "48d1cc",
  VviTetYd: "c71585",
  midnightXe: "191970",
  mRtcYam: "f5fffa",
  mistyPse: "ffe4e1",
  moccasR: "ffe4b5",
  navajowEte: "ffdead",
  navy: "80",
  Tdlace: "fdf5e6",
  Tive: "808000",
  TivedBb: "6b8e23",
  Sange: "ffa500",
  SangeYd: "ff4500",
  ScEd: "da70d6",
  pOegTMnPd: "eee8aa",
  pOegYF: "98fb98",
  pOeQe: "afeeee",
  pOeviTetYd: "db7093",
  papayawEp: "ffefd5",
  pHKpuff: "ffdab9",
  peru: "cd853f",
  pRk: "ffc0cb",
  plum: "dda0dd",
  powMrXe: "b0e0e6",
  purpN: "800080",
  YbeccapurpN: "663399",
  Yd: "ff0000",
  Psybrown: "bc8f8f",
  PyOXe: "4169e1",
  saddNbPwn: "8b4513",
  sOmon: "fa8072",
  sandybPwn: "f4a460",
  sHgYF: "2e8b57",
  sHshell: "fff5ee",
  siFna: "a0522d",
  silver: "c0c0c0",
  skyXe: "87ceeb",
  UXe: "6a5acd",
  UWay: "708090",
  UgYy: "708090",
  snow: "fffafa",
  sprRggYF: "ff7f",
  stAlXe: "4682b4",
  tan: "d2b48c",
  teO: "8080",
  tEstN: "d8bfd8",
  tomato: "ff6347",
  Qe: "40e0d0",
  viTet: "ee82ee",
  JHt: "f5deb3",
  wEte: "ffffff",
  wEtesmoke: "f5f5f5",
  Lw: "ffff00",
  LwgYF: "9acd32"
};
  let r, o, s, a, c;
  for (r = 0; r < t.length; r++) {
    for (a = c = t[r], o = 0; o < n.length; o++)
  }
  return e;
}
  return t && {
    r: t[0],
    g: t[1],
    b: t[2],
    a: t.length === 4 ? t[3] : 255
  };
}
  let n = 255, r, o, s;
  if (t) {
    if (t[7] !== r) {
      const a = +t[7];
    }
      r,
      g: o,
      b: s,
      a: n
    };
  }
}
}
  return {
    a: e.a + n * (t.a - e.a)
  };
}
  if (e) {
  }
}
  return e && Object.assign(t || {}, e);
}
  var t = { r: 0, g: 0, b: 0, a: 255 };
}
}
  constructor(t) {
      return t;
    const n = typeof t;
    let r;
  }
  get valid() {
    return this._valid;
  }
  get rgb() {
  }
  set rgb(t) {
  }
  rgbString() {
  }
  hexString() {
  }
  hslString() {
  }
  mix(t, n) {
    if (t) {
      const r = this.rgb, o = t.rgb;
      let s;
    }
    return this;
  }
  interpolate(t, n) {
  }
  clone() {
  }
  alpha(t) {
  }
  clearer(t) {
    const n = this._rgb;
    return n.a *= 1 - t, this;
  }
  greyscale() {
    return t.r = t.g = t.b = n, this;
  }
  opaquer(t) {
    const n = this._rgb;
    return n.a *= 1 + t, this;
  }
  negate() {
    const t = this._rgb;
    return t.r = 255 - t.r, t.g = 255 - t.g, t.b = 255 - t.b, this;
  }
  lighten(t) {
  }
  darken(t) {
  }
  saturate(t) {
  }
  desaturate(t) {
  }
  rotate(t) {
  }
}
/*!
 * Chart.js v4.5.1
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
}
  let e = 0;
  return () => e++;
})();
  return e == null;
}
  if (Array.isArray && Array.isArray(e))
    return !0;
  const t = Object.prototype.toString.call(e);
  return t.slice(0, 7) === "[object" && t.slice(-6) === "Array]";
}
  return e !== null && Object.prototype.toString.call(e) === "[object Object]";
}
  return (typeof e == "number" || e instanceof Number) && isFinite(+e);
}
}
  return typeof e > "u" ? t : e;
}
  if (e && typeof e.call == "function")
    return e.apply(n, t);
}
  let o, s, a;
    for (s = e.length, o = 0; o < s; o++)
      t.call(n, e[o], o);
    for (a = Object.keys(e), s = a.length, o = 0; o < s; o++)
      t.call(n, e[a[o]], a[o]);
}
  let n, r, o, s;
  if (!e || !t || e.length !== t.length)
    return !1;
  for (n = 0, r = e.length; n < r; ++n)
    if (o = e[n], s = t[n], o.datasetIndex !== s.datasetIndex || o.index !== s.index)
      return !1;
  return !0;
}
    const t = /* @__PURE__ */ Object.create(null), n = Object.keys(e), r = n.length;
    let o = 0;
    for (; o < r; ++o)
    return t;
  }
  return e;
}
  return [
    "__proto__",
    "prototype",
    "constructor"
  ].indexOf(e) === -1;
}
    return;
  const o = t[e], s = n[e];
}
    t
  ], o = r.length;
    return e;
  n = n || {};
  let a;
  for (let c = 0; c < o; ++c) {
      continue;
    const f = Object.keys(a);
  }
  return e;
}
  });
}
    return;
  const r = t[e], o = n[e];
}
  // Chart.helpers.core resolveObjectKey should resolve empty key to root object
  "": (e) => e,
  // default resolvers
  x: (e) => e.x,
  y: (e) => e.y
};
  const t = e.split("."), n = [];
  let r = "";
  for (const o of t)
    r += o, r.endsWith("\\") ? r = r.slice(0, -1) + "." : (n.push(r), r = "");
  return n;
}
  return (n) => {
    for (const r of t) {
      if (r === "")
        break;
      n = n && n[r];
    }
    return n;
  };
}
}
  return e.charAt(0).toUpperCase() + e.slice(1);
}
  if (e.size !== t.size)
    return !1;
  for (const n of e)
    if (!t.has(n))
      return !1;
  return !0;
};
  return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
  return Math.abs(e - t) < n;
}
  const t = Math.round(e);
  return (r <= 1 ? 1 : r <= 2 ? 2 : r <= 5 ? 5 : 10) * n;
}
  const t = [], n = Math.sqrt(e);
  let r;
  for (r = 1; r < n; r++)
    e % r === 0 && (t.push(r), t.push(e / r));
  return n === (n | 0) && t.push(n), t.sort((o, s) => o - s).pop(), t;
}
  return typeof e == "symbol" || typeof e == "object" && e !== null && !(Symbol.toPrimitive in e || "toString" in e || "valueOf" in e);
}
}
  const n = Math.round(e);
  return n - t <= e && n + t >= e;
}
  let r, o, s;
  for (r = 0, o = e.length; r < o; r++)
    s = e[r][n], isNaN(s) || (t.min = Math.min(t.min, s), t.max = Math.max(t.max, s));
}
}
}
    return;
  let t = 1, n = 0;
  for (; Math.round(e * t) / t !== e; )
    t *= 10, n++;
  return n;
}
  const n = t.x - e.x, r = t.y - e.y, o = Math.sqrt(n * n + r * r);
  let s = Math.atan2(r, n);
    angle: s,
    distance: o
  };
}
  return Math.sqrt(Math.pow(t.x - e.x, 2) + Math.pow(t.y - e.y, 2));
}
}
}
}
  return Math.max(t, Math.min(n, e));
}
}
  return e >= Math.min(t, n) - r && e <= Math.max(t, n) + r;
}
  n = n || ((a) => e[a] < t);
  let r = e.length - 1, o = 0, s;
  for (; r - o > 1; )
    s = o + r >> 1, n(s) ? o = s : r = s;
  return {
    lo: o,
    hi: r
  };
}
  const s = e[o][t];
  return s < n || s === n && e[o + 1][t] === n;
  let r = 0, o = e.length;
  for (; r < o && e[r] < t; )
    r++;
  for (; o > r && e[o - 1] > n; )
    o--;
  return r > 0 || o < e.length ? e.slice(r, o) : e;
}
  "push",
  "pop",
  "shift",
  "splice",
  "unshift"
];
  if (e._chartjs) {
    e._chartjs.listeners.push(t);
    return;
  }
  Object.defineProperty(e, "_chartjs", {
    configurable: !0,
    enumerable: !1,
    value: {
      listeners: [
        t
      ]
    }
    Object.defineProperty(e, n, {
      configurable: !0,
      enumerable: !1,
      value(...s) {
        const a = o.apply(this, s);
        return e._chartjs.listeners.forEach((c) => {
          typeof c[r] == "function" && c[r](...s);
        }), a;
      }
    });
  });
}
  const n = e._chartjs;
  if (!n)
    return;
  const r = n.listeners, o = r.indexOf(t);
    delete e[s];
  }), delete e._chartjs);
}
  const t = new Set(e);
  return t.size === e.length ? e : Array.from(t);
}
  return typeof window > "u" ? function(e) {
    return e();
  } : window.requestAnimationFrame;
}();
  let n = [], r = !1;
  return function(...o) {
      r = !1, e.apply(t, n);
    }));
  };
}
  let n;
  return function(...r) {
    return t ? (clearTimeout(n), n = setTimeout(e, t, r)) : e.apply(this, r), t;
  };
}
  linear: (e) => e,
  easeInQuad: (e) => e * e,
  easeOutQuad: (e) => -e * (e - 2),
  easeInOutQuad: (e) => (e /= 0.5) < 1 ? 0.5 * e * e : -0.5 * (--e * (e - 2) - 1),
  easeInCubic: (e) => e * e * e,
  easeOutCubic: (e) => (e -= 1) * e * e + 1,
  easeInOutCubic: (e) => (e /= 0.5) < 1 ? 0.5 * e * e * e : 0.5 * ((e -= 2) * e * e + 2),
  easeInQuart: (e) => e * e * e * e,
  easeOutQuart: (e) => -((e -= 1) * e * e * e - 1),
  easeInOutQuart: (e) => (e /= 0.5) < 1 ? 0.5 * e * e * e * e : -0.5 * ((e -= 2) * e * e * e - 2),
  easeInQuint: (e) => e * e * e * e * e,
  easeOutQuint: (e) => (e -= 1) * e * e * e * e + 1,
  easeInOutQuint: (e) => (e /= 0.5) < 1 ? 0.5 * e * e * e * e * e : 0.5 * ((e -= 2) * e * e * e * e + 2),
  easeInExpo: (e) => e === 0 ? 0 : Math.pow(2, 10 * (e - 1)),
  easeOutExpo: (e) => e === 1 ? 1 : -Math.pow(2, -10 * e) + 1,
  easeInCirc: (e) => e >= 1 ? e : -(Math.sqrt(1 - e * e) - 1),
  easeOutCirc: (e) => Math.sqrt(1 - (e -= 1) * e),
  easeInOutCirc: (e) => (e /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - e * e) - 1) : 0.5 * (Math.sqrt(1 - (e -= 2) * e) + 1),
  easeInOutElastic(e) {
  },
  easeInBack(e) {
    return e * e * ((1.70158 + 1) * e - 1.70158);
  },
  easeOutBack(e) {
    return (e -= 1) * e * ((1.70158 + 1) * e + 1.70158) + 1;
  },
  easeInOutBack(e) {
    let t = 1.70158;
    return (e /= 0.5) < 1 ? 0.5 * (e * e * (((t *= 1.525) + 1) * e - t)) : 0.5 * ((e -= 2) * e * (((t *= 1.525) + 1) * e + t) + 2);
  },
  easeOutBounce(e) {
    return e < 1 / 2.75 ? 7.5625 * e * e : e < 2 / 2.75 ? 7.5625 * (e -= 1.5 / 2.75) * e + 0.75 : e < 2.5 / 2.75 ? 7.5625 * (e -= 2.25 / 2.75) * e + 0.9375 : 7.5625 * (e -= 2.625 / 2.75) * e + 0.984375;
  },
};
  if (e && typeof e == "object") {
    const t = e.toString();
    return t === "[object CanvasPattern]" || t === "[object CanvasGradient]";
  }
  return !1;
}
}
}
  "x",
  "y",
  "borderWidth",
  "radius",
  "tension"
  "color",
  "borderColor",
  "backgroundColor"
];
  e.set("animation", {
    delay: void 0,
    duration: 1e3,
    easing: "easeOutQuart",
    fn: void 0,
    from: void 0,
    loop: void 0,
    to: void 0,
    type: void 0
  }), e.describe("animation", {
    _fallback: !1,
    _indexable: !1,
    _scriptable: (t) => t !== "onProgress" && t !== "onComplete" && t !== "fn"
  }), e.set("animations", {
    colors: {
      type: "color",
    },
    numbers: {
      type: "number",
    }
  }), e.describe("animations", {
    _fallback: "animation"
  }), e.set("transitions", {
    active: {
      animation: {
        duration: 400
      }
    },
    resize: {
      animation: {
        duration: 0
      }
    },
    show: {
      animations: {
        colors: {
          from: "transparent"
        },
        visible: {
          type: "boolean",
          duration: 0
        }
      }
    },
    hide: {
      animations: {
        colors: {
          to: "transparent"
        },
        visible: {
          type: "boolean",
          easing: "linear",
          fn: (t) => t | 0
        }
      }
    }
  });
}
  e.set("layout", {
    autoPadding: !0,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  });
}
  t = t || {};
  const n = e + JSON.stringify(t);
}
}
  values(e) {
  },
  numeric(e, t, n) {
    if (e === 0)
      return "0";
    const r = this.chart.options.locale;
    let o, s = e;
    if (n.length > 1) {
    }
      notation: o,
      minimumFractionDigits: c,
      maximumFractionDigits: c
    };
  }
};
  let n = t.length > 3 ? t[2].value - t[1].value : t[1].value - t[0].value;
  return Math.abs(n) >= 1 && e !== Math.floor(e) && (n = e - Math.floor(e)), n;
}
};
  e.set("scale", {
    display: !0,
    offset: !1,
    reverse: !1,
    beginAtZero: !1,
    bounds: "ticks",
    clip: !0,
    grace: 0,
    grid: {
      display: !0,
      lineWidth: 1,
      drawOnChartArea: !0,
      drawTicks: !0,
      tickLength: 8,
      tickWidth: (t, n) => n.lineWidth,
      tickColor: (t, n) => n.color,
      offset: !1
    },
    border: {
      display: !0,
      dash: [],
      dashOffset: 0,
      width: 1
    },
    title: {
      display: !1,
      text: "",
      padding: {
        top: 4,
        bottom: 4
      }
    },
    ticks: {
      minRotation: 0,
      maxRotation: 50,
      mirror: !1,
      textStrokeWidth: 0,
      textStrokeColor: "",
      padding: 3,
      display: !0,
      autoSkip: !0,
      autoSkipPadding: 3,
      labelOffset: 0,
      minor: {},
      major: {},
      align: "center",
      crossAlign: "near",
      showLabelBackdrop: !1,
      backdropColor: "rgba(255, 255, 255, 0.75)",
      backdropPadding: 2
    }
  }), e.route("scale.ticks", "color", "", "color"), e.route("scale.grid", "color", "", "borderColor"), e.route("scale.border", "color", "", "borderColor"), e.route("scale.title", "color", "", "color"), e.describe("scale", {
    _fallback: !1,
    _scriptable: (t) => !t.startsWith("before") && !t.startsWith("after") && t !== "callback" && t !== "parser",
    _indexable: (t) => t !== "borderDash" && t !== "tickBorderDash" && t !== "dash"
  }), e.describe("scales", {
    _fallback: "scale"
  }), e.describe("scale.ticks", {
    _scriptable: (t) => t !== "backdropPadding" && t !== "callback",
    _indexable: (t) => t !== "backdropPadding"
  });
}
  if (!t)
    return e;
  const n = t.split(".");
  for (let r = 0, o = n.length; r < o; ++r) {
    const s = n[r];
    e = e[s] || (e[s] = /* @__PURE__ */ Object.create(null));
  }
  return e;
}
}
  constructor(t, n) {
    this.animation = void 0, this.backgroundColor = "rgba(0,0,0,0.1)", this.borderColor = "rgba(0,0,0,0.1)", this.color = "#666", this.datasets = {}, this.devicePixelRatio = (r) => r.chart.platform.getDevicePixelRatio(), this.elements = {}, this.events = [
      "mousemove",
      "mouseout",
      "click",
      "touchstart",
      "touchmove"
    ], this.font = {
      family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
      size: 12,
      style: "normal",
      lineHeight: 1.2,
      weight: null
      mode: "nearest",
      intersect: !0,
      includeInvisible: !1
    }, this.maintainAspectRatio = !0, this.onHover = null, this.onClick = null, this.parsing = !0, this.plugins = {}, this.responsive = !0, this.scale = void 0, this.scales = {}, this.showLine = !0, this.drawActiveElementsOnTop = !0, this.describe(t), this.apply(n);
  }
  set(t, n) {
  }
  get(t) {
  }
  describe(t, n) {
  }
  override(t, n) {
  }
  route(t, n, r, o) {
    Object.defineProperties(s, {
      [c]: {
        value: s[n],
        writable: !0
      },
      [n]: {
        enumerable: !0,
        get() {
        },
        set(f) {
          this[c] = f;
        }
      }
    });
  }
  apply(t) {
    t.forEach((n) => n(this));
  }
}
  _scriptable: (e) => !e.startsWith("on"),
  _indexable: (e) => e !== "events",
  hover: {
    _fallback: "interaction"
  },
  interaction: {
    _scriptable: !1,
    _indexable: !1
  }
}, [
]);
}
  let s = t[o];
  return s || (s = t[o] = e.measureText(o).width, n.push(o)), s > r && (r = s), r;
}
  const r = e.currentDevicePixelRatio, o = n !== 0 ? Math.max(n / 2, 0.5) : 0;
  return Math.round((t - o) * r) / r + o;
}
  !t && !e || (t = t || e.getContext("2d"), t.save(), t.resetTransform(), t.clearRect(0, 0, e.width, e.height), t.restore());
}
}
  const C = t.pointStyle, T = t.rotation, E = t.radius;
  if (C && typeof C == "object" && (s = C.toString(), s === "[object HTMLImageElement]" || s === "[object HTMLCanvasElement]")) {
    e.save(), e.translate(n, r), e.rotate(O), e.drawImage(C, -C.width / 2, -C.height / 2, C.width, C.height), e.restore();
    return;
  }
  if (!(isNaN(E) || E <= 0)) {
    switch (e.beginPath(), C) {
      default:
        break;
      case "triangle":
        break;
      case "rectRounded":
        break;
      case "rect":
        if (!T) {
          f = Math.SQRT1_2 * E, g = o ? o / 2 : f, e.rect(n - g, r - f, 2 * g, 2 * f);
          break;
        }
      case "rectRot":
        break;
      case "crossRot":
      case "cross":
        break;
      case "star":
        break;
      case "line":
        a = o ? o / 2 : Math.cos(O) * E, c = Math.sin(O) * E, e.moveTo(n - a, r - c), e.lineTo(n + a, r + c);
        break;
      case "dash":
        e.moveTo(n, r), e.lineTo(n + Math.cos(O) * (o ? o / 2 : E), r + Math.sin(O) * E);
        break;
      case !1:
        e.closePath();
        break;
    }
    e.fill(), t.borderWidth > 0 && e.stroke();
  }
}
  return n = n || 0.5, !t || e && e.x > t.left - n && e.x < t.right + n && e.y > t.top - n && e.y < t.bottom + n;
}
  e.save(), e.beginPath(), e.rect(t.left, t.top, t.right - t.left, t.bottom - t.top), e.clip();
}
  e.restore();
}
  if (!t)
    return e.lineTo(n.x, n.y);
  if (o === "middle") {
    const s = (t.x + n.x) / 2;
    e.lineTo(s, t.y), e.lineTo(s, n.y);
  } else o === "after" != !!r ? e.lineTo(t.x, n.y) : e.lineTo(n.x, t.y);
  e.lineTo(n.x, n.y);
}
  if (!t)
    return e.lineTo(n.x, n.y);
  e.bezierCurveTo(r ? t.cp1x : t.cp2x, r ? t.cp1y : t.cp2y, r ? n.cp2x : n.cp1x, r ? n.cp2y : n.cp1y, n.x, n.y);
}
}
  if (o.strikethrough || o.underline) {
    e.strokeStyle = e.fillStyle, e.beginPath(), e.lineWidth = o.decorationWidth || 2, e.moveTo(a, g), e.lineTo(c, g), e.stroke();
  }
}
  const n = e.fillStyle;
  e.fillStyle = t.color, e.fillRect(t.left, t.top, t.width, t.height), e.fillStyle = n;
}
    t
  ], c = s.strokeWidth > 0 && s.strokeColor !== "";
  e.restore();
}
  const { x: n, y: r, w: o, h: s, radius: a } = t;
}
  if (!n || n[1] === "normal")
    return t * 1.2;
  switch (e = +n[2], n[3]) {
    case "px":
      return e;
    case "%":
      e /= 100;
      break;
  }
  return t * e;
}
  for (const a of o)
  return n;
}
    top: "y",
    right: "x",
    bottom: "y",
    left: "x"
  });
}
    "topLeft",
    "topRight",
    "bottomLeft",
    "bottomRight"
  ]);
}
  return t.width = t.left + t.right, t.height = t.top + t.bottom, t;
}
  typeof n == "string" && (n = parseInt(n, 10));
  const o = {
    size: n,
    style: r,
    string: ""
  };
}
  let o, s, a;
  for (o = 0, s = e.length; o < s; ++o)
    if (a = e[o], a !== void 0 && a !== void 0)
      return a;
}
  return {
    min: a(r, -Math.abs(s)),
    max: a(o, s)
  };
}
  return Object.assign(Object.create(e), t);
}
  ""
], n, r, o = () => e[0]) {
  const s = n || e;
  const a = {
    [Symbol.toStringTag]: "Object",
    _cacheable: !0,
    _scopes: e,
    _rootScopes: s,
    _fallback: r,
    _getTarget: o,
      c,
      ...e
    ], t, s, r)
  };
  return new Proxy(a, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(c, f) {
      return delete c[f], delete c._keys, delete e[0][f], !0;
    },
    /**
    * A trap for getting property values.
    */
    get(c, f) {
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(c, f) {
      return Reflect.getOwnPropertyDescriptor(c._scopes[0], f);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(e[0]);
    },
    /**
    * A trap for the in operator.
    */
    has(c, f) {
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys(c) {
    },
    /**
    * A trap for setting property values.
    */
      const g = c._storage || (c._storage = o());
    }
  });
}
  const o = {
    _cacheable: !1,
    _proxy: e,
    _context: t,
    _subProxy: n,
    _stack: /* @__PURE__ */ new Set(),
  };
  return new Proxy(o, {
    /**
    * A trap for the delete operator.
    */
    deleteProperty(s, a) {
      return delete s[a], delete e[a], !0;
    },
    /**
    * A trap for getting property values.
    */
    get(s, a, c) {
    },
    /**
    * A trap for Object.getOwnPropertyDescriptor.
    * Also used by Object.hasOwnProperty.
    */
    getOwnPropertyDescriptor(s, a) {
      return s._descriptors.allKeys ? Reflect.has(e, a) ? {
        enumerable: !0,
        configurable: !0
      } : void 0 : Reflect.getOwnPropertyDescriptor(e, a);
    },
    /**
    * A trap for Object.getPrototypeOf.
    */
    getPrototypeOf() {
      return Reflect.getPrototypeOf(e);
    },
    /**
    * A trap for the in operator.
    */
    has(s, a) {
      return Reflect.has(e, a);
    },
    /**
    * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
    */
    ownKeys() {
      return Reflect.ownKeys(e);
    },
    /**
    * A trap for setting property values.
    */
    set(s, a, c) {
      return e[a] = c, delete s[a], !0;
    }
  });
}
  scriptable: !0,
  indexable: !0
}) {
  const { _scriptable: n = t.scriptable, _indexable: r = t.indexable, _allKeys: o = t.allKeys } = e;
  return {
    allKeys: o,
    scriptable: n,
    indexable: r,
  };
}
  if (Object.prototype.hasOwnProperty.call(e, t) || t === "constructor")
    return e[t];
  const r = n();
  return e[t] = r, r;
}
  const { _proxy: r, _context: o, _subProxy: s, _descriptors: a } = e;
  let c = r[t];
}
  const { _proxy: o, _context: s, _subProxy: a, _stack: c } = n;
  if (c.has(e))
    throw new Error("Recursion detected: " + Array.from(c).join("->") + "->" + e);
  c.add(e);
  let f = t(s, a || r);
}
  const { _proxy: o, _context: s, _subProxy: a, _descriptors: c } = n;
  if (typeof s.index < "u" && r(e))
    return t[s.index % t.length];
    t = [];
    for (const g of f) {
    }
  }
  return t;
}
}
  for (const s of t) {
    if (a) {
      e.add(a);
      if (typeof c < "u" && c !== n && c !== r)
        return c;
    } else if (a === !1 && typeof r < "u" && n !== r)
      return null;
  }
  return !1;
}
    ...e,
    ...o
  ], c = /* @__PURE__ */ new Set();
  c.add(r);
    ""
}
  for (; n; )
  return n;
}
  const r = e._getTarget();
  t in r || (r[t] = {});
  const o = r[t];
}
  let o;
  for (const s of t)
}
  for (const n of t) {
    if (!n)
      continue;
    const r = n[e];
    if (typeof r < "u")
      return r;
  }
}
  let t = e._keys;
}
  const t = /* @__PURE__ */ new Set();
  for (const n of e)
    for (const r of Object.keys(n).filter((o) => !o.startsWith("_")))
      t.add(r);
  return Array.from(t);
}
  return {
    previous: {
    },
    next: {
      x: s.x + w * (a.x - o.x),
      y: s.y + w * (a.y - o.y)
    }
  };
}
  const r = e.length;
  for (let g = 0; g < r - 1; ++g)
        n[g] = n[g + 1] = 0;
        continue;
      }
      o = n[g] / t[g], s = n[g + 1] / t[g], c = Math.pow(o, 2) + Math.pow(s, 2), !(c <= 9) && (a = 3 / Math.sqrt(c), n[g] = o * a * t[g], n[g + 1] = s * a * t[g]);
    }
}
      continue;
  }
}
  for (a = 0; a < r; ++a)
      }
    }
}
  return Math.max(Math.min(e, n), t);
}
  for (n = 0, r = e.length; n < r; ++n)
}
  let s, a, c, f;
  else {
    for (s = 0, a = e.length; s < a; ++s)
  }
}
  return typeof window < "u" && typeof document < "u";
}
  let t = e.parentNode;
  return t && t.toString() === "[object ShadowRoot]" && (t = t.host), t;
}
  let r;
  return typeof e == "string" ? (r = parseInt(e, 10), e.indexOf("%") !== -1 && (r = r / 100 * t.parentNode[n])) : r = e, r;
}
}
  "top",
  "right",
  "bottom",
  "left"
];
  const r = {};
  n = n ? "-" + n : "";
  for (let o = 0; o < 4; o++) {
    r[s] = parseFloat(e[t + "-" + s + n]) || 0;
  }
  return r.width = r.left + r.right, r.height = r.top + r.bottom, r;
}
  const n = e.touches, r = n && n.length ? n[0] : e, { offsetX: o, offsetY: s } = r;
  let a = !1, c, f;
    c = o, f = s;
  else {
  }
  return {
    x: c,
    y: f,
    box: a
  };
}
  if ("native" in e)
    return e;
  let { width: C, height: T } = t;
  return s && (C -= a.width + c.width, T -= a.height + c.height), {
  };
}
  let r, o;
  if (t === void 0 || n === void 0) {
    if (!s)
      t = e.clientWidth, n = e.clientHeight;
    else {
    }
  }
  return {
    width: t,
    height: n,
  };
}
  if (o.boxSizing === "content-box") {
  }
    height: g
  };
}
  const a = e.canvas;
  return a.style && (n || !a.style.height && !a.style.width) && (a.style.height = `${e.height}px`, a.style.width = `${e.width}px`), e.currentDevicePixelRatio !== r || a.height !== o || a.width !== s ? (e.currentDevicePixelRatio = r, a.height = o, a.width = s, e.ctx.setTransform(r, 0, 0, r, 0, 0), !0) : !1;
}
  let e = !1;
  try {
    const t = {
      get passive() {
        return e = !0, !1;
      }
    };
  } catch {
  }
  return e;
}();
  return r ? +r[1] : void 0;
}
  return {
    x: e.x + n * (t.x - e.x),
    y: e.y + n * (t.y - e.y)
  };
}
  return {
    x: e.x + n * (t.x - e.x),
    y: r === "middle" ? n < 0.5 ? e.y : t.y : r === "after" ? n < 1 ? e.y : t.y : n > 0 ? t.y : e.y
  };
}
  const o = {
    x: e.cp2x,
    y: e.cp2y
  }, s = {
    x: t.cp1x,
    y: t.cp1y
}
  return {
    x(n) {
      return e + e + t - n;
    },
    setWidth(n) {
      t = n;
    },
    textAlign(n) {
      return n === "center" ? n : n === "right" ? "left" : "right";
    },
    xPlus(n, r) {
      return n - r;
    },
    leftForLtr(n, r) {
      return n - r;
    }
  };
  return {
    x(e) {
      return e;
    },
    setWidth(e) {
    },
    textAlign(e) {
      return e;
    },
    xPlus(e, t) {
      return e + t;
    },
    leftForLtr(e, t) {
      return e;
    }
  };
};
}
  let n, r;
  (t === "ltr" || t === "rtl") && (n = e.canvas.style, r = [
    n.getPropertyValue("direction"),
    n.getPropertyPriority("direction")
  ], n.setProperty("direction", t, "important"), e.prevTextDirection = r);
}
  t !== void 0 && (delete e.prevTextDirection, e.canvas.style.setProperty("direction", t[0], t[1]));
}
  return e === "angle" ? {
  } : {
    compare: (t, n) => t - n,
    normalize: (t) => t
  };
}
  return {
    start: e % n,
    end: t % n,
    loop: r && (t - e + 1) % n === 0,
    style: o
  };
}
  }
    end: g,
    style: e.style
  };
}
  if (!n)
    return [
      e
    ];
      start: O,
      loop: w,
      count: a,
      style: C
    start: O,
    loop: w,
    count: a,
    style: C
  })), T;
}
  const n = [], r = e.segments;
  for (let o = 0; o < r.length; o++) {
    s.length && n.push(...s);
  }
  return n;
}
  let o = 0, s = t - 1;
  if (n && !r)
    for (; o < t && !e[o].skip; )
      o++;
  for (; o < t && e[o].skip; )
    o++;
  for (o %= t, n && (s += o); s > o && e[s % t].skip; )
    s--;
  return s %= t, {
    start: o,
    end: s
  };
}
  const o = e.length, s = [];
  let a = t, c = e[t], f;
  for (f = t + 1; f <= n; ++f) {
      start: t % o,
      end: (f - 1) % o,
      loop: r
  }
  return a !== null && s.push({
    start: t % o,
    end: a % o,
    loop: r
  }), s;
}
  const n = e.points, r = e.options.spanGaps, o = n.length;
  if (!o)
    return [];
  if (r === !0)
      {
        start: a,
        end: c,
        loop: s
      }
    ], n, t);
}
}
    const I = c ? -1 : 1;
    if (T !== E) {
      for (T += f; n[T % f].skip; )
        T -= I;
      for (; n[E % f].skip; )
        E += I;
        start: T % f,
        end: E % f,
        loop: O,
    }
  }
  for (const T of t) {
        type: "segment",
        p0: E,
        p0DataIndex: (w - 1) % f,
        p1DataIndex: w % f,
        datasetIndex: a
    }
  }
}
  return {
    backgroundColor: e.backgroundColor,
    borderCapStyle: e.borderCapStyle,
    borderDash: e.borderDash,
    borderDashOffset: e.borderDashOffset,
    borderJoinStyle: e.borderJoinStyle,
    borderWidth: e.borderWidth,
    borderColor: e.borderColor
  };
}
  if (!t)
    return !1;
  const n = [], r = function(o, s) {
  };
  return JSON.stringify(e, r) !== JSON.stringify(t, r);
}
  return e.options.clip ? e[n] : t[n];
}
  const { xScale: n, yScale: r } = e;
  return n && r ? {
  } : t;
}
  const n = t._clip;
  if (n.disabled)
    return !1;
  return {
    left: n.left === !1 ? 0 : r.left - (n.left === !0 ? 0 : n.left),
    right: n.right === !1 ? e.width : r.right + (n.right === !0 ? 0 : n.right),
    top: n.top === !1 ? 0 : r.top - (n.top === !0 ? 0 : n.top),
    bottom: n.bottom === !1 ? e.height : r.bottom + (n.bottom === !0 ? 0 : n.bottom)
  };
}
/*!
 * Chart.js v4.5.1
 * https://www.chartjs.org
 * (c) 2025 Chart.js Contributors
 * Released under the MIT License
 */
  constructor() {
    this._request = null, this._charts = /* @__PURE__ */ new Map(), this._running = !1, this._lastDate = void 0;
  }
  _notify(t, n, r, o) {
    const s = n.listeners[o], a = n.duration;
    s.forEach((c) => c({
      chart: t,
      initial: n.initial,
      numSteps: a,
      currentStep: Math.min(r - n.start, a)
    }));
  }
  _refresh() {
      this._update(), this._request = null, this._running && this._refresh();
    }));
  }
  _update(t = Date.now()) {
    let n = 0;
    this._charts.forEach((r, o) => {
      if (!r.running || !r.items.length)
        return;
      const s = r.items;
      let a = s.length - 1, c = !1, f;
      for (; a >= 0; --a)
        f = s[a], f._active ? (f._total > r.duration && (r.duration = f._total), f.tick(t), c = !0) : (s[a] = s[s.length - 1], s.pop());
      c && (o.draw(), this._notify(o, r, t, "progress")), s.length || (r.running = !1, this._notify(o, r, t, "complete"), r.initial = !1), n += s.length;
    }), this._lastDate = t, n === 0 && (this._running = !1);
  }
  _getAnims(t) {
    const n = this._charts;
    let r = n.get(t);
    return r || (r = {
      running: !1,
      initial: !0,
      items: [],
      listeners: {
        complete: [],
        progress: []
      }
    }, n.set(t, r)), r;
  }
  listen(t, n, r) {
    this._getAnims(t).listeners[n].push(r);
  }
  add(t, n) {
    !n || !n.length || this._getAnims(t).items.push(...n);
  }
  has(t) {
    return this._getAnims(t).items.length > 0;
  }
  start(t) {
    const n = this._charts.get(t);
    n && (n.running = !0, n.start = Date.now(), n.duration = n.items.reduce((r, o) => Math.max(r, o._duration), 0), this._refresh());
  }
  running(t) {
    if (!this._running)
      return !1;
    const n = this._charts.get(t);
    return !(!n || !n.running || !n.items.length);
  }
  stop(t) {
    const n = this._charts.get(t);
    if (!n || !n.items.length)
      return;
    const r = n.items;
    let o = r.length - 1;
    for (; o >= 0; --o)
      r[o].cancel();
    n.items = [], this._notify(t, n, Date.now(), "complete");
  }
  remove(t) {
    return this._charts.delete(t);
  }
}
  boolean(e, t, n) {
    return n > 0.5 ? t : e;
  },
  color(e, t, n) {
    return o && o.valid ? o.mix(r, n).hexString() : t;
  },
  number(e, t, n) {
    return e + (t - e) * n;
  }
};
  constructor(t, n, r, o) {
    const s = n[r];
      t.to,
      o,
      s,
      t.from
    ]);
      t.from,
      s,
      o
    ]);
  }
  active() {
    return this._active;
  }
  update(t, n, r) {
    if (this._active) {
      this._notify(!1);
      const o = this._target[this._prop], s = r - this._start, a = this._duration - s;
        t.to,
        n,
        o,
        t.from
        t.from,
        o,
        n
      ]);
    }
  }
  cancel() {
    this._active && (this.tick(Date.now()), this._active = !1, this._notify(!1));
  }
  tick(t) {
    const n = t - this._start, r = this._duration, o = this._prop, s = this._from, a = this._loop, c = this._to;
    let f;
    if (this._active = s !== c && (a || n < r), !this._active) {
      this._target[o] = c, this._notify(!0);
      return;
    }
    if (n < 0) {
      this._target[o] = s;
      return;
    }
    f = n / r % 2, f = a && f > 1 ? 2 - f : f, f = this._easing(Math.min(1, Math.max(0, f))), this._target[o] = this._fn(s, c, f);
  }
  wait() {
    const t = this._promises || (this._promises = []);
    return new Promise((n, r) => {
      t.push({
        res: n,
        rej: r
      });
    });
  }
  _notify(t) {
    const n = t ? "res" : "rej", r = this._promises || [];
    for (let o = 0; o < r.length; o++)
      r[o][n]();
  }
}
  constructor(t, n) {
    this._chart = t, this._properties = /* @__PURE__ */ new Map(), this.configure(n);
  }
  configure(t) {
      return;
    Object.getOwnPropertyNames(t).forEach((o) => {
      const s = t[o];
        return;
      const a = {};
      for (const c of n)
        a[c] = s[c];
        o
      ]).forEach((c) => {
        (c === o || !r.has(c)) && r.set(c, a);
      });
    });
  }
  _animateOptions(t, n) {
    if (!o)
      return [];
    const s = this._createAnimations(o, r);
      t.options = r;
    }, () => {
    }), s;
  }
  _createAnimations(t, n) {
    const r = this._properties, o = [], s = t.$animations || (t.$animations = {}), a = Object.keys(n), c = Date.now();
    let f;
    for (f = a.length - 1; f >= 0; --f) {
        continue;
        o.push(...this._animateOptions(t, n));
        continue;
      }
          continue;
        } else
      if (!w || !w.duration) {
        continue;
      }
    }
    return o;
  }
  update(t, n) {
    if (this._properties.size === 0) {
      Object.assign(t, n);
      return;
    }
    const r = this._createAnimations(t, n);
    if (r.length)
  }
}
  const n = [], r = Object.keys(t);
  for (let o = 0; o < r.length; o++) {
    const s = e[r[o]];
    s && s.active() && n.push(s.wait());
  }
  return Promise.all(n);
}
  if (!t)
    return;
  let n = e.options;
  if (!n) {
    e.options = t;
    return;
  }
  return n.$shared && (e.options = n = Object.assign({}, n, {
    $shared: !1,
    $animations: {}
  })), n;
}
  const n = e && e.options || {}, r = n.reverse, o = n.min === void 0 ? t : 0, s = n.max === void 0 ? t : 0;
  return {
    start: r ? s : o,
    end: r ? o : s
  };
}
  if (n === !1)
    return !1;
  return {
    top: o.end,
    right: r.end,
    bottom: o.start,
    left: r.start
  };
}
  let t, n, r, o;
    top: t,
    right: n,
    bottom: r,
    left: o,
    disabled: e === !1
  };
}
  const n = [], r = e._getSortedDatasetMetas(t);
  let o, s;
  for (o = 0, s = r.length; o < s; ++o)
    n.push(r[o].index);
  return n;
}
  const o = e.keys, s = r.mode === "single";
  if (t === null)
    return;
  let g = !1;
  for (a = 0, c = o.length; a < c; ++a) {
    if (f = +o[a], f === n) {
      if (g = !0, r.all)
        continue;
      break;
    }
  }
  return !g && !r.all ? 0 : t;
}
  const { iScale: n, vScale: r } = t, o = n.axis === "x" ? "x" : "y", s = r.axis === "x" ? "x" : "y", a = Object.keys(e), c = new Array(a.length);
    g = a[f], c[f] = {
      [o]: g,
      [s]: e[g]
    };
  return c;
}
  const n = e && e.options.stacked;
  return n || n === void 0 && t.stack !== void 0;
}
  return `${e.id}.${t.id}.${n.stack || n.type}`;
}
  const { min: t, max: n, minDefined: r, maxDefined: o } = e.getUserBounds();
  return {
    min: r ? t : Number.NEGATIVE_INFINITY,
    max: o ? n : Number.POSITIVE_INFINITY
  };
}
  const r = e[t] || (e[t] = {});
  return r[n] || (r[n] = {});
}
  for (const o of t.getMatchingVisibleMetas(r).reverse()) {
    const s = e[o.index];
    if (n && s > 0 || !n && s < 0)
      return o.index;
  }
  return null;
}
  let w;
    const I = w._visualValues || (w._visualValues = {});
    I[c] = O;
  }
}
  const n = e.scales;
  return Object.keys(n).filter((r) => n[r].axis === t).shift();
}
    active: !1,
    dataset: void 0,
    datasetIndex: t,
    index: t,
    mode: "default",
    type: "dataset"
  });
}
    active: !1,
    dataIndex: t,
    parsed: void 0,
    raw: void 0,
    element: n,
    index: t,
    mode: "default",
    type: "data"
  });
}
  const n = e.controller.index, r = e.vScale && e.vScale.axis;
  if (r) {
    t = t || e._parsed;
    for (const o of t) {
      const s = o._stacks;
      if (!s || s[r] === void 0 || s[r][n] === void 0)
        return;
      delete s[r][n], s[r]._visualValues !== void 0 && s[r]._visualValues[n] !== void 0 && delete s[r]._visualValues[n];
    }
  }
}
  values: null
};
  constructor(t, n) {
    this.chart = t, this._ctx = t.ctx, this.index = n, this._cachedDataOpts = {}, this._cachedMeta = this.getMeta(), this._type = this._cachedMeta.type, this.options = void 0, this._parsing = !1, this._data = void 0, this._objectData = void 0, this._sharedOptions = void 0, this._drawStart = void 0, this._drawCount = void 0, this.enableOptionSharing = !1, this.supportsDecimation = !1, this.$context = void 0, this._syncList = [], this.datasetElementType = new.target.datasetElementType, this.dataElementType = new.target.dataElementType, this.initialize();
  }
  initialize() {
    const t = this._cachedMeta;
  }
  updateIndex(t) {
  }
  linkScales() {
  }
  getDataset() {
    return this.chart.data.datasets[this.index];
  }
  getMeta() {
    return this.chart.getDatasetMeta(this.index);
  }
  getScaleForId(t) {
    return this.chart.scales[t];
  }
  _getOtherScale(t) {
    const n = this._cachedMeta;
    return t === n.iScale ? n.vScale : n.iScale;
  }
  reset() {
    this._update("reset");
  }
  _destroy() {
    const t = this._cachedMeta;
  }
  _dataCheck() {
    const t = this.getDataset(), n = t.data || (t.data = []), r = this._data;
      const o = this._cachedMeta;
    } else if (r !== n) {
      if (r) {
        const o = this._cachedMeta;
      }
    }
  }
  addElements() {
    const t = this._cachedMeta;
    this._dataCheck(), this.datasetElementType && (t.dataset = new this.datasetElementType());
  }
  buildOrUpdateElements(t) {
    const n = this._cachedMeta, r = this.getDataset();
    let o = !1;
    this._dataCheck();
    const s = n._stacked;
  }
  configure() {
    const t = this.chart.config, n = t.datasetScopeKeys(this._type), r = t.getOptionScopes(this.getDataset(), n, !0);
    this.options = t.createResolver(r, this.getContext()), this._parsing = this.options.parsing, this._cachedDataOpts = {};
  }
  parse(t, n) {
    const { _cachedMeta: r, _data: o } = this, { iScale: s, _stacked: a } = r, c = s.axis;
    if (this._parsing === !1)
      r._parsed = o, r._sorted = !0, w = o;
    else {
      for (g = 0; g < n; ++g)
      r._sorted = f;
    }
  }
  parsePrimitiveData(t, n, r, o) {
    let w, C, T;
    for (w = 0, C = o; w < C; ++w)
        [f]: a.parse(n[T], T)
      };
  }
  parseArrayData(t, n, r, o) {
    const { xScale: s, yScale: a } = t, c = new Array(o);
      };
    return c;
  }
  parseObjectData(t, n, r, o) {
      };
  }
  getParsed(t) {
    return this._cachedMeta._parsed[t];
  }
  getDataElement(t) {
    return this._cachedMeta.data[t];
  }
  applyStack(t, n, r) {
    const o = this.chart, s = this._cachedMeta, a = n[t.axis], c = {
      values: n._stacks[t.axis]._visualValues
    };
      mode: r
    });
  }
  updateRangeFromParsed(t, n, r, o) {
    const s = r[n.axis];
    let a = s === null ? NaN : s;
    const c = o && r._stacks[n.axis];
  }
  getMinMax(t, n) {
      min: Number.POSITIVE_INFINITY,
      max: Number.NEGATIVE_INFINITY
    let w, C;
    function T() {
      C = o[w];
      const E = C[c.axis];
    }
      ;
    if (s) {
      for (w = a - 1; w >= 0; --w)
        if (!T()) {
          break;
        }
    }
  }
  getAllParsedValues(t) {
    const n = this._cachedMeta._parsed, r = [];
    let o, s, a;
    for (o = 0, s = n.length; o < s; ++o)
    return r;
  }
  getMaxOverflow() {
    return !1;
  }
  getLabelAndValue(t) {
    const n = this._cachedMeta, r = n.iScale, o = n.vScale, s = this.getParsed(t);
    return {
      label: r ? "" + r.getLabelForValue(s[r.axis]) : "",
      value: o ? "" + o.getLabelForValue(s[o.axis]) : ""
    };
  }
  _update(t) {
    const n = this._cachedMeta;
  }
  update(t) {
  }
  draw() {
    let g;
    for (r.dataset && r.dataset.draw(t, s, c, f), g = c; g < c + f; ++g) {
    }
    for (g = 0; g < a.length; ++g)
      a[g].draw(t, s);
  }
  getStyle(t, n) {
    const r = n ? "active" : "default";
    return t === void 0 && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(r) : this.resolveDataElementOptions(t || 0, r);
  }
  getContext(t, n, r) {
    const o = this.getDataset();
    let s;
    if (t >= 0 && t < this._cachedMeta.data.length) {
      const a = this._cachedMeta.data[t];
    } else
    return s.active = !!n, s.mode = r, s;
  }
  resolveDatasetElementOptions(t) {
    return this._resolveElementOptions(this.datasetElementType.id, t);
  }
  resolveDataElementOptions(t, n) {
    return this._resolveElementOptions(this.dataElementType.id, n, t);
  }
  _resolveElementOptions(t, n = "default", r) {
    if (c)
      `${t}Hover`,
      "hover",
      t,
      ""
    ] : [
      t,
      ""
  }
  _resolveAnimations(t, n, r) {
    const o = this.chart, s = this._cachedDataOpts, a = `animation-${n}`, c = s[a];
    if (c)
      return c;
    let f;
    if (o.options.animation !== !1) {
      f = g.createResolver(w, this.getContext(t, r, n));
    }
  }
  getSharedOptions(t) {
    if (t.$shared)
      return this._sharedOptions || (this._sharedOptions = Object.assign({}, t));
  }
  includeOptions(t, n) {
  }
  _getSharedOptions(t, n) {
    const r = this.resolveDataElementOptions(t, n), o = this._sharedOptions, s = this.getSharedOptions(r), a = this.includeOptions(n, s) || s !== o;
    return this.updateSharedOptions(s, n, r), {
      sharedOptions: s,
      includeOptions: a
    };
  }
  updateElement(t, n, r, o) {
  }
  updateSharedOptions(t, n, r) {
  }
  _setStyle(t, n, r, o) {
    t.active = o;
    const s = this.getStyle(n, o);
    this._resolveAnimations(n, r, o).update(t, {
      options: !o && this.getSharedOptions(s) || s
    });
  }
  removeHoverStyle(t, n, r) {
    this._setStyle(t, r, "active", !1);
  }
  setHoverStyle(t, n, r) {
    this._setStyle(t, r, "active", !0);
  }
  _removeDatasetHoverStyle() {
    const t = this._cachedMeta.dataset;
    t && this._setStyle(t, void 0, "active", !1);
  }
  _setDatasetHoverStyle() {
    const t = this._cachedMeta.dataset;
    t && this._setStyle(t, void 0, "active", !0);
  }
  _resyncElements(t) {
    const n = this._data, r = this._cachedMeta.data;
    this._syncList = [];
    const o = r.length, s = n.length, a = Math.min(s, o);
    a && this.parse(0, a), s > o ? this._insertElements(o, s - o, t) : s < o && this._removeElements(s, o - s);
  }
  _insertElements(t, n, r = !0) {
    const o = this._cachedMeta, s = o.data, a = t + n;
    let c;
    };
    for (f(s), c = t; c < a; ++c)
      s[c] = new this.dataElementType();
    this._parsing && f(o._parsed), this.parse(t, n), r && this.updateElements(s, t, n, "reset");
  }
  updateElements(t, n, r, o) {
  }
  _removeElements(t, n) {
    const r = this._cachedMeta;
    if (this._parsing) {
      const o = r._parsed.splice(t, n);
    }
    r.data.splice(t, n);
  }
  _sync(t) {
    if (this._parsing)
      this._syncList.push(t);
    else {
      const [n, r, o] = t;
      this[n](r, o);
    }
    this.chart._dataChanges.push([
      this.index,
      ...t
    ]);
  }
  _onDataPush() {
    const t = arguments.length;
    this._sync([
      "_insertElements",
      this.getDataset().data.length - t,
      t
    ]);
  }
  _onDataPop() {
    this._sync([
      "_removeElements",
      this._cachedMeta.data.length - 1,
      1
    ]);
  }
  _onDataShift() {
    this._sync([
      "_removeElements",
      0,
      1
    ]);
  }
  _onDataSplice(t, n) {
    n && this._sync([
      "_removeElements",
      t,
      n
    ]);
    const r = arguments.length - 2;
    r && this._sync([
      "_insertElements",
      t,
      r
    ]);
  }
  _onDataUnshift() {
    this._sync([
      "_insertElements",
      0,
      arguments.length
    ]);
  }
}
  throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
  constructor(t) {
    this.options = t || {};
  }
  /**
  * Override default date adapter methods.
  * Accepts type parameter to define options type.
  * @example
  * Chart._adapters._date.override<{myAdapterOption: string}>({
  *   init() {
  *     console.log(this.options.myAdapterOption);
  *   }
  * })
  */
  static override(t) {
  }
  // eslint-disable-next-line @typescript-eslint/no-empty-function
  init() {
  }
  formats() {
  }
  parse() {
  }
  format() {
  }
  add() {
  }
  diff() {
  }
  startOf() {
  }
  endOf() {
  }
}
};
  const { controller: o, data: s, _sorted: a } = e, c = o._cachedMeta.iScale, f = e.dataset && e.dataset.options ? e.dataset.options.spanGaps : null;
  if (c && t === c.axis && t !== "r" && a && s.length) {
    if (r) {
      if (o._sharedOptions) {
          return {
            lo: w.lo,
            hi: C.hi
          };
        }
      }
    } else {
      if (f) {
        g.lo -= Math.max(0, C);
        g.hi += Math.max(0, T);
      }
      return g;
    }
  }
  return {
    lo: 0,
    hi: s.length - 1
  };
}
  const s = e.getSortedVisibleDatasetMetas(), a = n[t];
  for (let c = 0, f = s.length; c < f; ++c) {
      const T = g[C];
    }
  }
}
  const t = e.indexOf("x") !== -1, n = e.indexOf("y") !== -1;
  return function(r, o) {
    const s = t ? Math.abs(r.x - o.x) : 0, a = n ? Math.abs(r.y - o.y) : 0;
    return Math.sqrt(Math.pow(s, 2) + Math.pow(a, 2));
  };
}
  const s = [];
      element: c,
      datasetIndex: f,
    });
  }, !0), s;
}
  let o = [];
  function s(a, c, f) {
      "startAngle",
      "endAngle"
      x: t.x,
      y: t.y
    });
      element: a,
      datasetIndex: c,
      index: f
    });
  }
}
  let a = [];
  let f = Number.POSITIVE_INFINITY;
    const C = g.inRange(t.x, t.y, o);
    if (r && !C)
      return;
    const T = g.getCenterPoint(o);
    if (!(!!s || e.isPointInArea(T)) && !C)
      return;
    const O = c(t, T);
    O < f ? (a = [
      {
        element: g,
        index: w
      }
    ], f = O) : O === f && a.push({
      element: g,
      index: w
    });
  }
}
}
  const s = [], a = n === "x" ? "inXRange" : "inYRange";
  let c = !1;
    f[a] && f[a](t[n], o) && (s.push({
      element: f,
      index: g
    }), c = c || f.inRange(t.x, t.y, o));
  }), r && !c ? [] : s;
}
  modes: {
    index(e, t, n, r) {
          index: g
        });
      }), f) : [];
    },
    dataset(e, t, n, r) {
      if (c.length > 0) {
        c = [];
          c.push({
            datasetIndex: f,
            index: g
          });
      }
      return c;
    },
    point(e, t, n, r) {
    },
    nearest(e, t, n, r) {
    },
    x(e, t, n, r) {
    },
    y(e, t, n, r) {
    }
  }
};
  "left",
  "top",
  "right",
  "bottom"
];
  return e.filter((n) => n.pos === t);
}
}
  return e.sort((n, r) => {
    const o = t ? r : n, s = t ? n : r;
    return o.weight === s.weight ? o.index - s.index : o.weight - s.weight;
  });
}
  const t = [];
  let n, r, o, s, a, c;
  for (n = 0, r = (e || []).length; n < r; ++n)
    o = e[n], { position: s, options: { stack: a, stackWeight: c = 1 } } = o, t.push({
      index: n,
      box: o,
      pos: s,
      horizontal: o.isHorizontal(),
      weight: o.weight,
      stack: a && s + a,
      stackWeight: c
    });
  return t;
}
  const t = {};
  for (const n of e) {
    const { stack: r, pos: o, stackWeight: s } = n;
      continue;
    const a = t[r] || (t[r] = {
      count: 0,
      placed: 0,
      weight: 0,
      size: 0
    });
    a.count++, a.weight += s;
  }
  return t;
}
  let s, a, c;
  for (s = 0, a = e.length; s < a; ++s) {
    c = e[s];
    c.horizontal ? (c.width = g ? g * r : f && t.availableWidth, c.height = o) : (c.width = r, c.height = g ? g * o : f && t.availableHeight);
  }
  return n;
}
  return {
    fullSize: n,
    leftAndTop: r.concat(s),
    rightAndBottom: o.concat(f).concat(a).concat(c),
    vertical: r.concat(o).concat(f),
    horizontal: s.concat(a).concat(c)
  };
}
  return Math.max(e[n], t[n]) + Math.max(e[r], t[r]);
}
  e.top = Math.max(e.top, t.top), e.left = Math.max(e.left, t.left), e.bottom = Math.max(e.bottom, t.bottom), e.right = Math.max(e.right, t.right);
}
  const { pos: o, box: s } = n, a = e.maxPadding;
    n.size && (e[o] -= n.size);
      size: 0,
      count: 1
    };
  }
  return e.w = c, e.h = f, n.horizontal ? {
    other: g
  } : {
    same: g,
  };
}
  const t = e.maxPadding;
  function n(r) {
    const o = Math.max(t[r] - e[r], 0);
    return e[r] += o, o;
  }
  e.y += n("top"), e.x += n("left"), n("right"), n("bottom");
}
  const n = t.maxPadding;
  function r(o) {
    const s = {
      left: 0,
      top: 0,
      right: 0,
      bottom: 0
    };
    return o.forEach((a) => {
      s[a] = Math.max(t[a], n[a]);
    }), s;
  }
  return r(e ? [
    "left",
    "right"
  ] : [
    "top",
    "bottom"
  ]);
}
  const o = [];
  }
}
  e.top = n, e.left = t, e.right = t + r, e.bottom = n + o, e.width = r, e.height = o;
}
  const o = n.padding;
  let { x: s, y: a } = t;
  for (const c of e) {
      placed: 0,
      weight: 1
    if (c.horizontal) {
    } else {
    }
  }
  t.x = s, t.y = a;
}
  addBox(e, t) {
    e.boxes || (e.boxes = []), t.fullSize = t.fullSize || !1, t.position = t.position || "top", t.weight = t.weight || 0, t._layers = t._layers || function() {
      return [
        {
          z: 0,
          draw(n) {
            t.draw(n);
          }
        }
      ];
    }, e.boxes.push(t);
  },
  removeBox(e, t) {
    const n = e.boxes ? e.boxes.indexOf(t) : -1;
    n !== -1 && e.boxes.splice(n, 1);
  },
  configure(e, t, n) {
    t.fullSize = n.fullSize, t.position = n.position, t.weight = n.weight;
  },
  update(e, t, n, r) {
    if (!e)
      return;
      typeof E.beforeLayout == "function" && E.beforeLayout();
    });
      outerWidth: t,
      outerHeight: n,
      padding: o,
      availableWidth: s,
      availableHeight: a,
      vBoxMaxWidth: s / 2 / g,
      hBoxMaxHeight: a / 2
    }), w = Object.assign({}, o);
    const C = Object.assign({
      maxPadding: w,
      w: s,
      h: a,
      x: o.left,
      y: o.top
      left: C.left,
      top: C.top,
      right: C.left + C.w,
      bottom: C.top + C.h,
      height: C.h,
      width: C.w
      const O = E.box;
      Object.assign(O, e.chartArea), O.update(C.w, C.h, {
        left: 0,
        top: 0,
        right: 0,
        bottom: 0
      });
    });
  }
};
  acquireContext(t, n) {
  }
  releaseContext(t) {
    return !1;
  }
  addEventListener(t, n, r) {
  }
  removeEventListener(t, n, r) {
  }
  getDevicePixelRatio() {
    return 1;
  }
  getMaximumSize(t, n, r, o) {
    return n = Math.max(0, n || t.width), r = r || t.height, {
      width: n,
      height: Math.max(0, o ? Math.floor(n / o) : r)
    };
  }
  isAttached(t) {
    return !0;
  }
  updateConfig(t) {
  }
}
  acquireContext(t) {
    return t && t.getContext && t.getContext("2d") || null;
  }
  updateConfig(t) {
    t.options.animation = !1;
  }
}
  touchstart: "mousedown",
  touchmove: "mousemove",
  touchend: "mouseup",
  pointerenter: "mouseenter",
  pointerdown: "mousedown",
  pointermove: "mousemove",
  pointerup: "mouseup",
  pointerleave: "mouseout",
  pointerout: "mouseout"
  const n = e.style, r = e.getAttribute("height"), o = e.getAttribute("width");
    initial: {
      height: r,
      width: o,
      style: {
        display: n.display,
        height: n.height,
        width: n.width
      }
    }
    s !== void 0 && (e.width = s);
  }
    if (e.style.height === "")
      e.height = e.width / (t || 2);
    else {
      s !== void 0 && (e.height = s);
    }
  return e;
}
  passive: !0
} : !1;
}
}
  return {
    type: n,
    chart: t,
    native: e,
    x: r !== void 0 ? r : null,
    y: o !== void 0 ? o : null
  };
}
  for (const n of e)
    if (n === t || n.contains(t))
      return !0;
}
  const r = e.canvas, o = new MutationObserver((s) => {
    let a = !1;
    for (const c of s)
    a && n();
  });
  return o.observe(document, {
    childList: !0,
    subtree: !0
  }), o;
}
  const r = e.canvas, o = new MutationObserver((s) => {
    let a = !1;
    for (const c of s)
    a && n();
  });
  return o.observe(document, {
    childList: !0,
    subtree: !0
  }), o;
}
  const e = window.devicePixelRatio;
    n.currentDevicePixelRatio !== e && t();
  }));
}
}
}
  if (!o)
    return;
  }, window), a = new ResizeObserver((c) => {
  });
}
}
  }, e);
}
  acquireContext(t, n) {
    const r = t && t.getContext && t.getContext("2d");
  }
  releaseContext(t) {
    const n = t.canvas;
      return !1;
    [
      "height",
      "width"
    ].forEach((s) => {
      const a = r[s];
    });
    const o = r.style || {};
    return Object.keys(o).forEach((s) => {
      n.style[s] = o[s];
  }
  addEventListener(t, n, r) {
    this.removeEventListener(t, n);
    const o = t.$proxies || (t.$proxies = {}), a = {
    o[n] = a(t, n, r);
  }
  removeEventListener(t, n) {
    const r = t.$proxies || (t.$proxies = {}), o = r[n];
    if (!o)
      return;
    ({
  }
  getDevicePixelRatio() {
    return window.devicePixelRatio;
  }
  getMaximumSize(t, n, r, o) {
  }
  isAttached(t) {
    return !!(n && n.isConnected);
  }
}
}
  constructor() {
  }
  tooltipPosition(t) {
    const { x: n, y: r } = this.getProps([
      "x",
      "y"
    ], t);
    return {
      x: n,
      y: r
    };
  }
  hasValue() {
  }
  getProps(t, n) {
    const r = this.$animations;
    if (!n || !r)
      return this;
    const o = {};
    return t.forEach((s) => {
      o[s] = r[s] && r[s].active() ? r[s]._to : this[s];
    }), o;
  }
  if (a > o)
  if (a > 0) {
    const C = a > 1 ? Math.round((f - c) / (a - 1)) : null;
  }
}
  const t = e.options.offset, n = e._tickSize(), r = e._length / n + (t ? 0 : 1), o = e._maxLength / n;
  return Math.floor(Math.min(r, o));
}
  if (!r)
    return Math.max(o, 1);
  for (let a = 0, c = s.length - 1; a < c; a++) {
    const f = s[a];
    if (f > o)
      return f;
  }
  return Math.max(o, 1);
}
  const t = [];
  let n, r;
  for (n = 0, r = e.length; n < r; n++)
    e[n].major && t.push(n);
  return t;
}
  let o = 0, s = n[0], a;
  for (r = Math.ceil(r), a = 0; a < e.length; a++)
    a === s && (t.push(e[a]), o++, s = n[o * r]);
}
  for (n = Math.ceil(n), o && (f = o - r, n = f / Math.floor(f / n)), g = s; g < 0; )
    c++, g = Math.round(s + c * n);
}
  const t = e.length;
  let n, r;
  if (t < 2)
    return !1;
  for (r = e[0], n = 1; n < t; ++n)
    if (e[n] - e[n - 1] !== r)
      return !1;
  return r;
}
  const n = [], r = e.length / t, o = e.length;
  let s = 0;
  for (; s < o; s += r)
    n.push(e[Math.floor(s)]);
  return n;
}
  const r = e.ticks.length, o = Math.min(t, r - 1), s = e._startPixel, a = e._endPixel, c = 1e-6;
    return f;
}
    const r = n.gc, o = r.length / 2;
    let s;
    if (o > t) {
      for (s = 0; s < o; ++s)
        delete n.data[r[s]];
      r.splice(0, o);
    }
  });
}
  return e.drawTicks ? e.tickLength : 0;
}
  if (!e.display)
    return 0;
}
    scale: t,
    type: "scale"
  });
}
    tick: n,
    index: t,
    type: "tick"
  });
}
}
  const E = a - o, O = c - s;
  if (e.isHorizontal()) {
    w = c - s;
  } else {
  }
  return {
    titleX: C,
    titleY: T,
    maxWidth: w,
  };
}
  constructor(t) {
    super(), this.id = t.id, this.type = t.type, this.options = void 0, this.ctx = t.ctx, this.chart = t.chart, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.width = void 0, this.height = void 0, this._margins = {
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    }, this.maxWidth = void 0, this.maxHeight = void 0, this.paddingTop = void 0, this.paddingBottom = void 0, this.paddingLeft = void 0, this.paddingRight = void 0, this.axis = void 0, this.labelRotation = void 0, this.min = void 0, this.max = void 0, this._range = void 0, this.ticks = [], this._gridLineItems = null, this._labelItems = null, this._labelSizes = null, this._length = 0, this._maxLength = 0, this._longestTextCache = {}, this._startPixel = void 0, this._endPixel = void 0, this._reversePixels = !1, this._userMax = void 0, this._userMin = void 0, this._suggestedMax = void 0, this._suggestedMin = void 0, this._ticksLength = 0, this._borderValue = 0, this._cache = {}, this._dataLimitsCached = !1, this.$context = void 0;
  }
  init(t) {
    this.options = t.setContext(this.getContext()), this.axis = t.axis, this._userMin = this.parse(t.min), this._userMax = this.parse(t.max), this._suggestedMin = this.parse(t.suggestedMin), this._suggestedMax = this.parse(t.suggestedMax);
  }
  parse(t, n) {
    return t;
  }
  getUserBounds() {
    let { _userMin: t, _userMax: n, _suggestedMin: r, _suggestedMax: o } = this;
    };
  }
  getMinMax(t) {
    let { min: n, max: r, minDefined: o, maxDefined: s } = this.getUserBounds(), a;
    if (o && s)
      return {
        min: n,
        max: r
      };
    const c = this.getMatchingVisibleMetas();
      a = c[f].controller.getMinMax(this, t), o || (n = Math.min(n, a.min)), s || (r = Math.max(r, a.max));
    return n = s && n > r ? r : n, r = o && n > r ? n : r, {
    };
  }
  getPadding() {
    return {
      left: this.paddingLeft || 0,
      top: this.paddingTop || 0,
      right: this.paddingRight || 0,
      bottom: this.paddingBottom || 0
    };
  }
  getTicks() {
    return this.ticks;
  }
  getLabels() {
    const t = this.chart.data;
    return this.options.labels || (this.isHorizontal() ? t.xLabels : t.yLabels) || t.labels || [];
  }
  getLabelItems(t = this.chart.chartArea) {
    return this._labelItems || (this._labelItems = this._computeLabelItems(t));
  }
  beforeLayout() {
    this._cache = {}, this._dataLimitsCached = !1;
  }
  beforeUpdate() {
      this
    ]);
  }
  update(t, n, r) {
    const { beginAtZero: o, grace: s, ticks: a } = this.options, c = a.sampleSize;
    this.beforeUpdate(), this.maxWidth = t, this.maxHeight = n, this._margins = r = Object.assign({
      left: 0,
      right: 0,
      top: 0,
      bottom: 0
    const f = c < this.ticks.length;
  }
  configure() {
    let t = this.options.reverse, n, r;
    this.isHorizontal() ? (n = this.left, r = this.right) : (n = this.top, r = this.bottom, t = !t), this._startPixel = n, this._endPixel = r, this._reversePixels = t, this._length = r - n, this._alignToPixels = this.options.alignToPixels;
  }
  afterUpdate() {
      this
    ]);
  }
  beforeSetDimensions() {
      this
    ]);
  }
  setDimensions() {
    this.isHorizontal() ? (this.width = this.maxWidth, this.left = 0, this.right = this.width) : (this.height = this.maxHeight, this.top = 0, this.bottom = this.height), this.paddingLeft = 0, this.paddingTop = 0, this.paddingRight = 0, this.paddingBottom = 0;
  }
  afterSetDimensions() {
      this
    ]);
  }
  _callHooks(t) {
      this
    ]);
  }
  beforeDataLimits() {
    this._callHooks("beforeDataLimits");
  }
  determineDataLimits() {
  }
  afterDataLimits() {
    this._callHooks("afterDataLimits");
  }
  beforeBuildTicks() {
    this._callHooks("beforeBuildTicks");
  }
  buildTicks() {
    return [];
  }
  afterBuildTicks() {
    this._callHooks("afterBuildTicks");
  }
  beforeTickToLabelConversion() {
      this
    ]);
  }
  generateTickLabels(t) {
    const n = this.options.ticks;
    let r, o, s;
    for (r = 0, o = t.length; r < o; r++)
        s.value,
        r,
        t
      ], this);
  }
  afterTickToLabelConversion() {
      this
    ]);
  }
  beforeCalculateLabelRotation() {
      this
    ]);
  }
  calculateLabelRotation() {
    if (!this._isVisible() || !n.display || o >= s || r <= 1 || !this.isHorizontal()) {
      this.labelRotation = o;
      return;
    }
  }
  afterCalculateLabelRotation() {
      this
    ]);
  }
  afterAutoSkip() {
  }
  beforeFit() {
      this
    ]);
  }
  fit() {
    const t = {
      width: 0,
      height: 0
    }, { chart: n, options: { ticks: r, title: o, grid: s } } = this, a = this._isVisible(), c = this.isHorizontal();
    if (a) {
        if (c) {
        } else {
        }
      }
    }
    this._handleMargins(), c ? (this.width = this._length = n.width - this._margins.left - this._margins.right, this.height = t.height) : (this.width = t.width, this.height = this._length = n.height - this._margins.top - this._margins.bottom);
  }
  _calculatePadding(t, n, r, o) {
    if (this.isHorizontal()) {
      let w = 0, C = 0;
    } else {
    }
  }
  _handleMargins() {
    this._margins && (this._margins.left = Math.max(this.paddingLeft, this._margins.left), this._margins.top = Math.max(this.paddingTop, this._margins.top), this._margins.right = Math.max(this.paddingRight, this._margins.right), this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom));
  }
  afterFit() {
      this
    ]);
  }
  isHorizontal() {
    const { axis: t, position: n } = this.options;
    return n === "top" || n === "bottom" || t === "x";
  }
  isFullSize() {
    return this.options.fullSize;
  }
  _convertTicksToLabels(t) {
    this.beforeTickToLabelConversion(), this.generateTickLabels(t);
    let n, r;
    for (n = 0, r = t.length; n < r; n++)
    this.afterTickToLabelConversion();
  }
  _getLabelSizes() {
    let t = this._labelSizes;
    if (!t) {
      const n = this.options.ticks.sampleSize;
      let r = this.ticks;
    }
    return t;
  }
  _computeLabelSizes(t, n, r) {
        data: {},
        gc: []
        for (w = 0, C = T.length; w < C; ++w)
    }
    });
    return {
      widths: a,
      heights: c
    };
  }
  getLabelForValue(t) {
    return t;
  }
  getPixelForValue(t, n) {
    return NaN;
  }
  getValueForPixel(t) {
  }
  getPixelForTick(t) {
    const n = this.ticks;
    return t < 0 || t > n.length - 1 ? null : this.getPixelForValue(n[t].value);
  }
  getPixelForDecimal(t) {
    this._reversePixels && (t = 1 - t);
    const n = this._startPixel + t * this._length;
  }
  getDecimalForPixel(t) {
    const n = (t - this._startPixel) / this._length;
    return this._reversePixels ? 1 - n : n;
  }
  getBasePixel() {
    return this.getPixelForValue(this.getBaseValue());
  }
  getBaseValue() {
    const { min: t, max: n } = this;
    return t < 0 && n < 0 ? n : t > 0 && n > 0 ? t : 0;
  }
  getContext(t) {
    const n = this.ticks || [];
    if (t >= 0 && t < n.length) {
      const r = n[t];
    }
  }
  _tickSize() {
    return this.isHorizontal() ? f * r > c * o ? c / r : f / o : f * o < c * r ? f / r : c / o;
  }
  _isVisible() {
    const t = this.options.display;
    return t !== "auto" ? !!t : this.getMatchingVisibleMetas().length > 0;
  }
  _computeGridLineItems(t) {
    };
    if (a === "top")
    else if (a === "bottom")
    else if (a === "left")
    else if (a === "right")
    else if (n === "x") {
      if (a === "center")
      }
    } else if (n === "y") {
      if (a === "center")
        y1: q,
        width: re,
        color: Q,
        borderDashOffset: ie,
        tickWidth: de,
        tickColor: ue,
        tickBorderDash: he,
        tickBorderDashOffset: ge
      }));
    }
  }
  _computeLabelItems(t) {
    if (o === "top")
    else if (o === "bottom")
    else if (o === "left") {
      const G = this._getYAxisLabelAlignment(w);
    } else if (o === "right") {
      const G = this._getYAxisLabelAlignment(w);
    } else if (n === "x") {
      if (o === "center")
      }
    } else if (n === "y") {
      if (o === "center")
      }
    }
    const ee = this._getLabelSizes();
      if (G.showLabelBackdrop) {
          case "middle":
            he -= de / 2;
            break;
          case "bottom":
            he -= de;
            break;
        }
          case "center":
            ge -= ue / 2;
            break;
          case "right":
            ge -= ue;
            break;
          case "inner":
            break;
        }
          left: ge,
          top: he,
          width: ue + ie.width,
          height: de + ie.height,
          color: G.backdropColor
        };
      }
      O.push({
        options: {
          rotation: E,
          color: X,
          strokeColor: te,
          strokeWidth: re,
          textAlign: Q,
          translation: [
          ],
        }
      });
    }
    return O;
  }
  _getXAxisLabelAlignment() {
    const { position: t, ticks: n } = this.options;
      return t === "top" ? "left" : "right";
    let o = "center";
    return n.align === "start" ? o = "left" : n.align === "end" ? o = "right" : n.align === "inner" && (o = "inner"), o;
  }
  _getYAxisLabelAlignment(t) {
    const { position: n, ticks: { crossAlign: r, mirror: o, padding: s } } = this.options, a = this._getLabelSizes(), c = t + s, f = a.widest.width;
      x: g
    };
  }
  _computeLabelArea() {
    if (this.options.ticks.mirror)
      return;
    const t = this.chart, n = this.options.position;
    if (n === "left" || n === "right")
      return {
        top: 0,
        left: this.left,
        bottom: t.height,
        right: this.right
      };
    if (n === "top" || n === "bottom")
      return {
        top: this.top,
        left: 0,
        bottom: this.bottom,
        right: t.width
      };
  }
  drawBackground() {
    const { ctx: t, options: { backgroundColor: n }, left: r, top: o, width: s, height: a } = this;
    n && (t.save(), t.fillStyle = n, t.fillRect(r, o, s, a), t.restore());
  }
  getLineWidthForValue(t) {
    const n = this.options.grid;
    if (!this._isVisible() || !n.display)
      return 0;
    const o = this.ticks.findIndex((s) => s.value === t);
    return o >= 0 ? n.setContext(this.getContext(o)).lineWidth : 0;
  }
  drawGrid(t) {
    const n = this.options.grid, r = this.ctx, o = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(t));
    let s, a;
    };
    if (n.display)
      for (s = 0, a = o.length; s < a; ++s) {
        const f = o[s];
        n.drawOnChartArea && c({
          x: f.x1,
          y: f.y1
        }, {
          x: f.x2,
          y: f.y2
        }, f), n.drawTicks && c({
          x: f.tx1,
          y: f.ty1
        }, {
          x: f.tx2,
          y: f.ty2
        }, {
          color: f.tickColor,
          width: f.tickWidth,
          borderDash: f.tickBorderDash,
          borderDashOffset: f.tickBorderDashOffset
        });
      }
  }
  drawBorder() {
    const { chart: t, ctx: n, options: { border: r, grid: o } } = this, s = r.setContext(this.getContext()), a = r.display ? s.width : 0;
    if (!a)
      return;
    const c = o.setContext(this.getContext(0)).lineWidth, f = this._borderValue;
  }
  drawLabels(t) {
    if (!this.options.ticks.display)
      return;
    const r = this.ctx, o = this._computeLabelArea();
    const s = this.getLabelItems(t);
    for (const a of s) {
    }
  }
  drawTitle() {
    const { ctx: t, options: { position: n, title: r, reverse: o } } = this;
    if (!r.display)
      return;
    let f = s.lineHeight / 2;
      color: r.color,
      rotation: w,
      textBaseline: "middle",
      translation: [
        g
      ]
    });
  }
  draw(t) {
    this._isVisible() && (this.drawBackground(), this.drawGrid(t), this.drawBorder(), this.drawTitle(), this.drawLabels(t));
  }
  _layers() {
      {
        z: n,
        draw: (s) => {
          this.draw(s);
        }
      }
    ] : [
      {
        z: r,
        draw: (s) => {
          this.drawBackground(), this.drawGrid(s), this.drawTitle();
        }
      },
      {
        z: o,
        draw: () => {
          this.drawBorder();
        }
      },
      {
        z: n,
        draw: (s) => {
          this.drawLabels(s);
        }
      }
    ];
  }
  getMatchingVisibleMetas(t) {
    const n = this.chart.getSortedVisibleDatasetMetas(), r = this.axis + "AxisID", o = [];
    let s, a;
    for (s = 0, a = n.length; s < a; ++s) {
      const c = n[s];
      c[r] === this.id && (!t || c.type === t) && o.push(c);
    }
    return o;
  }
  _resolveTickFontOptions(t) {
    const n = this.options.ticks.setContext(this.getContext(t));
  }
  _maxDigits() {
    const t = this._resolveTickFontOptions(0).lineHeight;
    return (this.isHorizontal() ? this.width : this.height) / t;
  }
}
  constructor(t, n, r) {
    this.type = t, this.scope = n, this.override = r, this.items = /* @__PURE__ */ Object.create(null);
  }
  isForType(t) {
    return Object.prototype.isPrototypeOf.call(this.type.prototype, t.prototype);
  }
  register(t) {
    const n = Object.getPrototypeOf(t);
    let r;
    const o = this.items, s = t.id, a = this.scope + "." + s;
    if (!s)
      throw new Error("class does not have id: " + t);
  }
  get(t) {
    return this.items[t];
  }
  unregister(t) {
    const n = this.items, r = t.id, o = this.scope;
  }
}
    e.defaults
  ]);
}
  Object.keys(t).forEach((n) => {
    const r = n.split("."), o = r.pop(), s = [
      e
    ].concat(r).join("."), a = t[n].split("."), c = a.pop(), f = a.join(".");
  });
}
  return "id" in e && "defaults" in e;
}
  constructor() {
      this.controllers,
      this.scales,
      this.elements
    ];
  }
  add(...t) {
    this._each("register", t);
  }
  remove(...t) {
    this._each("unregister", t);
  }
  addControllers(...t) {
    this._each("register", t, this.controllers);
  }
  addElements(...t) {
    this._each("register", t, this.elements);
  }
  addPlugins(...t) {
    this._each("register", t, this.plugins);
  }
  addScales(...t) {
    this._each("register", t, this.scales);
  }
  getController(t) {
    return this._get(t, this.controllers, "controller");
  }
  getElement(t) {
    return this._get(t, this.elements, "element");
  }
  getPlugin(t) {
    return this._get(t, this.plugins, "plugin");
  }
  getScale(t) {
    return this._get(t, this.scales, "scale");
  }
  removeControllers(...t) {
    this._each("unregister", t, this.controllers);
  }
  removeElements(...t) {
    this._each("unregister", t, this.elements);
  }
  removePlugins(...t) {
    this._each("unregister", t, this.plugins);
  }
  removeScales(...t) {
    this._each("unregister", t, this.scales);
  }
  _each(t, n, r) {
    [
      ...n
    ].forEach((o) => {
      const s = r || this._getRegistryForType(o);
        const c = r || this._getRegistryForType(a);
        this._exec(t, c, a);
      });
    });
  }
  _exec(t, n, r) {
  }
  _getRegistryForType(t) {
    for (let n = 0; n < this._typedRegistries.length; n++) {
      const r = this._typedRegistries[n];
      if (r.isForType(t))
        return r;
    }
    return this.plugins;
  }
  _get(t, n, r) {
    const o = n.get(t);
    if (o === void 0)
      throw new Error('"' + t + '" is not a registered ' + r + ".");
    return o;
  }
}
  constructor() {
    this._init = void 0;
  }
  notify(t, n, r, o) {
    if (n === "beforeInit" && (this._init = this._createDescriptors(t, !0), this._notify(this._init, t, "install")), this._init === void 0)
      return;
    const s = o ? this._descriptors(t).filter(o) : this._descriptors(t), a = this._notify(s, t, n, r);
    return n === "afterDestroy" && (this._notify(s, t, "stop"), this._notify(this._init, t, "uninstall"), this._init = void 0), a;
  }
  _notify(t, n, r, o) {
    o = o || {};
    for (const s of t) {
      const a = s.plugin, c = a[r], f = [
        n,
        o,
        s.options
      ];
        return !1;
    }
    return !0;
  }
  invalidate() {
  }
  _descriptors(t) {
    if (this._cache)
      return this._cache;
    const n = this._cache = this._createDescriptors(t);
    return this._notifyStateChanges(t), n;
  }
  _createDescriptors(t, n) {
  }
  _notifyStateChanges(t) {
    const n = this._oldCache || [], r = this._cache, o = (s, a) => s.filter((c) => !a.some((f) => c.plugin.id === f.plugin.id));
    this._notify(o(n, r), t, "stop"), this._notify(o(r, n), t, "start");
  }
}
  for (let s = 0; s < r.length; s++)
  const o = e.plugins || [];
  for (let s = 0; s < o.length; s++) {
    const a = o[s];
    n.indexOf(a) === -1 && (n.push(a), t[a.id] = !0);
  }
  return {
    plugins: n,
    localIds: t
  };
}
  return !t && e === !1 ? null : e === !0 ? {} : e;
}
  const s = [], a = e.getContext();
  for (const c of t) {
      plugin: c,
        plugin: c,
        local: n[f]
    });
  }
  return s;
}
  const s = e.pluginScopeKeys(t), a = e.getOptionScopes(r, s);
  return n && t.defaults && a.push(t.defaults), e.createResolver(a, o, [
    ""
  ], {
    scriptable: !1,
    indexable: !1,
    allKeys: !0
  });
}
  return ((t.datasets || {})[e] || {}).indexAxis || t.indexAxis || n.indexAxis || "x";
}
  let n = e;
  return e === "_index_" ? n = t : e === "_value_" && (n = t === "x" ? "y" : "x"), n;
}
  return e === t ? "_index_" : "_value_";
}
  if (e === "x" || e === "y" || e === "r")
    return e;
}
  if (e === "top" || e === "bottom")
    return "x";
  if (e === "left" || e === "right")
    return "y";
}
    return e;
  for (const n of t) {
    if (r)
      return r;
  }
  throw new Error(`Cannot determine type of '${e}' axis. Please provide 'axis' or 'position' option.`);
}
  if (n[t + "AxisID"] === e)
    return {
      axis: t
    };
}
  if (t.data && t.data.datasets) {
    const n = t.data.datasets.filter((r) => r.xAxisID === e || r.yAxisID === e);
    if (n.length)
  }
  return {};
}
    scales: {}
  return Object.keys(r).forEach((a) => {
    const c = r[a];
      return console.error(`Invalid scale configuration for scale: ${a}`);
    if (c._proxy)
      return console.warn(`Ignoring resolver passed as options for scale: ${a}`);
      {
        axis: f
      },
      c,
      g[f],
    ]);
  }), e.data.datasets.forEach((a) => {
        {
          axis: w
        },
        r[C],
      ]);
    });
  }), Object.keys(s).forEach((a) => {
    const c = s[a];
    ]);
  }), s;
}
  const t = e.options || (e.options = {});
}
  return e = e || {}, e.datasets = e.datasets || [], e.labels = e.labels || [], e;
}
}
}
  r !== void 0 && e.add(r);
};
  constructor(t) {
  }
  get platform() {
    return this._config.platform;
  }
  get type() {
    return this._config.type;
  }
  set type(t) {
    this._config.type = t;
  }
  get data() {
    return this._config.data;
  }
  set data(t) {
  }
  get options() {
    return this._config.options;
  }
  set options(t) {
    this._config.options = t;
  }
  get plugins() {
    return this._config.plugins;
  }
  update() {
    const t = this._config;
  }
  clearCache() {
    this._scopeCache.clear(), this._resolverCache.clear();
  }
  datasetScopeKeys(t) {
      [
        `datasets.${t}`,
        ""
      ]
    ]);
  }
  datasetAnimationScopeKeys(t, n) {
      [
        `datasets.${t}.transitions.${n}`,
        `transitions.${n}`
      ],
      [
        `datasets.${t}`,
        ""
      ]
    ]);
  }
  datasetElementScopeKeys(t, n) {
      [
        `datasets.${t}.elements.${n}`,
        `datasets.${t}`,
        `elements.${n}`,
        ""
      ]
    ]);
  }
  pluginScopeKeys(t) {
    const n = t.id, r = this.type;
      [
        `plugins.${n}`,
        ...t.additionalOptionScopes || []
      ]
    ]);
  }
  _cachedScopes(t, n) {
    const r = this._scopeCache;
    let o = r.get(t);
    return (!o || n) && (o = /* @__PURE__ */ new Map(), r.set(t, o)), o;
  }
  getOptionScopes(t, n, r) {
    const { options: o, type: s } = this, a = this._cachedScopes(t, r), c = a.get(n);
    if (c)
      return c;
    const f = /* @__PURE__ */ new Set();
    n.forEach((g) => {
    });
  }
  chartOptionScopes() {
    const { options: t, type: n } = this;
    return [
      t,
      {
        type: n
      },
    ];
  }
  resolveNamedOptions(t, n, r, o = [
    ""
  ]) {
    const s = {
      $shared: !0
    let f = a;
    }
    return s;
  }
  createResolver(t, n, r = [
    ""
  ], o) {
  }
}
  let r = e.get(t);
  r || (r = /* @__PURE__ */ new Map(), e.set(t, r));
  const o = n.join();
  let s = r.get(o);
  return s || (s = {
    subPrefixes: n.filter((c) => !c.toLowerCase().includes("hover"))
  }, r.set(o, s)), s;
}
  for (const o of t) {
    const s = n(o), a = r(o), c = (a || s) && e[o];
      return !0;
  }
  return !1;
}
  "top",
  "bottom",
  "left",
  "right",
  "chartArea"
];
}
  return function(n, r) {
    return n[e] === r[e] ? n[t] - r[t] : n[e] - r[e];
  };
}
  const t = e.chart, n = t.options.animation;
    e
  ], t);
}
  const t = e.chart, n = t.options.animation;
    e
  ], t);
}
}
};
  const r = Object.keys(e);
  for (const o of r) {
    const s = +o;
    if (s >= t) {
      const a = e[o];
      delete e[o], (n > 0 || s > t) && (e[s + n] = a);
    }
  }
}
  return !n || e.type === "mouseout" ? null : r ? t : e;
}
  static register(...t) {
  }
  static unregister(...t) {
  }
  constructor(t, n) {
    if (s)
      throw new Error("Canvas is already in use. Chart with ID '" + s.id + "' must be destroyed before the canvas with ID '" + s.canvas.id + "' can be reused.");
    const a = r.createResolver(r.chartOptionScopes(), this.getContext());
      console.error("Failed to create chart: can't acquire context from the given item");
      return;
    }
  }
  get aspectRatio() {
    const { options: { aspectRatio: t, maintainAspectRatio: n }, width: r, height: o, _aspectRatio: s } = this;
  }
  get data() {
    return this.config.data;
  }
  set data(t) {
    this.config.data = t;
  }
  get options() {
    return this._options;
  }
  set options(t) {
    this.config.options = t;
  }
  get registry() {
  }
  _initialize() {
  }
  clear() {
  }
  stop() {
  }
  resize(t, n) {
      width: t,
      height: n
    } : this._resize(t, n);
  }
  _resize(t, n) {
    const r = this.options, o = this.canvas, s = r.maintainAspectRatio && this.aspectRatio, a = this.platform.getMaximumSize(o, t, n, s), c = r.devicePixelRatio || this.platform.getDevicePixelRatio(), f = this.width ? "resize" : "attach";
      size: a
      this,
      a
    ], this), this.attached && this._doResize(f) && this.render());
  }
  ensureScalesHaveIDs() {
    const n = this.options.scales || {};
      r.id = o;
    });
  }
  buildOrUpdateScales() {
    const t = this.options, n = t.scales, r = this.scales, o = Object.keys(r).reduce((a, c) => (a[c] = !1, a), {});
    let s = [];
    n && (s = s.concat(Object.keys(n).map((a) => {
      return {
        options: c,
      };
      if (f in r && r[f].type === g)
      else {
          id: f,
          type: g,
          ctx: this.ctx,
          chart: this
      }
      a || delete r[c];
    });
  }
  _updateMetasets() {
    const t = this._metasets, n = this.data.datasets.length, r = t.length;
    if (t.sort((o, s) => o.index - s.index), r > n) {
      for (let o = n; o < r; ++o)
        this._destroyDatasetMeta(o);
      t.splice(n, r - n);
    }
  }
  _removeUnreferencedMetasets() {
    const { _metasets: t, data: { datasets: n } } = this;
    t.length > n.length && delete this._stacks, t.forEach((r, o) => {
      n.filter((s) => s === r._dataset).length === 0 && this._destroyDatasetMeta(o);
    });
  }
  buildOrUpdateControllers() {
    const t = [], n = this.data.datasets;
    let r, o;
    for (this._removeUnreferencedMetasets(), r = 0, o = n.length; r < o; r++) {
      const s = n[r];
      let a = this.getDatasetMeta(r);
      const c = s.type || this.config.type;
        a.controller.updateIndex(r), a.controller.linkScales();
      else {
        Object.assign(f, {
        }), a.controller = new f(this, r), t.push(a.controller);
      }
    }
    return this._updateMetasets(), t;
  }
  _resetElements() {
      this.getDatasetMeta(n).controller.reset();
    }, this);
  }
  reset() {
    this._resetElements(), this.notifyPlugins("reset");
  }
  update(t) {
    const n = this.config;
    n.update();
    const r = this._options = n.createResolver(n.chartOptionScopes(), this.getContext()), o = this._animationsDisabled = !r.animation;
    if (this._updateScales(), this._checkEventBindings(), this._updateHiddenIndices(), this._plugins.invalidate(), this.notifyPlugins("beforeUpdate", {
      mode: t,
      cancelable: !0
    }) === !1)
      return;
    const s = this.buildOrUpdateControllers();
    this.notifyPlugins("beforeElementsUpdate");
    let a = 0;
    }
    }), this._updateDatasets(t), this.notifyPlugins("afterUpdate", {
      mode: t
    const { _active: c, _lastEvent: f } = this;
    f ? this._eventHandler(f, !0) : c.length && this._updateHoverStyles(c, c, !0), this.render();
  }
  _updateScales() {
    }), this.ensureScalesHaveIDs(), this.buildOrUpdateScales();
  }
  _checkEventBindings() {
    const t = this.options, n = new Set(Object.keys(this._listeners)), r = new Set(t.events);
  }
  _updateHiddenIndices() {
    const { _hiddenIndices: t } = this, n = this._getUniformDataChanges() || [];
    for (const { method: r, start: o, count: s } of n) {
      const a = r === "_removeElements" ? -s : s;
    }
  }
  _getUniformDataChanges() {
    const t = this._dataChanges;
    if (!t || !t.length)
      return;
    this._dataChanges = [];
    const n = this.data.datasets.length, r = (s) => new Set(t.filter((a) => a[0] === s).map((a, c) => c + "," + a.splice(1).join(","))), o = r(0);
    for (let s = 1; s < n; s++)
        return;
    return Array.from(o).map((s) => s.split(",")).map((s) => ({
      method: s[1],
      start: +s[2],
      count: +s[3]
    }));
  }
  _updateLayout(t) {
    if (this.notifyPlugins("beforeLayout", {
      cancelable: !0
    }) === !1)
      return;
    const n = this.chartArea, r = n.width <= 0 || n.height <= 0;
      r && o.position === "chartArea" || (o.configure && o.configure(), this._layers.push(...o._layers()));
    }, this), this._layers.forEach((o, s) => {
      o._idx = s;
    }), this.notifyPlugins("afterLayout");
  }
  _updateDatasets(t) {
    if (this.notifyPlugins("beforeDatasetsUpdate", {
      mode: t,
      cancelable: !0
    }) !== !1) {
      for (let n = 0, r = this.data.datasets.length; n < r; ++n)
        this.getDatasetMeta(n).controller.configure();
      for (let n = 0, r = this.data.datasets.length; n < r; ++n)
          datasetIndex: n
        }) : t);
      this.notifyPlugins("afterDatasetsUpdate", {
        mode: t
      });
    }
  }
  _updateDataset(t, n) {
    const r = this.getDatasetMeta(t), o = {
      meta: r,
      index: t,
      mode: n,
      cancelable: !0
    };
    this.notifyPlugins("beforeDatasetUpdate", o) !== !1 && (r.controller._update(n), o.cancelable = !1, this.notifyPlugins("afterDatasetUpdate", o));
  }
  render() {
    this.notifyPlugins("beforeRender", {
      cancelable: !0
      chart: this
    })));
  }
  draw() {
    let t;
    if (this._resizeBeforeDraw) {
      const { width: r, height: o } = this._resizeBeforeDraw;
      this._resizeBeforeDraw = null, this._resize(r, o);
    }
    if (this.clear(), this.width <= 0 || this.height <= 0 || this.notifyPlugins("beforeDraw", {
      cancelable: !0
    }) === !1)
      return;
    const n = this._layers;
    for (t = 0; t < n.length && n[t].z <= 0; ++t)
      n[t].draw(this.chartArea);
    for (this._drawDatasets(); t < n.length; ++t)
      n[t].draw(this.chartArea);
    this.notifyPlugins("afterDraw");
  }
  _getSortedDatasetMetas(t) {
    const n = this._sortedMetasets, r = [];
    let o, s;
    for (o = 0, s = n.length; o < s; ++o) {
      const a = n[o];
      (!t || a.visible) && r.push(a);
    }
    return r;
  }
  getSortedVisibleDatasetMetas() {
    return this._getSortedDatasetMetas(!0);
  }
  _drawDatasets() {
    if (this.notifyPlugins("beforeDatasetsDraw", {
      cancelable: !0
    }) === !1)
      return;
    const t = this.getSortedVisibleDatasetMetas();
    for (let n = t.length - 1; n >= 0; --n)
      this._drawDataset(t[n]);
    this.notifyPlugins("afterDatasetsDraw");
  }
  _drawDataset(t) {
    const n = this.ctx, r = {
      meta: t,
      index: t.index,
      cancelable: !0
  }
  isPointInArea(t) {
  }
  getElementsAtEventForMode(t, n, r, o) {
    return typeof s == "function" ? s(this, t, r, o) : [];
  }
  getDatasetMeta(t) {
    const n = this.data.datasets[t], r = this._metasets;
    let o = r.filter((s) => s && s._dataset === n).pop();
    return o || (o = {
      type: null,
      data: [],
      dataset: null,
      controller: null,
      hidden: null,
      xAxisID: null,
      yAxisID: null,
      order: n && n.order || 0,
      index: t,
      _dataset: n,
      _parsed: [],
      _sorted: !1
    }, r.push(o)), o;
  }
  getContext() {
      chart: this,
      type: "chart"
    }));
  }
  getVisibleDatasetCount() {
    return this.getSortedVisibleDatasetMetas().length;
  }
  isDatasetVisible(t) {
    const n = this.data.datasets[t];
    if (!n)
      return !1;
    const r = this.getDatasetMeta(t);
    return typeof r.hidden == "boolean" ? !r.hidden : !n.hidden;
  }
  setDatasetVisibility(t, n) {
    const r = this.getDatasetMeta(t);
    r.hidden = !n;
  }
  toggleDataVisibility(t) {
    this._hiddenIndices[t] = !this._hiddenIndices[t];
  }
  getDataVisibility(t) {
    return !this._hiddenIndices[t];
  }
  _updateVisibility(t, n, r) {
    const o = r ? "show" : "hide", s = this.getDatasetMeta(t), a = s.controller._resolveAnimations(void 0, o);
      visible: r
    }), this.update((c) => c.datasetIndex === t ? o : void 0));
  }
  hide(t, n) {
    this._updateVisibility(t, n, !1);
  }
  show(t, n) {
    this._updateVisibility(t, n, !0);
  }
  _destroyDatasetMeta(t) {
    const n = this._metasets[t];
    n && n.controller && n.controller._destroy(), delete this._metasets[t];
  }
  _stop() {
    let t, n;
      this._destroyDatasetMeta(t);
  }
  destroy() {
    this.notifyPlugins("beforeDestroy");
    const { canvas: t, ctx: n } = this;
  }
  toBase64Image(...t) {
    return this.canvas.toDataURL(...t);
  }
  bindEvents() {
    this.bindUserEvents(), this.options.responsive ? this.bindResponsiveEvents() : this.attached = !0;
  }
  bindUserEvents() {
    const t = this._listeners, n = this.platform, r = (s, a) => {
      n.addEventListener(this, s, a), t[s] = a;
    }, o = (s, a, c) => {
      s.offsetX = a, s.offsetY = c, this._eventHandler(s);
    };
  }
  bindResponsiveEvents() {
    this._responsiveListeners || (this._responsiveListeners = {});
    };
    let a;
    const c = () => {
      o("attach", c), this.attached = !0, this.resize(), r("resize", s), r("detach", a);
    };
    a = () => {
      this.attached = !1, o("resize", s), this._stop(), this._resize(0, 0), r("attach", c);
    }, n.isAttached(this.canvas) ? c() : a();
  }
  unbindEvents() {
      this.platform.removeEventListener(this, n, t);
      this.platform.removeEventListener(this, n, t);
    }), this._responsiveListeners = void 0;
  }
  updateHoverStyle(t, n, r) {
    const o = r ? "set" : "remove";
    let s, a, c, f;
    for (n === "dataset" && (s = this.getDatasetMeta(t[0].datasetIndex), s.controller["_" + o + "DatasetHoverStyle"]()), c = 0, f = t.length; c < f; ++c) {
      a = t[c];
    }
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(t) {
    const n = this._active || [], r = t.map(({ datasetIndex: s, index: a }) => {
      const c = this.getDatasetMeta(s);
      if (!c)
        throw new Error("No dataset found at index " + s);
      return {
        datasetIndex: s,
        element: c.data[a],
        index: a
      };
    });
  }
  notifyPlugins(t, n, r) {
    return this._plugins.notify(this, t, n, r);
  }
  isPluginEnabled(t) {
    return this._plugins._cache.filter((n) => n.plugin.id === t).length === 1;
  }
  _updateHoverStyles(t, n, r) {
    a.length && this.updateHoverStyle(a, o.mode, !1), c.length && o.mode && this.updateHoverStyle(c, o.mode, !0);
  }
  _eventHandler(t, n) {
    const r = {
      event: t,
      replay: n,
      cancelable: !0,
      inChartArea: this.isPointInArea(t)
    }, o = (a) => (a.options.events || this.options.events).includes(t.native.type);
    if (this.notifyPlugins("beforeEvent", r, o) === !1)
      return;
    const s = this._handleEvent(t, n, r.inChartArea);
    return r.cancelable = !1, this.notifyPlugins("afterEvent", r, o), (s || r.changed) && this.render(), this;
  }
  _handleEvent(t, n, r) {
      t,
      c,
      this
      t,
      c,
      this
    ], this));
  }
  _getActiveElements(t, n, r, o) {
    if (t.type === "mouseout")
      return [];
    if (!r)
      return n;
    const s = this.options.hover;
    return this.getElementsAtEventForMode(t, s.mode, s, o);
  }
}
}
}
  e.lineTo(n.x, n.y);
}
}
  return {
    count: r,
    start: f,
    loop: t.loop,
  };
}
  };
  for (f && (C = o[I(0)], e.moveTo(C.x, C.y)), w = 0; w <= c; ++w) {
    if (C = o[I(w)], C.skip)
      continue;
  }
  M();
}
  const t = e.options, n = t.borderDash && t.borderDash.length;
}
}
  let o = t._path;
}
  for (const c of o)
      start: n,
      end: n + r - 1
    }) && e.closePath(), e.stroke();
}
}
  constructor(t) {
    super(), this.animated = !0, this.options = void 0, this._chart = void 0, this._loop = void 0, this._fullLoop = void 0, this._path = void 0, this._points = void 0, this._segments = void 0, this._decimated = !1, this._pointsUpdated = !1, this._datasetIndex = void 0, t && Object.assign(this, t);
  }
  updateControlPoints(t, n) {
    const r = this.options;
    if ((r.tension || r.cubicInterpolationMode === "monotone") && !r.stepped && !this._pointsUpdated) {
      const o = r.spanGaps ? this._loop : this._fullLoop;
    }
  }
  set points(t) {
    this._points = t, delete this._segments, delete this._path, this._pointsUpdated = !1;
  }
  get points() {
    return this._points;
  }
  get segments() {
  }
  first() {
    const t = this.segments, n = this.points;
    return t.length && n[t[0].start];
  }
  last() {
    const t = this.segments, n = this.points, r = t.length;
    return r && n[t[r - 1].end];
  }
  interpolate(t, n) {
      property: n,
      start: o,
      end: o
    });
    if (!a.length)
      return;
      if (C === T) {
        c.push(C);
        continue;
      }
      const E = Math.abs((o - C[n]) / (T[n] - C[n])), O = f(C, T, E, r.stepped);
      O[n] = t[n], c.push(O);
    }
    return c.length === 1 ? c[0] : c;
  }
  pathSegment(t, n, r) {
  }
  path(t, n, r) {
    let a = this._loop;
    n = n || 0, r = r || this.points.length - n;
    for (const c of o)
      a &= s(t, this, c, {
        start: n,
        end: n + r - 1
      });
    return !!a;
  }
  draw(t, n, r, o) {
    const s = this.options || {};
  }
}
  borderCapStyle: "butt",
  borderDash: [],
  borderDashOffset: 0,
  borderJoinStyle: "miter",
  borderWidth: 3,
  capBezierPoints: !0,
  cubicInterpolationMode: "default",
  fill: !1,
  spanGaps: !1,
  stepped: !1,
  tension: 0
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
  _scriptable: !0,
  _indexable: (t) => t !== "borderDash" && t !== "fill"
});
  const o = e.options, { [n]: s } = e.getProps([
    n
  ], r);
  return Math.abs(t - s) < o.radius + o.hitRadius;
}
  constructor(n) {
    super();
    this.options = void 0, this.parsed = void 0, this.skip = void 0, this.stop = void 0, n && Object.assign(this, n);
  }
  inRange(n, r, o) {
    const s = this.options, { x: a, y: c } = this.getProps([
      "x",
      "y"
    ], o);
    return Math.pow(n - a, 2) + Math.pow(r - c, 2) < Math.pow(s.hitRadius + s.radius, 2);
  }
  inXRange(n, r) {
  }
  inYRange(n, r) {
  }
  getCenterPoint(n) {
    const { x: r, y: o } = this.getProps([
      "x",
      "y"
    ], n);
    return {
      x: r,
      y: o
    };
  }
  size(n) {
    n = n || this.options || {};
    let r = n.radius || 0;
    r = Math.max(r, r && n.hoverRadius || 0);
    const o = r && n.borderWidth || 0;
    return (r + o) * 2;
  }
  draw(n, r) {
    const o = this.options;
  }
  getRange() {
    const n = this.options || {};
    return n.radius + n.hitRadius;
  }
}
* @type {any}
*/
  borderWidth: 1,
  hitRadius: 1,
  hoverBorderWidth: 1,
  hoverRadius: 4,
  pointStyle: "circle",
  radius: 3,
  rotation: 0
}), /**
* @type {any}
*/
  backgroundColor: "backgroundColor",
  borderColor: "borderColor"
});
  const r = e.segments, o = e.points, s = t.points, a = [];
  for (const c of r) {
    if (!t.segments) {
      a.push({
        source: c,
        target: g,
        start: o[f],
      });
      continue;
    }
      for (const E of T)
        a.push({
          source: E,
          target: w,
          start: {
          },
          end: {
          }
        });
    }
  }
  return a;
}
  if (r)
    return;
  let o = t[e], s = n[e];
    property: e,
    start: o,
    end: s
  };
}
  const { x: n = null, y: r = null } = e || {}, o = t.points, s = [];
  return t.segments.forEach(({ start: a, end: c }) => {
    r !== null ? (s.push({
      x: f.x,
      y: r
    }), s.push({
      y: r
    })) : n !== null && (s.push({
      x: n,
      y: f.y
    }), s.push({
      x: n,
    }));
  }), s;
}
  for (; t > e; t--) {
    const r = n[t];
    if (!isNaN(r.x) && !isNaN(r.y))
      break;
  }
  return t;
}
  return e && t ? r(e[n], t[n]) : e ? e[n] : t ? t[n] : 0;
}
  let n = [], r = !1;
    points: n,
    options: {
      tension: 0
    },
    _loop: r,
    _fullLoop: r
  }) : null;
}
  return e && e.fill !== !1;
}
  let o = e[t].fill;
  const s = [
    t
  ];
  let a;
  if (!n)
    return o;
  for (; o !== !1 && s.indexOf(o) === -1; ) {
      return o;
    if (a = e[o], !a)
      return !1;
    if (a.visible)
      return o;
    s.push(o), o = a.fill;
  }
  return !1;
}
    return isNaN(r.value) ? !1 : r;
  let o = parseFloat(r);
    "origin",
    "start",
    "end",
    "stack",
    "shape"
  ].indexOf(r) >= 0 && r;
}
  return (e === "-" || e === "+") && (n = t + n), n === t || n < 0 || n >= r ? !1 : n;
}
  let n = null;
}
  let r;
}
  const t = e.options, n = t.fill;
  return r === void 0 && (r = !!t.backgroundColor), r === !1 || r === null ? !1 : r === !0 ? "origin" : r;
}
    x: null,
    y: t.bottom
  }, r));
  for (let f = 0; f < s.length; f++) {
  }
    points: o,
    options: {}
  });
}
  const n = [], r = e.getMatchingVisibleMetas("line");
  for (let o = 0; o < r.length; o++) {
    const s = r[o];
    if (s.index === t)
      break;
    s.hidden || n.unshift(s.dataset);
  }
  return n;
}
  const r = [];
  for (let o = 0; o < n.length; o++) {
    if (!(!f || a && c)) {
      if (a)
        r.unshift(f);
      else if (e.push(f), !c)
        break;
    }
  }
  e.push(...r);
}
  const r = e.interpolate(t, n);
  if (!r)
    return {};
  const o = r[n], s = e.segments, a = e.points;
  let c = !1, f = !1;
      break;
    }
  }
  return {
    first: c,
    last: f,
    point: r
  };
}
  constructor(t) {
    this.x = t.x, this.y = t.y, this.radius = t.radius;
  }
  pathSegment(t, n, r) {
    const { x: o, y: s, radius: a } = this;
    return n = n || {
      start: 0,
    }, t.arc(o, s, a, n.end, n.start, !0), !r.bounds;
  }
  interpolate(t) {
    const { x: n, y: r, radius: o } = this, s = t.angle;
    return {
      x: n + Math.cos(s) * o,
      y: r + Math.sin(s) * o,
      angle: s
    };
  }
}
  const { chart: t, fill: n, line: r } = e;
  if (n === "stack")
  if (n === "shape")
    return !0;
}
  const n = e.getDatasetMeta(t);
  return n && e.isDatasetVisible(t) ? n.dataset : null;
}
}
    const o = t.isHorizontal();
    return {
      x: o ? r : null,
      y: o ? null : r
    };
  }
  return null;
}
  if (r.grid.circular) {
    const f = t.getPointPositionForValue(0, s);
      x: f.x,
      y: f.y,
      radius: t.getDistanceFromCenterForValue(a)
    });
  }
  for (let f = 0; f < o; ++f)
    c.push(t.getPointPositionForValue(f, a));
  return c;
}
    line: a,
    target: r,
    above: w,
    below: C,
    area: n,
    scale: c,
    axis: f,
    clip: E
}
  e.save();
  let g = s;
    line: n,
    target: r,
    color: o,
    scale: c,
    clip: f
    line: n,
    target: r,
    color: s,
    scale: c,
    clip: f
    line: n,
    target: r,
    color: g,
    scale: c,
    clip: f
  }), e.restore();
}
  const { segments: r, points: o } = t;
  let s = !0, a = !1;
  e.beginPath();
  for (const c of r) {
    s ? (e.moveTo(g.x, g.y), s = !1) : (e.lineTo(g.x, n), e.lineTo(g.x, g.y)), a = !!t.pathSegment(e, c, {
      move: a
  }
  e.lineTo(t.first().x, n), e.closePath(), e.clip();
}
  const { segments: r, points: o } = t;
  let s = !0, a = !1;
  e.beginPath();
  for (const c of r) {
    s ? (e.moveTo(g.x, g.y), s = !1) : (e.lineTo(n, g.y), e.lineTo(g.x, g.y)), a = !!t.pathSegment(e, c, {
      move: a
  }
  e.lineTo(n, t.first().y), e.closePath(), e.clip();
}
    let O;
    if (T) {
        move: E,
        reverse: !0
      });
    }
    e.closePath(), e.fill(O ? "evenodd" : "nonzero"), e.restore();
  }
}
  const o = t.chart.chartArea, { property: s, start: a, end: c } = r || {};
  if (s === "x" || s === "y") {
  }
}
  const o = t.interpolate(n, r);
  o && e.lineTo(o.x, o.y);
}
  id: "filler",
  afterDatasetsUpdate(e, t, n) {
    const r = (e.data.datasets || []).length, o = [];
    let s, a, c, f;
    for (a = 0; a < r; ++a)
        visible: e.isDatasetVisible(a),
        index: a,
        chart: e,
        axis: s.controller.options.indexAxis,
        scale: s.vScale,
        line: c
      }), s.$filler = f, o.push(f);
    for (a = 0; a < r; ++a)
  },
  beforeDraw(e, t, n) {
    const r = n.drawTime === "beforeDraw", o = e.getSortedVisibleDatasetMetas(), s = e.chartArea;
    for (let a = o.length - 1; a >= 0; --a) {
      const c = o[a].$filler;
    }
  },
  beforeDatasetsDraw(e, t, n) {
    if (n.drawTime !== "beforeDatasetsDraw")
      return;
    const r = e.getSortedVisibleDatasetMetas();
    for (let o = r.length - 1; o >= 0; --o) {
      const s = r[o].$filler;
    }
  },
  beforeDatasetDraw(e, t, n) {
    const r = t.meta.$filler;
  },
  defaults: {
    propagate: !0,
    drawTime: "beforeDatasetDraw"
  }
};
  let { boxHeight: n = t, boxWidth: r = t } = e;
  return e.usePointStyle && (n = Math.min(n, t), r = e.pointStyleWidth || Math.min(r, t)), {
    boxWidth: r,
    boxHeight: n,
    itemHeight: Math.max(t, n)
  };
  constructor(t) {
    super(), this._added = !1, this.legendHitBoxes = [], this._hoveredItem = null, this.doughnutMode = !1, this.chart = t.chart, this.options = t.options, this.ctx = t.ctx, this.legendItems = void 0, this.columnSizes = void 0, this.lineWidths = void 0, this.maxHeight = void 0, this.maxWidth = void 0, this.top = void 0, this.bottom = void 0, this.left = void 0, this.right = void 0, this.height = void 0, this.width = void 0, this._margins = void 0, this.position = void 0, this.weight = void 0, this.fullSize = void 0;
  }
  update(t, n, r) {
    this.maxWidth = t, this.maxHeight = n, this._margins = r, this.setDimensions(), this.buildLabels(), this.fit();
  }
  setDimensions() {
    this.isHorizontal() ? (this.width = this.maxWidth, this.left = this._margins.left, this.right = this.width) : (this.height = this.maxHeight, this.top = this._margins.top, this.bottom = this.height);
  }
  buildLabels() {
    const t = this.options.labels || {};
      this.chart
    ], this) || [];
    t.filter && (n = n.filter((r) => t.filter(r, this.chart.data))), t.sort && (n = n.sort((r, o) => t.sort(r, o, this.chart.data))), this.options.reverse && n.reverse(), this.legendItems = n;
  }
  fit() {
    const { options: t, ctx: n } = this;
    if (!t.display) {
      this.width = this.height = 0;
      return;
    }
  }
  _fitRows(t, n, r, o) {
      0
    ], g = o + c;
    s.textAlign = "left", s.textBaseline = "middle";
    let w = -1, C = -g;
    return this.legendItems.forEach((T, E) => {
      const O = r + n / 2 + s.measureText(T.text).width;
        left: 0,
        top: C,
        row: w,
        width: O,
        height: o
  }
  _fitCols(t, n, r, o) {
        width: w,
        height: C
        left: T,
        top: C,
        col: E,
        width: I,
        height: M
      }, w = Math.max(w, I), C += M + c;
      width: w,
      height: C
  }
  adjustHitBoxes() {
    if (!this.options.display)
      return;
    if (this.isHorizontal()) {
    } else {
    }
  }
  isHorizontal() {
    return this.options.position === "top" || this.options.position === "bottom";
  }
  draw() {
    if (this.options.display) {
      const t = this.ctx;
    }
  }
  _draw() {
    let C;
      if (isNaN(T) || T <= 0 || isNaN(E) || E < 0)
        return;
      o.save();
          radius: E * Math.SQRT2 / 2,
      } else {
          x: q,
          w: T,
          h: E,
      }
      o.restore();
      });
    M ? C = {
      line: 0
    } : C = {
      x: this.left + g,
      line: 0
      } else
  }
  drawTitle() {
    if (!n.display)
      return;
    if (this.isHorizontal())
    else {
      const T = this.columnSizes.reduce((E, O) => Math.max(E, O.height), 0);
    }
  }
  _computeTitleHeight() {
    return t.display ? n.lineHeight + r.height : 0;
  }
  _getLegendItemAt(t, n) {
    let r, o, s;
      for (s = this.legendHitBoxes, r = 0; r < s.length; ++r)
          return this.legendItems[r];
    }
    return null;
  }
  handleEvent(t) {
    const n = this.options;
      return;
    const r = this._getLegendItemAt(t.x, t.y);
    if (t.type === "mousemove" || t.type === "mouseout") {
        t,
        o,
        this
        t,
        r,
        this
      ], this);
      t,
      r,
      this
    ], this);
  }
}
  return {
    itemWidth: s,
    itemHeight: a
  };
}
  let o = e.text;
  return o && typeof o != "string" && (o = o.reduce((s, a) => s.length > a.length ? s : a)), t + n.size / 2 + r.measureText(o).width;
}
  let r = e;
}
  const n = e.text ? e.text.length : 0;
  return t * n;
}
  return !!((e === "mousemove" || e === "mouseout") && (t.onHover || t.onLeave) || t.onClick && (e === "click" || e === "mouseup"));
}
  id: "legend",
  start(e, t, n) {
      ctx: e.ctx,
      options: n,
      chart: e
    });
  },
  stop(e) {
  },
  beforeUpdate(e, t, n) {
    const r = e.legend;
  },
  afterUpdate(e) {
    const t = e.legend;
    t.buildLabels(), t.adjustHitBoxes();
  },
  afterEvent(e, t) {
    t.replay || e.legend.handleEvent(t.event);
  },
  defaults: {
    display: !0,
    position: "top",
    align: "center",
    fullSize: !0,
    reverse: !1,
    weight: 1e3,
    onClick(e, t, n) {
      const r = t.datasetIndex, o = n.chart;
      o.isDatasetVisible(r) ? (o.hide(r), t.hidden = !0) : (o.show(r), t.hidden = !1);
    },
    onHover: null,
    onLeave: null,
    labels: {
      color: (e) => e.chart.options.color,
      boxWidth: 40,
      padding: 10,
      generateLabels(e) {
        const t = e.data.datasets, { labels: { usePointStyle: n, pointStyle: r, textAlign: o, color: s, useBorderRadius: a, borderRadius: c } } = e.legend.options;
        return e._getSortedDatasetMetas().map((f) => {
          return {
            text: t[f.index].label,
            fontColor: s,
            hidden: !f.visible,
            lineWidth: (g.width + g.height) / 4,
            datasetIndex: f.index
          };
        }, this);
      }
    },
    title: {
      color: (e) => e.chart.options.color,
      display: !1,
      position: "center",
      text: ""
    }
  },
  descriptors: {
    _scriptable: (e) => !e.startsWith("on"),
    labels: {
      _scriptable: (e) => ![
        "generateLabels",
        "filter",
        "sort"
      ].includes(e)
    }
  }
};
  average(e) {
    if (!e.length)
      return !1;
    let t, n, r = /* @__PURE__ */ new Set(), o = 0, s = 0;
    for (t = 0, n = e.length; t < n; ++t) {
      const c = e[t].element;
      if (c && c.hasValue()) {
        const f = c.tooltipPosition();
        r.add(f.x), o += f.y, ++s;
      }
    }
    return s === 0 || r.size === 0 ? !1 : {
      x: [
        ...r
      ].reduce((c, f) => c + f) / r.size,
      y: o / s
    };
  },
  nearest(e, t) {
    if (!e.length)
      return !1;
    let n = t.x, r = t.y, o = Number.POSITIVE_INFINITY, s, a, c;
    for (s = 0, a = e.length; s < a; ++s) {
      const f = e[s].element;
      if (f && f.hasValue()) {
        g < o && (o = g, c = f);
      }
    }
    if (c) {
      const f = c.tooltipPosition();
      n = f.x, r = f.y;
    }
    return {
      x: n,
      y: r
    };
  }
};
}
  return (typeof e == "string" || e instanceof String) && e.indexOf(`
`) > -1 ? e.split(`
`) : e;
}
  const { element: n, datasetIndex: r, index: o } = t, s = e.getDatasetMeta(r).controller, { label: a, value: c } = s.getLabelAndValue(o);
  return {
    chart: e,
    label: a,
    parsed: s.getParsed(o),
    raw: e.data.datasets[r].data[o],
    formattedValue: c,
    dataset: s.getDataset(),
    dataIndex: o,
    datasetIndex: r,
    element: n
  };
}
  }
  w && (E += t.footerMarginTop + w * g.lineHeight + (w - 1) * t.footerSpacing);
  let I = 0;
  };
    width: O,
    height: E
  };
}
  const { y: n, height: r } = t;
  return n < r / 2 ? "top" : n > e.height - r / 2 ? "bottom" : "center";
}
  const { x: o, width: s } = r, a = n.caretSize + n.caretPadding;
  if (e === "left" && o + s + a > t.width || e === "right" && o - s - a < 0)
    return !0;
}
  const { x: o, width: s } = n, { width: a, chartArea: { left: c, right: f } } = e;
}
  return {
    yAlign: r
  };
}
  let { x: n, width: r } = e;
  return t === "right" ? n -= r : t === "center" && (n -= r / 2), n;
}
  let { y: r, height: o } = e;
  return t === "top" ? r += n : t === "bottom" ? r -= o + n : r -= o / 2, r;
}
  };
}
  return t === "center" ? e.x + e.width / 2 : t === "right" ? e.x + e.width - r.right : e.x + r.left;
}
}
    tooltip: t,
    tooltipItems: n,
    type: "tooltip"
  });
}
  const n = t && t.dataset && t.dataset.tooltip && t.dataset.tooltip.callbacks;
  return n ? e.override(n) : e;
}
  title(e) {
    if (e.length > 0) {
      const t = e[0], n = t.chart.data.labels, r = n ? n.length : 0;
      if (this && this.options && this.options.mode === "dataset")
        return t.dataset.label || "";
      if (t.label)
        return t.label;
      if (r > 0 && t.dataIndex < r)
        return n[t.dataIndex];
    }
    return "";
  },
  label(e) {
    if (this && this.options && this.options.mode === "dataset")
      return e.label + ": " + e.formattedValue || e.formattedValue;
    let t = e.dataset.label || "";
    t && (t += ": ");
    const n = e.formattedValue;
  },
  labelColor(e) {
    const n = e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);
    return {
      borderColor: n.borderColor,
      backgroundColor: n.backgroundColor,
      borderWidth: n.borderWidth,
      borderDash: n.borderDash,
      borderDashOffset: n.borderDashOffset,
      borderRadius: 0
    };
  },
  labelTextColor() {
    return this.options.bodyColor;
  },
  labelPointStyle(e) {
    const n = e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);
    return {
      pointStyle: n.pointStyle,
      rotation: n.rotation
    };
  },
};
  const o = e[t].call(n, r);
}
  constructor(t) {
    super(), this.opacity = 0, this._active = [], this._eventPosition = void 0, this._size = void 0, this._cachedAnimations = void 0, this._tooltipItems = [], this.$animations = void 0, this.$context = void 0, this.chart = t.chart, this.options = t.options, this.dataPoints = void 0, this.title = void 0, this.beforeBody = void 0, this.body = void 0, this.afterBody = void 0, this.footer = void 0, this.xAlign = void 0, this.yAlign = void 0, this.x = void 0, this.y = void 0, this.height = void 0, this.width = void 0, this.caretX = void 0, this.caretY = void 0, this.labelColors = void 0, this.labelPointStyles = void 0, this.labelTextColors = void 0;
  }
  initialize(t) {
    this.options = t, this._cachedAnimations = void 0, this.$context = void 0;
  }
  _resolveAnimations() {
    const t = this._cachedAnimations;
    if (t)
      return t;
    return o._cacheable && (this._cachedAnimations = Object.freeze(s)), s;
  }
  getContext() {
  }
  getTitle(t, n) {
    let c = [];
  }
  getBeforeBody(t, n) {
  }
  getBody(t, n) {
    const { callbacks: r } = n, o = [];
      const a = {
        before: [],
        lines: [],
        after: []
    }), o;
  }
  getAfterBody(t, n) {
  }
  getFooter(t, n) {
    let c = [];
  }
  _createItems(t) {
    const n = this._active, r = this.chart.data, o = [], s = [], a = [];
    }), this.labelColors = o, this.labelPointStyles = s, this.labelTextColors = a, this.dataPoints = c, c;
  }
  update(t, n) {
    const r = this.options.setContext(this.getContext()), o = this._active;
    let s, a = [];
    if (!o.length)
      this.opacity !== 0 && (s = {
        opacity: 0
      });
    else {
      a = this._createItems(r), this.title = this.getTitle(a, r), this.beforeBody = this.getBeforeBody(a, r), this.body = this.getBody(a, r), this.afterBody = this.getAfterBody(a, r), this.footer = this.getFooter(a, r);
      this.xAlign = g.xAlign, this.yAlign = g.yAlign, s = {
        opacity: 1,
        width: f.width,
        height: f.height,
        caretX: c.x,
        caretY: c.y
      };
    }
    this._tooltipItems = a, this.$context = void 0, s && this._resolveAnimations().update(this, s), t && r.external && r.external.call(this, {
      chart: this.chart,
      tooltip: this,
      replay: n
    });
  }
  drawCaret(t, n, r, o) {
    const s = this.getCaretPosition(t, r, o);
    n.lineTo(s.x1, s.y1), n.lineTo(s.x2, s.y2), n.lineTo(s.x3, s.y3);
  }
  getCaretPosition(t, n, r) {
      x1: O,
      x3: I,
      y1: M,
    };
  }
  drawTitle(t, n, r) {
    const o = this.title, s = o.length;
    let a, c, f;
    if (s) {
    }
  }
  _drawColorBox(t, n, r, o, s) {
    if (s.usePointStyle) {
      const E = {
        pointStyle: c.pointStyle,
        rotation: c.rotation,
        borderWidth: 1
    } else {
        x: E,
        y: T,
        h: f,
        x: O,
        y: T + 1,
        h: f - 2,
    }
    t.fillStyle = this.labelTextColors[r];
  }
  drawBody(t, n, r) {
    }, O = T.textAlign(a);
    }
  }
  drawFooter(t, n, r) {
    const o = this.footer, s = o.length;
    let a, c;
    if (s) {
        n.fillText(o[c], f.x(t.x), t.y + a.lineHeight / 2), t.y += a.lineHeight + r.footerSpacing;
    }
  }
  drawBackground(t, n, r, o) {
  }
  _updateAnimationTarget(t) {
    const n = this.chart, r = this.$animations, o = r && r.x, s = r && r.y;
    if (o || s) {
      if (!a)
        return;
    }
  }
  _willRender() {
    return !!this.opacity;
  }
  draw(t) {
    const n = this.options.setContext(this.getContext());
    let r = this.opacity;
    if (!r)
      return;
    this._updateAnimationTarget(n);
    const o = {
      width: this.width,
      height: this.height
    }, s = {
      x: this.x,
      y: this.y
    };
    r = Math.abs(r) < 1e-3 ? 0 : r;
  }
  getActiveElements() {
    return this._active || [];
  }
  setActiveElements(t, n) {
    const r = this._active, o = t.map(({ datasetIndex: c, index: f }) => {
        throw new Error("Cannot find a dataset at index " + c);
      return {
        datasetIndex: c,
        index: f
      };
    (s || a) && (this._active = o, this._eventPosition = n, this._ignoreReplayEvents = !0, this.update(!0));
  }
  handleEvent(t, n, r = !0) {
    if (n && this._ignoreReplayEvents)
      return !1;
    this._ignoreReplayEvents = !1;
    return f && (this._active = a, (o.enabled || o.external) && (this._eventPosition = {
      x: t.x,
      y: t.y
    }, this.update(!0, n))), f;
  }
  _getActiveElements(t, n, r, o) {
    const s = this.options;
    if (t.type === "mouseout")
      return [];
    if (!o)
      return n.filter((c) => this.chart.data.datasets[c.datasetIndex] && this.chart.getDatasetMeta(c.datasetIndex).controller.getParsed(c.index) !== void 0);
    const a = this.chart.getElementsAtEventForMode(t, s.mode, s, r);
    return s.reverse && a.reverse(), a;
  }
  _positionChanged(t, n) {
    return a !== !1 && (r !== a.x || o !== a.y);
  }
}
  id: "tooltip",
  afterInit(e, t, n) {
      chart: e,
      options: n
    }));
  },
  beforeUpdate(e, t, n) {
    e.tooltip && e.tooltip.initialize(n);
  },
  reset(e, t, n) {
    e.tooltip && e.tooltip.initialize(n);
  },
  afterDraw(e) {
    const t = e.tooltip;
    if (t && t._willRender()) {
      const n = {
        tooltip: t
      };
      if (e.notifyPlugins("beforeTooltipDraw", {
        ...n,
        cancelable: !0
      }) === !1)
        return;
      t.draw(e.ctx), e.notifyPlugins("afterTooltipDraw", n);
    }
  },
  afterEvent(e, t) {
    if (e.tooltip) {
      const n = t.replay;
      e.tooltip.handleEvent(t.event, n, t.inChartArea) && (t.changed = !0);
    }
  },
  defaults: {
    enabled: !0,
    external: null,
    position: "average",
    backgroundColor: "rgba(0,0,0,0.8)",
    titleColor: "#fff",
    titleFont: {
      weight: "bold"
    },
    titleSpacing: 2,
    titleMarginBottom: 6,
    titleAlign: "left",
    bodyColor: "#fff",
    bodySpacing: 2,
    bodyFont: {},
    bodyAlign: "left",
    footerColor: "#fff",
    footerSpacing: 2,
    footerMarginTop: 6,
    footerFont: {
      weight: "bold"
    },
    footerAlign: "left",
    padding: 6,
    caretPadding: 2,
    caretSize: 5,
    cornerRadius: 6,
    boxHeight: (e, t) => t.bodyFont.size,
    boxWidth: (e, t) => t.bodyFont.size,
    multiKeyBackground: "#fff",
    displayColors: !0,
    boxPadding: 0,
    borderColor: "rgba(0,0,0,0)",
    borderWidth: 0,
    animation: {
      duration: 400,
      easing: "easeOutQuart"
    },
    animations: {
      numbers: {
        type: "number",
        properties: [
          "x",
          "y",
          "width",
          "height",
          "caretX",
          "caretY"
        ]
      },
      opacity: {
        easing: "linear",
        duration: 200
      }
    },
  },
  defaultRoutes: {
    bodyFont: "font",
    footerFont: "font",
    titleFont: "font"
  },
  descriptors: {
    _scriptable: (e) => e !== "filter" && e !== "itemSort" && e !== "external",
    _indexable: !1,
    callbacks: {
      _scriptable: !1,
      _indexable: !1
    },
    animation: {
      _fallback: !1
    },
    animations: {
      _fallback: "animation"
    }
  },
  additionalOptionScopes: [
    "interaction"
  ]
};
  index: n,
  label: t
})) : isNaN(t) && (n = null), n);
  const o = e.indexOf(t);
  if (o === -1)
  const s = e.lastIndexOf(t);
  return o !== s ? n : o;
}
  const t = this.getLabels();
  return e >= 0 && e < t.length ? t[e] : e;
}
  constructor(t) {
    super(t), this._startValue = void 0, this._valueRange = 0, this._addedLabels = [];
  }
  init(t) {
    const n = this._addedLabels;
    if (n.length) {
      const r = this.getLabels();
      for (const { index: o, label: s } of n)
        r[o] === s && r.splice(o, 1);
      this._addedLabels = [];
    }
    super.init(t);
  }
  parse(t, n) {
      return null;
    const r = this.getLabels();
  }
  determineDataLimits() {
    const { minDefined: t, maxDefined: n } = this.getUserBounds();
    let { min: r, max: o } = this.getMinMax(!0);
    this.options.bounds === "ticks" && (t || (r = 0), n || (o = this.getLabels().length - 1)), this.min = r, this.max = o;
  }
  buildTicks() {
    const t = this.min, n = this.max, r = this.options.offset, o = [];
    let s = this.getLabels();
    s = t === 0 && n === s.length - 1 ? s : s.slice(t, n + 1), this._valueRange = Math.max(s.length - (r ? 0 : 1), 1), this._startValue = this.min - (r ? 0.5 : 0);
    for (let a = t; a <= n; a++)
      o.push({
        value: a
      });
    return o;
  }
  getLabelForValue(t) {
  }
  configure() {
    super.configure(), this.isHorizontal() || (this._reversePixels = !this._reversePixels);
  }
  getPixelForValue(t) {
    return typeof t != "number" && (t = this.parse(t)), t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
  }
  getPixelForTick(t) {
    const n = this.ticks;
    return t < 0 || t > n.length - 1 ? null : this.getPixelForValue(n[t].value);
  }
  getValueForPixel(t) {
    return Math.round(this._startValue + this.getDecimalForPixel(t) * this._valueRange);
  }
  getBasePixel() {
    return this.bottom;
  }
}
  ticks: {
  }
});
    return [
      {
        value: E
      },
      {
        value: O
      }
    ];
  let q = 0;
    value: a
      break;
    n.push({
    });
  }
    value: c
  }), n;
}
  return Math.min(t / s, a);
}
  constructor(t) {
    super(t), this.start = void 0, this.end = void 0, this._startValue = void 0, this._endValue = void 0, this._valueRange = 0;
  }
  parse(t, n) {
  }
  handleTickRangeOptions() {
    const { beginAtZero: t } = this.options, { minDefined: n, maxDefined: r } = this.getUserBounds();
    let { min: o, max: s } = this;
    const a = (f) => o = n ? o : f, c = (f) => s = r ? s : f;
    if (t) {
    }
    if (o === s) {
      let f = s === 0 ? 1 : Math.abs(s * 0.05);
      c(s + f), t || a(o - f);
    }
    this.min = o, this.max = s;
  }
  getTickLimit() {
    const t = this.options.ticks;
    let { maxTicksLimit: n, stepSize: r } = t, o;
    return r ? (o = Math.ceil(this.max / r) - Math.floor(this.min / r) + 1, o > 1e3 && (console.warn(`scales.${this.id}.ticks.stepSize: ${r} would result generating up to ${o} ticks. Limiting to 1000.`), o = 1e3)) : (o = this.computeTickLimit(), n = n || 11), n && (o = Math.min(n, o)), o;
  }
  computeTickLimit() {
    return Number.POSITIVE_INFINITY;
  }
  buildTicks() {
    const t = this.options, n = t.ticks;
    let r = this.getTickLimit();
    r = Math.max(2, r);
    const o = {
      maxTicks: r,
      bounds: t.bounds,
      min: t.min,
      max: t.max,
      precision: n.precision,
      step: n.stepSize,
      count: n.count,
      maxDigits: this._maxDigits(),
      horizontal: this.isHorizontal(),
      minRotation: n.minRotation || 0,
      includeBounds: n.includeBounds !== !1
  }
  configure() {
    const t = this.ticks;
    let n = this.min, r = this.max;
    if (super.configure(), this.options.offset && t.length) {
      const o = (r - n) / Math.max(t.length - 1, 1) / 2;
      n -= o, r += o;
    }
    this._startValue = n, this._endValue = r, this._valueRange = r - n;
  }
  getLabelForValue(t) {
  }
}
  determineDataLimits() {
    const { min: t, max: n } = this.getMinMax(!0);
  }
  computeTickLimit() {
    return Math.ceil(n / Math.min(40, s.lineHeight / o));
  }
  getPixelForValue(t) {
    return t === null ? NaN : this.getPixelForDecimal((t - this._startValue) / this._valueRange);
  }
  getValueForPixel(t) {
    return this._startValue + this.getDecimalForPixel(t) * this._valueRange;
  }
}
  ticks: {
  }
});
  millisecond: {
    common: !0,
    size: 1,
    steps: 1e3
  },
  second: {
    common: !0,
    size: 1e3,
    steps: 60
  },
  minute: {
    common: !0,
    size: 6e4,
    steps: 60
  },
  hour: {
    common: !0,
    size: 36e5,
    steps: 24
  },
  day: {
    common: !0,
    size: 864e5,
    steps: 30
  },
  week: {
    common: !1,
    size: 6048e5,
    steps: 4
  },
  month: {
    common: !0,
    size: 2628e6,
    steps: 12
  },
  quarter: {
    common: !1,
    size: 7884e6,
    steps: 4
  },
  year: {
    common: !0,
    size: 3154e7
  }
  return e - t;
}
    return null;
  const n = e._adapter, { parser: r, round: o, isoWeekday: s } = e._parseOpts;
  let a = t;
}
    if (a.common && Math.ceil((n - t) / (c * a.size)) <= r)
  }
}
      return a;
  }
}
}
  if (!n)
    e[t] = !0;
  else if (n.length) {
    e[s] = !0;
  }
}
  const o = e._adapter, s = +o.startOf(t[0].value, r), a = t[t.length - 1].value;
  let c, f;
  for (c = s; c <= a; c = +o.add(c, 1, r))
    f = n[c], f >= 0 && (t[f].major = !0);
  return t;
}
  const r = [], o = {}, s = t.length;
  let a, c;
  for (a = 0; a < s; ++a)
    c = t[a], o[c] = a, r.push({
      value: c,
      major: !1
    });
}
  constructor(t) {
    super(t), this._cache = {
      data: [],
      labels: [],
      all: []
    }, this._unit = "day", this._majorUnit = void 0, this._offsets = {}, this._normalized = !1, this._parseOpts = void 0;
  }
  init(t, n = {}) {
      parser: r.parser,
      round: r.round,
      isoWeekday: r.isoWeekday
    }, super.init(t), this._normalized = n.normalized;
  }
  parse(t, n) {
  }
  beforeLayout() {
    super.beforeLayout(), this._cache = {
      data: [],
      labels: [],
      all: []
    };
  }
  determineDataLimits() {
    const t = this.options, n = this._adapter, r = t.time.unit || "day";
    let { min: o, max: s, minDefined: a, maxDefined: c } = this.getUserBounds();
    }
  }
  _getLabelBounds() {
    const t = this.getLabelTimestamps();
    let n = Number.POSITIVE_INFINITY, r = Number.NEGATIVE_INFINITY;
    return t.length && (n = t[0], r = t[t.length - 1]), {
      min: n,
      max: r
    };
  }
  buildTicks() {
    const t = this.options, n = t.time, r = t.ticks, o = r.source === "labels" ? this.getLabelTimestamps() : this._generate();
    t.bounds === "ticks" && o.length && (this.min = this._userMin || o[0], this.max = this._userMax || o[o.length - 1]);
  }
  afterAutoSkip() {
    this.options.offsetAfterAutoskip && this.initOffsets(this.ticks.map((t) => +t.value));
  }
  initOffsets(t = []) {
    let n = 0, r = 0, o, s;
    this.options.offset && t.length && (o = this.getDecimalForValue(t[0]), t.length === 1 ? n = 1 - o : n = (this.getDecimalForValue(t[1]) - o) / 2, s = this.getDecimalForValue(t[t.length - 1]), t.length === 1 ? r = s : r = (s - this.getDecimalForValue(t[t.length - 2])) / 2);
    const a = t.length < 3 ? 0.5 : 0.25;
      start: n,
      end: r,
      factor: 1 / (n + 1 + r)
    };
  }
  _generate() {
      throw new Error(n + " and " + r + " are too far apart with stepSize of " + c + " " + a);
    const T = o.ticks.source === "data" && this.getDataTimestamps();
  }
  getLabelForValue(t) {
    const n = this._adapter, r = this.options.time;
    return r.tooltipFormat ? n.format(t, r.tooltipFormat) : n.format(t, r.displayFormats.datetime);
  }
  format(t, n) {
    const o = this.options.time.displayFormats, s = this._unit, a = n || o[s];
    return this._adapter.format(t, a);
  }
  _tickFormatFunction(t, n, r, o) {
    const s = this.options, a = s.ticks.callback;
    if (a)
        t,
        n,
        r
      ], this);
  }
  generateTickLabels(t) {
    let n, r, o;
    for (n = 0, r = t.length; n < r; ++n)
      o = t[n], o.label = this._tickFormatFunction(o.value, n, t);
  }
  getDecimalForValue(t) {
    return t === null ? NaN : (t - this.min) / (this.max - this.min);
  }
  getPixelForValue(t) {
    const n = this._offsets, r = this.getDecimalForValue(t);
    return this.getPixelForDecimal((n.start + r) * n.factor);
  }
  getValueForPixel(t) {
    const n = this._offsets, r = this.getDecimalForPixel(t) / n.factor - n.end;
    return this.min + r * (this.max - this.min);
  }
  _getLabelSize(t) {
    return {
      w: r * s + c * a,
      h: r * a + c * s
    };
  }
  _getLabelCapacity(t) {
      t
    ], this._majorUnit), o), a = this._getLabelSize(s), c = Math.floor(this.isHorizontal() ? this.width / a.w : this.height / a.h) - 1;
    return c > 0 ? c : 1;
  }
  getDataTimestamps() {
    let t = this._cache.data || [], n, r;
    if (t.length)
      return t;
    const o = this.getMatchingVisibleMetas();
    if (this._normalized && o.length)
      return this._cache.data = o[0].controller.getAllParsedValues(this);
    for (n = 0, r = o.length; n < r; ++n)
      t = t.concat(o[n].controller.getAllParsedValues(this));
    return this._cache.data = this.normalize(t);
  }
  getLabelTimestamps() {
    const t = this._cache.labels || [];
    let n, r;
    if (t.length)
      return t;
    const o = this.getLabels();
    for (n = 0, r = o.length; n < r; ++n)
    return this._cache.labels = this._normalized ? t : this.normalize(t);
  }
  normalize(t) {
  }
}
  bounds: "data",
  adapters: {},
  time: {
    parser: !1,
    unit: !1,
    round: !1,
    isoWeekday: !1,
    minUnit: "millisecond",
    displayFormats: {}
  },
  ticks: {
    source: "auto",
    callback: !1,
    major: {
      enabled: !1
    }
  }
});
  let r = 0, o = e.length - 1, s, a, c, f;
}
  constructor(t) {
    super(t), this._table = [], this._minPos = void 0, this._tableRange = void 0;
  }
  initOffsets() {
    const t = this._getTimestampsForTable(), n = this._table = this.buildLookupTable(t);
  }
  buildLookupTable(t) {
    const { min: n, max: r } = this, o = [], s = [];
    for (a = 0, c = t.length; a < c; ++a)
    if (o.length < 2)
      return [
        {
          time: n,
          pos: 0
        },
        {
          time: r,
          pos: 1
        }
      ];
    for (a = 0, c = o.length; a < c; ++a)
        pos: a / (c - 1)
      });
    return s;
  }
  _generate() {
    const t = this.min, n = this.max;
    let r = super.getDataTimestamps();
    return (!r.includes(t) || !r.length) && r.splice(0, 0, t), (!r.includes(n) || r.length === 1) && r.push(n), r.sort((o, s) => o - s);
  }
  _getTimestampsForTable() {
    let t = this._cache.all || [];
    if (t.length)
      return t;
    const n = this.getDataTimestamps(), r = this.getLabelTimestamps();
    return n.length && r.length ? t = this.normalize(n.concat(r)) : t = n.length ? n : r, t = this._cache.all = t, t;
  }
  getDecimalForValue(t) {
  }
  getValueForPixel(t) {
    const n = this._offsets, r = this.getDecimalForPixel(t) / n.factor - n.end;
  }
}
  return x.useEffect(() => {
    if (t.current)
        type: "line",
        data: {
          datasets: [
            {
              label: "Revenue",
              tension: 0.4,
              fill: !0,
              pointRadius: 3
            }
          ]
        },
        options: {
          responsive: !0,
          maintainAspectRatio: !1,
          scales: {
            y: {
              ticks: {
              }
            }
          }
        }
      }), () => {
      };
}
  if (e === void 0)
    throw new Error(["MUI X: Could not find the Data Grid context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join(`
`));
  return e;
}
  if (!e)
    throw new Error("MUI X: useGridRootProps should only be used inside the DataGrid, DataGridPro or DataGridPremium component.");
  return e;
    const t = (n) => e(n, n.ref ?? null);
    return t.displayName = e.displayName ?? e.name, t;
  }
  return /* @__PURE__ */ x.forwardRef(e);
};
  const n = new URL(`https://mui.com/production-error/?code=${e}`);
  return t.forEach((r) => n.searchParams.append("args[]", r)), `Minified MUI error #${e}; visit ${n} for the full message.`;
}
/**
 * @mui/styled-engine v7.3.3
 *
 * @license MIT
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  return process.env.NODE_ENV !== "production" ? (...r) => {
    const o = typeof e == "string" ? `"${e}"` : "component";
    return r.length === 0 ? console.error([`MUI: Seems like you called \`styled(${o})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join(`
`)) : r.some((s) => s === void 0) && console.error(`MUI: the styled(${o})(...args) API requires all its args to be defined.`), n(...r);
  } : n;
}
  Array.isArray(e.__emotion_styles) && (e.__emotion_styles = t(e.__emotion_styles));
}
}
  if (typeof e != "object" || e === null)
    return !1;
  const t = Object.getPrototypeOf(e);
  return (t === null || t === Object.prototype || Object.getPrototypeOf(t) === null) && !(Symbol.toStringTag in e) && !(Symbol.iterator in e);
}
    return e;
  const t = {};
  return Object.keys(e).forEach((n) => {
  }), t;
}
  clone: !0
}) {
  const r = n.clone ? {
    ...e
  } : e;
  }), r;
}
  const t = Object.keys(e).map((n) => ({
    key: n,
    val: e[n]
  })) || [];
  return t.sort((n, r) => n.val - r.val), t.reduce((n, r) => ({
    ...n,
    [r.key]: r.val
  }), {});
};
  const {
    // The breakpoint **start** at this value.
    // For instance with the first breakpoint xs: [xs, sm).
    values: t = {
      xs: 0,
      // phone
      sm: 600,
      // tablet
      md: 900,
      // small laptop
      lg: 1200,
      // desktop
      xl: 1536
      // large screen
    },
    unit: n = "px",
    step: r = 5,
    ...o
  function c(w) {
    return `@media (min-width:${typeof t[w] == "number" ? t[w] : w}${n})`;
  }
  function f(w) {
    return `@media (max-width:${(typeof t[w] == "number" ? t[w] : w) - r / 100}${n})`;
  }
    const T = a.indexOf(C);
    return `@media (min-width:${typeof t[w] == "number" ? t[w] : w}${n}) and (max-width:${(T !== -1 && typeof t[a[T]] == "number" ? t[a[T]] : C) - r / 100}${n})`;
  }
  function g(w) {
  }
    const C = a.indexOf(w);
  }
  return {
    keys: a,
    values: s,
    up: c,
    down: f,
    only: g,
    unit: n,
    ...o
  };
}
  if (!e.containerQueries)
    return t;
  const n = Object.keys(t).filter((r) => r.startsWith("@container")).sort((r, o) => {
    var a, c;
    const s = /min-width:\s*([0-9.]+)/;
    return +(((a = r.match(s)) == null ? void 0 : a[1]) || 0) - +(((c = o.match(s)) == null ? void 0 : c[1]) || 0);
  });
  return n.length ? n.reduce((r, o) => {
    const s = t[o];
    return delete r[o], r[o] = s, r;
  }, {
    ...t
  }) : t;
}
  return t === "@" || t.startsWith("@") && (e.some((n) => t.startsWith(`@${n}`)) || !!t.match(/^@\d/));
}
  const n = t.match(/^@([^/]+)?\/?(.+)?$/);
  if (!n) {
    if (process.env.NODE_ENV !== "production")
      throw new Error(process.env.NODE_ENV !== "production" ? `MUI: The provided shorthand ${`(${t})`} is invalid. The format should be \`@<breakpoint | number>\` or \`@<breakpoint | number>/<container>\`.
    return null;
  }
  const [, r, o] = n, s = Number.isNaN(+r) ? r || 0 : +r;
  return e.containerQueries(o).up(s);
}
  const t = (s, a) => s.replace("@media", a ? `@container ${a}` : "@container");
  function n(s, a) {
    s.up = (...c) => t(e.breakpoints.up(...c), a), s.down = (...c) => t(e.breakpoints.down(...c), a), s.between = (...c) => t(e.breakpoints.between(...c), a), s.only = (...c) => t(e.breakpoints.only(...c), a), s.not = (...c) => {
      const f = t(e.breakpoints.not(...c), a);
      return f.includes("not all and") ? f.replace("not all and ", "").replace("min-width:", "width<").replace("max-width:", "width>").replace("and", "or") : f;
    };
  }
  const r = {}, o = (s) => (n(r, s), r);
  return n(o), {
    ...e,
    containerQueries: o
  };
}
  borderRadius: 4
    clone: !1
    // No need to clone deep, it's way faster.
  }) : e;
}
  xs: 0,
  // phone
  sm: 600,
  // tablet
  md: 900,
  // small laptop
  lg: 1200,
  // desktop
  xl: 1536
  // large screen
  // Sorted ASC by size. That's important.
  // It can't be configured as it's used statically for propTypes.
  keys: ["xs", "sm", "md", "lg", "xl"],
  containerQueries: (e) => ({
    up: (t) => {
      return typeof n == "number" && (n = `${n}px`), e ? `@container ${e} (min-width:${n})` : `@container (min-width:${n})`;
    }
  })
};
  const r = e.theme || {};
  if (Array.isArray(t)) {
    return t.reduce((a, c, f) => (a[s.up(s.keys[f])] = n(t[f]), a), {});
  }
  if (typeof t == "object") {
    return Object.keys(t).reduce((a, c) => {
        f && (a[f] = n(t[c], c));
        const f = s.up(c);
        a[f] = n(t[c], c);
      } else {
        const f = c;
        a[f] = t[f];
      }
      return a;
    }, {});
  }
  return n(t);
}
  var n;
  return ((n = e.keys) == null ? void 0 : n.reduce((r, o) => {
    const s = e.up(o);
    return r[s] = {}, r;
  }, {})) || {};
}
  return e.reduce((n, r) => {
    const o = n[r];
    return (!o || Object.keys(o).length === 0) && delete n[r], n;
  }, t);
}
  if (typeof e != "string")
  return e.charAt(0).toUpperCase() + e.slice(1);
}
  if (!t || typeof t != "string")
    return null;
  if (e && e.vars && n) {
    const r = `vars.${t}`.split(".").reduce((o, s) => o && o[s] ? o[s] : null, e);
    if (r != null)
      return r;
  }
  return t.split(".").reduce((r, o) => r && r[o] != null ? r[o] : null, e);
}
  let o;
}
  const {
    prop: t,
    cssProperty: n = e.prop,
    themeKey: r,
    transform: o
  } = e, s = (a) => {
    if (a[t] == null)
      return null;
        [n]: w
      };
    });
  };
  return s.propTypes = process.env.NODE_ENV !== "production" ? {
  } : {}, s.filterProps = [t], s;
}
  const t = {};
  return (n) => (t[n] === void 0 && (t[n] = e(n)), t[n]);
}
  m: "margin",
  p: "padding"
  t: "Top",
  r: "Right",
  b: "Bottom",
  l: "Left",
  x: ["Left", "Right"],
  y: ["Top", "Bottom"]
  marginX: "mx",
  marginY: "my",
  paddingX: "px",
  paddingY: "py"
  if (e.length > 2)
    else
      return [e];
  return Array.isArray(o) ? o.map((s) => r + s) : [r + o];
  return typeof o == "number" || typeof o == "string" ? (s) => typeof s == "string" ? s : (process.env.NODE_ENV !== "production" && typeof s != "number" && console.error(`MUI: Expected ${r} argument to be a number or a string, got ${s}.`), typeof o == "string" ? o.startsWith("var(") && s === 0 ? 0 : o.startsWith("var(") && s === 1 ? o : `calc(${s} * ${o})` : o * s) : Array.isArray(o) ? (s) => {
    if (typeof s == "string")
      return s;
    const a = Math.abs(s);
    process.env.NODE_ENV !== "production" && (Number.isInteger(a) ? a > o.length - 1 && console.error([`MUI: The value provided (${a}) overflows.`, `The supported values are: ${JSON.stringify(o)}.`, `${a} > ${o.length - 1}, you need to add the missing values.`].join(`
`)) : console.error([`MUI: The \`theme.${t}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${t}\` as a number.`].join(`
`)));
    const c = o[a];
    return s >= 0 ? c : typeof c == "number" ? -c : typeof c == "string" && c.startsWith("var(") ? `calc(-1 * ${c})` : `-${c}`;
  } : typeof o == "function" ? o : (process.env.NODE_ENV !== "production" && console.error([`MUI: The \`theme.${t}\` value (${o}) is invalid.`, "It should be a number, an array or a function."].join(`
`)), () => {
  });
}
}
  return typeof t == "string" || t == null ? t : e(t);
}
}
  if (!t.includes(n))
    return null;
}
}
}
}
  spacing: e
})) {
  if (e.mui)
    return e;
  const n = (...r) => (process.env.NODE_ENV !== "production" && (r.length <= 4 || console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${r.length}`)), (r.length === 0 ? [1] : r).map((s) => {
    const a = t(s);
    return typeof a == "number" ? `${a}px` : a;
  }).join(" "));
  return n.mui = !0, n;
}
  const t = e.reduce((r, o) => (o.filterProps.forEach((s) => {
    r[s] = o;
  return n.propTypes = process.env.NODE_ENV !== "production" ? e.reduce((r, o) => Object.assign(r, o.propTypes), {}) : {}, n.filterProps = e.reduce((r, o) => r.concat(o.filterProps), []), n;
}
  return typeof e != "number" ? e : `${e}px solid`;
}
    prop: e,
    themeKey: "borders",
    transform: t
  });
}
  if (e.borderRadius !== void 0 && e.borderRadius !== null) {
    });
  }
  return null;
};
} : {};
  if (e.gap !== void 0 && e.gap !== null) {
    });
  }
  return null;
};
} : {};
  if (e.columnGap !== void 0 && e.columnGap !== null) {
    });
  }
  return null;
};
} : {};
  if (e.rowGap !== void 0 && e.rowGap !== null) {
    });
  }
  return null;
};
} : {};
  prop: "gridColumn"
  prop: "gridRow"
  prop: "gridAutoFlow"
  prop: "gridAutoColumns"
  prop: "gridAutoRows"
  prop: "gridTemplateColumns"
  prop: "gridTemplateRows"
  prop: "gridTemplateAreas"
  prop: "gridArea"
});
  return t === "grey" ? t : e;
}
  prop: "color",
  themeKey: "palette",
  prop: "bgcolor",
  cssProperty: "backgroundColor",
  themeKey: "palette",
  prop: "backgroundColor",
  themeKey: "palette",
});
  return e <= 1 && e !== 0 ? `${e * 100}%` : e;
}
  prop: "width",
  if (e.maxWidth !== void 0 && e.maxWidth !== null) {
    const t = (n) => {
      var o, s, a, c, f;
      return r ? ((f = (c = e.theme) == null ? void 0 : c.breakpoints) == null ? void 0 : f.unit) !== "px" ? {
        maxWidth: `${r}${e.theme.breakpoints.unit}`
      } : {
        maxWidth: r
      } : {
      };
    };
  }
  return null;
};
  prop: "minWidth",
  prop: "height",
  prop: "maxHeight",
  prop: "minHeight",
});
  prop: "size",
  cssProperty: "width",
});
  prop: "size",
  cssProperty: "height",
});
  prop: "boxSizing"
});
  // borders
  border: {
    themeKey: "borders",
  },
  borderTop: {
    themeKey: "borders",
  },
  borderRight: {
    themeKey: "borders",
  },
  borderBottom: {
    themeKey: "borders",
  },
  borderLeft: {
    themeKey: "borders",
  },
  borderColor: {
    themeKey: "palette"
  },
  borderTopColor: {
    themeKey: "palette"
  },
  borderRightColor: {
    themeKey: "palette"
  },
  borderBottomColor: {
    themeKey: "palette"
  },
  borderLeftColor: {
    themeKey: "palette"
  },
  outline: {
    themeKey: "borders",
  },
  outlineColor: {
    themeKey: "palette"
  },
  borderRadius: {
    themeKey: "shape.borderRadius",
  },
  // palette
  color: {
    themeKey: "palette",
  },
  bgcolor: {
    themeKey: "palette",
    cssProperty: "backgroundColor",
  },
  backgroundColor: {
    themeKey: "palette",
  },
  // spacing
  p: {
  },
  pt: {
  },
  pr: {
  },
  pb: {
  },
  pl: {
  },
  px: {
  },
  py: {
  },
  padding: {
  },
  paddingTop: {
  },
  paddingRight: {
  },
  paddingBottom: {
  },
  paddingLeft: {
  },
  paddingX: {
  },
  paddingY: {
  },
  paddingInline: {
  },
  paddingInlineStart: {
  },
  paddingInlineEnd: {
  },
  paddingBlock: {
  },
  paddingBlockStart: {
  },
  paddingBlockEnd: {
  },
  m: {
  },
  mt: {
  },
  mr: {
  },
  mb: {
  },
  ml: {
  },
  mx: {
  },
  my: {
  },
  margin: {
  },
  marginTop: {
  },
  marginRight: {
  },
  marginBottom: {
  },
  marginLeft: {
  },
  marginX: {
  },
  marginY: {
  },
  marginInline: {
  },
  marginInlineStart: {
  },
  marginInlineEnd: {
  },
  marginBlock: {
  },
  marginBlockStart: {
  },
  marginBlockEnd: {
  },
  // display
  displayPrint: {
    cssProperty: !1,
    transform: (e) => ({
      "@media print": {
        display: e
      }
    })
  },
  display: {},
  overflow: {},
  textOverflow: {},
  visibility: {},
  whiteSpace: {},
  // flexbox
  flexBasis: {},
  flexDirection: {},
  flexWrap: {},
  justifyContent: {},
  alignItems: {},
  alignContent: {},
  order: {},
  flex: {},
  flexGrow: {},
  flexShrink: {},
  alignSelf: {},
  justifyItems: {},
  justifySelf: {},
  // grid
  gap: {
  },
  rowGap: {
  },
  columnGap: {
  },
  gridColumn: {},
  gridRow: {},
  gridAutoFlow: {},
  gridAutoColumns: {},
  gridAutoRows: {},
  gridTemplateColumns: {},
  gridTemplateRows: {},
  gridTemplateAreas: {},
  gridArea: {},
  // positions
  position: {},
  zIndex: {
    themeKey: "zIndex"
  },
  top: {},
  right: {},
  bottom: {},
  left: {},
  // shadows
  boxShadow: {
    themeKey: "shadows"
  },
  // sizing
  width: {
  },
  maxWidth: {
  },
  minWidth: {
  },
  height: {
  },
  maxHeight: {
  },
  minHeight: {
  },
  boxSizing: {},
  // typography
  font: {
    themeKey: "font"
  },
  fontFamily: {
    themeKey: "typography"
  },
  fontSize: {
    themeKey: "typography"
  },
  fontStyle: {
    themeKey: "typography"
  },
  fontWeight: {
    themeKey: "typography"
  },
  letterSpacing: {},
  textTransform: {},
  lineHeight: {},
  textAlign: {},
  typography: {
    cssProperty: !1,
    themeKey: "typography"
  }
};
  const t = e.reduce((r, o) => r.concat(Object.keys(o)), []), n = new Set(t);
  return e.every((r) => n.size === Object.keys(r).length);
}
  return typeof e == "function" ? e(t) : e;
}
  function e(n, r, o, s) {
    const a = {
      [n]: r,
      theme: o
    }, c = s[n];
    if (!c)
      return {
        [n]: r
      };
    const {
      cssProperty: f = n,
      transform: g,
    } = c;
    if (r == null)
      return null;
      return {
        [n]: r
      };
        [f]: E
      };
    });
  }
  function t(n) {
    const {
      sx: r,
      theme: o = {},
      nested: s
    } = n || {};
    if (!r)
      return null;
    function c(f) {
      if (typeof f == "function")
      else if (typeof f != "object")
        return f;
        return null;
      let w = g;
        if (T != null)
          if (typeof T == "object")
            if (a[C])
            else {
                theme: o
              }, T, (O) => ({
                [C]: O
              }));
                sx: T,
                theme: o,
                nested: !0
            }
          else
      }), !s && o.modularCssLayers ? {
    }
    return Array.isArray(r) ? r.map(c) : c(r);
  }
  return t;
}
  var r;
  const n = this;
  if (n.vars) {
    if (!((r = n.colorSchemes) != null && r[e]) || typeof n.getColorSchemeSelector != "function")
      return {};
    let o = n.getColorSchemeSelector(e);
    return o === "&" ? t : ((o.includes("data-") || o.includes(".")) && (o = `*:where(${o.replace(/\s*&$/, "")}) &`), {
      [o]: t
    });
  }
  return n.palette.mode === e ? t : {};
}
  const {
    breakpoints: n = {},
    palette: r = {},
    spacing: o,
    shape: s = {},
    ...a
    breakpoints: c,
    direction: "ltr",
    components: {},
    // Inject component definitions.
    palette: {
      mode: "light",
      ...r
    },
    spacing: f,
    shape: {
      ...s
    }
  }, a);
    ...a == null ? void 0 : a.unstable_sxConfig
      theme: this
    });
}
  return e.displayName || e.name || t;
}
  return e.displayName || (r !== "" ? `${n}(${r})` : n);
}
  if (e != null) {
    if (typeof e == "string")
      return e;
    if (typeof e == "function")
    if (typeof e == "object")
      switch (e.$$typeof) {
        default:
          return;
      }
  }
}
  const {
    variants: t,
    ...n
  } = e, r = {
    variants: t,
    isProcessed: !0
  };
  return r.style === n || t && t.forEach((o) => {
  }), r;
}
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
  return t && e && typeof e == "object" && e.styles && !e.styles.startsWith("@layer") && (e.styles = `@layer ${t}{${String(e.styles)}}`), e;
}
  return e ? (t, n) => n[e] : null;
}
}
  const r = typeof t == "function" ? t(e) : t;
  if (Array.isArray(r))
  if (Array.isArray(r == null ? void 0 : r.variants)) {
    let o;
    if (r.isProcessed)
    else {
      const {
        variants: s,
        ...a
      } = r;
    }
  }
}
  var s;
  let o;
  e: for (let a = 0; a < t.length; a += 1) {
    const c = t[a];
    if (typeof c.props == "function") {
      if (o ?? (o = {
        ...e,
        ...e.ownerState,
        ownerState: e.ownerState
      }), !c.props(o))
        continue;
    } else
      for (const f in c.props)
        if (e[f] !== c.props[f] && ((s = e.ownerState) == null ? void 0 : s[f]) !== c.props[f])
          continue e;
    typeof c.style == "function" ? (o ?? (o = {
      ...e,
      ...e.ownerState,
      ownerState: e.ownerState
  }
  return n;
}
  const {
    themeId: t,
  } = e;
  function s(c) {
  }
  return (c, f = {}) => {
    const {
      slot: g,
      skipSx: w,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      ...T
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      g && g !== "Root" && g !== "root" || !1
      shouldForwardProp: I,
      ...T
        };
        };
      }
        var X, te;
        if (!G)
          return null;
        for (const re in G)
        let G;
      }
    };
  };
}
}
  let n;
}
  for (const t in e)
    return !1;
  return !0;
}
  return typeof e == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  e.charCodeAt(0) > 96;
}
  return e && e.charAt(0).toLowerCase() + e.slice(1);
}
  const r = {
    ...t
  };
  for (const o in e)
    if (Object.prototype.hasOwnProperty.call(e, o)) {
      const s = o;
      if (s === "components" || s === "slots")
        r[s] = {
          ...e[s],
          ...r[s]
        };
      else if (s === "componentsProps" || s === "slotProps") {
        const a = e[s], c = t[s];
        if (!c)
          r[s] = a || {};
        else if (!a)
          r[s] = c;
        else {
          r[s] = {
            ...c
          };
          for (const f in a)
            if (Object.prototype.hasOwnProperty.call(a, f)) {
            }
        }
      } else s === "className" && n && t.className ? r.className = et(e == null ? void 0 : e.className, t == null ? void 0 : t.className) : s === "style" && n && t.style ? r.style = {
        ...e == null ? void 0 : e.style,
        ...t == null ? void 0 : t.style
      } : r[s] === void 0 && (r[s] = e[s]);
    }
  return r;
}
  const {
    theme: t,
    name: n,
    props: r
  } = e;
}
process.env.NODE_ENV !== "production" && (u.node, u.bool);
  if (t.length === 1 && t[0] === n) {
    let r = !1;
    try {
      const o = {};
      e(o) === o && (r = !0);
    } catch {
    }
    if (r) {
      let o;
      try {
        throw new Error();
      } catch (s) {
        ({ stack: o } = s);
      }
      console.warn(
        `The result function returned its own inputs without modification. e.g
\`createSelector([state => state.todos], todos => todos)\`
This could lead to inefficient memoization and unnecessary re-renders.
Ensure transformation logic is in the result function, and extraction logic is in the input selectors.`,
        { stack: o }
      );
    }
  }
  const { memoize: r, memoizeOptions: o } = t, { inputSelectorResults: s, inputSelectorResultsCopy: a } = e, c = r(() => ({}), ...o);
  if (!(c.apply(null, s) === c.apply(null, a))) {
    try {
      throw new Error();
    } catch (g) {
    }
    console.warn(
      `An input selector returned a different result when passed same arguments.
This means your output selector will likely run more frequently than intended.
Avoid returning a new reference inside your input selector, e.g.
\`createSelector([state => state.todos.map(todo => todo.id)], todoIds => todoIds.length)\``,
      {
        arguments: n,
        firstInputs: s,
        secondInputs: a,
      }
    );
  }
  inputStabilityCheck: "once",
  identityFunctionCheck: "once"
  if (typeof e != "function")
    throw new TypeError(t);
}
  if (typeof e != "object")
    throw new TypeError(t);
}
  if (!e.every((n) => typeof n == "function")) {
    const n = e.map(
      (r) => typeof r == "function" ? `function ${r.name || "unnamed"}()` : typeof r
    ).join(", ");
    throw new TypeError(`${t}[${n}]`);
  }
}
  const t = Array.isArray(e[0]) ? e[0] : e;
    t,
    "createSelector expects all input-selectors to be functions, but received the following types: "
  ), t;
}
  const n = [], { length: r } = e;
  for (let o = 0; o < r; o++)
    n.push(e[o].apply(null, t));
  return n;
}
  const { identityFunctionCheck: n, inputStabilityCheck: r } = {
    ...t
  };
  return {
    identityFunctionCheck: {
      shouldRun: n === "always" || n === "once" && e,
    },
    inputStabilityCheck: {
      shouldRun: r === "always" || r === "once" && e,
    }
  };
};
  let t;
  return {
    get(n) {
    },
    put(n, r) {
      t = { key: n, value: r };
    },
    getEntries() {
      return t ? [t] : [];
    },
    clear() {
      t = void 0;
    }
  };
}
  let n = [];
  function r(c) {
    if (f > -1) {
    }
  }
  function o(c, f) {
  }
  function s() {
    return n;
  }
  function a() {
    n = [];
  }
  return { get: r, put: o, getEntries: s, clear: a };
}
  return function(n, r) {
    if (n === null || r === null || n.length !== r.length)
      return !1;
    const { length: o } = n;
    for (let s = 0; s < o; s++)
      if (!e(n[s], r[s]))
        return !1;
    return !0;
  };
}
  const n = typeof t == "object" ? t : { equalityCheck: t }, {
    maxSize: o = 1,
    resultEqualityCheck: s
  let c = 0;
    let g = f.get(arguments);
      if (g = e.apply(null, arguments), c++, s) {
        const w = f.getEntries().find(
          (C) => s(C.value, g)
        );
        w && (g = w.value, c !== 0 && c--);
      }
      f.put(arguments, g);
    }
    return g;
  }
    c = 0;
}
  constructor(e) {
    this.value = e;
  }
  deref() {
    return this.value;
  }
  return {
    v: void 0,
    o: null,
    p: null
  };
}
  const { resultEqualityCheck: r } = t;
  let o, s = 0;
  function a() {
    let c = n;
    const { length: f } = arguments;
    for (let w = 0, C = f; w < C; w++) {
      const T = arguments[w];
      if (typeof T == "function" || typeof T == "object" && T !== null) {
        let E = c.o;
        E === null && (c.o = E = /* @__PURE__ */ new WeakMap());
        const O = E.get(T);
      } else {
        let E = c.p;
        E === null && (c.p = E = /* @__PURE__ */ new Map());
        const O = E.get(T);
      }
    }
    let g;
      g = c.v;
    else if (g = e.apply(null, arguments), s++, r) {
    }
  }
  return a.clearCache = () => {
  }, a.resultsCount = () => s, a.resetResultsCount = () => {
    s = 0;
  }, a;
}
  const n = typeof e == "function" ? {
    memoize: e,
    memoizeOptions: t
  } : e, r = (...o) => {
    );
    const g = {
      ...n,
      ...f
    }, {
      memoizeOptions: w = [],
      argsMemoizeOptions: T = [],
      devModeChecks: E = {}
        null,
        arguments
      );
    }, ...O);
      a++;
        I,
        arguments
      );
          c
            I,
            arguments
          );
            arguments
          );
        }
      }
      return c;
      memoizedResultFunc: M,
      dependencies: I,
      dependencyRecomputations: () => a,
      resetDependencyRecomputations: () => {
        a = 0;
      },
      lastResult: () => c,
      recomputations: () => s,
      resetRecomputations: () => {
        s = 0;
      },
      argsMemoize: C
    });
  };
  return Object.assign(r, {
    withTypes: () => r
  }), r;
}
      e,
      `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof e}`
    );
    const n = Object.keys(e), r = n.map(
      (s) => e[s]
    );
    return t(
      r,
      (...s) => s.reduce((a, c, f) => (a[n[f]] = c, a), {})
    );
  },
);
  if (process.env.NODE_ENV === "production")
    return;
  const n = Array.isArray(e) ? e.join(`
`) : e;
}
  if (e === t)
    return !0;
  if (!(e instanceof Object) || !(t instanceof Object))
    return !1;
  let n = 0, r = 0;
  for (const o in e)
      return !1;
  for (const o in t)
    r += 1;
  return n === r;
}
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
  var e = x;
  }
  var n = typeof Object.is == "function" ? Object.is : t, r = e.useState, o = e.useEffect, s = e.useLayoutEffect, a = e.useDebugValue;
    var C = w(), T = r({ inst: { value: C, getSnapshot: w } }), E = T[0].inst, O = T[1];
    return s(
      function() {
        E.value = C, E.getSnapshot = w, f(E) && O({ inst: E });
      },
    ), o(
      function() {
          f(E) && O({ inst: E });
        });
      },
    ), a(C), C;
  }
    try {
      var C = w();
    } catch {
      return !0;
    }
  }
    return w();
  }
}
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
    function e(C, T) {
      return C === T && (C !== 0 || 1 / C === 1 / T) || C !== C && T !== T;
    }
    function t(C, T) {
      g || o.startTransition === void 0 || (g = !0, console.error(
        "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
      ));
      var E = T();
        var O = T();
        s(E, O) || (console.error(
          "The result of getSnapshot should be cached to avoid an infinite loop"
      }
      O = a({
        inst: { value: E, getSnapshot: T }
      });
      return f(
        function() {
        },
        [C, E, T]
      ), c(
        function() {
          });
        },
        [C]
    }
    function n(C) {
      var T = C.getSnapshot;
      C = C.value;
      try {
        var E = T();
        return !s(C, E);
      } catch {
        return !0;
      }
    }
    function r(C, T) {
      return T();
    }
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
}
  return e.acceptsApiRef;
}
}
}
  let n = Object.is;
  state: null,
  equals: null,
  selector: null,
  args: void 0
    // We don't use an initialization function to avoid allocations
  );
  r.current.state = s, r.current.equals = n, r.current.selector = t;
  const c = x.useCallback(
    () => (r.current.subscription || (r.current.subscription = e.current.store.subscribe(() => {
    })), null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
  ), f = x.useCallback(() => () => {
    r.current.subscription && (r.current.subscription(), r.current.subscription = void 0);
    // We don't use an initialization function to avoid allocations
  );
  o.current.state = a, o.current.equals = r, o.current.selector = t;
  const f = o.current.args;
  }
    () => (o.current.subscription || (o.current.subscription = e.current.store.subscribe(() => {
    })), null),
    // eslint-disable-next-line react-hooks/exhaustive-deps
  ), g = x.useCallback(() => () => {
    o.current.subscription && (o.current.subscription(), o.current.subscription = void 0);
  memoizeOptions: {
    maxSize: 1,
    equalityCheck: Object.is
  }
  return "current" in e && "instanceId" in e.current;
}
  id: "default"
}, en = (e, t, n, r, o, s, ...a) => {
  if (a.length > 0)
    throw new Error("Unsupported number of selectors");
  let c;
  if (e && t && n && r && o && s)
    };
  else if (e && t && n && r && o)
      return o(C, T, E, O);
    };
  else if (e && t && n && r)
      return r(C, T, E);
    };
  else if (e && t && n)
      return n(C, T);
    };
  else if (e && t)
      return t(C);
    };
  else
    throw new Error("Missing arguments");
  return c.acceptsApiRef = !0, c;
  if (a.length > 0)
    throw new Error("Unsupported number of selectors");
  let c;
  if (e && t && n && r && o && s)
    };
  else if (e && t && n && r && o)
    };
  else if (e && t && n && r)
    };
  else if (e && t && n)
    };
  else if (e && t)
    };
  else
    throw new Error("Missing arguments");
  return c.acceptsApiRef = !0, c;
  const t = (n, r) => {
  };
  return t.acceptsApiRef = !0, t;
  const t = e.dimensions.hasScrollX ? e.dimensions.scrollbarSize : 0, n = e.dimensions.viewportOuterSize.height - e.dimensions.minimumSize.height > 0;
  return !(t === 0 && !n);
};
}
  // Root
  noRowsLabel: "No rows",
  noResultsOverlayLabel: "No results found.",
  // Density selector toolbar button text
  toolbarDensity: "Density",
  toolbarDensityLabel: "Density",
  toolbarDensityCompact: "Compact",
  toolbarDensityStandard: "Standard",
  toolbarDensityComfortable: "Comfortable",
  // Columns selector toolbar button text
  toolbarColumns: "Columns",
  toolbarColumnsLabel: "Select columns",
  // Filters toolbar button text
  toolbarFilters: "Filters",
  toolbarFiltersLabel: "Show filters",
  toolbarFiltersTooltipHide: "Hide filters",
  toolbarFiltersTooltipShow: "Show filters",
  toolbarFiltersTooltipActive: (e) => e !== 1 ? `${e} active filters` : `${e} active filter`,
  // Quick filter toolbar field
  toolbarQuickFilterPlaceholder: "Search…",
  toolbarQuickFilterLabel: "Search",
  toolbarQuickFilterDeleteIconLabel: "Clear",
  // Export selector toolbar button text
  toolbarExport: "Export",
  toolbarExportLabel: "Export",
  toolbarExportCSV: "Download as CSV",
  toolbarExportPrint: "Print",
  toolbarExportExcel: "Download as Excel",
  // Columns management text
  columnsManagementSearchTitle: "Search",
  columnsManagementNoColumns: "No columns",
  columnsManagementShowHideAllText: "Show/Hide All",
  columnsManagementReset: "Reset",
  columnsManagementDeleteIconLabel: "Clear",
  // Filter panel text
  filterPanelAddFilter: "Add filter",
  filterPanelRemoveAll: "Remove all",
  filterPanelDeleteIconLabel: "Delete",
  filterPanelLogicOperator: "Logic operator",
  filterPanelOperator: "Operator",
  filterPanelOperatorAnd: "And",
  filterPanelOperatorOr: "Or",
  filterPanelColumns: "Columns",
  filterPanelInputLabel: "Value",
  filterPanelInputPlaceholder: "Filter value",
  // Filter operators text
  filterOperatorContains: "contains",
  filterOperatorDoesNotContain: "does not contain",
  filterOperatorEquals: "equals",
  filterOperatorDoesNotEqual: "does not equal",
  filterOperatorStartsWith: "starts with",
  filterOperatorEndsWith: "ends with",
  filterOperatorIs: "is",
  filterOperatorNot: "is not",
  filterOperatorAfter: "is after",
  filterOperatorOnOrAfter: "is on or after",
  filterOperatorBefore: "is before",
  filterOperatorOnOrBefore: "is on or before",
  filterOperatorIsEmpty: "is empty",
  filterOperatorIsNotEmpty: "is not empty",
  filterOperatorIsAnyOf: "is any of",
  "filterOperator=": "=",
  "filterOperator!=": "!=",
  "filterOperator>": ">",
  "filterOperator>=": ">=",
  "filterOperator<": "<",
  "filterOperator<=": "<=",
  // Header filter operators text
  headerFilterOperatorContains: "Contains",
  headerFilterOperatorDoesNotContain: "Does not contain",
  headerFilterOperatorEquals: "Equals",
  headerFilterOperatorDoesNotEqual: "Does not equal",
  headerFilterOperatorStartsWith: "Starts with",
  headerFilterOperatorEndsWith: "Ends with",
  headerFilterOperatorIs: "Is",
  headerFilterOperatorNot: "Is not",
  headerFilterOperatorAfter: "Is after",
  headerFilterOperatorOnOrAfter: "Is on or after",
  headerFilterOperatorBefore: "Is before",
  headerFilterOperatorOnOrBefore: "Is on or before",
  headerFilterOperatorIsEmpty: "Is empty",
  headerFilterOperatorIsNotEmpty: "Is not empty",
  headerFilterOperatorIsAnyOf: "Is any of",
  "headerFilterOperator=": "Equals",
  "headerFilterOperator!=": "Not equals",
  "headerFilterOperator>": "Greater than",
  "headerFilterOperator>=": "Greater than or equal to",
  "headerFilterOperator<": "Less than",
  "headerFilterOperator<=": "Less than or equal to",
  // Filter values text
  filterValueAny: "any",
  filterValueTrue: "true",
  filterValueFalse: "false",
  // Column menu text
  columnMenuLabel: "Menu",
  columnMenuAriaLabel: (e) => `${e} column menu`,
  columnMenuShowColumns: "Show columns",
  columnMenuManageColumns: "Manage columns",
  columnMenuFilter: "Filter",
  columnMenuHideColumn: "Hide column",
  columnMenuUnsort: "Unsort",
  columnMenuSortAsc: "Sort by ASC",
  columnMenuSortDesc: "Sort by DESC",
  // Column header text
  columnHeaderFiltersTooltipActive: (e) => e !== 1 ? `${e} active filters` : `${e} active filter`,
  columnHeaderFiltersLabel: "Show filters",
  columnHeaderSortIconLabel: "Sort",
  // Rows selected footer text
  footerRowSelected: (e) => e !== 1 ? `${e.toLocaleString()} rows selected` : `${e.toLocaleString()} row selected`,
  // Total row amount footer text
  footerTotalRows: "Total Rows:",
  // Total visible row amount footer text
  footerTotalVisibleRows: (e, t) => `${e.toLocaleString()} of ${t.toLocaleString()}`,
  // Checkbox selection text
  checkboxSelectionHeaderName: "Checkbox selection",
  checkboxSelectionSelectAllRows: "Select all rows",
  checkboxSelectionUnselectAllRows: "Unselect all rows",
  checkboxSelectionSelectRow: "Select row",
  checkboxSelectionUnselectRow: "Unselect row",
  // Boolean cell text
  booleanCellTrueLabel: "yes",
  booleanCellFalseLabel: "no",
  // Actions cell more text
  actionsCellMore: "more",
  // Column pinning text
  pinToLeft: "Pin to left",
  pinToRight: "Pin to right",
  unpin: "Unpin",
  // Tree Data
  treeDataGroupingHeaderName: "Group",
  treeDataExpand: "see children",
  treeDataCollapse: "hide children",
  // Grouping columns
  groupingColumnHeaderName: "Group",
  groupColumn: (e) => `Group by ${e}`,
  unGroupColumn: (e) => `Stop grouping by ${e}`,
  // Master/detail
  detailPanelToggle: "Detail panel toggle",
  expandDetailPanel: "Expand",
  collapseDetailPanel: "Collapse",
  // Used core components translation keys
  MuiTablePagination: {},
  // Row reordering text
  rowReorderingHeaderName: "Row reordering",
  // Aggregation
  aggregationMenuItemHeader: "Aggregation",
  aggregationFunctionLabelSum: "sum",
  aggregationFunctionLabelAvg: "avg",
  aggregationFunctionLabelMin: "min",
  aggregationFunctionLabelMax: "max",
  aggregationFunctionLabelSize: "size"
};
}
  }
  register(t, n, r) {
    this.timeouts || (this.timeouts = /* @__PURE__ */ new Map());
    const o = setTimeout(() => {
      typeof n == "function" && n(), this.timeouts.delete(r.cleanupToken);
    }, this.cleanupTimeout);
    this.timeouts.set(r.cleanupToken, o);
  }
  unregister(t) {
    const n = this.timeouts.get(t.cleanupToken);
    n && (this.timeouts.delete(t.cleanupToken), clearTimeout(n));
  }
  reset() {
    this.timeouts && (this.timeouts.forEach((t, n) => {
      this.unregister({
        cleanupToken: n
      });
    }), this.timeouts = void 0);
  }
}
  constructor() {
    this.registry = new FinalizationRegistry((t) => {
      typeof t == "function" && t();
    });
  }
  register(t, n, r) {
    this.registry.register(t, n, r);
  }
  unregister(t) {
    this.registry.unregister(t);
  }
  // eslint-disable-next-line class-methods-use-this
  reset() {
  }
}
  return e.DataGrid = "DataGrid", e.DataGridPro = "DataGridPro", e.DataGridPremium = "DataGridPremium", e;
}
  let t = 0;
  return function(r, o, s, a) {
    const g = x.useRef(null);
        var E;
      };
        cleanupToken: t
      }, e.registry.register(
        c,
        // The callback below will be called once this reference stops being retained
        () => {
          var w;
          (w = f.current) == null || w.call(f), f.current = null, g.current = null;
        },
        g.current
      );
    x.useEffect(() => {
          var E;
        };
      }
      return g.current && e.registry && (e.registry.unregister(g.current), g.current = null), () => {
      };
    }, [r, o, a]);
  };
}
  registry: null
  isFirst: !0
};
}
  standard: 1
  const {
    classes: t
  } = e;
  return mt({
    root: ["editInputCell"]
  name: "MuiDataGrid",
  slot: "EditInputCell",
  overridesResolver: (e, t) => t.editInputCell
})(({
  theme: e
}) => J({}, e.typography.body2, {
  padding: "1px 0",
  "& input": {
    padding: "0 16px",
    height: "100%"
  }
    id: r,
    value: o,
    field: s,
    colDef: a,
    hasFocus: c,
    debounceMs: f = 200,
    onValueChange: g
      id: r,
      field: s,
      debounceMs: f,
      unstable_skipValueParser: !0
    }, M);
  }, [w, f, s, r, g]), I = w.current.unstable_getEditCellMeta(r, s);
  return x.useEffect(() => {
    (I == null ? void 0 : I.changeReason) !== "debouncedSetEditCellValue" && E(o);
    c && C.current.focus();
    inputRef: C,
    className: O.root,
    ownerState: n,
    fullWidth: !0,
    type: a.type === "number" ? a.type : "text",
    value: T ?? "",
      fontSize: "small",
      color: "action"
    }) : void 0
    ref: t
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  changeReason: u.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  debounceMs: u.number,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  isProcessingProps: u.bool,
  isValidating: u.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: u.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  const t = Object.entries(e.treeDepths);
  return t.length === 0 ? 1 : (t.filter(([, n]) => n > 0).map(([n]) => Number(n)).sort((n, r) => r - n)[0] ?? 0) + 1;
  var n, r;
  const t = e == null ? void 0 : e.pinnedRows;
  return {
    bottom: ((n = t == null ? void 0 : t.bottom) == null ? void 0 : n.map((o) => ({
      id: o.id,
      model: o.model ?? {}
    }))) ?? [],
    top: ((r = t == null ? void 0 : t.top) == null ? void 0 : r.map((o) => ({
      id: o.id,
      model: o.model ?? {}
    }))) ?? []
  };
  var t, n;
  return (((t = e == null ? void 0 : e.top) == null ? void 0 : t.length) || 0) + (((n = e == null ? void 0 : e.bottom) == null ? void 0 : n.length) || 0);
  sorting: J({}, n.sorting, {
  })
  const n = t.current.getColumn(e.field);
  if (!n || e.sort === null)
    return null;
  let r;
    getSortCellParams: (s) => ({
      id: s,
      field: n.field,
      value: t.current.getCellValue(s, n.field),
      api: t.current
    }),
    comparator: r
  } : null;
  if (r !== 0)
    return r;
  const a = t.params[s], c = n.params[s];
  return r = o.comparator(a.value, c.value, a, c), r;
  return n.length === 0 ? null : (r) => r.map((o) => ({
    node: o,
    params: n.map((s) => s.getSortCellParams(o.id))
  const n = e.indexOf(t);
  return !t || n === -1 || n + 1 === e.length ? e[0] : e[n + 1];
  return n !== null ? n : Number(e) - Number(t);
  return n !== null ? n : e > t ? 1 : e < t ? -1 : 0;
  const {
    item: t,
    applyValue: n,
    type: r,
    apiRef: o,
    focusElementRef: s,
    tabIndex: a,
    disabled: c,
    clearButton: f,
    variant: g = "standard"
      });
    });
  return x.useEffect(() => {
    label: o.current.getLocaleText("filterPanelInputLabel"),
    placeholder: o.current.getLocaleText("filterPanelInputPlaceholder"),
    value: C ?? "",
    onChange: M,
    variant: g,
    type: r || "text",
    InputProps: J({}, E || f ? {
      endAdornment: E ? /* @__PURE__ */ $.jsx(I.slots.loadIcon, {
        fontSize: "small",
        color: "action"
      }) : f
    } : {}, {
      disabled: c
      inputProps: J({
        tabIndex: a
    }),
    InputLabelProps: {
      shrink: !0
    },
    inputRef: s
}
  if (!(e == null || e === ""))
    return String(e);
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  clearButton: u.node,
  focusElementRef: u.oneOfType([u.func, u.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: u.bool,
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired
});
  return typeof e == "number" && !Number.isNaN(e);
}
  return typeof e == "function";
}
  return typeof e == "object" && e !== null;
}
  try {
    const e = "__some_random_key_you_are_not_going_to_use__";
    return window.localStorage.setItem(e, e), window.localStorage.removeItem(e), !0;
  } catch {
    return !1;
  }
}
  return e.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
}
  return Array.from({
    length: t - e
  }).map((n, r) => e + r);
}
  if (e === t)
    return !0;
  if (e && t && typeof e == "object" && typeof t == "object") {
    if (e.constructor !== t.constructor)
      return !1;
    if (Array.isArray(e)) {
      const o = e.length;
      if (o !== t.length)
        return !1;
      for (let s = 0; s < o; s += 1)
          return !1;
      return !0;
    }
    if (e instanceof Map && t instanceof Map) {
      if (e.size !== t.size)
        return !1;
      const o = Array.from(e.entries());
      for (let s = 0; s < o.length; s += 1)
        if (!t.has(o[s][0]))
          return !1;
      for (let s = 0; s < o.length; s += 1) {
        const a = o[s];
          return !1;
      }
      return !0;
    }
    if (e instanceof Set && t instanceof Set) {
      if (e.size !== t.size)
        return !1;
      const o = Array.from(e.entries());
      for (let s = 0; s < o.length; s += 1)
        if (!t.has(o[s][0]))
          return !1;
      return !0;
    }
    if (ArrayBuffer.isView(e) && ArrayBuffer.isView(t)) {
      const o = e.length;
      if (o !== t.length)
        return !1;
      for (let s = 0; s < o; s += 1)
        if (e[s] !== t[s])
          return !1;
      return !0;
    }
    if (e.constructor === RegExp)
      return e.source === t.source && e.flags === t.flags;
    if (e.valueOf !== Object.prototype.valueOf)
      return e.valueOf() === t.valueOf();
    if (e.toString !== Object.prototype.toString)
      return e.toString() === t.toString();
    const n = Object.keys(e), r = n.length;
    if (r !== Object.keys(t).length)
      return !1;
    for (let o = 0; o < r; o += 1)
      if (!Object.prototype.hasOwnProperty.call(t, n[o]))
        return !1;
    for (let o = 0; o < r; o += 1) {
      const s = n[o];
        return !1;
    }
    return !0;
  }
  return e !== e && t !== t;
}
  return () => {
    let t = e += 1831565813;
    return t = Math.imul(t ^ t >>> 15, t | 1), t ^= t + Math.imul(t ^ t >>> 7, t | 61), ((t ^ t >>> 14) >>> 0) / 4294967296;
  };
}
  return (n, r) => n + (r - n) * t();
}
  return typeof structuredClone == "function" ? structuredClone(e) : JSON.parse(JSON.stringify(e));
}
  e && t(n);
  const {
    item: t,
    applyValue: n,
    type: r,
    apiRef: o,
    focusElementRef: s,
    color: a,
    error: c,
    helperText: f,
    variant: g = "standard"
    color: a,
    error: c,
    helperText: f,
    variant: g
  x.useEffect(() => {
    const I = t.value ?? [];
    T(I.map(String));
  }, [t.value]);
    T(M.map(String)), n(J({}, t, {
    }));
  }, [n, t, r]);
    multiple: !0,
    freeSolo: !0,
    options: [],
    filterOptions: (I, M) => {
      const {
      } = M;
    },
    id: E,
    value: C,
      }), {
      return /* @__PURE__ */ $.jsx(O.slots.baseChip, J({
        variant: "outlined",
        size: "small",
    }),
    renderInput: (I) => {
      var M;
      return /* @__PURE__ */ $.jsx(O.slots.baseTextField, J({}, I, {
        label: o.current.getLocaleText("filterPanelInputLabel"),
        placeholder: o.current.getLocaleText("filterPanelInputPlaceholder"),
        InputLabelProps: J({}, I.InputLabelProps, {
          shrink: !0
        }),
        inputRef: s,
        type: r || "text"
      }, w, (M = O.slotProps) == null ? void 0 : M.baseTextField));
    }
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  focusElementRef: u.oneOfType([u.func, u.object]),
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired,
  type: u.oneOf(["date", "datetime-local", "number", "text"])
});
  return e.Cell = "cell", e.Row = "row", e;
  return e.Edit = "edit", e.View = "view", e;
  return e.Edit = "edit", e.View = "view", e;
  return e.And = "and", e.Or = "or", e;
  return e.enterKeyDown = "enterKeyDown", e.cellDoubleClick = "cellDoubleClick", e.printableKeyDown = "printableKeyDown", e.deleteKeyDown = "deleteKeyDown", e.pasteKeyDown = "pasteKeyDown", e;
  return e.cellFocusOut = "cellFocusOut", e.escapeKeyDown = "escapeKeyDown", e.enterKeyDown = "enterKeyDown", e.tabKeyDown = "tabKeyDown", e.shiftTabKeyDown = "shiftTabKeyDown", e;
  return e.enterKeyDown = "enterKeyDown", e.cellDoubleClick = "cellDoubleClick", e.printableKeyDown = "printableKeyDown", e.deleteKeyDown = "deleteKeyDown", e;
  return e.rowFocusOut = "rowFocusOut", e.escapeKeyDown = "escapeKeyDown", e.enterKeyDown = "enterKeyDown", e.tabKeyDown = "tabKeyDown", e.shiftTabKeyDown = "shiftTabKeyDown", e;
  return e.field !== void 0;
}
  filteredRowsLookup: {},
  filteredChildrenCountLookup: {},
  filteredDescendantCountLookup: {}
  items: [],
  quickFilterValues: [],
});
  return {
    current: e.current.getPublicApi()
  };
}
  return e.LEFT = "left", e.RIGHT = "right", e;
}({});
  left: [],
  right: []
  return {
    left: o.left.map((a) => e.lookup[a]),
    right: o.right.map((a) => e.lookup[a])
  };
});
  var c, f;
  if (!Array.isArray(e.left) && !Array.isArray(e.right) || ((c = e.left) == null ? void 0 : c.length) === 0 && ((f = e.right) == null ? void 0 : f.length) === 0)
    // Filter out from the remaining columns those columns already pinned to the left
  ), a = r(e.right, s);
  return n ? {
    left: a,
    right: o
  } : {
    left: o,
    right: a
  };
}
  const t = [];
  let n = 0;
  for (let r = 0; r < e.length; r += 1)
    t.push(n), n += e[r].computedWidth;
  return t;
  try {
  } catch {
  }
}
  const n = J({}, e);
  if (n.id == null && (n.id = Math.round(Math.random() * 1e5)), n.operator == null) {
    n.operator = r && r.filterOperators[0].value;
  }
  return n;
  const r = e.items.length > 1;
  let o;
  const s = r && o.some((c) => c.id == null), a = o.some((c) => c.operator == null);
  }) : e.items !== o ? J({}, e, {
    items: o
  }) : e;
  var g;
  if (!e.field || !e.operator)
    return null;
  const n = t.current.getColumn(e.field);
  if (!n)
    return null;
  let r;
  if (n.valueParser) {
  } else
    r = e.value;
  const {
    ignoreDiacritics: o
  } = t.current.rootProps;
  const s = J({}, e, {
    value: r
  }), a = n.filterOperators;
  if (!(a != null && a.length))
    throw new Error(`MUI X: No filter operators found for column '${n.field}'.`);
  if (!c)
    throw new Error(`MUI X: No filter operator found for column '${n.field}' and operator value '${s.operator}'.`);
    item: s,
    }
  };
};
  const {
    items: r
  if (o.length === 0)
    return null;
    return (c, f) => {
      for (let g = 0; g < o.length; g += 1) {
      }
    };
  const s = new Function("appliers", "row", "shouldApplyFilter", `"use strict";
${o.map((c, f) => `const shouldApply${f} = !shouldApplyFilter || shouldApplyFilter(${JSON.stringify(c.item.field)});`).join(`
`)}

const result$$ = {
${o.map((c, f) => `  ${JSON.stringify(String(c.item.id))}: !shouldApply${f} ? false : appliers[${f}].fn(row),`).join(`
`)}
};

  var c;
  const n = ((c = e.quickFilterValues) == null ? void 0 : c.filter(Boolean)) ?? [];
  if (n.length === 0)
    return null;
    ignoreDiacritics: s
  return r.forEach((f) => {
    g && o.push({
        return {
        };
      })
    });
    e: for (let w = 0; w < n.length; w += 1) {
      const C = n[w];
      for (let T = 0; T < o.length; T += 1) {
        const {
          column: E,
          appliers: O
        } = o[T], {
        } = E;
          continue;
        const I = O[w];
        if (I.fn === null)
          continue;
          continue e;
        }
      }
    }
  };
  return function(a, c, f) {
    f.passingFilterItems = (r == null ? void 0 : r(a, c)) ?? null, f.passingQuickFilterValues = (o == null ? void 0 : o(a, c)) ?? null;
  };
  if (a.length > 0) {
      if (!s.every(f))
        return !1;
    } else if (!s.some(f))
      return !1;
  }
  if (c.length > 0 && n.quickFilterValues != null) {
      if (!n.quickFilterValues.every(f))
        return !1;
    } else if (!n.quickFilterValues.some(f))
      return !1;
  }
  return !0;
  if (!e)
    return null;
  return (n, r, o, s) => {
    let a = s.current.getRowFormattedValue(r, o);
  };
  if (!n.value)
    return null;
  return (s) => {
    if (s == null)
      return t;
    const a = o.test(String(s));
    return t ? !a : a;
  };
  if (!n.value)
    return null;
  const r = e ? n.value : n.value.trim(), o = new Intl.Collator(void 0, {
    sensitivity: "base",
    usage: "search"
  });
  return (s) => {
    if (s == null)
      return t;
    const a = o.compare(r, s.toString()) === 0;
    return t ? !a : a;
  };
  const n = t === "" || t == null;
  return e ? !n : n;
  value: "contains",
}, {
  value: "doesNotContain",
}, {
  value: "equals",
}, {
  value: "doesNotEqual",
}, {
  value: "startsWith",
  getApplyFilterFn: (t) => {
    if (!t.value)
      return null;
    return (o) => o != null ? r.test(o.toString()) : !1;
  },
}, {
  value: "endsWith",
  getApplyFilterFn: (t) => {
    if (!t.value)
      return null;
    return (o) => o != null ? r.test(o.toString()) : !1;
  },
}, {
  value: "isEmpty",
  requiresFilterValue: !1
}, {
  value: "isNotEmpty",
  requiresFilterValue: !1
}, {
  value: "isAnyOf",
  getApplyFilterFn: (t) => {
    if (!Array.isArray(t.value) || t.value.length === 0)
      return null;
    const n = e ? t.value : t.value.map((o) => o.trim()), r = new Intl.Collator(void 0, {
      sensitivity: "base",
      usage: "search"
    });
    return (o) => o != null ? n.some((s) => r.compare(s, o.toString() || "") === 0) : !1;
  },
  width: 100,
  minWidth: 50,
  maxWidth: 1 / 0,
  hideable: !0,
  sortable: !0,
  resizable: !0,
  filterable: !0,
  groupable: !0,
  pinnable: !0,
  // @ts-ignore
  aggregable: !0,
  editable: !1,
  type: "string",
  align: "left",
  const {
    classes: t
  } = e;
  return mt({
    root: ["menu"]
  name: "MuiDataGrid",
  slot: "Menu",
  overridesResolver: (e, t) => t.menu
})(({
  theme: e
}) => ({
  zIndex: e.zIndex.modal,
  [`& .${se.menuList}`]: {
    outline: 0
  }
  "bottom-start": "top left",
  "bottom-end": "top right"
};
  var E;
  const {
    open: t,
    target: n,
    onClose: r,
    children: o,
    position: s,
    className: a,
    onExited: c
  }, [t]), x.useEffect(() => {
    const O = t ? "menuOpen" : "menuClose";
      target: n
    });
  }, T = (O) => {
    O.target && (n === O.target || n != null && n.contains(O.target)) || r(O);
  };
    as: g.slots.basePopper,
    ownerState: g,
    open: t,
    anchorEl: n,
    transition: !0,
    placement: s
  }, f, (E = g.slotProps) == null ? void 0 : E.basePopper, {
    children: ({
      TransitionProps: O,
      onClickAway: T,
      mouseEvent: "onMouseDown",
        style: {
        },
        onExited: C(O == null ? void 0 : O.onExited),
          children: o
        })
      }))
    })
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: u.node,
  onClose: u.func.isRequired,
  onExited: u.func,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  position: u.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
});
  const {
    colDef: t,
    id: n,
    hasFocus: r,
    tabIndex: o,
    position: s = "bottom-end",
    focusElementRef: a
    throw new Error("MUI X: Missing the `getActions` property in the `GridColDef`.");
  x.useLayoutEffect(() => {
    r || Object.entries(O.current).forEach(([X, te]) => {
      te == null || te.stop({}, () => {
        delete O.current[X];
      });
    });
  }, [r]), x.useEffect(() => {
    if (f < 0 || !C.current || f >= C.current.children.length)
      return;
    C.current.children[f].focus({
      preventScroll: !0
    });
  }, [f]), x.useEffect(() => {
  }, [r]), x.useImperativeHandle(a, () => ({
    focus() {
      if (!E.current) {
      }
    }
  }, q = (X) => {
    O.current[X] = te;
  }, ee = (X) => {
      return;
      var ue;
        return Q;
    };
    let re = f;
  }, G = (X) => {
  };
  return /* @__PURE__ */ $.jsxs("div", J({
    role: "menu",
    ref: C,
    tabIndex: -1,
    className: se.actionsCell,
    onKeyDown: ee
  }, c, {
      key: te,
      tabIndex: f === te ? o : -1
      ref: T,
      id: M,
      "aria-label": w.current.getLocaleText("actionsCellMore"),
      "aria-haspopup": "menu",
      "aria-expanded": g,
      "aria-controls": g ? I : void 0,
      role: "menuitem",
      size: "small",
      onClick: q,
        fontSize: "small"
      })
      open: g,
      target: T.current,
      position: s,
        id: I,
        className: se.menuList,
        onKeyDown: G,
        "aria-labelledby": M,
        variant: "menu",
        autoFocusItem: !0,
          key: te,
        }))
      })
    })]
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  api: u.object,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: u.oneOfType([u.func, u.shape({
    current: u.shape({
      focus: u.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  position: u.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  sortable: !1,
  filterable: !1,
  // @ts-ignore
  aggregable: !1,
  width: 100,
  display: "flex",
  align: "center",
  headerAlign: "center",
  headerName: "",
  disableColumnMenu: !0,
  disableExport: !0,
  getApplyQuickFilterFn: void 0
  type: "group",
  depth: -1,
  groupingField: null,
  groupingKey: null,
  isAutoGenerated: !0,
  children: [],
  childrenFromPath: {},
  childrenExpanded: !0,
  parent: null
});
  if (e == null)
    throw new Error(["MUI X: The Data Grid component requires all rows to have a unique `id` property.", "Alternatively, you can use the `getRowId` prop to specify a custom id for each row.", n, JSON.stringify(t)].join(`
`));
}
  const r = t ? t(e) : e.id;
  rows: e,
  getRowId: t,
  loading: n,
  rowCount: r
}) => {
  const o = {
    type: "full",
    rows: []
  }, s = {}, a = {};
  for (let c = 0; c < e.length; c += 1) {
  }
  return {
    rowsBeforePartialUpdates: e,
    loadingPropBeforePartialUpdates: n,
    rowCountPropBeforePartialUpdates: r,
    updates: o,
    dataRowIdToIdLookup: a,
    dataRowIdToModelLookup: s
  };
  tree: e,
  rowCountProp: t = 0
}) => {
  return Math.max(t, n.children.length + (n.footerId == null ? 0 : 1));
  apiRef: e,
  rowCountProp: t = 0,
  loadingProp: n,
  previousTree: r,
  previousTreeDepths: o,
  previousGroupsToFetch: s
}) => {
  const a = e.current.caches.rows, {
    tree: c,
    treeDepths: f,
    groupingName: g,
  } = e.current.applyStrategyProcessor("rowTreeCreation", {
    previousTree: r,
    previousTreeDepths: o,
    updates: a.updates,
    dataRowIdToIdLookup: a.dataRowIdToIdLookup,
    dataRowIdToModelLookup: a.dataRowIdToModelLookup,
    previousGroupsToFetch: s
  }), w = e.current.unstable_applyPipeProcessors("hydrateRows", {
    tree: c,
    treeDepths: f,
    dataRowIdToIdLookup: a.dataRowIdToIdLookup,
    dataRowIdToModelLookup: a.dataRowIdToModelLookup
  });
  return e.current.caches.rows.updates = {
    type: "partial",
    actions: {
      insert: [],
      modify: [],
      remove: []
    },
    idToActionLookup: {}
  }, J({}, w, {
    totalRowCount: Math.max(t, w.dataRowIds.length),
      tree: w.tree,
      rowCountProp: t
    }),
    groupingName: g,
    loading: n,
  });
  const r = e[t];
  if (r.type !== "group")
    return [];
  const o = [];
  for (let s = 0; s < r.children.length; s += 1) {
    const a = r.children[s];
    for (let f = 0; f < c.length; f += 1)
      o.push(c[f]);
  }
  return !n && r.footerId != null && o.push(r.footerId), o;
  previousCache: e,
  getRowId: t,
  updates: n,
  groupKeys: r
}) => {
  if (e.updates.type === "full")
    throw new Error("MUI X: Unable to prepare a partial update if a full update is not applied yet.");
  const o = /* @__PURE__ */ new Map();
  n.forEach((g) => {
  });
  const s = {
    type: "partial",
    actions: {
      insert: [...e.updates.actions.insert ?? []],
      modify: [...e.updates.actions.modify ?? []],
      remove: [...e.updates.actions.remove ?? []]
    },
    idToActionLookup: J({}, e.updates.idToActionLookup),
    groupKeys: r
  }, a = J({}, e.dataRowIdToModelLookup), c = J({}, e.dataRowIdToIdLookup), f = {
    insert: {},
    modify: {},
    remove: {}
  };
    if (g._action === "delete") {
        return;
      return;
    }
    if (C) {
      return;
    }
  });
  }
  return {
    dataRowIdToModelLookup: a,
    dataRowIdToIdLookup: c,
    updates: s,
    rowsBeforePartialUpdates: e.rowsBeforePartialUpdates,
    loadingPropBeforePartialUpdates: e.loadingPropBeforePartialUpdates,
    rowCountPropBeforePartialUpdates: e.rowCountPropBeforePartialUpdates
  };
  const r = [];
  return t.forEach((o) => {
    if ((a == null ? void 0 : a.type) === "pinnedRow") {
      const c = e.current.caches.pinnedRows, f = c.idLookup[s];
      f && (c.idLookup[s] = J({}, f, o));
    } else
      r.push(o);
  }), r;
}
  return e[e.NONE = 0] = "NONE", e[e.LEFT = 1] = "LEFT", e[e.RIGHT = 2] = "RIGHT", e[e.VIRTUAL = 3] = "VIRTUAL", e;
}({});
  const {
    classes: t
  } = e;
  return mt({
    root: ["booleanCell"]
};
  const {
    value: t,
    rowNode: n
    classes: s.classes
    // @ts-expect-error - Access tree data prop
  ), g = x.useMemo(() => t ? s.slots.booleanCellTrueIcon : s.slots.booleanCellFalseIcon, [s.slots.booleanCellFalseIcon, s.slots.booleanCellTrueIcon, t]);
    fontSize: "small",
    className: c.root,
    titleAccess: o.current.getLocaleText(t ? "booleanCellTrueLabel" : "booleanCellFalseLabel"),
    "data-value": !!t
  }, r));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: u.oneOfType([u.func, u.shape({
    current: u.shape({
      focus: u.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  hideDescendantCount: u.bool,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["editBooleanCell"]
};
  const {
    id: t,
    value: n,
    field: r,
    className: o,
    hasFocus: s,
    onValueChange: a
    classes: C.classes
    const M = I.target.checked;
    a && await a(I, M), w(M), await f.current.setEditCellValue({
      id: t,
      field: r,
      value: M
    }, I);
  }, [f, r, t, a]);
  return x.useEffect(() => {
    w(n);
  }, [s]), /* @__PURE__ */ $.jsx("label", J({
    htmlFor: g,
    className: et(E.root, o)
  }, c, {
    children: /* @__PURE__ */ $.jsx(C.slots.baseCheckbox, J({
      id: g,
      onChange: O,
      size: "small"
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  changeReason: u.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  isProcessingProps: u.bool,
  isValidating: u.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {boolean} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: u.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  if (String(e).toLowerCase() === "true")
    return !0;
  if (String(e).toLowerCase() === "false")
    return !1;
  display: "flex",
  alignItems: "center",
  width: "100%",
  "& button": {
    margin: "auto 0px 5px 5px"
  }
});
  const {
    item: t,
    applyValue: n,
    apiRef: r,
    focusElementRef: o,
    clearButton: s,
    tabIndex: a,
    label: c,
    variant: f = "standard"
    }));
  }, [n, t]);
  x.useEffect(() => {
  }, [t.value]);
  const M = c ?? r.current.getLocaleText("filterPanelInputLabel");
    children: [/* @__PURE__ */ $.jsxs(w.slots.baseFormControl, {
      fullWidth: !0,
        id: C,
        shrink: !0,
        variant: f,
        children: M
      })), /* @__PURE__ */ $.jsxs(w.slots.baseSelect, J({
        labelId: C,
        id: T,
        label: M,
        value: g === void 0 ? "" : String(g),
        onChange: I,
        variant: f,
        notched: f === "outlined" ? !0 : void 0,
        native: O,
        displayEmpty: !0,
        inputProps: {
          ref: o,
          tabIndex: a
        }
          native: O,
          value: "",
          children: r.current.getLocaleText("filterValueAny")
          native: O,
          value: "true",
          children: r.current.getLocaleText("filterValueTrue")
          native: O,
          value: "false",
          children: r.current.getLocaleText("filterValueFalse")
        }))]
      }))]
    }), s]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  clearButton: u.node,
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: u.bool,
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired
});
  value: "is",
  getApplyFilterFn: (e) => {
    return t === void 0 ? null : (n) => !!n === t;
  },
  switch (e.toLowerCase().trim()) {
    case "true":
    case "yes":
    case "1":
      return !0;
    case "false":
    case "no":
    case "0":
    case "null":
    case "undefined":
      return !1;
    default:
      return;
  }
  type: "boolean",
  display: "flex",
  align: "center",
  headerAlign: "center",
  getApplyQuickFilterFn: void 0,
  // @ts-ignore
  aggregable: !1,
  // @ts-ignore
  const s = t[o];
  if (s)
    r.push({
      id: o,
      model: s
    });
  else {
    const a = n[o];
      id: o,
      model: {
      }
    });
  }
  return r;
  sortDirection: r.sort,
  sortIndex: e.length > 1 ? o + 1 : void 0
}, n), {}));
  const n = {};
  let r = 0;
  return e.reduce((o, s) => {
    const a = t[s];
    return n[a.depth] || (n[a.depth] = 0), a.depth > r && (n[a.depth] = 0), r = a.depth, n[a.depth] += 1, o[s] = n[a.depth], o;
  }, {});
});
  var o;
  return ((o = t[r.id]) == null ? void 0 : o.depth) === 0;
  var n;
  return (n = e.items) == null ? void 0 : n.filter((r) => {
    var a, c;
    if (!r.field)
      return !1;
    const o = t[r.field];
    if (!(o != null && o.filterOperators) || ((a = o == null ? void 0 : o.filterOperators) == null ? void 0 : a.length) === 0)
      return !1;
    const s = o.filterOperators.find((f) => f.value === r.operator);
    return s ? !s.InputComponent || r.value != null && ((c = r.value) == null ? void 0 : c.toString()) !== "" : !1;
  });
  var f;
  if (!s || s.type !== "group")
    return [];
    o[g] !== !1 && e.current.isRowSelectable(g) && a.push(g);
  }
  return a;
}
    var g;
    const a = n[e];
    if (!a || a.type !== "group")
      return {
        isIndeterminate: !1,
        isChecked: s[e] === e
      };
    if (s[e] === e)
      return {
        isIndeterminate: !1,
        isChecked: !0
      };
    let c = 0, f = 0;
      o[w] !== !1 && (c += 1, s[w] !== void 0 && (f += 1));
    }
    return {
      isIndeterminate: f > 0 && (f < c || s[e] === void 0),
      isChecked: t ? f > 0 : s[e] === e
    };
  });
}
}
  const n = [];
  let r = t;
    const o = e[r];
    if (!o)
      return n;
    n.push(r), r = o.parent;
  }
  return n;
  const r = e[n];
  if (!r)
    return [];
  const o = r.parent;
  return o == null ? [] : e[o].children.filter((a) => a !== n && t[a] !== !1);
  if (!(!r && !o || c[n] === !1)) {
    if (r) {
      });
    }
    if (o) {
          return !1;
        }
      };
      g(n);
    }
  }
    a[f] === f && s(f);
  }), r)) {
    const c = t[n];
    });
  }
  const {
    classes: t
  } = e;
  return mt({
    root: ["checkboxInput"]
  const {
    field: r,
    id: o,
    rowNode: s,
    hasFocus: a,
    tabIndex: c
    classes: g.classes
    const q = {
      id: o
    };
  };
  x.useLayoutEffect(() => {
    if (c === 0) {
    }
    if (a) {
      q == null || q.focus({
        preventScroll: !0
      });
    } else T.current && T.current.stop({});
  }, [a]);
  if (s.type === "footer" || s.type === "pinnedRow")
    return null;
  return /* @__PURE__ */ $.jsx(g.slots.baseCheckbox, J({
    tabIndex: c,
    onChange: O,
    className: w.root,
    inputProps: {
      name: "select_row"
    },
    disabled: !I,
    touchRippleRef: T
    /* FIXME: typing error */
    ref: E
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the element that should receive focus.
   * @ignore - do not document.
   */
  focusElementRef: u.oneOfType([u.func, u.shape({
    current: u.shape({
      focus: u.func.isRequired
    })
  })]),
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  const r = x.useRef(!0);
    r.current = !1, e.current.register(n, t);
  }, [e, n, t]), r.current && e.current.register(n, t);
}
  const n = x.useRef(null);
  if (n.current)
    return n.current;
  const r = e.current.getLogger(t);
  return n.current = r, r;
}
    const a = typeof t == "function" ? t() : t.current;
    if (!(!a || !n || !r))
      return s.debug(`Binding native ${n} event`), a.addEventListener(n, r, o), () => {
        s.debug(`Clearing native ${n} event`), a.removeEventListener(n, r, o);
      };
  });
  const t = x.useRef(!0);
  t.current && (t.current = !1, e());
  const n = x.useRef(!1);
  page: 0,
  pageSize: e ? 0 : 100
    throw new Error(["MUI X: `pageSize` cannot exceed 100 in the MIT version of the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join(`
`));
  var T;
  if (!e)
    return null;
  if (c === -1 || f === -1)
    return null;
  if (r < 2)
    return {
      firstRowIndex: c,
      lastRowIndex: f
    };
  for (; w < o.length && C <= g; ) {
    const E = o[w], O = (T = n[E.id]) == null ? void 0 : T.depth;
    O === void 0 ? w += 1 : ((C < g || O > 0) && (w += 1), O === 0 && (C += 1));
  }
  return {
    lastRowIndex: w - 1
  };
  rows: n,
  range: t,
  rowToIndexMap: n.reduce((o, s, a) => (o.set(s.model, a), o), /* @__PURE__ */ new Map())
} : {
  rows: r,
  range: r.length === 0 ? null : {
    firstRowIndex: 0,
    lastRowIndex: r.length - 1
  },
  rowToIndexMap: r.reduce((o, s, a) => (o.set(s.model, a), o), /* @__PURE__ */ new Map())
  const {
    classes: t
  } = e;
  return mt({
    root: ["checkboxInput"]
    classes: a.classes
    };
  x.useLayoutEffect(() => {
  }, [M, s, t.field]);
    });
  }, []);
  return /* @__PURE__ */ $.jsx(a.slots.baseCheckbox, J({
    indeterminate: O,
    onChange: I,
    className: f.root,
    inputProps: {
      name: "select_all_rows"
    },
    tabIndex: M,
    ref: n
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The column of the current header component.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the column that triggered the event
   */
  field: u.string.isRequired
});
  type: "custom",
  width: 50,
  resizable: !1,
  sortable: !1,
  filterable: !1,
  // @ts-ignore
  aggregable: !1,
  disableColumnMenu: !0,
  disableReorder: !0,
  disableExport: !0,
  getApplyQuickFilterFn: void 0,
  display: "flex",
  valueGetter: (e, t, n, r) => {
    return o[s] !== void 0;
  },
  if (e == null)
    return "";
  const n = new Date(e);
  return Number.isNaN(n.getTime()) ? "" : t === "date" ? n.toISOString().substring(0, 10) : t === "datetime-local" ? (n.setMinutes(n.getMinutes() - n.getTimezoneOffset()), n.toISOString().substring(0, 19)) : n.toISOString().substring(0, 10);
}
  var M;
  const {
    item: t,
    applyValue: n,
    type: r,
    apiRef: o,
    focusElementRef: s,
    InputProps: a,
    clearButton: c,
    tabIndex: f,
      n(J({}, t, {
      })), E(!1);
    });
  return x.useEffect(() => {
    fullWidth: !0,
    id: O,
    label: o.current.getLocaleText("filterPanelInputLabel"),
    placeholder: o.current.getLocaleText("filterPanelInputPlaceholder"),
    value: w,
    onChange: I,
    variant: "standard",
    type: r || "text",
    InputLabelProps: {
      shrink: !0
    },
    inputRef: s,
    InputProps: J({}, T || c ? {
        fontSize: "small",
        color: "action"
      }) : c
    } : {}, {
    }, a, {
      inputProps: J({
        max: r === "datetime-local" ? "9999-12-31T23:59" : "9999-12-31",
        tabIndex: f
      }, a == null ? void 0 : a.inputProps)
    })
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  clearButton: u.node,
  focusElementRef: u.oneOfType([u.func, u.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: u.bool,
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired
});
  if (!e.value)
    return null;
  const o = new Date(e.value);
  n ? o.setSeconds(0, 0) : (o.setMinutes(o.getMinutes() + o.getTimezoneOffset()), o.setHours(0, 0, 0, 0));
  const s = o.getTime();
  return (a) => {
    if (!a)
      return !1;
    if (r)
      return t(a.getTime(), s);
    const c = new Date(a);
    return n ? c.setSeconds(0, 0) : c.setHours(0, 0, 0, 0), t(c.getTime(), s);
  };
}
  value: "is",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "not",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "after",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "onOrAfter",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "before",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "onOrBefore",
  InputComponentProps: {
    type: e ? "datetime-local" : "date"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => (t) => t == null,
  requiresFilterValue: !1
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => (t) => t != null,
  requiresFilterValue: !1
  fontSize: "inherit"
  const {
    classes: t
  } = e;
  return mt({
    root: ["editInputCell"]
};
  const {
    id: t,
    value: n,
    field: r,
    colDef: o,
    hasFocus: s,
    inputProps: a,
    onValueChange: c
    };
      return null;
    }), g.current.setEditCellValue({
      id: t,
      field: r,
  }, [g, r, t, c, I]);
  return x.useEffect(() => {
    });
    fullWidth: !0,
    inputProps: J({
    }, a),
    value: C.formatted,
    onChange: M
  }, f));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  changeReason: u.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  isProcessingProps: u.bool,
  isValidating: u.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {Date | null} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: u.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  value: e,
  columnType: t,
  rowId: n,
  field: r
}) {
  if (!(e instanceof Date))
    throw new Error([`MUI X: \`${t}\` column type only accepts \`Date\` objects as values.`, "Use `valueGetter` to transform the value into a `Date` object.", `Row ID: ${n}, field: "${r}".`].join(`
`));
}
  if (!e)
    return "";
    value: e,
    columnType: "date",
    rowId: o,
    field: n.field
  }), e.toLocaleDateString();
  if (!e)
    return "";
    value: e,
    columnType: "dateTime",
    rowId: o,
    field: n.field
  }), e.toLocaleString();
  type: "date",
  // @ts-ignore
  pastedValueParser: (e) => new Date(e)
  type: "dateTime",
  // @ts-ignore
  pastedValueParser: (e) => new Date(e)
  value: "=",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "!=",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: ">=",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "<=",
  InputComponentProps: {
    type: "number"
  }
}, {
  value: "isEmpty",
  getApplyFilterFn: () => (e) => e == null,
  requiresFilterValue: !1
}, {
  value: "isNotEmpty",
  getApplyFilterFn: () => (e) => e != null,
  requiresFilterValue: !1
}, {
  value: "isAnyOf",
  getApplyFilterFn: (e) => !Array.isArray(e.value) || e.value.length === 0 ? null : (t) => t != null && e.value.includes(Number(t)),
  InputComponentProps: {
    type: "number"
  }
  type: "number",
  align: "right",
  headerAlign: "right",
  valueParser: (e) => e === "" ? null : Number(e),
});
  return (e == null ? void 0 : e.type) === "singleSelect";
}
  if (e)
    return typeof e.valueOptions == "function" ? e.valueOptions(J({
      field: e.field
    }, t)) : e.valueOptions;
}
  if (t === void 0)
    return;
  const r = t.find((o) => {
    const s = n(o);
    return String(s) === String(e);
  });
  return n(r);
}
  return !!e.key;
}
    id: n,
    value: r,
    field: o,
    row: s,
    colDef: a,
    hasFocus: c,
    error: f,
    var ee;
    c && ((ee = T.current) == null || ee.focus());
    return null;
    id: n,
    row: s
  });
    return null;
      return;
    O(!1);
      id: n,
      field: o,
    }, ee);
      O(!1);
      return;
    }
    if (G === "backdropClick" || ee.key === "Escape") {
      }));
    }
  }, q = (ee) => {
  };
    ref: C,
    inputRef: T,
    value: r,
    open: E,
    onOpen: q,
    MenuProps: J({
    error: f,
    native: I,
    fullWidth: !0
        native: I,
        key: G,
        value: G
    })
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * GridApi that let you manipulate the grid.
   */
  api: u.object.isRequired,
  /**
   * The mode of the cell.
   */
  cellMode: u.oneOf(["edit", "view"]).isRequired,
  changeReason: u.oneOf(["debouncedSetEditCellValue", "setEditCellValue"]),
  /**
   * The column of the row that the current cell belongs to.
   */
  colDef: u.object.isRequired,
  /**
   * The column field of the cell that triggered the event.
   */
  field: u.string.isRequired,
  /**
   * The cell value formatted with the column valueFormatter.
   */
  formattedValue: u.any,
  /**
   * If true, the cell is the active element.
   */
  hasFocus: u.bool.isRequired,
  /**
   * The grid row id.
   */
  id: u.oneOfType([u.number, u.string]).isRequired,
  /**
   * If true, the select opens by default.
   */
  initialOpen: u.bool,
  /**
   * If true, the cell is editable.
   */
  isEditable: u.bool,
  isProcessingProps: u.bool,
  isValidating: u.bool,
  /**
   * Callback called when the value is changed by the user.
   * @param {SelectChangeEvent<any>} event The event source of the callback.
   * @param {any} newValue The value that is going to be passed to `apiRef.current.setEditCellValue`.
   * @returns {Promise<void> | void} A promise to be awaited before calling `apiRef.current.setEditCellValue`
   */
  onValueChange: u.func,
  /**
   * The row model of the row that the current cell belongs to.
   */
  row: u.any.isRequired,
  /**
   * The node of the row that the current cell belongs to.
   */
  rowNode: u.object.isRequired,
  /**
   * the tabIndex value.
   */
  tabIndex: u.oneOf([-1, 0]).isRequired,
  /**
   * The cell value.
   * If the column has `valueGetter`, use `params.row` to directly access the fields.
   */
  value: u.any
});
  column: e,
  OptionComponent: t,
  getOptionLabel: n,
  getOptionValue: r,
  isSelectNative: o,
  baseSelectOptionProps: s
  const f = r(c);
    native: o,
    key: f,
    value: f
  display: "flex",
  alignItems: "flex-end",
  width: "100%",
  "& button": {
    margin: "auto 0px 5px 5px"
  }
});
  const {
    item: t,
    applyValue: n,
    type: r,
    apiRef: o,
    focusElementRef: s,
    placeholder: a,
    tabIndex: c,
    label: f,
    clearButton: g
  if (t.field) {
  }
    }));
    return null;
    children: [/* @__PURE__ */ $.jsxs(E.slots.baseFormControl, {
      fullWidth: !0,
        id: T,
        htmlFor: C,
        shrink: !0,
      })), /* @__PURE__ */ $.jsx(E.slots.baseSelect, J({
        id: C,
        labelId: T,
        value: w,
        type: r || "text",
        inputProps: {
          tabIndex: c,
          ref: s,
          placeholder: a ?? o.current.getLocaleText("filterPanelInputPlaceholder")
        },
        native: O,
          OptionComponent: E.slots.baseSelectOption,
          getOptionLabel: M,
          getOptionValue: I,
          isSelectNative: O,
          baseSelectOptionProps: (q = E.slotProps) == null ? void 0 : q.baseSelectOption
        })
      }))]
    }), g]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  clearButton: u.node,
  focusElementRef: u.oneOfType([u.func, u.object]),
  /**
   * It is `true` if the filter either has a value or an operator with no value
   * required is selected (for example `isEmpty`)
   */
  isFilterActive: u.bool,
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired
});
  const {
    item: t,
    applyValue: n,
    apiRef: r,
    focusElementRef: o,
    color: s,
    error: a,
    helperText: c,
    size: f,
    color: s,
    error: a,
    helperText: c,
    size: f,
  let T = null;
  if (t.field) {
  }
    n(J({}, t, {
    }));
  }, [n, t, E]);
    multiple: !0,
    options: I,
    id: w,
    value: M,
    getOptionLabel: O,
      }), {
      return /* @__PURE__ */ $.jsx(C.slots.baseChip, J({
        variant: "outlined",
        size: "small",
    }),
        label: r.current.getLocaleText("filterPanelInputLabel"),
        placeholder: r.current.getLocaleText("filterPanelInputPlaceholder"),
          shrink: !0
        }),
        inputRef: o,
        type: "singleSelect"
    }
  }, g));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: u.shape({
    current: u.object.isRequired
  }).isRequired,
  applyValue: u.func.isRequired,
  focusElementRef: u.oneOfType([u.func, u.object]),
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired,
  type: u.oneOf(["singleSelect"])
});
  value: "is",
}, {
  value: "not",
}, {
  value: "isAnyOf",
  getApplyFilterFn: (e) => {
    if (!Array.isArray(e.value) || e.value.length === 0)
      return null;
  },
  type: "singleSelect",
  valueFormatter(e, t, n, r) {
      return "";
      id: o,
      row: t
    });
    if (e == null)
      return "";
    if (!s)
      return e;
      return n.getOptionLabel(e);
    const a = s.find((c) => n.getOptionValue(c) === e);
    return a ? n.getOptionLabel(a) : "";
  },
  // @ts-ignore
  pastedValueParser: (e, t, n) => {
    if (o.find((c) => s(c) === e))
      return e;
  }
  // No initialization in MIT, so we need to default to false to be used by `getTotalHeaderHeight`
  (e) => (e == null ? void 0 : e.enabled) ?? !1
  initialFreeSpace: e,
  totalFlexUnits: t,
  flexColumns: n
}) {
  const r = new Set(n.map((a) => a.field)), o = {
    all: {},
    frozenFields: [],
    freeze: (a) => {
      const c = o.all[a];
      c && c.frozen !== !0 && (o.all[a].frozen = !0, o.frozenFields.push(a));
    }
  };
  function s() {
    if (o.frozenFields.length === r.size)
      return;
    const a = {
      min: {},
      max: {}
    };
    o.frozenFields.forEach((g) => {
      c -= o.all[g].computedWidth, f -= o.all[g].flex;
    });
    for (let g = 0; g < n.length; g += 1) {
        continue;
        frozen: !1,
        computedWidth: C,
      };
    }
      o.freeze(g);
      o.freeze(g);
    }) : n.forEach(({
      field: g
    }) => {
      o.freeze(g);
    }), s();
  }
  return s(), o.all;
}
  const n = {};
  let r = 0, o = 0;
  const s = [];
  e.orderedFields.forEach((f) => {
      computedWidth: g
  });
  const a = t === void 0 ? 0 : t.viewportOuterSize.width - (t.hasScrollY ? t.scrollbarSize : 0), c = Math.max(a - o, 0);
  if (r > 0 && a > 0) {
      initialFreeSpace: c,
      totalFlexUnits: r,
      flexColumns: s
    });
    });
  }
  return J({}, e, {
    lookup: n
  });
  if (!t)
    return e;
  const {
    orderedFields: n = [],
    dimensions: r = {}
  } = t, o = Object.keys(r);
  if (o.length === 0 && n.length === 0)
    return e;
  const s = {}, a = [];
  for (let g = 0; g < n.length; g += 1) {
  }
  const c = a.length === 0 ? e.orderedFields : [...a, ...e.orderedFields.filter((g) => !s[g])], f = J({}, e.lookup);
  for (let g = 0; g < o.length; g += 1) {
      hasBeenResized: !0
    });
      w[C] = T === -1 ? 1 / 0 : T;
  }
  return J({}, e, {
    orderedFields: c,
    lookup: f
  });
};
}
  apiRef: e,
  columnsToUpsert: t,
  initialState: n,
  keepOnlyColumnsToUpsert: o = !1
}) => {
  const s = !e.current.state.columns;
  let a;
  if (s)
    a = {
      orderedFields: [],
      lookup: {},
      columnVisibilityModel: r
    };
  else {
    a = {
      orderedFields: o ? [] : [...w.orderedFields],
      lookup: J({}, w.lookup),
      // Will be cleaned later if keepOnlyColumnsToUpsert=true
      columnVisibilityModel: r
    };
  }
  let c = {};
  o && !s && (c = Object.keys(a.lookup).reduce((w, C) => J({}, w, {
    [C]: !1
  }), {})), t.forEach((w) => {
    const {
      field: C
    } = w;
    c[C] = !0;
    let T = a.lookup[C];
      field: C,
      hasBeenResized: !1
      field: C
    }));
    let E = T.hasBeenResized;
      w[O] !== void 0 && (E = !0, w[O] === -1 && (w[O] = 1 / 0));
      hasBeenResized: E
    }));
  }), o && !s && Object.keys(a.lookup).forEach((w) => {
    c[w] || delete a.lookup[w];
  });
};
  firstColumnToRender: e,
  apiRef: t,
  firstRowToRender: n,
  lastRowToRender: r,
  visibleRows: o
}) {
  let s = e, a = !1;
  for (; !a; ) {
    a = !0;
    for (let c = n; c < r; c += 1)
      if (o[c]) {
        if (g && g.spannedByColSpan && g.leftVisibleCellIndex < s) {
          s = g.leftVisibleCellIndex, a = !1;
          break;
        }
      }
  }
  return s;
}
  if (t.unstable_listView)
    return 0;
  return s + a * r + c;
}
  const {
    scrollDirection: t,
    classes: n
  } = e, r = {
    root: ["scrollArea", `scrollArea--${t}`]
  };
  name: "MuiDataGrid",
  slot: "ScrollArea",
  overridesResolver: (e, t) => [{
    [`&.${se["scrollArea--left"]}`]: t["scrollArea--left"]
  }, {
    [`&.${se["scrollArea--right"]}`]: t["scrollArea--right"]
  }, {
    [`&.${se["scrollArea--up"]}`]: t["scrollArea--up"]
  }, {
    [`&.${se["scrollArea--down"]}`]: t["scrollArea--down"]
  }, t.scrollArea]
})(() => ({
  position: "absolute",
  zIndex: 101,
  // Horizontal scroll areas
  [`&.${se["scrollArea--left"]}`]: {
    top: 0,
    left: 0,
    width: 20,
    bottom: 0
  },
  [`&.${se["scrollArea--right"]}`]: {
    top: 0,
    right: 0,
    width: 20,
    bottom: 0
  },
  // Vertical scroll areas
  [`&.${se["scrollArea--up"]}`]: {
    top: 0,
    left: 0,
    right: 0,
    height: 20
  },
  [`&.${se["scrollArea--down"]}`]: {
    bottom: 0,
    left: 0,
    right: 0,
    height: 20
  }
}
  const {
    scrollDirection: t,
    scrollPosition: n
    if (t === "left")
      return n.current.left > 0;
    if (t === "right") {
      const O = c - E.viewportInnerSize.width;
      return n.current.left < O;
    }
    return !1;
    height: w,
  }, t === "left" ? {
    left: f
  } : {}, t === "right" ? {
    right: f
    let O;
    if (E.preventDefault(), t === "left")
      O = E.clientX - r.current.getBoundingClientRect().right;
    else if (t === "right")
      O = Math.max(1, E.clientX - r.current.getBoundingClientRect().left);
    else
      throw new Error("MUI X: Wrong drag direction");
      o.current.scroll({
        left: n.current.left + O,
        top: n.current.top
      });
    });
  });
    ref: r,
    style: C,
    handleDragOver: T
  }));
}
  const {
    scrollDirection: t,
    scrollPosition: n
    if (t === "up")
      return n.current.top > 0;
    if (t === "down") {
      const T = (a.currentPageTotalHeight || 0) - w.viewportInnerSize.height - w.scrollbarSize;
      return n.current.top < T;
    }
    return !1;
    bottom: t === "down" ? 0 : void 0
    let C;
    if (w.preventDefault(), t === "up")
      C = w.clientY - r.current.getBoundingClientRect().bottom;
    else if (t === "down")
      C = Math.max(1, w.clientY - r.current.getBoundingClientRect().top);
    else
      throw new Error("MUI X: Wrong drag direction");
      o.current.scroll({
        left: n.current.left,
        top: n.current.top + C
      });
    });
  });
    ref: r,
    getCanScrollMore: c,
    style: g,
  }));
}
  const {
    scrollDirection: r,
    getCanScrollMore: o,
    style: s,
    handleDragOver: a
    scrollDirection: r
  return Ot(c, "scrollPositionChange", () => {
    ref: n,
    className: w.root,
    onDragOver: a,
    style: s
  }) : null;
(function(e) {
  function t(n) {
    "@babel/helpers - typeof";
    return e.exports = t = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(r) {
      return typeof r;
    } : function(r) {
      return r && typeof Symbol == "function" && r.constructor === Symbol && r !== Symbol.prototype ? "symbol" : typeof r;
    }, e.exports.__esModule = !0, e.exports.default = e.exports, t(n);
  }
  e.exports = t, e.exports.__esModule = !0, e.exports.default = e.exports;
(function(e) {
  function n(r, o) {
    if (typeof WeakMap == "function") var s = /* @__PURE__ */ new WeakMap(), a = /* @__PURE__ */ new WeakMap();
        __proto__: null,
        default: f
      };
      if (f === null || t(f) != "object" && typeof f != "function") return w;
        if (g.has(f)) return g.get(f);
        g.set(f, w);
      }
      return w;
    }, e.exports.__esModule = !0, e.exports.default = e.exports)(r, o);
  }
  e.exports = n, e.exports.__esModule = !0, e.exports.default = e.exports;
  value: !0
});
  if (e === void 0)
    throw new Error(["MUI X: Could not find the Data Grid private context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join(`
`));
  return e;
}
  firstColumnIndex: e,
  lastColumnIndex: t
  firstRowIndex: 0,
  lastRowIndex: 0,
  firstColumnIndex: 0,
  lastColumnIndex: 0
  const {
    disableVirtualization: n,
    autoHeight: r
  } = t;
  return J({}, e, {
    virtualization: {
      enabled: !n,
      enabledForColumns: !n,
      enabledForRows: !n && !r,
    }
  });
};
  const n = (s) => {
    e.current.setState((a) => J({}, a, {
      virtualization: J({}, a.virtualization, {
        enabled: s,
        enabledForColumns: s,
        enabledForRows: s && !t.autoHeight
      })
    }));
  };
    unstable_setVirtualization: n,
    unstable_setColumnVirtualization: (s) => {
      e.current.setState((a) => J({}, a, {
        virtualization: J({}, a.virtualization, {
          enabledForColumns: s
        })
      }));
    }
  }, "public"), x.useEffect(() => {
    n(!t.disableVirtualization);
  }, [t.disableVirtualization, t.autoHeight]);
}
  if (!e)
    return !1;
  const s = o[e.id];
  if (!s)
    return !1;
  return !(a !== void 0 && c !== -1 && a >= t.firstRowIndex && a <= t.lastRowIndex);
  if (!e)
    return null;
  const s = r[o.id];
  if (!s)
    return null;
  const a = n.rowToIndexMap.get(s);
  if (a === void 0)
    return null;
  const c = t.findIndex((f) => f.field === o.field);
  return c === -1 ? null : J({}, o, {
    rowIndex: a,
    columnIndex: c
  });
});
  return Math.round(e * 10 ** t) / 10 ** t;
}
  return e[e.NONE = 0] = "NONE", e[e.UP = 1] = "UP", e[e.DOWN = 2] = "DOWN", e[e.LEFT = 3] = "LEFT", e[e.RIGHT = 4] = "RIGHT", e;
  top: 0,
  left: 0
  var ce;
    unstable_listView: n
    if (E.current = Ce, !Ce)
      return;
    const Ne = Ce.getBoundingClientRect();
    let Be = {
    };
    if ((!q.current || Be.width !== q.current.width && Be.height !== q.current.height) && (q.current = Be, e.current.publishEvent("resize", Be)), typeof ResizeObserver > "u")
      return;
      if (!rt)
        return;
      const ot = {
      };
      ot.width === Be.width && ot.height === Be.height || (e.current.publishEvent("resize", ot), Be = ot);
    });
      return () => {
        E.current = null, tt.disconnect();
      };
      return;
    e.current.setState((tt) => J({}, tt, {
      virtualization: J({}, tt.virtualization, {
        renderContext: Ce
      })
    const Ce = O.current;
    if (!Ce)
      return;
    if (!(ut || Et))
      return X;
    if (Et)
      switch (gt) {
          Q.current = void 0;
          break;
        default:
          Q.current = X;
          break;
      }
      ie(vt);
    }), re.start(1e3, de)), vt;
  }), ue = () => {
      return;
    Q.current = void 0, ie(Ne);
    if (ee.current) {
      ee.current = !1;
      return;
    }
    const Ce = de();
    e.current.publishEvent("scrollPositionChange", {
      renderContext: Ce
    });
    e.current.publishEvent("virtualScrollerWheel", {}, Ce);
    e.current.publishEvent("virtualScrollerTouchMove", {}, Ce);
  }), pe = (Ce = {}) => {
    var At;
    if (!Ce.rows && !T.range)
      return [];
    let Be = X;
    Ce.renderContext && (Be = Ce.renderContext, Be.firstColumnIndex = X.firstColumnIndex, Be.lastColumnIndex = X.lastColumnIndex);
    let rt;
    switch (Ce.position) {
      case "top":
        rt = 0;
        break;
      case "bottom":
        rt = a.top.length + T.rows.length;
        break;
      case void 0:
        rt = a.top.length;
        break;
    }
    let Ft = -1;
    return nt.forEach((vt) => {
      const {
        id: Xe,
        model: Oe
      } = ot[vt];
      if (!Ne[Xe])
        return;
      if (M) {
        e.current.calculateColSpan({
          rowId: Xe,
          columns: r
        }), f.left.length > 0 && e.current.calculateColSpan({
          rowId: Xe,
          minFirstColumn: 0,
          maxLastColumn: f.left.length,
          columns: r
        }), f.right.length > 0 && e.current.calculateColSpan({
          rowId: Xe,
          minFirstColumn: r.length - f.right.length,
          maxLastColumn: r.length,
          columns: r
        });
      }
      const pt = e.current.rowHasAutoHeight(Xe) ? "auto" : e.current.unstable_getRowHeight(Xe);
      let yt;
      C[Xe] == null ? yt = !1 : yt = e.current.isRowSelectable(Xe);
      let zt = !1;
      Ce.position === void 0 && (zt = vt === 0);
      let bt = !1;
      const We = vt === ot.length - 1;
      if (tt)
          bt = We;
        else {
        }
      let St = Be;
      Q.current && vt >= Q.current.firstRowIndex && vt < Q.current.lastRowIndex && (St = Q.current);
      if (ut.push(/* @__PURE__ */ $.jsx(t.slots.row, J({
        row: Oe,
        rowId: Xe,
        index: Ie,
        selected: yt,
        rowHeight: pt,
        pinnedColumns: f,
        visibleColumns: r,
        isFirstVisible: zt,
        isLastVisible: bt,
        return;
        lastRowId: Xe
      }));
    }), ut;
  }, be = x.useMemo(() => ({
    overflowY: t.autoHeight ? "hidden" : void 0
    const Ce = {
      flexShrink: 0
    };
    Ce && e.current.publishEvent("virtualScrollerContentSizeChange", {
    });
    var Ce, Ne;
    n && (O.current.scrollLeft = 0);
    var Ce;
    if (e.current.publishEvent("scrollPositionChange", {
      renderContext: X
      const Ne = O.current, {
        top: Be,
        left: tt
        top: !(Be > 0),
        left: !(tt > 0)
      };
        const rt = e.current.subscribeEvent("virtualScrollerContentSizeChange", (ot) => {
        });
        return rt;
      }
    }
  }), e.current.register("private", {
    updateRenderContext: ue
    renderContext: X,
    getRows: pe,
    getContainerProps: () => ({
    }),
    getScrollerProps: () => ({
      ref: O,
      onScroll: he,
      onWheel: ge,
      onTouchMove: fe,
      style: be,
      role: "presentation",
      // `tabIndex` shouldn't be used along role=presentation, but it fixes a Firefox bug
      // https://github.com/mui/mui-x/pull/13891#discussion_r1683416024
    }),
    getContentProps: () => ({
      style: we,
      role: "presentation",
      ref: _e
    }),
    getRenderZoneProps: () => ({
      role: "rowgroup"
    }),
    getScrollbarVerticalProps: () => ({
    }),
    getScrollbarHorizontalProps: () => ({
      ref: I,
    }),
    getScrollAreaProps: () => ({
    })
  };
};
  return e.dimensions.viewportOuterSize.width > 0 && e.dimensions.columnsTotalWidth > e.dimensions.viewportOuterSize.width;
}
  return {
    enabledForRows: n,
    enabledForColumns: r,
    apiRef: e,
    autoHeight: t.autoHeight,
    rowBufferPx: t.rowBufferPx,
    columnBufferPx: t.columnBufferPx,
    leftPinnedWidth: o.leftPinnedWidth,
    columnsTotalWidth: o.columnsTotalWidth,
    viewportInnerWidth: o.viewportInnerSize.width,
    viewportInnerHeight: o.viewportInnerSize.height,
    lastRowHeight: f !== void 0 ? e.current.unstable_getRowHeight(f) : 0,
    rows: s.rows,
    range: s.range,
    visibleColumns: a,
    hiddenCellsOriginMap: c,
    listView: t.unstable_listView ?? !1,
    virtualizeColumnsWithAutoRowHeight: t.virtualizeColumnsWithAutoRowHeight
  };
}
  const r = {
    firstRowIndex: 0,
    lastRowIndex: e.rows.length,
    firstColumnIndex: 0,
    lastColumnIndex: e.visibleColumns.length
  }, {
    top: o,
    left: s
  } = t, a = Math.abs(s) + e.leftPinnedWidth;
  if (e.enabledForRows) {
      atStart: !0,
      lastPosition: e.rowsMeta.positions[e.rowsMeta.positions.length - 1] + e.lastRowHeight
    }), e.rowsMeta.positions.length - 1);
    }
    r.firstRowIndex = f, r.lastRowIndex = g;
  }
  if (e.listView)
    return J({}, r, {
      lastColumnIndex: 1
    });
  if (e.enabledForColumns) {
      firstIndex: r.firstRowIndex,
      lastIndex: r.lastRowIndex,
      minFirstIndex: 0,
      maxLastIndex: e.rows.length,
      bufferBefore: n.buffer.rowBefore,
      bufferAfter: n.buffer.rowAfter,
      positions: e.rowsMeta.positions,
      lastSize: e.lastRowHeight
    });
    if (!e.virtualizeColumnsWithAutoRowHeight)
        const T = e.rows[C];
        g = e.apiRef.current.rowHasAutoHeight(T.id);
      }
      atStart: !0,
      lastPosition: e.columnsTotalWidth
  }
}
  var a, c;
  const r = e.apiRef.current.getLastMeasuredRowIndex();
  let o = r === 1 / 0;
  (a = e.range) != null && a.lastRowIndex && !o && (o = r >= e.range.lastRowIndex);
}
    firstIndex: t.firstRowIndex,
    lastIndex: t.lastRowIndex,
    minFirstIndex: 0,
    maxLastIndex: e.rows.length,
    bufferBefore: n.buffer.rowBefore,
    bufferAfter: n.buffer.rowAfter,
    positions: e.rowsMeta.positions,
    lastSize: e.lastRowHeight
    firstIndex: t.firstColumnIndex,
    lastIndex: t.lastColumnIndex,
    minFirstIndex: e.pinnedColumns.left.length,
    maxLastIndex: e.visibleColumns.length - e.pinnedColumns.right.length,
    bufferBefore: n.buffer.columnBefore,
    bufferAfter: n.buffer.columnAfter,
    positions: e.columnPositions,
    lastSize: e.lastColumnWidth
    firstColumnToRender: s,
    apiRef: e.apiRef,
    firstRowToRender: r,
    lastRowToRender: o,
    visibleRows: e.rows
  });
  return {
    firstRowIndex: r,
    lastRowIndex: o,
    firstColumnIndex: c,
    lastColumnIndex: a
  };
}
  if (t.length <= 0)
    return -1;
  if (r >= o)
    return r;
  const s = r + Math.floor((o - r) / 2), a = t[s];
  let c;
  if (n != null && n.atStart) {
    const f = (s === t.length - 1 ? n.lastPosition : t[s + 1]) - a;
    c = e - f < a;
  } else
    c = e <= a;
}
  let o = 1;
  for (; n < t.length && Math.abs(t[n]) < e; )
    n += o, o *= 2;
}
  firstIndex: e,
  lastIndex: t,
  bufferBefore: n,
  bufferAfter: r,
  minFirstIndex: o,
  maxLastIndex: s,
  positions: a,
  lastSize: c
}) {
    atStart: !0,
    lastPosition: a[a.length - 1] + c
}
  return e === t ? !0 : e.firstRowIndex === t.firstRowIndex && e.lastRowIndex === t.lastRowIndex && e.firstColumnIndex === t.firstColumnIndex && e.lastColumnIndex === t.lastColumnIndex;
}
  const r = (e[t.firstColumnIndex] ?? 0) - (e[n] ?? 0);
  return Math.abs(r);
}
}
  if (e)
    switch (t) {
        break;
        break;
    }
  switch (t) {
      return {
        rowAfter: n,
        rowBefore: n,
        columnAfter: r,
        columnBefore: r
      };
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: s
      };
      return {
        rowAfter: 0,
        rowBefore: 0,
        columnAfter: s,
        columnBefore: 0
      };
      return {
        rowAfter: 0,
        rowBefore: o,
        columnAfter: 0,
        columnBefore: 0
      };
      return {
        rowAfter: o,
        rowBefore: 0,
        columnAfter: 0,
        columnBefore: 0
      };
    default:
      throw new Error("unreachable");
  }
}
    loadingOverlayVariant: g
  };
  name: "MuiDataGrid",
  slot: "OverlayWrapper",
  shouldForwardProp: (e) => e !== "overlayType" && e !== "loadingOverlayVariant",
  overridesResolver: (e, t) => t.overlayWrapper
})(({
  overlayType: e,
  loadingOverlayVariant: t
}) => (
  // Skeleton overlay should flow with the scroll container and not be sticky
  t !== "skeleton" ? {
    position: "sticky",
    // To stay in place while scrolling
    top: "var(--DataGrid-headersTotalHeight)",
    // TODO: take pinned rows into account
    left: 0,
    width: 0,
    // To stay above the content instead of shifting it down
    height: 0,
    // To stay above the content instead of shifting it down
    zIndex: e === "loadingOverlay" ? 5 : 4
    // Should be above pinned columns and detail panel
  } : {}
  name: "MuiDataGrid",
  slot: "OverlayWrapperInner",
  shouldForwardProp: (e) => e !== "overlayType" && e !== "loadingOverlayVariant",
  overridesResolver: (e, t) => t.overlayWrapperInner
  const {
    classes: t
  } = e;
  return mt({
    root: ["overlayWrapper"],
    inner: ["overlayWrapperInner"]
};
  let o = Math.max(r.viewportOuterSize.height - r.topContainerHeight - r.bottomContainerHeight - (r.hasScrollX ? r.scrollbarSize : 0), 0);
    classes: n.classes
  }));
    className: et(s.root)
  }, e, {
      className: et(s.inner),
      style: {
        height: o,
        width: r.viewportOuterSize.width
      }
    }, e))
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  loadingOverlayVariant: u.oneOf(["circular-progress", "linear-progress", "skeleton"]),
  overlayType: u.oneOf(["loadingOverlay", "noResultsOverlay", "noRowsOverlay"])
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  loadingOverlayVariant: u.oneOf(["circular-progress", "linear-progress", "skeleton"]),
  overlayType: u.oneOf(["loadingOverlay", "noResultsOverlay", "noRowsOverlay"])
});
  var s, a;
  const {
    overlayType: t
  if (!t)
    return null;
  const r = (s = n.slots) == null ? void 0 : s[t], o = (a = n.slotProps) == null ? void 0 : a[t];
    children: /* @__PURE__ */ $.jsx(r, J({}, o))
  }));
}
  var O;
  return /* @__PURE__ */ $.jsx(t.slots.columnHeaders, J({
    ref: E,
    visibleColumns: n,
    filterColumnLookup: r,
    sortColumnLookup: o,
    columnHeaderTabIndexState: s,
    columnGroupHeaderTabIndexState: c,
    columnHeaderFocus: f,
    headerGroupingMaxDepth: g,
    columnVisibility: w,
    columnGroupsHeaderStructure: C,
    hasOtherElementInTabSequence: T
  }, (O = t.slotProps) == null ? void 0 : O.columnHeaders));
}
  if (e === void 0)
    throw new Error(["MUI X: Could not find the Data Grid configuration context.", "It looks like you rendered your component outside of a DataGrid, DataGridPro or DataGridPremium parent component.", "This can also happen if you are bundling multiple versions of the Data Grid."].join(`
`));
  return e;
  position: "absolute",
  top: "var(--DataGrid-headersTotalHeight)",
  left: 0,
  width: "calc(100% - (var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize)))"
  name: "MuiDataGrid",
  slot: "Main",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.main, n.hasPinnedRight && t["main--hasPinnedRight"], n.loadingOverlayVariant === "skeleton" && t["main--hasSkeletonLoadingOverlay"]];
  }
})({
  flexGrow: 1,
  position: "relative",
  overflow: "hidden",
  display: "flex",
  flexDirection: "column"
  var a;
  const {
    ownerState: n
    ownerState: n,
    className: e.className,
    tabIndex: -1
  }, s, (a = r.slotProps) == null ? void 0 : a.main, {
    ref: t,
      role: "presentation",
      "data-id": "gridPanelAnchor"
    }), e.children]
  }));
  root: ["topContainer"]
  position: "sticky",
  zIndex: 40,
  top: 0
});
    className: et(t.root, se["container--top"]),
    role: "presentation"
  }));
}
  root: ["bottomContainer"]
  position: "sticky",
  zIndex: 40,
  bottom: "calc(var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize))"
});
    className: et(t.root, se["container--bottom"]),
    role: "presentation"
  }));
}
  const {
    classes: n
  } = e;
  return mt({
    root: ["virtualScrollerContent", t && "virtualScrollerContent--overflowed"]
  name: "MuiDataGrid",
  slot: "VirtualScrollerContent",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.virtualScrollerContent, n.overflowedContent && t["virtualScrollerContent--overflowed"]];
  }
  var c;
    classes: r.classes,
    overflowedContent: o
  };
    ownerState: a,
    className: et(s.root, t.className),
    ref: n
  }));
  display: "flex",
  flexDirection: "row",
  width: "var(--DataGrid-rowWidth)",
  boxSizing: "border-box"
  position: "sticky",
  height: "100%",
  boxSizing: "border-box",
  borderTop: "1px solid var(--rowBorderColor)",
  backgroundColor: "var(--DataGrid-pinnedBackground)"
  left: 0,
  borderRight: "1px solid var(--rowBorderColor)"
  right: 0,
  borderLeft: "1px solid var(--rowBorderColor)"
  flexGrow: 1,
  borderTop: "1px solid var(--rowBorderColor)"
});
  rowsLength: e
}) {
    viewportOuterSize: n,
    minimumSize: r,
    hasScrollX: o,
    hasScrollY: s,
    scrollbarSize: a,
    leftPinnedWidth: c,
    rightPinnedWidth: f
    className: se.filler,
    role: "presentation",
    style: {
      "--rowBorderColor": e === 0 ? "transparent" : "var(--DataGrid-rowBorderColor)"
    },
      className: se["filler--pinnedLeft"],
      style: {
        width: c
      }
      className: se["filler--pinnedRight"],
      style: {
        width: f + (s ? a : 0)
      }
    })]
  });
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["virtualScrollerRenderZone"]
  name: "MuiDataGrid",
  slot: "VirtualScrollerRenderZone",
  overridesResolver: (e, t) => t.virtualScrollerRenderZone
})({
  position: "absolute",
  display: "flex",
  // Prevents margin collapsing when using `getRowSpacing`
  flexDirection: "column"
  const {
    className: r
  });
    className: et(c.root, r),
    ownerState: a,
    style: {
      transform: `translate3d(0, ${f}px, 0)`
    }
  }, o, {
    ref: n
  }));
  includeHeaders: !0,
  includeOutliers: !1,
  outliersFactor: 1.5,
  expand: !1,
  disableColumnVirtualization: !0
  rowId: t,
  editMode: n
  rowId: t,
  field: n
}) => {
  var r;
  return ((r = e[t]) == null ? void 0 : r[n]) ?? null;
  return e.filters = "filters", e.columns = "columns", e;
  const {
    classes: n
  } = e, r = {
    root: ["scrollbar", `scrollbar--${t}`],
    content: ["scrollbarContent"]
  };
  position: "absolute",
  display: "inline-block",
  zIndex: 60,
  "&:hover": {
    zIndex: 70
  },
  // In macOS Safari and Gnome Web, scrollbars are overlaid and don't affect the layout. So we consider
  // their size to be 0px throughout all the calculations, but the floating scrollbar container does need
  // to appear and have a real size. We set it to 14px because it seems like an acceptable value and we
  // don't have a method to find the required size for scrollbars on those platforms.
  "--size": "calc(max(var(--DataGrid-scrollbarSize), 14px))"
  width: "var(--size)",
  height: "calc(var(--DataGrid-hasScrollY) * (100% - var(--DataGrid-topContainerHeight) - var(--DataGrid-bottomContainerHeight) - var(--DataGrid-hasScrollX) * var(--DataGrid-scrollbarSize)))",
  overflowY: "auto",
  overflowX: "hidden",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    width: "var(--size)"
  },
  top: "var(--DataGrid-topContainerHeight)",
  right: "0px"
  width: "100%",
  height: "var(--size)",
  overflowY: "hidden",
  overflowX: "auto",
  // Disable focus-visible style, it's a scrollbar.
  outline: 0,
  "& > div": {
    height: "var(--size)"
  },
  bottom: "0px"
      return;
      s.current = !1;
      return;
    }
    s.current = !0;
      return;
    if (s.current) {
      s.current = !1;
      return;
    }
    s.current = !0;
  });
      passive: !0
    };
    };
  }), x.useEffect(() => {
    style: t.position === "vertical" && o.unstable_listView ? {
      height: "100%",
      top: 0
    } : void 0,
    tabIndex: -1,
    "aria-hidden": "true",
    },
    children: /* @__PURE__ */ $.jsx("div", {
      ref: f,
    })
  });
  const {
    classes: t,
    hasScrollX: n,
    hasPinnedRight: r,
    loadingOverlayVariant: o
  } = e;
  return mt({
    root: ["main", r && "main--hasPinnedRight", o === "skeleton" && "main--hasSkeletonLoadingOverlay"],
    scroller: ["virtualScroller", n && "virtualScroller--hasScrollX"]
  name: "MuiDataGrid",
  slot: "VirtualScroller",
  overridesResolver: (e, t) => {
    const {
      ownerState: n
    } = e;
    return [t.virtualScroller, n.hasScrollX && t["virtualScroller--hasScrollX"]];
  }
})({
  position: "relative",
  height: "100%",
  flexGrow: 1,
  overflow: "scroll",
  scrollbarWidth: "none",
  display: "flex",
  flexDirection: "column",
  "&::-webkit-scrollbar": {
    display: "none"
    /* Safari and Chrome */
  },
  "@media print": {
    overflow: "hidden"
  },
  // See https://github.com/mui/mui-x/issues/10547
  zIndex: 0
    classes: n.classes,
    hasScrollX: o,
    hasPinnedRight: s,
    loadingOverlayVariant: c.loadingOverlayVariant
    getScrollerProps: w,
    getContentProps: C,
    getRenderZoneProps: T,
    getScrollbarVerticalProps: E,
    getScrollbarHorizontalProps: O,
    getScrollAreaProps: I
    ownerState: f,
      scrollDirection: "left"
      scrollDirection: "right"
      scrollDirection: "up"
      scrollDirection: "down"
    }, w(), {
      ownerState: f,
          position: "top",
          virtualScroller: g
        })]
          children: [M, /* @__PURE__ */ $.jsx(n.slots.detailPanels, {
            virtualScroller: g
          })]
        }))
        rowsLength: M.length
        children: /* @__PURE__ */ $.jsx(n.slots.pinnedRows, {
          position: "bottom",
          virtualScroller: g
        })
      })]
      position: "horizontal"
      position: "vertical"
    }, E())), e.children]
  }));
}
  var t;
  return e.hideFooter ? null : /* @__PURE__ */ $.jsx(e.slots.footer, J(
    {},
    (t = e.slotProps) == null ? void 0 : t.footer
    /* FIXME: typing error */
  ));
}
    get preventScroll() {
    }
}
  defaultSlots: e,
  slots: t
}) {
  const n = t;
  if (!n || Object.keys(n).length === 0)
    return e;
  const r = J({}, e);
  return Object.keys(n).forEach((o) => {
    const s = o;
    n[s] !== void 0 && (r[s] = n[s]);
  }), r;
}
  var o;
  if ((o = e.slotProps) != null && o.root)
    return e;
  const t = Object.keys(e);
  if (!t.some((s) => s.startsWith("aria-") || s.startsWith("data-")))
    return e;
  const n = {}, r = e.forwardedProps ?? {};
  for (let s = 0; s < t.length; s += 1) {
    const a = t[s];
    a.startsWith("aria-") || a.startsWith("data-") ? r[a] = e[a] : n[a] = e[a];
  }
  return n.forwardedProps = r, n;
}
}
`) || void 0, (e) => e.paginationMode === "client" && e.paginationMeta != null && ['MUI X: Usage of the `paginationMeta` prop with client-side pagination (`paginationMode="client"`) has no effect.', '`paginationMeta` is only meant to be used with `paginationMode="server"`.'].join(`
`) || void 0, (e) => e.paginationMode === "server" && e.rowCount == null && !e.unstable_dataSource && ["MUI X: The `rowCount` prop must be passed using `paginationMode='server'`", "For more detail, see http://mui.com/components/data-grid/pagination/#index-based-pagination"].join(`
`) || void 0];
  t.forEach((n) => {
    const r = n(e);
  });
}
  const t = e.match(/^__row_group_by_columns_group_(.*)__$/);
  return t ? t[1] : null;
  if (e)
    if (t) {
        return "right";
        return "left";
    } else {
        return "left";
        return "right";
    }
};
  return !o || r === void 0 || (e[o] = r), e;
}
  const {
    align: t,
    showLeftBorder: n,
    showRightBorder: r,
    pinnedPosition: o,
    isEditable: s,
    isSelected: a,
    isSelectionMode: c,
    classes: f
  };
};
  var Ie, pt, yt, zt;
  const {
    column: r,
    row: o,
    rowId: s,
    rowNode: a,
    align: c,
    colIndex: f,
    className: g,
    colSpan: w,
    disableDragEvents: C,
    isNotVisible: T,
    pinnedOffset: E,
    pinnedPosition: O,
    showLeftBorder: I,
    onClick: M,
    onDragOver: q
    rowId: s,
    colDef: r,
    cellMode: Q,
    rowNode: a,
    }),
    })
  });
    id: s,
    hasFocus: he,
    isEditable: ge = !1,
    value: fe
    classes: we,
    getCellClassName: _e
    id: s,
  }).filter(Boolean).join(" "))];
    align: c,
    showLeftBorder: I,
    isEditable: ge,
    classes: ee.classes,
    pinnedPosition: O,
    isSelected: ie,
    isSelectionMode: rt
      return;
    if (T)
      return {
        padding: 0,
        opacity: 0,
        width: 0,
        height: 0,
        border: 0
      };
    return Et > 1 && (bt.height = `calc(var(--height) * ${Et})`, bt.zIndex = 10, (We || St) && (bt.zIndex = 40)), bt;
  if (x.useEffect(() => {
      return;
    if (Be.current && !Be.current.contains(bt.activeElement)) {
        St.focus({
          preventScroll: !0
        });
      else {
      }
    }
    return /* @__PURE__ */ $.jsx("div", {
      "data-colindex": f,
      role: "presentation",
      style: J({
        width: "var(--width)"
      }, Tt)
    });
  process.env.NODE_ENV === "test" && ((zt = ee.experimentalFeatures) != null && zt.warnIfFocusStateIsNotSynced) && (At = (bt) => {
      return;
    }
  });
  let vt, Xe;
      row: bt,
      formattedValue: St
    }, We);
  }
  if (vt === void 0) {
    const bt = Ne == null ? void 0 : Ne.toString();
    vt = bt, Xe = bt;
  }
  /* @__PURE__ */ x.isValidElement(vt) && pe && (vt = /* @__PURE__ */ x.cloneElement(vt, {
  }));
  const Oe = C ? null : {
    onDragOver: Ft("cellDragOver", q)
  };
  return /* @__PURE__ */ $.jsx("div", J({
    className: et(wt.root, Ce, g),
    role: "gridcell",
    "data-colindex": f,
    "aria-colindex": f + 1,
    "aria-colspan": w,
    "aria-rowspan": Et,
    style: Tt,
    title: Xe,
    tabIndex: be,
    onClick: Ft("cellClick", M),
    onMouseDown: nt("cellMouseDown"),
    onMouseUp: gt("cellMouseUp"),
    onFocus: At,
    ref: tt,
    children: vt
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: u.oneOf(["center", "left", "right"]).isRequired,
  colIndex: u.number.isRequired,
  colSpan: u.number,
  column: u.object.isRequired,
  disableDragEvents: u.bool,
  isNotVisible: u.bool.isRequired,
  pinnedOffset: u.number,
  pinnedPosition: u.oneOf([0, 1, 2, 3]).isRequired,
  row: u.object.isRequired,
  rowId: u.oneOfType([u.number, u.string]).isRequired,
  rowNode: u.object.isRequired,
  showLeftBorder: u.bool.isRequired,
  showRightBorder: u.bool.isRequired,
  width: u.number.isRequired
});
  number: [40, 60],
  string: [40, 80],
  date: [40, 60],
  dateTime: [60, 80],
  singleSelect: [40, 80]
  const {
    align: t,
    classes: n,
    empty: r
  } = e, o = {
    root: ["cell", "cellSkeleton", `cell--text${t ? He(t) : "Left"}`, r && "cellEmpty"]
  };
  const {
    field: t,
    type: n,
    align: r,
    width: o,
    height: s,
    empty: a = !1,
    style: c,
    className: f
    align: r,
    empty: a
    if (n === "boolean" || n === "actions")
      return {
        variant: "circular",
      };
    return {
      variant: "text",
    };
  }, [n]);
  return /* @__PURE__ */ $.jsx("div", J({
    "data-field": t,
    className: et(w.root, f),
    style: J({
      height: s,
      maxWidth: o,
      minWidth: o
    }, c)
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  align: u.string,
  /**
   * If `true`, the cell will not display the skeleton but still reserve the cell space.
   * @default false
   */
  empty: u.bool,
  field: u.string,
  height: u.oneOfType([u.oneOf(["auto"]), u.number]),
  type: u.oneOf(["actions", "boolean", "custom", "date", "dateTime", "number", "singleSelect", "string"]),
  width: u.oneOfType([u.number, u.string])
});
}
  width: 3,
  rx: 1.5,
  x: 10.5
  name: "MuiDataGrid",
  slot: "Root",
  overridesResolver: (e, t) => [
    // Root overrides
    t.root,
    {
      [`&.${se.autoHeight}`]: t.autoHeight
    },
    {
      [`&.${se.autosizing}`]: t.autosizing
    },
    {
      [`&.${se["root--densityStandard"]}`]: t["root--densityStandard"]
    },
    {
      [`&.${se["root--densityComfortable"]}`]: t["root--densityComfortable"]
    },
    {
      [`&.${se["root--densityCompact"]}`]: t["root--densityCompact"]
    },
    {
      [`&.${se["root--disableUserSelection"]}`]: t["root--disableUserSelection"]
    },
    {
      [`&.${se["root--noToolbar"]}`]: t["root--noToolbar"]
    },
    {
      [`&.${se.withVerticalBorder}`]: t.withVerticalBorder
    },
    // Child element overrides
    // - Only declare overrides here for class names that are not applied to `styled` components.
    // - For `styled` components, declare overrides in the component itself.
    {
      [`& .${se.actionsCell}`]: t.actionsCell
    },
    {
      [`& .${se.booleanCell}`]: t.booleanCell
    },
    {
      [`& .${se.cell}`]: t.cell
    },
    {
      [`& .${se["cell--editable"]}`]: t["cell--editable"]
    },
    {
      [`& .${se["cell--editing"]}`]: t["cell--editing"]
    },
    {
      [`& .${se["cell--flex"]}`]: t["cell--flex"]
    },
    {
      [`& .${se["cell--pinnedLeft"]}`]: t["cell--pinnedLeft"]
    },
    {
      [`& .${se["cell--pinnedRight"]}`]: t["cell--pinnedRight"]
    },
    {
      [`& .${se["cell--rangeBottom"]}`]: t["cell--rangeBottom"]
    },
    {
      [`& .${se["cell--rangeLeft"]}`]: t["cell--rangeLeft"]
    },
    {
      [`& .${se["cell--rangeRight"]}`]: t["cell--rangeRight"]
    },
    {
      [`& .${se["cell--rangeTop"]}`]: t["cell--rangeTop"]
    },
    {
      [`& .${se["cell--selectionMode"]}`]: t["cell--selectionMode"]
    },
    {
      [`& .${se["cell--textCenter"]}`]: t["cell--textCenter"]
    },
    {
      [`& .${se["cell--textLeft"]}`]: t["cell--textLeft"]
    },
    {
      [`& .${se["cell--textRight"]}`]: t["cell--textRight"]
    },
    {
      [`& .${se["cell--withLeftBorder"]}`]: t["cell--withLeftBorder"]
    },
    {
      [`& .${se["cell--withRightBorder"]}`]: t["cell--withRightBorder"]
    },
    {
      [`& .${se.cellCheckbox}`]: t.cellCheckbox
    },
    {
      [`& .${se.cellEmpty}`]: t.cellEmpty
    },
    {
      [`& .${se.cellOffsetLeft}`]: t.cellOffsetLeft
    },
    {
      [`& .${se.cellSkeleton}`]: t.cellSkeleton
    },
    {
      [`& .${se.checkboxInput}`]: t.checkboxInput
    },
    {
      [`& .${se.columnHeader}`]: t.columnHeader
    },
    {
      [`& .${se["columnHeader--alignCenter"]}`]: t["columnHeader--alignCenter"]
    },
    {
      [`& .${se["columnHeader--alignLeft"]}`]: t["columnHeader--alignLeft"]
    },
    {
      [`& .${se["columnHeader--alignRight"]}`]: t["columnHeader--alignRight"]
    },
    {
      [`& .${se["columnHeader--dragging"]}`]: t["columnHeader--dragging"]
    },
    {
      [`& .${se["columnHeader--emptyGroup"]}`]: t["columnHeader--emptyGroup"]
    },
    {
      [`& .${se["columnHeader--filledGroup"]}`]: t["columnHeader--filledGroup"]
    },
    {
      [`& .${se["columnHeader--filtered"]}`]: t["columnHeader--filtered"]
    },
    {
      [`& .${se["columnHeader--last"]}`]: t["columnHeader--last"]
    },
    {
      [`& .${se["columnHeader--lastUnpinned"]}`]: t["columnHeader--lastUnpinned"]
    },
    {
      [`& .${se["columnHeader--moving"]}`]: t["columnHeader--moving"]
    },
    {
      [`& .${se["columnHeader--numeric"]}`]: t["columnHeader--numeric"]
    },
    {
      [`& .${se["columnHeader--pinnedLeft"]}`]: t["columnHeader--pinnedLeft"]
    },
    {
      [`& .${se["columnHeader--pinnedRight"]}`]: t["columnHeader--pinnedRight"]
    },
    {
      [`& .${se["columnHeader--siblingFocused"]}`]: t["columnHeader--siblingFocused"]
    },
    {
      [`& .${se["columnHeader--sortable"]}`]: t["columnHeader--sortable"]
    },
    {
      [`& .${se["columnHeader--sorted"]}`]: t["columnHeader--sorted"]
    },
    {
      [`& .${se["columnHeader--withLeftBorder"]}`]: t["columnHeader--withLeftBorder"]
    },
    {
      [`& .${se["columnHeader--withRightBorder"]}`]: t["columnHeader--withRightBorder"]
    },
    {
      [`& .${se.columnHeaderCheckbox}`]: t.columnHeaderCheckbox
    },
    {
      [`& .${se.columnHeaderDraggableContainer}`]: t.columnHeaderDraggableContainer
    },
    {
      [`& .${se.columnHeaderTitleContainer}`]: t.columnHeaderTitleContainer
    },
    {
      [`& .${se.columnHeaderTitleContainerContent}`]: t.columnHeaderTitleContainerContent
    },
    {
      [`& .${se.columnSeparator}`]: t.columnSeparator
    },
    {
      [`& .${se["columnSeparator--resizable"]}`]: t["columnSeparator--resizable"]
    },
    {
      [`& .${se["columnSeparator--resizing"]}`]: t["columnSeparator--resizing"]
    },
    {
      [`& .${se["columnSeparator--sideLeft"]}`]: t["columnSeparator--sideLeft"]
    },
    {
      [`& .${se["columnSeparator--sideRight"]}`]: t["columnSeparator--sideRight"]
    },
    {
      [`& .${se["container--bottom"]}`]: t["container--bottom"]
    },
    {
      [`& .${se["container--top"]}`]: t["container--top"]
    },
    {
      [`& .${se.detailPanelToggleCell}`]: t.detailPanelToggleCell
    },
    {
      [`& .${se["detailPanelToggleCell--expanded"]}`]: t["detailPanelToggleCell--expanded"]
    },
    {
      [`& .${se.editBooleanCell}`]: t.editBooleanCell
    },
    {
      [`& .${se.filterIcon}`]: t.filterIcon
    },
    {
      [`& .${se["filler--borderBottom"]}`]: t["filler--borderBottom"]
    },
    {
      [`& .${se["filler--pinnedLeft"]}`]: t["filler--pinnedLeft"]
    },
    {
      [`& .${se["filler--pinnedRight"]}`]: t["filler--pinnedRight"]
    },
    {
      [`& .${se.groupingCriteriaCell}`]: t.groupingCriteriaCell
    },
    {
      [`& .${se.groupingCriteriaCellLoadingContainer}`]: t.groupingCriteriaCellLoadingContainer
    },
    {
      [`& .${se.groupingCriteriaCellToggle}`]: t.groupingCriteriaCellToggle
    },
    {
      [`& .${se.headerFilterRow}`]: t.headerFilterRow
    },
    {
      [`& .${se.iconSeparator}`]: t.iconSeparator
    },
    {
      [`& .${se.menuIcon}`]: t.menuIcon
    },
    {
      [`& .${se.menuIconButton}`]: t.menuIconButton
    },
    {
      [`& .${se.menuList}`]: t.menuList
    },
    {
      [`& .${se.menuOpen}`]: t.menuOpen
    },
    {
      [`& .${se.overlayWrapperInner}`]: t.overlayWrapperInner
    },
    {
      [`& .${se.pinnedRows}`]: t.pinnedRows
    },
    {
      [`& .${se["pinnedRows--bottom"]}`]: t["pinnedRows--bottom"]
    },
    {
      [`& .${se["pinnedRows--top"]}`]: t["pinnedRows--top"]
    },
    {
      [`& .${se.row}`]: t.row
    },
    {
      [`& .${se["row--borderBottom"]}`]: t["row--borderBottom"]
    },
    {
      [`& .${se["row--detailPanelExpanded"]}`]: t["row--detailPanelExpanded"]
    },
    {
      [`& .${se["row--dragging"]}`]: t["row--dragging"]
    },
    {
      [`& .${se["row--dynamicHeight"]}`]: t["row--dynamicHeight"]
    },
    {
      [`& .${se["row--editable"]}`]: t["row--editable"]
    },
    {
      [`& .${se["row--editing"]}`]: t["row--editing"]
    },
    {
      [`& .${se["row--firstVisible"]}`]: t["row--firstVisible"]
    },
    {
      [`& .${se["row--lastVisible"]}`]: t["row--lastVisible"]
    },
    {
      [`& .${se.rowReorderCell}`]: t.rowReorderCell
    },
    {
      [`& .${se["rowReorderCell--draggable"]}`]: t["rowReorderCell--draggable"]
    },
    {
      [`& .${se.rowReorderCellContainer}`]: t.rowReorderCellContainer
    },
    {
      [`& .${se.rowReorderCellPlaceholder}`]: t.rowReorderCellPlaceholder
    },
    {
      [`& .${se.rowSkeleton}`]: t.rowSkeleton
    },
    {
      [`& .${se.scrollbar}`]: t.scrollbar
    },
    {
      [`& .${se["scrollbar--horizontal"]}`]: t["scrollbar--horizontal"]
    },
    {
      [`& .${se["scrollbar--vertical"]}`]: t["scrollbar--vertical"]
    },
    {
      [`& .${se.scrollbarFiller}`]: t.scrollbarFiller
    },
    {
      [`& .${se["scrollbarFiller--borderBottom"]}`]: t["scrollbarFiller--borderBottom"]
    },
    {
      [`& .${se["scrollbarFiller--borderTop"]}`]: t["scrollbarFiller--borderTop"]
    },
    {
      [`& .${se["scrollbarFiller--header"]}`]: t["scrollbarFiller--header"]
    },
    {
      [`& .${se["scrollbarFiller--pinnedRight"]}`]: t["scrollbarFiller--pinnedRight"]
    },
    {
      [`& .${se.sortIcon}`]: t.sortIcon
    },
    {
      [`& .${se.treeDataGroupingCell}`]: t.treeDataGroupingCell
    },
    {
      [`& .${se.treeDataGroupingCellLoadingContainer}`]: t.treeDataGroupingCellLoadingContainer
    },
    {
      [`& .${se.treeDataGroupingCellToggle}`]: t.treeDataGroupingCellToggle
    },
    {
      [`& .${se.withBorderColor}`]: t.withBorderColor
    }
  ]
})(({
  theme: e
}) => {
    [`& .${se["cell--pinnedLeft"]}, & .${se["cell--pinnedRight"]}`]: {
      "&.Mui-selected": {
        "&:hover": {
        }
      }
    }
    backgroundColor: w,
    "&:hover": {
      backgroundColor: C,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: w
      }
    }
  };
  return J({
    "--unstable_DataGrid-radius": typeof o == "number" ? `${o}px` : o,
    "--unstable_DataGrid-headWeight": e.typography.fontWeightMedium,
    "--unstable_DataGrid-overlayBackground": c,
    "--DataGrid-containerBackground": s,
    "--DataGrid-pinnedBackground": a,
    "--DataGrid-rowBorderColor": r,
    "--DataGrid-cellOffsetMultiplier": 2,
    "--DataGrid-width": "0px",
    "--DataGrid-hasScrollX": "0",
    "--DataGrid-hasScrollY": "0",
    "--DataGrid-scrollbarSize": "10px",
    "--DataGrid-rowWidth": "0px",
    "--DataGrid-columnsTotalWidth": "0px",
    "--DataGrid-leftPinnedWidth": "0px",
    "--DataGrid-rightPinnedWidth": "0px",
    "--DataGrid-headerHeight": "0px",
    "--DataGrid-headersTotalHeight": "0px",
    "--DataGrid-topContainerHeight": "0px",
    "--DataGrid-bottomContainerHeight": "0px",
    flex: 1,
    boxSizing: "border-box",
    position: "relative",
    borderWidth: "1px",
    borderStyle: "solid",
    borderColor: r,
    borderRadius: "var(--unstable_DataGrid-radius)",
    color: (e.vars || e).palette.text.primary
  }, e.typography.body2, {
    outline: "none",
    height: "100%",
    display: "flex",
    minWidth: 0,
    // See https://github.com/mui/mui-x/issues/8547
    minHeight: 0,
    flexDirection: "column",
    overflow: "hidden",
    overflowAnchor: "none",
    // Keep the same scrolling position
    transform: "translate(0, 0)",
    // Create a stacking context to keep scrollbars from showing on top
      borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
      borderTopRightRadius: "var(--unstable_DataGrid-radius)"
    },
    [`&.${se.autoHeight}`]: {
      height: "auto"
    },
    [`&.${se.autosizing}`]: {
      [`& .${se.columnHeaderTitleContainerContent} > *`]: {
        overflow: "visible !important"
      },
      "@media (hover: hover)": {
        [`& .${se.menuIcon}`]: {
          width: "0 !important",
          visibility: "hidden !important"
        }
      },
      [`& .${se.cell}`]: {
        overflow: "visible !important",
        whiteSpace: "nowrap",
        minWidth: "max-content !important",
        maxWidth: "max-content !important"
      },
      [`& .${se.groupingCriteriaCell}`]: {
        width: "unset"
      },
      [`& .${se.treeDataGroupingCell}`]: {
        width: "unset"
      }
    },
    [`& .${se.columnHeader}, & .${se.cell}`]: {
      WebkitTapHighlightColor: "transparent",
      padding: "0 10px",
      boxSizing: "border-box"
    },
    [`& .${se.columnHeader}:focus-within, & .${se.cell}:focus-within`]: {
    },
    [`& .${se.columnHeader}:focus, & .${se.cell}:focus`]: {
    },
    // Hide the column separator when:
    // - the column is focused and has an outline
    // - the next column is focused and has an outline
    // - the column has a left or right border
    // - the next column is pinned right and has a left border
    [`& .${se.columnHeader}:focus,
      & .${se["columnHeader--withLeftBorder"]},
      & .${se["columnHeader--withRightBorder"]},
      & .${se["columnHeader--siblingFocused"]},
      & .${se["virtualScroller--hasScrollX"]} .${se["columnHeader--lastUnpinned"]},
      & .${se["virtualScroller--hasScrollX"]} .${se["columnHeader--last"]}
      `]: {
      [`& .${se.columnSeparator}`]: {
        opacity: 0
      },
      // Show resizable separators at all times on touch devices
      "@media (hover: none)": {
        [`& .${se["columnSeparator--resizable"]}`]: {
          opacity: 1
        }
      },
      [`& .${se["columnSeparator--resizable"]}:hover`]: {
        opacity: 1
      }
    },
    [`&.${se["root--noToolbar"]} [aria-rowindex="1"] [aria-colindex="1"]`]: {
      borderTopLeftRadius: "calc(var(--unstable_DataGrid-radius) - 1px)"
    },
    [`&.${se["root--noToolbar"]} [aria-rowindex="1"] .${se["columnHeader--last"]}`]: {
      borderTopRightRadius: n ? "calc(var(--unstable_DataGrid-radius) - 1px)" : void 0
    },
    [`& .${se.columnHeaderCheckbox}, & .${se.cellCheckbox}`]: {
      padding: 0,
      justifyContent: "center",
      alignItems: "center"
    },
    [`& .${se.columnHeader}`]: {
      position: "relative",
      display: "flex",
      alignItems: "center"
    },
    [`& .${se["virtualScroller--hasScrollX"]} .${se["columnHeader--last"]}`]: {
      overflow: "hidden"
    },
    [`& .${se["columnHeader--sorted"]} .${se.iconButtonContainer}, & .${se["columnHeader--filtered"]} .${se.iconButtonContainer}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${se.columnHeader}:not(.${se["columnHeader--sorted"]}) .${se.sortButton}`]: {
      opacity: 0,
      transition: e.transitions.create(["opacity"], {
        duration: e.transitions.duration.shorter
      })
    },
    [`& .${se.columnHeaderTitleContainer}`]: {
      display: "flex",
      alignItems: "center",
      gap: e.spacing(0.25),
      minWidth: 0,
      flex: 1,
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    [`& .${se.columnHeaderTitleContainerContent}`]: {
      overflow: "hidden",
      display: "flex",
      alignItems: "center"
    },
    [`& .${se["columnHeader--filledGroup"]} .${se.columnHeaderTitleContainer}`]: {
      borderBottomWidth: "1px",
      borderBottomStyle: "solid",
      boxSizing: "border-box"
    },
    [`& .${se.sortIcon}, & .${se.filterIcon}`]: {
      fontSize: "inherit"
    },
    [`& .${se["columnHeader--sortable"]}`]: {
      cursor: "pointer"
    },
    [`& .${se["columnHeader--alignCenter"]} .${se.columnHeaderTitleContainer}`]: {
      justifyContent: "center"
    },
    [`& .${se["columnHeader--alignRight"]} .${se.columnHeaderDraggableContainer}, & .${se["columnHeader--alignRight"]} .${se.columnHeaderTitleContainer}`]: {
      flexDirection: "row-reverse"
    },
    [`& .${se["columnHeader--alignCenter"]} .${se.menuIcon}`]: {
      marginLeft: "auto"
    },
    [`& .${se["columnHeader--alignRight"]} .${se.menuIcon}`]: {
      marginRight: "auto",
      marginLeft: -5
    },
    [`& .${se["columnHeader--moving"]}`]: {
      backgroundColor: (e.vars || e).palette.action.hover
    },
    [`& .${se["columnHeader--pinnedLeft"]}, & .${se["columnHeader--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 40,
      // Should be above the column separator
      background: "var(--DataGrid-pinnedBackground)"
    },
    [`& .${se.columnSeparator}`]: {
      position: "absolute",
      overflow: "hidden",
      zIndex: 30,
      display: "flex",
      flexDirection: "column",
      justifyContent: "center",
      alignItems: "center",
      color: r
    },
    [`& .${se.columnHeaders}`]: {
      width: "var(--DataGrid-rowWidth)"
    },
    "@media (hover: hover)": {
      [`& .${se.columnHeader}:hover`]: {
        [`& .${se.menuIcon}`]: {
          width: "auto",
          visibility: "visible"
        },
        [`& .${se.iconButtonContainer}`]: {
          visibility: "visible",
          width: "auto"
        }
      },
      [`& .${se.columnHeader}:not(.${se["columnHeader--sorted"]}):hover .${se.sortButton}`]: {
        opacity: 0.5
      }
    },
    "@media (hover: none)": {
      [`& .${se.columnHeader} .${se.menuIcon}`]: {
        width: "auto",
        visibility: "visible"
      },
      [`& .${se.columnHeader}:focus,
        & .${se["columnHeader--siblingFocused"]}`]: {
        [`.${se["columnSeparator--resizable"]}`]: {
          color: (e.vars || e).palette.primary.main
        }
      }
    },
    [`& .${se["columnSeparator--sideLeft"]}`]: {
    },
    [`& .${se["columnSeparator--sideRight"]}`]: {
    },
    [`& .${se["columnHeader--withRightBorder"]} .${se["columnSeparator--sideLeft"]}`]: {
    },
    [`& .${se["columnHeader--withRightBorder"]} .${se["columnSeparator--sideRight"]}`]: {
    },
    [`& .${se["columnSeparator--resizable"]}`]: {
      cursor: "col-resize",
      touchAction: "none",
      [`&.${se["columnSeparator--resizing"]}`]: {
        color: (e.vars || e).palette.primary.main
      },
      // Always appear as draggable on touch devices
      "@media (hover: none)": {
      },
      "@media (hover: hover)": {
        "&:hover": {
          color: (e.vars || e).palette.primary.main,
        }
      },
      "& svg": {
        pointerEvents: "none"
      }
    },
    [`& .${se.iconSeparator}`]: {
      color: "inherit",
      transition: e.transitions.create(["color", "width"], {
        duration: e.transitions.duration.shortest
      })
    },
    [`& .${se.menuIcon}`]: {
      width: 0,
      visibility: "hidden",
      fontSize: 20,
      marginRight: -5,
      display: "flex",
      alignItems: "center"
    },
    [`.${se.menuOpen}`]: {
      visibility: "visible",
      width: "auto"
    },
    [`& .${se.headerFilterRow}`]: {
      [`& .${se.columnHeader}`]: {
        boxSizing: "border-box",
        borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
      }
    },
    /* Bottom border of the top-container */
    [`& .${se["row--borderBottom"]} .${se.columnHeader},
      & .${se["row--borderBottom"]} .${se.filler},
      & .${se["row--borderBottom"]} .${se.scrollbarFiller}`]: {
      borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
    },
    [`& .${se["row--borderBottom"]} .${se.cell}`]: {
      borderBottom: "1px solid var(--rowBorderColor)"
    },
    /* Row styles */
    [`.${se.row}`]: {
      display: "flex",
      width: "var(--DataGrid-rowWidth)",
      breakInside: "avoid",
      // Avoid the row to be broken in two different print pages.
      "--rowBorderColor": "var(--DataGrid-rowBorderColor)",
      [`&.${se["row--firstVisible"]}`]: {
        "--rowBorderColor": "transparent"
      },
      "&:hover": {
        backgroundColor: (e.vars || e).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${se.rowSkeleton}:hover`]: {
        backgroundColor: "transparent"
      },
    },
    [`& .${se["container--top"]}, & .${se["container--bottom"]}`]: {
      "[role=row]": {
        background: "var(--DataGrid-containerBackground)"
      }
    },
    /* Cell styles */
    [`& .${se.cell}`]: {
      flex: "0 0 auto",
      height: "var(--height)",
      width: "var(--width)",
      lineHeight: "calc(var(--height) - 1px)",
      // -1px for the border
      boxSizing: "border-box",
      borderTop: "1px solid var(--rowBorderColor)",
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
    },
    [`& .${se["virtualScrollerContent--overflowed"]} .${se["row--lastVisible"]} .${se.cell}`]: {
      borderTopColor: "transparent"
    },
    [`& .${se["pinnedRows--top"]} :first-of-type`]: {
      [`& .${se.cell}, .${se.scrollbarFiller}`]: {
        borderTop: "none"
      }
    },
    [`&.${se["root--disableUserSelection"]}`]: {
      userSelect: "none"
    },
    [`& .${se["row--dynamicHeight"]} > .${se.cell}`]: {
      whiteSpace: "initial",
      lineHeight: "inherit"
    },
    [`& .${se.cellEmpty}`]: {
      flex: 1,
      padding: 0,
      height: "unset"
    },
    [`& .${se.cell}.${se["cell--selectionMode"]}`]: {
      cursor: "default"
    },
    [`& .${se.cell}.${se["cell--editing"]}`]: {
      padding: 1,
      display: "flex",
      boxShadow: e.shadows[2],
      backgroundColor: (e.vars || e).palette.background.paper,
      "&:focus-within": {
      }
    },
    [`& .${se["row--editing"]}`]: {
      boxShadow: e.shadows[2]
    },
    [`& .${se["row--editing"]} .${se.cell}`]: {
      boxShadow: e.shadows[0],
      backgroundColor: (e.vars || e).palette.background.paper
    },
    [`& .${se.editBooleanCell}`]: {
      display: "flex",
      height: "100%",
      width: "100%",
      alignItems: "center",
      justifyContent: "center"
    },
    [`& .${se.booleanCell}[data-value="true"]`]: {
      color: (e.vars || e).palette.text.secondary
    },
    [`& .${se.booleanCell}[data-value="false"]`]: {
      color: (e.vars || e).palette.text.disabled
    },
    [`& .${se.actionsCell}`]: {
      display: "inline-flex",
      alignItems: "center",
      gridGap: e.spacing(1)
    },
    [`& .${se.rowReorderCell}`]: {
      display: "inline-flex",
      flex: 1,
      alignItems: "center",
      justifyContent: "center",
      opacity: (e.vars || e).palette.action.disabledOpacity
    },
    [`& .${se["rowReorderCell--draggable"]}`]: {
      cursor: "move",
      opacity: 1
    },
    [`& .${se.rowReorderCellContainer}`]: {
      padding: 0,
      display: "flex",
      alignItems: "stretch"
    },
    [`.${se.withBorderColor}`]: {
      borderColor: r
    },
    [`& .${se["cell--withLeftBorder"]}, & .${se["columnHeader--withLeftBorder"]}`]: {
      borderLeftColor: "var(--DataGrid-rowBorderColor)",
      borderLeftWidth: "1px",
      borderLeftStyle: "solid"
    },
    [`& .${se["cell--withRightBorder"]}, & .${se["columnHeader--withRightBorder"]}`]: {
      borderRightColor: "var(--DataGrid-rowBorderColor)",
      borderRightWidth: "1px",
      borderRightStyle: "solid"
    },
    [`& .${se["cell--flex"]}`]: {
      display: "flex",
      alignItems: "center",
      lineHeight: "inherit"
    },
    [`& .${se["cell--textLeft"]}`]: {
      textAlign: "left",
      justifyContent: "flex-start"
    },
    [`& .${se["cell--textRight"]}`]: {
      textAlign: "right",
      justifyContent: "flex-end"
    },
    [`& .${se["cell--textCenter"]}`]: {
      textAlign: "center",
      justifyContent: "center"
    },
    [`& .${se["cell--pinnedLeft"]}, & .${se["cell--pinnedRight"]}`]: {
      position: "sticky",
      zIndex: 30,
      background: "var(--DataGrid-pinnedBackground)",
      "&.Mui-selected": {
        backgroundColor: I
      }
    },
    [`& .${se.virtualScrollerContent} .${se.row}`]: {
      "&.Mui-selected": M,
    },
    [`& .${se.cellOffsetLeft}`]: {
      flex: "0 0 auto",
      display: "inline-block"
    },
    [`& .${se.cellSkeleton}`]: {
      flex: "0 0 auto",
      height: "100%",
      display: "inline-flex",
      alignItems: "center"
    },
    [`& .${se.columnHeaderDraggableContainer}`]: {
      display: "flex",
      width: "100%",
      height: "100%"
    },
    [`& .${se.rowReorderCellPlaceholder}`]: {
      display: "none"
    },
    [`& .${se["columnHeader--dragging"]}, & .${se["row--dragging"]}`]: {
      background: (e.vars || e).palette.background.paper,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      opacity: (e.vars || e).palette.action.disabledOpacity
    },
    [`& .${se["row--dragging"]}`]: {
      background: (e.vars || e).palette.background.paper,
      padding: "0 12px",
      borderRadius: "var(--unstable_DataGrid-radius)",
      opacity: (e.vars || e).palette.action.disabledOpacity,
      [`& .${se.rowReorderCellPlaceholder}`]: {
        display: "flex"
      }
    },
    [`& .${se.treeDataGroupingCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${se.treeDataGroupingCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: e.spacing(2)
    },
    [`& .${se.treeDataGroupingCellLoadingContainer}, .${se.groupingCriteriaCellLoadingContainer}`]: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      height: "100%"
    },
    [`& .${se.groupingCriteriaCell}`]: {
      display: "flex",
      alignItems: "center",
      width: "100%"
    },
    [`& .${se.groupingCriteriaCellToggle}`]: {
      flex: "0 0 28px",
      alignSelf: "stretch",
      marginRight: e.spacing(2)
    },
    /* ScrollbarFiller styles */
    [`.${se.scrollbarFiller}`]: {
      minWidth: "calc(var(--DataGrid-hasScrollY) * var(--DataGrid-scrollbarSize))",
      alignSelf: "stretch",
      [`&.${se["scrollbarFiller--borderTop"]}`]: {
        borderTop: "1px solid var(--DataGrid-rowBorderColor)"
      },
      [`&.${se["scrollbarFiller--borderBottom"]}`]: {
        borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
      },
      [`&.${se["scrollbarFiller--pinnedRight"]}`]: {
        backgroundColor: "var(--DataGrid-pinnedBackground)",
        position: "sticky",
        right: 0
      }
    },
    [`& .${se.filler}`]: {
      flex: "1 0 auto"
    },
    [`& .${se["filler--borderBottom"]}`]: {
      borderBottom: "1px solid var(--DataGrid-rowBorderColor)"
    },
    /* Hide grid rows, row filler, and vertical scrollbar when skeleton overlay is visible */
    [`& .${se["main--hasSkeletonLoadingOverlay"]}`]: {
      [`& .${se.virtualScrollerContent}`]: {
        // We use visibility hidden so that the virtual scroller content retains its height.
        // Position fixed is used to remove the virtual scroller content from the flow.
        // https://github.com/mui/mui-x/issues/14061
        position: "fixed",
        visibility: "hidden"
      },
      [`& .${se["scrollbar--vertical"]}, & .${se.pinnedRows}, & .${se.virtualScroller} > .${se.filler}`]: {
        display: "none"
      }
    }
  });
});
    type: "rgb",
    values: c
  });
}
}
  var s, a;
  return /* @__PURE__ */ $.jsx(n.slots.panel, J({
    as: n.slots.basePopper,
    open: t.length > 0 && r.open,
    id: r.panelId,
    "aria-labelledby": r.labelId
  }, (s = n.slotProps) == null ? void 0 : s.panel, (a = n.slotProps) == null ? void 0 : a.basePopper, {
    children: o
  }));
}
  var t;
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
  });
}
  const {
    autoHeight: n,
    classes: r,
    showCellVerticalBorder: o
  } = e, s = {
    root: ["root", n && "autoHeight", `root--density${He(t)}`, e.slots.toolbar === null && "root--noToolbar", "withBorderColor", o && "withVerticalBorder"]
  };
    className: o,
    children: s
    E !== null && c.current.publishEvent("rootMount", E);
    className: et(C.root, o),
    ownerState: w
  }, a, {
      children: s
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["footerContainer", "withBorderColor"]
  name: "MuiDataGrid",
  slot: "FooterContainer",
  overridesResolver: (e, t) => t.footerContainer
})({
  display: "flex",
  justifyContent: "space-between",
  alignItems: "center",
  minHeight: 52,
  borderTop: "1px solid"
  const {
    className: r
    className: et(a.root, r),
    ownerState: s
  }, o, {
    ref: n
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["overlay"]
  name: "MuiDataGrid",
  slot: "Overlay",
  overridesResolver: (e, t) => t.overlay
})({
  width: "100%",
  height: "100%",
  display: "flex",
  alignSelf: "center",
  alignItems: "center",
  justifyContent: "center",
  backgroundColor: "var(--unstable_DataGrid-overlayBackground)"
  const {
    className: r
    className: et(a.root, r),
    ownerState: s
  }, o, {
    ref: n
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t,
    open: n
  } = e;
  return mt({
    root: ["menuIcon", n && "menuOpen"],
    button: ["menuIconButton"]
  var w, C;
  const {
    colDef: t,
    open: n,
    columnMenuId: r,
    columnMenuButtonId: o,
    iconButtonRef: s
    classes: c.classes
    T.preventDefault(), T.stopPropagation(), a.current.toggleColumnMenu(t.field);
  return /* @__PURE__ */ $.jsx("div", {
    children: /* @__PURE__ */ $.jsx(c.slots.baseTooltip, J({
      title: a.current.getLocaleText("columnMenuLabel"),
      enterDelay: 1e3
    }, (w = c.slotProps) == null ? void 0 : w.baseTooltip, {
      children: /* @__PURE__ */ $.jsx(c.slots.baseIconButton, J({
        ref: s,
        tabIndex: -1,
        size: "small",
        onClick: g,
        "aria-haspopup": "menu",
        "aria-expanded": n,
        "aria-controls": n ? r : void 0,
        id: o
      }, (C = c.slotProps) == null ? void 0 : C.baseIconButton, {
        children: /* @__PURE__ */ $.jsx(c.slots.columnMenuIcon, {
          fontSize: "inherit"
        })
      }))
    }))
  });
});
  columnMenuId: e,
  columnMenuButtonId: t,
  ContentComponent: n,
  contentComponentProps: r,
  field: o,
  open: s,
  target: a,
  onExited: c
}) {
  });
    open: s,
    target: a,
    onClose: g,
    onExited: c,
    children: /* @__PURE__ */ $.jsx(n, J({
      hideMenu: g,
      open: s,
      id: e,
      labelledby: t
    }, r))
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnMenuButtonId: u.string,
  columnMenuId: u.string,
  ContentComponent: u.elementType.isRequired,
  contentComponentProps: u.any,
  field: u.string.isRequired,
  onExited: u.func,
  open: u.bool.isRequired,
});
  return e.scrollHeight > e.clientHeight || e.scrollWidth > e.clientWidth;
}
  return e.closest(`.${t}`);
}
  return e.replace(/["\\]/g, "\\$&");
}
}
}
}
  id: t,
  field: n
}) {
  return e.querySelector(s);
}
  return (
    // The target is not an element when triggered by a Select inside the cell
    // See https://github.com/mui/material-ui/issues/10534
    e.target.nodeType === 1 && !e.currentTarget.contains(e.target)
  );
}
  return e.getAttribute("data-field");
}
}
  return e.getAttribute("data-fields").slice(2, -2).split("-|-");
}
}
  var a;
    throw new Error("MUI X: The root element is not found.");
  const r = e.getAttribute("aria-colindex");
  if (!r)
    return [];
  const o = Number(r) - 1, s = [];
    const f = c.getAttribute("data-id");
    if (!f)
      return;
    const g = t.unstable_getCellColSpanInfo(f, o);
  }), s) : [];
}
  return e.rootElementRef.current.querySelector(`.${se[t]}`);
}
  api: e,
  colIndex: t,
  position: n,
  filterFn: r
}) => {
  if (t === null)
    return [];
  const o = [];
    s.getAttribute("data-id") && s.querySelectorAll(`.${se[n === "left" ? "cell--pinnedLeft" : "cell--pinnedRight"]}`).forEach((c) => {
      f !== null && r(f) && o.push(c);
    });
  }), o;
};
    api: e,
    colIndex: r,
    position: n ? "right" : "left",
    filterFn: (o) => n ? o < r : o > r
  });
}
    api: e,
    colIndex: r,
    position: n ? "left" : "right",
    filterFn: (o) => n ? o > r : o < r
  });
}
  api: e,
  colIndex: t,
  position: n,
  filterFn: r
}) => {
  var s;
  if (!((s = e.columnHeadersContainerRef) != null && s.current))
    return [];
  if (t === null)
    return [];
  const o = [];
  return e.columnHeadersContainerRef.current.querySelectorAll(`.${se[n === "left" ? "columnHeader--pinnedLeft" : "columnHeader--pinnedRight"]}`).forEach((a) => {
    c !== null && r(c, a) && o.push(a);
  }), o;
};
    api: e,
    position: n ? "right" : "left",
    colIndex: r,
    filterFn: (o) => n ? o < r : o > r
  });
}
    api: e,
    position: n ? "left" : "right",
    colIndex: r,
    filterFn: (o, s) => s.classList.contains(se["columnHeader--last"]) ? !1 : n ? o > r : o < r
  });
}
}
  const n = e.virtualScrollerRef.current;
}
  return e.virtualScrollerRef.current.querySelectorAll(
    // Use > to ignore rows from nested Data Grids (for example in detail panel)
    `:scope > div > div > .${se.row}`
  );
}
  const t = e.getAttribute("aria-colindex");
  return t ? Number(t) - 1 : null;
}
  const {
    classes: t
  } = e;
  return mt({
    root: ["columnHeaderTitle"]
  name: "MuiDataGrid",
  slot: "ColumnHeaderTitle",
  overridesResolver: (e, t) => t.columnHeaderTitle
})({
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap",
  fontWeight: "var(--unstable_DataGrid-headWeight)",
  lineHeight: "normal"
  const {
    className: r
    className: et(a.root, r),
    ownerState: s
  }, o, {
    ref: n
  }));
});
  var f;
  const {
    label: t,
    description: n
    if (!n && (o != null && o.current)) {
    }
  }, [n, t]);
  return /* @__PURE__ */ $.jsx(r.slots.baseTooltip, J({
    title: n || s
  }, (f = r.slotProps) == null ? void 0 : f.baseTooltip, {
      onMouseOver: c,
      ref: o,
      children: t
    })
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnWidth: u.number.isRequired,
  description: u.node,
  label: u.string.isRequired
});
  return e.Left = "left", e.Right = "right", e;
  const {
    resizable: t,
    resizing: n,
    classes: r,
    side: o
  } = e, s = {
    root: ["columnSeparator", t && "columnSeparator--resizable", n && "columnSeparator--resizing", o && `columnSeparator--side${He(o)}`],
    icon: ["iconSeparator"]
  };
};
  const {
    height: t,
    side: n,
    classes: o.classes
    f.preventDefault(), f.stopPropagation();
  }, []);
  return (
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    /* @__PURE__ */ $.jsx("div", J({
      className: a.root,
      style: {
        minHeight: t
      }
    }, r, {
      onClick: c,
      children: /* @__PURE__ */ $.jsx(o.slots.columnResizeIcon, {
        className: a.icon
      })
    }))
  );
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  height: u.number.isRequired,
  resizable: u.bool.isRequired,
  resizing: u.bool.isRequired,
  side: u.oneOf(["left", "right"])
});
  const {
    classes: r,
    colIndex: o,
    height: s,
    isResizing: a,
    sortDirection: c,
    hasFocus: f,
    separatorSide: g,
    headerComponent: w,
    description: C,
    width: T,
    columnMenuIconButton: E = null,
    columnMenu: O = null,
    headerClassName: I,
    label: M,
    var G;
    if (f && !ee.open) {
      const X = q.current.querySelector('[tabindex="0"]') || q.current;
    }
    className: et(r.root, I),
      height: s,
      width: T
    }),
    role: "columnheader",
    "aria-colindex": o + 1,
    children: [/* @__PURE__ */ $.jsxs("div", J({
      className: r.draggableContainer,
      role: "presentation"
      children: [/* @__PURE__ */ $.jsxs("div", {
        className: r.titleContainer,
        role: "presentation",
        children: [/* @__PURE__ */ $.jsx("div", {
          className: r.titleContainerContent,
            label: M,
            description: C,
            columnWidth: T
          })
      }), E]
      resizing: a,
      height: s,
      side: g
  }));
  const {
    colDef: t,
    classes: n,
    isDragging: r,
    sortDirection: o,
    showRightBorder: s,
    showLeftBorder: a,
    filterItemsCounter: c,
    pinnedPosition: f,
    isSiblingFocused: g
    root: [
      "columnHeader",
      t.headerAlign === "left" && "columnHeader--alignLeft",
      t.headerAlign === "center" && "columnHeader--alignCenter",
      t.headerAlign === "right" && "columnHeader--alignRight",
      t.sortable && "columnHeader--sortable",
      r && "columnHeader--moving",
      w && "columnHeader--filtered",
      C && "columnHeader--numeric",
      "withBorderColor",
      s && "columnHeader--withRightBorder",
      a && "columnHeader--withLeftBorder",
      // TODO: Remove classes below and restore `:has` selectors when they are supported in jsdom
      // See https://github.com/mui/mui-x/pull/14559
      g && "columnHeader--siblingFocused"
    ],
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
};
  var pe, be, we;
  const {
    colDef: t,
    columnMenuOpen: n,
    colIndex: r,
    headerHeight: o,
    isResizing: s,
    isLast: a,
    sortDirection: c,
    sortIndex: f,
    hasFocus: g,
    disableReorder: w,
    separatorSide: C,
    showLeftBorder: T,
    showRightBorder: E,
    pinnedPosition: O,
    classes: M.classes,
    showRightBorder: E,
    showLeftBorder: T
    onClick: G("columnHeaderClick"),
    onContextMenu: G("columnHeaderContextMenu"),
    onDoubleClick: G("columnHeaderDoubleClick"),
    onMouseOver: G("columnHeaderOver"),
    // TODO remove as it's not used
    onMouseOut: G("columnHeaderOut"),
    // TODO remove as it's not used
    onMouseEnter: G("columnHeaderEnter"),
    // TODO remove as it's not used
    onMouseLeave: G("columnHeaderLeave"),
    // TODO remove as it's not used
    onKeyDown: G("columnHeaderKeyDown"),
    onFocus: G("columnHeaderFocus"),
    onBlur: G("columnHeaderBlur")
  }), [G]), X = x.useMemo(() => q ? {
    onDragStart: G("columnHeaderDragStart"),
    onDragEnter: G("columnHeaderDragEnter"),
    onDragOver: G("columnHeaderDragOver"),
    onDragEnd: G("columnHeaderDragEnd")
  } : {}, [q, G]), te = x.useMemo(() => ({
    onMouseDown: G("columnSeparatorMouseDown"),
    onDoubleClick: G("columnSeparatorDoubleClick")
  }), [G]);
  x.useEffect(() => {
  const re = x.useCallback(() => {
    colDef: t,
    field: t.field,
    open: n,
    ContentComponent: M.slots.columnMenu,
    contentComponentProps: (pe = M.slotProps) == null ? void 0 : pe.columnMenu,
    onExited: re
  }), ie = t.sortingOrder ?? M.sortingOrder, de = (t.sortable || c != null) && !t.hideSortIcons && !M.disableColumnSorting, ue = /* @__PURE__ */ $.jsxs(x.Fragment, {
    children: [!M.disableColumnFilter && /* @__PURE__ */ $.jsx(M.slots.columnHeaderFilterIconButton, J({
      field: t.field,
    }, (be = M.slotProps) == null ? void 0 : be.columnHeaderFilterIconButton)), de && /* @__PURE__ */ $.jsx(M.slots.columnHeaderSortIcon, J({
      field: t.field,
      direction: c,
      index: f,
      sortingOrder: ie,
      disabled: !t.sortable
    }, (we = M.slotProps) == null ? void 0 : we.columnHeaderSortIcon))]
  });
  x.useLayoutEffect(() => {
    var ce;
    const _e = I.current.state.columnMenu;
    if (g && !_e.open) {
      Ne == null || Ne.focus(), (ce = I.current.columnHeadersContainerRef) != null && ce.current && (I.current.columnHeadersContainerRef.current.scrollLeft = 0);
    }
  }, [I, g]);
  const he = typeof t.headerClassName == "function" ? t.headerClassName({
    field: t.field,
    colDef: t
    classes: ee,
    columnMenuOpen: n,
    colIndex: r,
    height: o,
    isResizing: s,
    sortDirection: c,
    hasFocus: g,
    separatorSide: C,
    isDraggable: q,
    description: t.description,
    elementId: t.field,
    width: t.computedWidth,
    columnMenuIconButton: Q,
    columnTitleIconButtons: ue,
    headerClassName: et(he, a && se["columnHeader--last"]),
    label: ge,
    resizable: !M.disableColumnResize && !!t.resizable,
    "data-field": t.field,
    draggableContainerProps: X,
    columnHeaderSeparatorProps: te,
    style: fe
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  colIndex: u.number.isRequired,
  columnMenuOpen: u.bool.isRequired,
  disableReorder: u.bool,
  filterItemsCounter: u.number,
  hasFocus: u.bool,
  headerHeight: u.number.isRequired,
  isDragging: u.bool.isRequired,
  isLast: u.bool.isRequired,
  isLastUnpinned: u.bool.isRequired,
  isResizing: u.bool.isRequired,
  isSiblingFocused: u.bool.isRequired,
  pinnedOffset: u.number,
  pinnedPosition: u.oneOf([0, 1, 2, 3]),
  separatorSide: u.oneOf(["left", "right"]),
  showLeftBorder: u.bool.isRequired,
  showRightBorder: u.bool.isRequired,
  sortDirection: u.oneOf(["asc", "desc"]),
  sortIndex: u.number,
  style: u.object,
  tabIndex: u.oneOf([-1, 0]).isRequired
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["iconButtonContainer"]
  name: "MuiDataGrid",
  slot: "IconButtonContainer",
  overridesResolver: (e, t) => t.iconButtonContainer
})(() => ({
  display: "flex",
  visibility: "hidden",
  width: 0
  const {
    className: r
    className: et(a.root, r),
    ownerState: s
  }, o, {
    ref: n
  }));
  const {
    classes: t
  } = e;
  return mt({
    root: ["sortButton"],
    icon: ["sortIcon"]
};
  let o;
  const s = {};
  return t === "asc" ? o = e.columnSortedAscendingIcon : t === "desc" ? o = e.columnSortedDescendingIcon : (o = e.columnUnsortedIcon, s.sortingOrder = r), o ? /* @__PURE__ */ $.jsx(o, J({
    fontSize: "small",
    className: n
  }, s)) : null;
}
  var C;
  const {
    direction: t,
    index: n,
    sortingOrder: r,
    disabled: o,
    className: s
    classes: f.classes
    return null;
  const w = /* @__PURE__ */ $.jsx(f.slots.baseIconButton, J({
    tabIndex: -1,
    "aria-label": c.current.getLocaleText("columnHeaderSortIconLabel"),
    title: c.current.getLocaleText("columnHeaderSortIconLabel"),
    size: "small",
    disabled: o,
    className: et(g.root, s)
  }, (C = f.slotProps) == null ? void 0 : C.baseIconButton, a, {
  }));
    children: [n != null && /* @__PURE__ */ $.jsx(f.slots.baseBadge, {
      badgeContent: n,
      color: "default",
      overlap: "circular",
      children: w
    }), n == null && w]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  className: u.string,
  direction: u.oneOf(["asc", "desc"]),
  disabled: u.bool,
  field: u.string.isRequired,
  index: u.number,
  sortingOrder: u.arrayOf(u.oneOf(["asc", "desc"])).isRequired
});
  const {
    classes: t
  } = e;
  return mt({
    icon: ["filterIcon"]
};
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  counter: u.number,
  field: u.string.isRequired,
  onClick: u.func
});
  var C, T;
  const {
    counter: t,
    field: n,
    onClick: r
    classes: s.classes
    E.preventDefault(), E.stopPropagation();
    const {
      open: O,
  }, [o, n, r, g, f]);
  if (!t)
    return null;
  const w = /* @__PURE__ */ $.jsx(s.slots.baseIconButton, J({
    id: f,
    color: "default",
    "aria-label": o.current.getLocaleText("columnHeaderFiltersLabel"),
    size: "small",
    tabIndex: -1,
    "aria-haspopup": "menu",
  }, (C = s.slotProps) == null ? void 0 : C.baseIconButton, {
    children: /* @__PURE__ */ $.jsx(s.slots.columnFilteredIcon, {
      className: c.icon,
      fontSize: "small"
    })
  }));
  return /* @__PURE__ */ $.jsx(s.slots.baseTooltip, J({
    title: o.current.getLocaleText("columnHeaderFiltersTooltipActive")(t),
    enterDelay: 1e3
  }, (T = s.slotProps) == null ? void 0 : T.baseTooltip, {
      children: [t > 1 && /* @__PURE__ */ $.jsx(s.slots.baseBadge, {
        badgeContent: t,
        color: "default",
        children: w
      }), t === 1 && w]
    })
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  counter: u.number,
  field: u.string.isRequired,
  onClick: u.func
});
  d: "M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  d: "M8.59 16.59 13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
  d: "M10 18h4v-2h-4v2zM3 6v2h18V6H3zm3 7h12v-2H6v2z"
  d: "M4.25 5.61C6.27 8.2 10 13 10 13v6c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-6s3.72-4.8 5.74-7.39c.51-.66.04-1.61-.79-1.61H5.04c-.83 0-1.3.95-.79 1.61z"
  d: "M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"
}), "Search");
  d: "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"
}), "Menu");
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckCircle");
  d: "M6 5H3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm14 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1zm-7 0h-3c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h3c.55 0 1-.45 1-1V6c0-.55-.45-1-1-1z"
  width: "1",
  height: "24",
  x: "11.5",
  rx: "0.5"
  d: "M4 15h16v-2H4v2zm0 4h16v-2H4v2zm0-8h16V9H4v2zm0-6v2h16V5H4z"
  d: "M21,8H3V4h18V8z M21,10H3v4h18V10z M21,16H3v4h18V16z"
  d: "M4 18h17v-6H4v6zM4 5v6h17V5H4z"
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  d: "M19 13H5v-2h14v2z"
  d: "M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.01-.25 1.97-.7 2.8l1.46 1.46C19.54 15.03 20 13.57 20 12c0-4.42-3.58-8-8-8zm0 14c-3.31 0-6-2.69-6-6 0-1.01.25-1.97.7-2.8L5.24 7.74C4.46 8.97 4 10.43 4 12c0 4.42 3.58 8 8 8v3l4-4-4-4v3z"
  d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  d: "M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z"
  d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"
  d: "M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
  children: /* @__PURE__ */ $.jsx("path", {
    d: "M14.67,5v14H9.33V5H14.67z M15.67,19H21V5h-5.33V19z M8.33,19V5H3v14H8.33z"
  })
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Clear");
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");
  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z"
}), "Delete");
  return e.key.length === 1 && !e.ctrlKey && !e.metaKey;
}
  return (e.ctrlKey || e.metaKey) && // We can't use event.code === 'KeyV' as event.code assumes a QWERTY keyboard layout,
  // for example, it would be another letter on a Dvorak physical keyboard.
  // We can't use event.key === 'v' as event.key is not stable with key modifiers and keyboard layouts,
  // for example, it would be ה on a Hebrew keyboard layout.
  // https://github.com/w3c/uievents/issues/377 could be a long-term solution
  String.fromCharCode(e.keyCode) === "V" && !e.shiftKey && !e.altKey;
}
  return (e.ctrlKey || e.metaKey) && String.fromCharCode(e.keyCode) === "C" && !e.shiftKey && !e.altKey;
}
  minWidth: 248
  const {
    hideMenu: r,
    id: o,
    labelledby: s,
    className: a,
    children: c,
    open: f
  }, [r]);
    id: o,
    className: et(se.menuList, a),
    "aria-labelledby": s,
    onKeyDown: g,
    autoFocus: f
    ref: n,
    children: c
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  hideMenu: u.func.isRequired,
  id: u.string,
  labelledby: u.string,
  open: u.bool.isRequired
});
    defaultSlots: r,
    defaultSlotProps: o,
    slots: s = {},
    slotProps: a = {},
    hideMenu: c,
    colDef: f,
    if (!a || Object.keys(a).length === 0)
      return o;
    const T = J({}, a);
    return Object.entries(o).forEach(([E, O]) => {
      T[E] = J({}, O, a[E] || {});
    }), T;
  }, [o, a]), w = t.current.unstable_applyPipeProcessors("columnMenu", [], e.colDef), C = x.useMemo(() => {
    const T = Object.keys(r);
    return Object.keys(s).filter((E) => !T.includes(E));
  }, [s, r]);
  return x.useMemo(() => {
    });
        colDef: f,
        onClick: c
      };
      }
    }, []);
};
  const {
    colDef: t,
    onClick: n
  }, [r, t.field, n, c]);
    onClick: f,
    disabled: c,
      children: /* @__PURE__ */ $.jsx(o.slots.columnMenuHideIcon, {
        fontSize: "small"
      })
      children: r.current.getLocaleText("columnMenuHideColumn")
    })]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  onClick: u.func.isRequired
});
  const {
    onClick: t
  }, [n, t]);
    onClick: o,
      children: /* @__PURE__ */ $.jsx(r.slots.columnMenuManageColumnsIcon, {
        fontSize: "small"
      })
      children: n.current.getLocaleText("columnMenuManageColumns")
    })]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  onClick: u.func.isRequired
});
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  onClick: u.func.isRequired
});
  const {
    colDef: t,
    onClick: n
    n(a), r.current.showFilterPanel(t.field);
  }, [r, t.field, n]);
    onClick: s,
      children: /* @__PURE__ */ $.jsx(o.slots.columnMenuFilterIcon, {
        fontSize: "small"
      })
      children: r.current.getLocaleText("columnMenuFilter")
    })]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  onClick: u.func.isRequired
});
  const {
    colDef: t,
    onClick: n
    if (!t)
      return null;
    return g == null ? void 0 : g.sort;
  }, [t, o]), c = t.sortingOrder ?? s.sortingOrder, f = x.useCallback((g) => {
    n(g);
  }, [r, t, n, a]);
  if (s.disableColumnSorting || !t || !t.sortable || !c.some((g) => !!g))
    return null;
  };
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      onClick: f,
      "data-value": "asc",
        children: /* @__PURE__ */ $.jsx(s.slots.columnMenuSortAscendingIcon, {
          fontSize: "small"
        })
      })]
      onClick: f,
      "data-value": "desc",
        children: /* @__PURE__ */ $.jsx(s.slots.columnMenuSortDescendingIcon, {
          fontSize: "small"
        })
      })]
      onClick: f,
        children: r.current.getLocaleText("columnMenuUnsort")
      })]
    }) : null]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  onClick: u.func.isRequired
});
  columnMenuSortItem: {
    displayOrder: 10
  },
  columnMenuFilterItem: {
    displayOrder: 20
  },
  columnMenuColumnsItem: {
    displayOrder: 30
  }
  const {
    defaultSlots: r,
    defaultSlotProps: o,
    slots: s,
    slotProps: a
    defaultSlots: r,
    defaultSlotProps: o,
    slots: s,
    slotProps: a
  }));
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  /**
   * Initial `slotProps` - it is internal, to be overrriden by Pro or Premium packages
   * @ignore - do not document.
   */
  defaultSlotProps: u.object.isRequired,
  /**
   * Initial `slots` - it is internal, to be overrriden by Pro or Premium packages
   * @ignore - do not document.
   */
  defaultSlots: u.object.isRequired,
  hideMenu: u.func.isRequired,
  id: u.string,
  labelledby: u.string,
  open: u.bool.isRequired,
  /**
   * Could be used to pass new props or override props specific to a column menu component
   * e.g. `displayOrder`
   */
  slotProps: u.object,
  /**
   * `slots` could be used to add new and (or) override default column menu items
   * If you register a nee component you must pass it's `displayOrder` in `slotProps`
   * or it will be placed in the end of the list
   */
  slots: u.object
});
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  colDef: u.object.isRequired,
  hideMenu: u.func.isRequired,
  id: u.string,
  labelledby: u.string,
  open: u.bool.isRequired,
  /**
   * Could be used to pass new props or override props specific to a column menu component
   * e.g. `displayOrder`
   */
  slotProps: u.object,
  /**
   * `slots` could be used to add new and (or) override default column menu items
   * If you register a nee component you must pass it's `displayOrder` in `slotProps`
   * or it will be placed in the end of the list
   */
  slots: u.object
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["panelWrapper"]
  name: "MuiDataGrid",
  slot: "PanelWrapper",
  overridesResolver: (e, t) => t.panelWrapper
})({
  display: "flex",
  flexDirection: "column",
  flex: 1,
  "&:focus": {
    outline: 0
  }
  const {
    className: r,
    slotProps: o = {}
    open: !0,
    disableEnforceFocus: !0,
  }, o.TrapFocus, {
      tabIndex: -1,
      className: et(c.root, r),
      ownerState: a
    }, s, {
      ref: n
    }))
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  slotProps: u.object
});
  var n;
    children: /* @__PURE__ */ $.jsx(t.slots.columnsManagement, J({}, (n = t.slotProps) == null ? void 0 : n.columnsManagement))
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  slotProps: u.object
});
  name: "MuiDataGrid",
  slot: "Panel",
  overridesResolver: (e, t) => t.panel
})(({
  theme: e
}) => ({
  zIndex: e.zIndex.modal
  name: "MuiDataGrid",
  slot: "Paper",
  overridesResolver: (e, t) => t.paper
})(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  minWidth: 300,
  maxHeight: 450,
  display: "flex",
  maxWidth: `calc(100vw - ${e.spacing(0.5)})`,
  overflow: "auto"
  const {
    children: n,
    className: r
    s.current.hidePreferences();
    E.key === "Escape" && s.current.hidePreferences();
  }, [s]), w = x.useMemo(() => [{
    name: "flip",
    enabled: !0,
    options: {
      rootBoundary: "document"
    }
  }, {
    name: "isPlaced",
    enabled: !0,
    phase: "main",
    fn: () => {
    },
    effect: () => () => {
    }
  }], []), [C, T] = x.useState(null);
  return x.useEffect(() => {
    E && T(E);
    placement: "bottom-start",
    className: et(c.panel, r),
    ownerState: a,
    anchorEl: C,
    modifiers: w
  }, o, {
    ref: t,
      mouseEvent: "onPointerUp",
      touchEvent: !1,
      onClickAway: g,
        className: c.paper,
        ownerState: a,
        elevation: 8,
        children: f && n
      })
    })
  })) : null;
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Popper render function or node.
   */
  children: u.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * If `true`, the component is shown.
   */
  open: u.bool.isRequired,
  ownerState: u.object
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["panelContent"]
  name: "MuiDataGrid",
  slot: "PanelContent",
  overridesResolver: (e, t) => t.panelContent
})({
  display: "flex",
  flexDirection: "column",
  overflow: "auto",
  flex: "1 1",
  maxHeight: 400
});
  const {
    className: t
    className: et(o.root, t),
    ownerState: r
  }, n));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["panelFooter"]
  name: "MuiDataGrid",
  slot: "PanelFooter",
  overridesResolver: (e, t) => t.panelFooter
})(({
  theme: e
}) => ({
  padding: e.spacing(0.5),
  display: "flex",
  justifyContent: "space-between"
}));
  const {
    className: t
    className: et(o.root, t),
    ownerState: r
  }, n));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["filterForm"],
    deleteIcon: ["filterFormDeleteIcon"],
    logicOperatorInput: ["filterFormLogicOperatorInput"],
    columnInput: ["filterFormColumnInput"],
    operatorInput: ["filterFormOperatorInput"],
    valueInput: ["filterFormValueInput"]
  name: "MuiDataGrid",
  slot: "FilterForm",
  overridesResolver: (e, t) => t.filterForm
})(({
  theme: e
}) => ({
  display: "flex",
  padding: e.spacing(1)
  name: "MuiDataGrid",
  slot: "FilterFormDeleteIcon",
  overridesResolver: (e, t) => t.filterFormDeleteIcon
})(({
  theme: e
}) => ({
  flexShrink: 0,
  justifyContent: "flex-end",
  marginRight: e.spacing(0.5),
  marginBottom: e.spacing(0.2)
  name: "MuiDataGrid",
  slot: "FilterFormLogicOperatorInput",
  overridesResolver: (e, t) => t.filterFormLogicOperatorInput
})({
  minWidth: 55,
  marginRight: 5,
  justifyContent: "end"
  name: "MuiDataGrid",
  slot: "FilterFormColumnInput",
  overridesResolver: (e, t) => t.filterFormColumnInput
})({
  width: 150
  name: "MuiDataGrid",
  slot: "FilterFormOperatorInput",
  overridesResolver: (e, t) => t.filterFormOperatorInput
})({
  width: 150
  name: "MuiDataGrid",
  slot: "FilterFormValueInput",
  overridesResolver: (e, t) => t.filterFormValueInput
})({
  width: 190
  switch (e) {
      return "filterPanelOperatorAnd";
      return "filterPanelOperatorOr";
    default:
      throw new Error("MUI X: Invalid `logicOperator` property in the `GridFilterPanel`.");
  }
  const {
    item: r,
    hasMultipleFilters: o,
    deleteFilter: s,
    applyFilterChanges: a,
    showMultiFilterOperators: c,
    disableMultiFilterOperator: f,
    focusElementRef: g,
    columnsSort: w,
    filterColumns: C,
    deleteIconProps: T = {},
    logicOperatorInputProps: E = {},
    operatorInputProps: O = {},
    valueInputProps: I = {},
    readOnly: M
    InputComponentProps: ue
    filteredColumns: ge,
    selectedField: fe
  } = x.useMemo(() => {
    let ut = r.field;
    if (Et)
      return {
        filteredColumns: [Et],
        selectedField: ut
      };
    if (C === void 0 || typeof C != "function")
      return {
        selectedField: ut
      };
    const Tt = C({
      field: r.field,
    });
    return {
        const vt = Tt.includes(At.field);
        return At.field === r.field && !vt && (ut = void 0), vt;
      }),
      selectedField: ut
    };
    switch (w) {
      case "asc":
      case "desc":
      default:
        return ge;
    }
    var ut;
    return !r.operator || !be ? null : (ut = be.filterOperators) == null ? void 0 : ut.find((Et) => Et.value === r.operator);
  }, [r, be]), _e = x.useCallback((ut) => {
    if (Tt.field === be.field)
      return;
    const At = Tt.filterOperators.find((Oe) => Oe.value === r.operator) || Tt.filterOperators[0];
    let Xe = !At.InputComponent || At.InputComponent !== (we == null ? void 0 : we.InputComponent) || Tt.type !== be.type ? void 0 : r.value;
    if (Tt.type === "singleSelect" && Xe !== void 0) {
      Array.isArray(Xe) ? Xe = Xe.filter((pt) => (
        // Only keep values that are in the new value options
    }
    a(J({}, r, {
      field: Et,
      operator: At.value,
      value: Xe
    }));
    const Et = ut.target.value, Tt = be == null ? void 0 : be.filterOperators.find((vt) => vt.value === Et), At = !(Tt != null && Tt.InputComponent) || (Tt == null ? void 0 : Tt.InputComponent) !== (we == null ? void 0 : we.InputComponent);
    a(J({}, r, {
      operator: Et,
      value: At ? void 0 : r.value
    }));
  }, [a, r, be, we]), Ce = x.useCallback((ut) => {
    s(r);
  };
  return x.useImperativeHandle(g, () => ({
    focus: () => {
      var ut;
    }
    className: ee.root,
    "data-id": r.id,
    ref: n,
      variant: "standard",
    }, re, T, {
      className: et(ee.deleteIcon, re.className, T.className),
        onClick: Ne,
        size: "small",
        disabled: M
          fontSize: "small"
        })
      }))
      variant: "standard",
    }, re, E, {
      sx: [te ? {
        display: "flex"
      } : {
        display: "none"
      }, c ? {
        visibility: "visible"
      } : {
        visibility: "hidden"
      }, re.sx, E.sx],
      className: et(ee.logicOperatorInput, re.className, E.className),
        inputProps: {
        },
        value: X ?? "",
        onChange: Ce,
          key: ut.toString(),
          value: ut.toString()
      }))
      variant: "standard",
        value: fe ?? "",
        onChange: _e,
        disabled: M
          key: ut.field,
          value: ut.field
      }))]
      variant: "standard",
    }, re, O, {
      className: et(ee.operatorInput, re.className, O.className),
        htmlFor: q,
        id: q,
        value: r.operator,
        onChange: ce,
        disabled: M
          key: ut.value,
          value: ut.value
      }))]
      variant: "standard",
    }, re, he, {
      className: et(ee.valueInput, re.className, he.className),
      children: we != null && we.InputComponent ? /* @__PURE__ */ $.jsx(we.InputComponent, J({
        item: r,
        applyValue: a,
        focusElementRef: G,
        disabled: M
      }, we.InputComponentProps, ue), r.field) : null
    }))]
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback called when the operator, column field or value is changed.
   * @param {GridFilterItem} item The updated [[GridFilterItem]].
   */
  applyFilterChanges: u.func.isRequired,
  /**
   * Callback called when the logic operator is changed.
   * @param {GridLogicOperator} operator The new logic operator.
   */
  applyMultiFilterOperatorChanges: u.func.isRequired,
  /**
   * @ignore - do not document.
   */
  children: u.node,
  /**
   * Props passed to the column input component.
   * @default {}
   */
  columnInputProps: u.any,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: u.oneOf(["asc", "desc"]),
  /**
   * Callback called when the delete button is clicked.
   * @param {GridFilterItem} item The deleted [[GridFilterItem]].
   */
  deleteFilter: u.func.isRequired,
  /**
   * Props passed to the delete icon.
   * @default {}
   */
  deleteIconProps: u.any,
  /**
   * If `true`, disables the logic operator field but still renders it.
   */
  disableMultiFilterOperator: u.bool,
  /**
   * Allows to filter the columns displayed in the filter form.
   * @param {FilterColumnsArgs} args The columns of the grid and name of field.
   * @returns {GridColDef['field'][]} The filtered fields array.
   */
  filterColumns: u.func,
  /**
   * A ref allowing to set imperative focus.
   * It can be passed to the el
   */
  focusElementRef: u.oneOfType([u.func, u.object]),
  /**
   * If `true`, the logic operator field is rendered.
   * The field will be invisible if `showMultiFilterOperators` is also `true`.
   */
  hasMultipleFilters: u.bool.isRequired,
  /**
   * The [[GridFilterItem]] representing this form.
   */
  item: u.shape({
    field: u.string.isRequired,
    id: u.oneOfType([u.number, u.string]),
    operator: u.string.isRequired,
    value: u.any
  }).isRequired,
  /**
   * Props passed to the logic operator input component.
   * @default {}
   */
  logicOperatorInputProps: u.any,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: u.arrayOf(u.oneOf(["and", "or"]).isRequired),
  /**
   * Props passed to the operator input component.
   * @default {}
   */
  operatorInputProps: u.any,
  /**
   * `true` if the filter is disabled/read only.
   * i.e. `colDef.fiterable = false` but passed in `filterModel`
   * @default false
   */
  readOnly: u.bool,
  /**
   * If `true`, the logic operator field is visible.
   */
  showMultiFilterOperators: u.bool,
  /**
   * Props passed to the value input component.
   * @default {}
   */
  valueInputProps: u.any
});
  field: e.field,
  operator: e.filterOperators[0].value,
  id: Math.round(Math.random() * 1e5)
    filterFormProps: w,
    getColumnForNewFilter: C,
    disableAddFilterButton: T = !1,
    disableRemoveAllButton: E = !1
    r.current.setFilterLogicOperator(ee);
  }, [r]), M = x.useCallback(() => {
    let ee;
    if (C && typeof C == "function") {
      const G = C({
        currentFilters: (s == null ? void 0 : s.items) || [],
        columns: a
      });
      if (G === null)
        return null;
      ee = a.find(({
    } else
      ee = a.find((G) => {
      });
    if (C === void 0 || typeof C != "function")
      return M();
    const ee = s.items.length ? s.items : [M()].filter(Boolean), G = C({
      currentFilters: ee,
      columns: a
    });
    if (G === null)
      return null;
      field: X
    }) => X === G);
    readOnlyFilters: [],
    validFilters: []
    r.current.deleteFilterItem(ee), G && r.current.hideFilterPanel();
  return x.useEffect(() => {
    g.length > 0 && s.logicOperator && !g.includes(s.logicOperator) && I(g[0]);
  }, [g, I, s.logicOperator]), x.useEffect(() => {
    ref: n,
        item: ee,
        showMultiFilterOperators: G > 0,
        disableMultiFilterOperator: G !== 1,
        applyMultiFilterOperatorChanges: I,
        focusElementRef: null,
        readOnly: !0,
        logicOperators: g,
        item: ee,
        applyMultiFilterOperatorChanges: I,
        logicOperators: g,
      children: [T ? /* @__PURE__ */ $.jsx("span", {}) : /* @__PURE__ */ $.jsx(o.slots.baseButton, J({
        startIcon: /* @__PURE__ */ $.jsx(o.slots.filterPanelAddIcon, {})
        children: r.current.getLocaleText("filterPanelAddFilter")
        onClick: q,
        startIcon: /* @__PURE__ */ $.jsx(o.slots.filterPanelRemoveAllIcon, {})
        children: r.current.getLocaleText("filterPanelRemoveAll")
      })) : null]
    }) : null]
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * @ignore - do not document.
   */
  children: u.node,
  /**
   * Changes how the options in the columns selector should be ordered.
   * If not specified, the order is derived from the `columns` prop.
   */
  columnsSort: u.oneOf(["asc", "desc"]),
  /**
   * If `true`, the `Add filter` button will not be displayed.
   * @default false
   */
  disableAddFilterButton: u.bool,
  /**
   * If `true`, the `Remove all` button will be disabled
   * @default false
   */
  disableRemoveAllButton: u.bool,
  /**
   * Props passed to each filter form.
   */
  filterFormProps: u.shape({
    columnInputProps: u.any,
    columnsSort: u.oneOf(["asc", "desc"]),
    deleteIconProps: u.any,
    filterColumns: u.func,
    logicOperatorInputProps: u.any,
    operatorInputProps: u.any,
    valueInputProps: u.any
  }),
  /**
   * Function that returns the next filter item to be picked as default filter.
   * @param {GetColumnForNewFilterArgs} args Currently configured filters and columns.
   * @returns {GridColDef['field']} The field to be used for the next filter or `null` to prevent adding a filter.
   */
  getColumnForNewFilter: u.func,
  /**
   * Sets the available logic operators.
   * @default [GridLogicOperator.And, GridLogicOperator.Or]
   */
  logicOperators: u.arrayOf(u.oneOf(["and", "or"]).isRequired),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  const n = new Set(Object.keys(e).filter((s) => e[s] === !1)), r = new Set(Object.keys(t).filter((s) => t[s] === !1));
  if (n.size !== r.size)
    return !1;
  let o = !0;
  return n.forEach((s) => {
    r.has(s) || (o = !1);
  }), o;
  const {
    classes: t
  } = e;
  return mt({
    root: ["columnsManagement"],
    header: ["columnsManagementHeader"],
    searchInput: ["columnsManagementSearchInput"],
    footer: ["columnsManagementFooter"],
    row: ["columnsManagementRow"]
    sort: g,
    autoFocusSearchField: w = !0,
    disableShowHideToggle: C = !1,
    disableResetButton: T = !1,
    toggleAllMode: E = "all",
    getTogglableColumns: O,
    switch (g) {
      case "asc":
      case "desc":
      default:
        return r;
    }
    const {
      name: Q
    } = re.target;
    t.current.setColumnVisibility(Q, s[Q] === !1);
    const re = O ? O(M) : null, Q = re ? M.filter(({
    f(re.target.value);
  x.useEffect(() => {
    w ? n.current.focus() : q.current && typeof q.current.focus == "function" && q.current.focus();
  }, [w]);
    f(""), n.current.focus();
  }, []);
  return /* @__PURE__ */ $.jsxs(x.Fragment, {
      ownerState: a,
        as: a.slots.baseTextField,
        ownerState: a,
        placeholder: t.current.getLocaleText("columnsManagementSearchTitle"),
        inputRef: n,
        value: c,
        variant: "outlined",
        size: "small",
        type: "search",
        InputProps: {
          startAdornment: /* @__PURE__ */ $.jsx(a.slots.baseInputAdornment, {
            position: "start",
            children: /* @__PURE__ */ $.jsx(a.slots.quickFilterIcon, {})
          }),
          endAdornment: /* @__PURE__ */ $.jsx(a.slots.baseIconButton, J({
            "aria-label": t.current.getLocaleText("columnsManagementDeleteIconLabel"),
            size: "small",
            sx: [c ? {
              visibility: "visible"
            } : {
              visibility: "hidden"
            }],
            tabIndex: -1,
            onClick: ee
          }, (G = a.slotProps) == null ? void 0 : G.baseIconButton, {
            children: /* @__PURE__ */ $.jsx(a.slots.quickFilterClearIcon, {
              fontSize: "small"
            })
          }))
        },
        inputProps: {
          "aria-label": t.current.getLocaleText("columnsManagementSearchTitle")
        },
        autoComplete: "off",
        fullWidth: !0
      ownerState: a,
        var Q;
          control: /* @__PURE__ */ $.jsx(a.slots.baseCheckbox, J({
            disabled: re.hideable === !1,
            checked: s[re.field] !== !1,
            name: re.field,
            sx: {
              p: 0.5
            },
          }, (Q = a.slotProps) == null ? void 0 : Q.baseCheckbox)),
          label: re.headerName || re.field
        }, re.field);
        ownerState: a,
        children: t.current.getLocaleText("columnsManagementNoColumns")
      })]
      ownerState: a,
        control: /* @__PURE__ */ $.jsx(a.slots.baseCheckbox, J({
          name: t.current.getLocaleText("columnsManagementShowHideAllText"),
          sx: {
            p: 0.5
          }
        }, (X = a.slotProps) == null ? void 0 : X.baseCheckbox)),
        label: t.current.getLocaleText("columnsManagementShowHideAllText")
      }), T ? null : /* @__PURE__ */ $.jsx(a.slots.baseButton, J({
        onClick: () => t.current.setColumnVisibilityModel(o),
        disabled: I
      }, (te = a.slotProps) == null ? void 0 : te.baseButton, {
        children: t.current.getLocaleText("columnsManagementReset")
      }))]
    }) : null]
  });
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * If `true`, the column search field will be focused automatically.
   * If `false`, the first column switch input will be focused automatically.
   * This helps to avoid input keyboard panel to popup automatically on touch devices.
   * @default true
   */
  autoFocusSearchField: u.bool,
  /**
   * If `true`, the `Reset` button will not be disabled
   * @default false
   */
  disableResetButton: u.bool,
  /**
   * If `true`, the `Show/Hide all` toggle checkbox will not be displayed.
   * @default false
   */
  disableShowHideToggle: u.bool,
  /**
   * Returns the list of togglable columns.
   * If used, only those columns will be displayed in the panel
   * which are passed as the return value of the function.
   * @param {GridColDef[]} columns The `ColDef` list of all columns.
   * @returns {GridColDef['field'][]} The list of togglable columns' field names.
   */
  getTogglableColumns: u.func,
  searchInputProps: u.object,
  searchPredicate: u.func,
  sort: u.oneOf(["asc", "desc"]),
  /**
   * Changes the behavior of the `Show/Hide All` toggle when the search field is used:
   * - `all`: Will toggle all columns.
   * - `filteredOnly`: Will only toggle columns that match the search criteria.
   * @default 'all'
   */
  toggleAllMode: u.oneOf(["all", "filteredOnly"])
});
  name: "MuiDataGrid",
  slot: "ColumnsManagement",
  overridesResolver: (e, t) => t.columnsManagement
})(({
  theme: e
}) => ({
  padding: e.spacing(0, 3, 1.5),
  display: "flex",
  flexDirection: "column",
  overflow: "auto",
  flex: "1 1",
  maxHeight: 400,
  alignItems: "flex-start"
  name: "MuiDataGrid",
  slot: "ColumnsManagementHeader",
  overridesResolver: (e, t) => t.columnsManagementHeader
})(({
  theme: e
}) => ({
  padding: e.spacing(1.5, 3)
  name: "MuiDataGrid",
  slot: "ColumnsManagementSearchInput",
  overridesResolver: (e, t) => t.columnsManagementSearchInput
})(({
  theme: e
}) => ({
    padding: e.spacing(0, 1.5, 0, 1.5)
  },
    /* clears the 'X' icon from Chrome */
    display: "none"
  }
  name: "MuiDataGrid",
  slot: "ColumnsManagementFooter",
  overridesResolver: (e, t) => t.columnsManagementFooter
})(({
  theme: e
}) => ({
  padding: e.spacing(0.5, 1, 0.5, 3),
  display: "flex",
  justifyContent: "space-between",
  borderTop: `1px solid ${e.palette.divider}`
  theme: e
}) => ({
  padding: e.spacing(0.5, 0),
  color: e.palette.grey[500]
  var I, M;
  const {
    children: r,
    slotProps: o = {}
  };
  return r == null ? null : /* @__PURE__ */ $.jsxs(x.Fragment, {
    children: [/* @__PURE__ */ $.jsx(f.slots.baseTooltip, J({
      title: c.current.getLocaleText("toolbarExportLabel"),
      enterDelay: 1e3
    }, (I = f.slotProps) == null ? void 0 : I.baseTooltip, a, {
      children: /* @__PURE__ */ $.jsx(f.slots.baseButton, J({
        size: "small",
        startIcon: /* @__PURE__ */ $.jsx(f.slots.exportIcon, {}),
        "aria-label": c.current.getLocaleText("toolbarExportLabel"),
        "aria-haspopup": "menu",
      }, (M = f.slotProps) == null ? void 0 : M.baseButton, s, {
        onClick: E,
        ref: T,
        children: c.current.getLocaleText("toolbarExport")
      }))
      target: C.current,
      onClose: O,
      position: "bottom-start",
        id: g,
        className: se.menuList,
          hideMenu: O
      })
    })]
  });
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.object
});
    hideMenu: n,
    options: r
    onClick: () => {
      t.current.exportDataAsCsv(r), n == null || n();
    }
  }, o, {
    children: t.current.getLocaleText("toolbarExportCSV")
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: u.func,
  options: u.shape({
    allColumns: u.bool,
    delimiter: u.string,
    disableToolbarButton: u.bool,
    escapeFormulas: u.bool,
    fields: u.arrayOf(u.string),
    fileName: u.string,
    getRowsToExport: u.func,
    includeColumnGroupsHeaders: u.bool,
    includeHeaders: u.bool,
    shouldAppendQuotes: u.bool,
    utf8WithBom: u.bool
  })
});
    hideMenu: n,
    options: r
    onClick: () => {
      t.current.exportDataAsPrint(r), n == null || n();
    }
  }, o, {
    children: t.current.getLocaleText("toolbarExportPrint")
  }));
}
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  hideMenu: u.func,
  options: u.shape({
    allColumns: u.bool,
    bodyClassName: u.string,
    copyStyles: u.bool,
    disableToolbarButton: u.bool,
    fields: u.arrayOf(u.string),
    fileName: u.string,
    getRowsToExport: u.func,
    hideFooter: u.bool,
    hideToolbar: u.bool,
    includeCheckboxes: u.bool,
    pageStyle: u.oneOfType([u.func, u.string])
  })
});
  const r = t, {
    csvOptions: o = {},
    printOptions: s = {},
    excelOptions: a
    excelOptions: a,
    csvOptions: o,
    printOptions: s
    ref: n,
    }))
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  csvOptions: u.object,
  printOptions: u.object,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: u.object
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["selectedRowCount"]
  name: "MuiDataGrid",
  slot: "SelectedRowCount",
  overridesResolver: (e, t) => t.selectedRowCount
})(({
  theme: e
}) => ({
  alignItems: "center",
  display: "flex",
  margin: e.spacing(0, 2),
  visibility: "hidden",
  width: 0,
  height: 0,
  [e.breakpoints.up("sm")]: {
    visibility: "visible",
    width: "auto",
    height: "auto"
  }
  const {
    className: r,
    selectedRowCount: o
    className: et(f.root, r),
    ownerState: c
  }, s, {
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  selectedRowCount: u.number.isRequired,
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
    selectedRowCount: a
    rowCount: s,
    visibleRowCount: c
  })) : null, g = o.pagination && !o.hideFooterPagination && o.slots.pagination && /* @__PURE__ */ $.jsx(o.slots.pagination, J({}, (w = o.slotProps) == null ? void 0 : w.pagination));
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  let a;
  switch (e) {
      a = r[n];
      break;
      a = o - r[n] - t + s;
      break;
    default:
      a = void 0;
      break;
  }
  return a;
  const s = t === n - 1;
  root: se.scrollbarFiller,
  header: se["scrollbarFiller--header"],
  borderTop: se["scrollbarFiller--borderTop"],
  borderBottom: se["scrollbarFiller--borderBottom"],
  pinnedRight: se["scrollbarFiller--pinnedRight"]
};
  header: e,
  borderTop: t = !0,
  borderBottom: n,
  pinnedRight: r
}) {
  return /* @__PURE__ */ $.jsx("div", {
    role: "presentation",
  });
}
  name: "MuiDataGrid",
  slot: "SkeletonLoadingOverlay",
  overridesResolver: (e, t) => t.skeletonLoadingOverlay
})({
  minWidth: "100%",
  width: "max-content",
  // prevents overflow: clip; cutting off the x axis
  height: "100%",
  overflow: "clip"
  // y axis is hidden while the x axis is allowed to overflow
  const {
    classes: t
  } = e;
  return mt({
    root: ["skeletonLoadingOverlay"]
    slots: o
    classes: r.classes
          width: fe,
          empty: !0
          width: "var(--width)",
          height: g.rowHeight,
          style: J({
          }, te)
          pinnedRight: I.right.length > 0
      }
    }
    const {
      throw new Error("MUI X: Expected skeleton cells to be defined with `data-field` attribute.");
      const re = (X = c.current) == null ? void 0 : X.querySelectorAll(`.${se["cell--pinnedLeft"]}`);
      re == null || re.forEach((Q) => {
      });
    }
      const re = (te = c.current) == null ? void 0 : te.querySelectorAll(`.${se["cell--pinnedRight"]}`);
      re == null || re.forEach((Q) => {
      });
    }
    className: a.root
  }, t, {
    ref: f,
  }));
  "circular-progress": {
    style: {}
  },
  "linear-progress": {
    style: {
      display: "block"
    }
  },
  skeleton: {
    style: {
      display: "block"
    }
  }
  const {
    variant: r = "circular-progress",
    noRowsVariant: o = "circular-progress",
    style: s
  }, a, {
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The variant of the overlay when no rows are displayed.
   * @default 'circular-progress'
   */
  noRowsVariant: u.oneOf(["circular-progress", "linear-progress", "skeleton"]),
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * The variant of the overlay.
   * @default 'circular-progress'
   */
  variant: u.oneOf(["circular-progress", "linear-progress", "skeleton"])
});
    ref: n,
    children: o
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object])
});
  theme: e
}) => ({
  maxHeight: "calc(100% + 1px)",
  // border width
  flexGrow: 1,
    display: "none",
    [e.breakpoints.up("sm")]: {
      display: "block"
    }
  },
    display: "none",
    [e.breakpoints.up("sm")]: {
      display: "inline-flex"
    }
  }
  from: n,
  to: r,
  count: o,
  page: s
}) => e({
  from: n,
  to: r,
  count: o,
  page: s,
  estimated: t
  from: e,
  to: t,
  count: n,
  estimated: r
    paginationMode: f,
    estimatedRowCount: g
    backIconButtonProps: {
      disabled: !0
    },
    nextIconButtonProps: {
      disabled: !0
    }
          return !0;
        return !0;
    }
    return !1;
  };
  if (process.env.NODE_ENV !== "production") {
  }
    component: "div",
    count: a,
    page: C,
    rowsPerPage: s.pageSize,
    onPageChange: E,
    onRowsPerPageChange: T
    labelDisplayedRows: M
  }, t, {
    ref: n
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  component: u.elementType
});
  const {
    classes: t
  } = e;
  return mt({
    root: ["rowCount"]
  name: "MuiDataGrid",
  slot: "RowCount",
  overridesResolver: (e, t) => t.rowCount
})(({
  theme: e
}) => ({
  alignItems: "center",
  display: "flex",
  margin: e.spacing(0, 2)
  const {
    className: r,
    rowCount: o,
    visibleRowCount: s
  if (o === 0)
    return null;
  const g = s < o ? c.current.getLocaleText("footerTotalVisibleRows")(s, o) : o.toLocaleString();
    ownerState: f
  }, a, {
    ref: n,
    children: [c.current.getLocaleText("footerTotalRows"), " ", g]
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  rowCount: u.number.isRequired,
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  visibleRowCount: u.number.isRequired
});
  for (const t in e)
    return !1;
  return !0;
}
}
  var vt;
  const {
    selected: r,
    rowId: o,
    row: s,
    index: a,
    style: c,
    rowHeight: f,
    visibleColumns: g,
    offsetLeft: w,
    columnsTotalWidth: C,
    firstColumnIndex: T,
    lastColumnIndex: E,
    focusedColumnIndex: O,
    isLastVisible: I,
    isNotVisible: M,
    onMouseOut: q,
    rowId: o,
    editMode: X.editMode
  }), ce = G.hooks.useGridRowAriaAttributes();
  x.useLayoutEffect(() => {
    if (te.range) {
      const Xe = ee.current.getRowIndexRelativeToVisibleRows(o);
      Xe !== void 0 && ee.current.unstable_setLastMeasuredRowIndex(Xe);
    }
  }, [ee, te.range, f, o]);
  const Ce = x.useCallback((Xe, Oe) => (Ie) => {
  }, [ee, o]), Ne = x.useCallback((Xe) => {
    if (Ie) {
        return;
      const pt = ee.current.getColumn(Ie);
        return;
    }
    slots: Be,
    slotProps: tt,
    if (M)
      return {
        opacity: 0,
        width: 0,
        height: 0
      };
    const Xe = J({}, c, {
      maxHeight: f === "auto" ? "none" : f,
      // max-height doesn't support "auto"
      minHeight: f,
      "--height": typeof f == "number" ? `${f}px` : f
    });
    if (rt.spacingTop) {
      const Oe = X.rowSpacingType === "border" ? "borderTopWidth" : "marginTop";
      Xe[Oe] = rt.spacingTop;
    }
    if (rt.spacingBottom) {
      const Oe = X.rowSpacingType === "border" ? "borderBottomWidth" : "marginBottom";
      let Ie = Xe[Oe];
      typeof Ie != "number" && (Ie = parseInt(Ie || "0", 10)), Ie += rt.spacingBottom, Xe[Oe] = Ie;
    }
    return Xe;
  }, [M, f, c, rt, X.rowSpacingType]), wt = ee.current.unstable_applyPipeProcessors("rowClassName", [], o), gt = ce(he, a);
  if (typeof X.getRowClassName == "function") {
    const Xe = a - (((vt = te.range) == null ? void 0 : vt.firstRowIndex) || 0), Oe = J({}, ee.current.getRowParams(o), {
      isFirstVisible: Xe === 0,
      isLastVisible: Xe === te.rows.length - 1,
      indexRelativeToCurrentPage: Xe
    });
    wt.push(X.getRowClassName(Oe));
  }
    const zt = ee.current.unstable_getCellColSpanInfo(o, Ie);
    if (zt != null && zt.spannedByColSpan)
      return null;
    if (he.type === "skeletonRow")
      return /* @__PURE__ */ $.jsx(Be.skeletonCell, {
        type: Xe.type,
        width: bt,
        height: f,
        field: Xe.field,
        align: Xe.align
      }, Xe.field);
    return /* @__PURE__ */ $.jsx(Be.cell, J({
      column: Xe,
      width: bt,
      rowId: o,
      align: Xe.align || "left",
      colIndex: Ie,
      colSpan: We,
      pinnedOffset: St,
      pinnedPosition: yt,
      row: s,
      rowNode: he
    }, tt == null ? void 0 : tt.cell), Xe.field);
  for (let Xe = T; Xe < E; Xe += 1) {
    Oe && Tt.push(nt(Oe, Ie, Xe, Et));
  }
  const At = s ? {
    onClick: Ne,
    onMouseOut: Ce("rowMouseOut", q),
  } : null;
  return /* @__PURE__ */ $.jsxs("div", J({
    "data-id": o,
    "data-rowindex": a,
    role: "row",
    style: ot
    ref: ue,
    children: [Ft, /* @__PURE__ */ $.jsx("div", {
      role: "presentation",
      className: se.cellOffsetLeft,
      style: {
        width: w
      }
    }), Tt, /* @__PURE__ */ $.jsx("div", {
      role: "presentation",
      className: et(se.cell, se.cellEmpty)
    })]
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnsTotalWidth: u.number.isRequired,
  firstColumnIndex: u.number.isRequired,
  /**
   * Determines which cell has focus.
   * If `null`, no cell in this row has focus.
   */
  focusedColumnIndex: u.number,
  gridHasFiller: u.bool.isRequired,
  /**
   * Index of the row in the whole sorted and filtered dataset.
   * If some rows above have expanded children, this index also take those children into account.
   */
  index: u.number.isRequired,
  isFirstVisible: u.bool.isRequired,
  isLastVisible: u.bool.isRequired,
  isNotVisible: u.bool.isRequired,
  lastColumnIndex: u.number.isRequired,
  offsetLeft: u.number.isRequired,
  onClick: u.func,
  onDoubleClick: u.func,
  onMouseEnter: u.func,
  onMouseLeave: u.func,
  pinnedColumns: u.object.isRequired,
  row: u.object.isRequired,
  rowHeight: u.oneOfType([u.oneOf(["auto"]), u.number]).isRequired,
  rowId: u.oneOfType([u.number, u.string]).isRequired,
  scrollbarWidth: u.number.isRequired,
  selected: u.bool.isRequired,
  showBottomBorder: u.bool.isRequired,
  visibleColumns: u.arrayOf(u.object).isRequired
});
  return {
    role: "grid",
    "aria-colcount": n.length,
    "aria-rowcount": o + 1 + s + r,
  };
  return x.useCallback((r, o) => {
    const s = {}, a = o + n + 2;
    return s["aria-rowindex"] = a, e.current.isRowSelectable(r.id) && (s["aria-selected"] = t[r.id] !== void 0), s;
  }, [e, t, n]);
};
  privateApiRef: e,
  configuration: t,
  props: n,
  children: r
}) {
  const o = x.useRef(e.current.getPublicApi());
    value: t,
      value: n,
        value: e,
          value: o,
          children: r
        })
      })
    })
  });
}
  const t = x.useRef(null), n = x.useRef(null), r = x.useRef(null), o = x.useRef(null), s = x.useRef(null), a = x.useRef(null);
  e.current.register("public", {
    rootElementRef: t
  }), e.current.register("private", {
    mainElementRef: n,
    virtualScrollerRef: r,
    virtualScrollbarVerticalRef: o,
    virtualScrollbarHorizontalRef: s,
    columnHeadersContainerRef: a
  });
  e.current.state.isRtl === void 0 && (e.current.state.isRtl = t);
  const n = x.useRef(!0);
  x.useEffect(() => {
    n.current ? n.current = !1 : e.current.setState((r) => J({}, r, {
      isRtl: t
    }));
  }, [e, t]);
  if (r === -1)
    throw new Error(`MUI X: Log level ${t} not recognized.`);
    getLogger: n
  }, "private");
};
  constructor() {
    this.maxListeners = 20, this.warnOnce = !1, this.events = {};
  }
  on(t, n, r = {}) {
    let o = this.events[t];
    if (o || (o = {
      highPriority: /* @__PURE__ */ new Map(),
      regular: /* @__PURE__ */ new Map()
    }, this.events[t] = o), r.isFirst ? o.highPriority.set(n, !0) : o.regular.set(n, !0), process.env.NODE_ENV !== "production") {
      const s = o.highPriority.size + o.regular.size;
      s > this.maxListeners && !this.warnOnce && (this.warnOnce = !0, console.warn([`Possible EventEmitter memory leak detected. ${s} ${t} listeners added.`].join(`
`)));
    }
  }
  removeListener(t, n) {
    this.events[t] && (this.events[t].regular.delete(n), this.events[t].highPriority.delete(n));
  }
  removeAllListeners() {
    this.events = {};
  }
  emit(t, ...n) {
    const r = this.events[t];
    if (!r)
      return;
    const o = Array.from(r.highPriority.keys()), s = Array.from(r.regular.keys());
    for (let a = o.length - 1; a >= 0; a -= 1) {
      const c = o[a];
      r.highPriority.has(c) && c.apply(this, n);
    }
    for (let a = 0; a < s.length; a += 1) {
      const c = s[a];
      r.regular.has(c) && c.apply(this, n);
    }
  }
  once(t, n) {
    const r = this;
    this.on(t, function o(...s) {
      r.removeListener(t, o), n.apply(r, s);
    });
  }
}
  static create(t) {
  }
  constructor(t) {
    this.value = void 0, this.listeners = void 0, this.subscribe = (n) => (this.listeners.add(n), () => {
      this.listeners.delete(n);
    }), this.getSnapshot = () => this.value, this.update = (n) => {
      this.value = n, this.listeners.forEach((r) => r(n));
    }, this.value = t, this.listeners = /* @__PURE__ */ new Set();
  }
}
  var o;
  if (t)
    return t;
  const n = {}, r = {
    state: n,
    instanceId: {
    }
  };
    Object.keys(a).forEach((c) => {
      }
    });
  }, r.register("private", {
    caches: {},
  }), r;
}
  return {
    get state() {
      return e.current.state;
    },
    get store() {
      return e.current.store;
    },
    get instanceId() {
      return e.current.instanceId;
    },
  };
}
  var a;
  const n = x.useRef(null), r = x.useRef(null);
  const o = x.useCallback((...c) => {
      return;
      api: r.current.getPublicApi()
    } : {};
    const g = r.current;
    return () => {
      g.eventManager.removeListener(c, f);
    };
  }, [r]);
    subscribeEvent: s,
    publishEvent: o
  }, "public"), e && !((a = e.current) != null && a.state) && (e.current = n.current), x.useImperativeHandle(e, () => n.current, [n]), x.useEffect(() => {
    const c = r.current;
    return () => {
      c.publishEvent("unmount");
    };
  }, [r]), r;
}
  const n = x.useCallback((r) => {
    if (t.localeText[r] == null)
      throw new Error(`Missing translation for key ${r}.`);
    return t.localeText[r];
  }, [t.localeText]);
  e.current.register("public", {
    getLocaleText: n
  });
};
  "@babel/helpers - typeof";
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
}
  var n = e[Symbol.toPrimitive];
  if (n !== void 0) {
    var r = n.call(e, t);
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(e);
}
}
  const t = x.useRef({}), n = x.useRef(!1), r = x.useCallback((g) => {
    }), n.current = !1);
    t.current[g] || (t.current[g] = {
      processors: /* @__PURE__ */ new Map(),
      processorsAsArray: [],
      appliers: {}
    });
    const C = t.current[g];
    };
    processors: /* @__PURE__ */ new Map(),
    processorsAsArray: [],
    appliers: {}
    t.current[g].appliers = T;
  }), []), a = x.useCallback((g) => {
    r(t.current[g]);
  }, [r]), c = x.useCallback((...g) => {
      return w;
    let E = w;
    for (let O = 0; O < T.length; O += 1)
      E = T[O](E, C);
    return E;
  }, []), f = {
    registerPipeProcessor: o,
    registerPipeApplier: s,
    requestPipeProcessorsApplication: a
    unstable_applyPipeProcessors: c
  };
  const o = x.useRef(null), s = x.useRef(`mui-${Math.round(Math.random() * 1e9)}`), a = x.useCallback(() => {
    o.current = e.current.registerPipeProcessor(t, s.current, n);
  }, [e, n, t]);
    r && a();
  });
  const c = x.useRef(!0);
  x.useEffect(() => (c.current ? c.current = !1 : r && a(), () => {
    o.current && (o.current(), o.current = null);
  }), [a, r]);
  const r = x.useRef(null), o = x.useRef(`mui-${Math.round(Math.random() * 1e9)}`), s = x.useCallback(() => {
    r.current = e.current.registerPipeApplier(t, o.current, n);
  }, [e, n, t]);
    s();
  });
  const a = x.useRef(!0);
  x.useEffect(() => (a.current ? a.current = !1 : s(), () => {
    r.current && (r.current(), r.current = null);
  }), [s]);
  const o = x.useCallback(() => {
    e.current.registerStrategyProcessor(t, n, r);
  }, [e, r, n, t]);
    o();
  });
  const s = x.useRef(!0);
  x.useEffect(() => {
    s.current ? s.current = !1 : o();
  }, [o]);
  rowTreeCreation: "rowTree",
  filtering: "rowTree",
  sorting: "rowTree",
  visibleRowsLookupCreation: "rowTree"
    };
    if (g == null)
      throw new Error("Can't apply a strategy processor before defining an active strategy");
      throw new Error(`No processor found for processor "${f}" on strategy "${g}"`);
  }, [e]), s = x.useCallback((f) => {
      group: f,
      isAvailable: g
    }), e.current.publishEvent("strategyAvailabilityChange");
  }, [e]);
    registerStrategyProcessor: r,
    applyStrategyProcessor: o,
    getActiveStrategy: s,
    setStrategyAvailability: a
  }, "private");
  const t = x.useRef({}), n = x.useCallback((f) => {
    t.current[f.stateId] = f;
    let g;
      return !1;
    const w = [];
    if (Object.keys(t.current).forEach((C) => {
      const T = t.current[C], E = T.stateSelector(e.current.state, e.current.instanceId), O = T.stateSelector(g, e.current.instanceId);
      O !== E && (w.push({
        stateId: T.stateId,
        hasPropChanged: O !== T.propModel
    }), w.length > 1)
      throw new Error(`You're not allowed to update several sub-state in one transaction. You already updated ${w[0].stateId}, therefore, you're not allowed to update ${w.map((C) => C.stateId).join(", ")} in the same transaction.`);
      const {
        stateId: C,
        hasPropChanged: T
      } = w[0], E = t.current[C], O = E.stateSelector(g, e.current.instanceId);
      E.propOnChange && T && E.propOnChange(O, {
        api: e.current
      });
    }
  }), g), [e]), s = x.useCallback(() => {
  }, []), a = {
    setState: r,
    forceUpdate: s
  }, c = {
    updateControlState: o,
    registerControlState: n
  };
  props: {
    getRowId: t.getRowId
  }
  x.useEffect(() => {
    e.current.setState((n) => J({}, n, {
      props: {
        getRowId: t.getRowId
      }
    }));
  }, [e, t.getRowId]);
    rootProps: t
  }), n;
  const r = x.useRef(!1);
  r.current || (t.current.state = e(t.current.state, n, t), r.current = !0);
};
  if (e == null)
    return "";
  const n = typeof e == "string" ? e : `${e}`;
  if (t.shouldAppendQuotes || t.escapeFormulas) {
    const r = n.replace(/"/g, '""');
    return t.escapeFormulas && ["=", "+", "-", "@", "	", "\r"].includes(r[0]) ? `"'${r}"` : [t.delimiter, `
`, "\r", '"'].some((o) => n.includes(o)) ? `"${r}"` : r;
  }
  return n;
}
  var s, a;
  const {
    csvOptions: n,
    ignoreValueFormatter: r
  } = t;
  let o;
  if (r) {
    const c = e.colDef.type;
    c === "number" ? o = String(e.value) : c === "date" || c === "dateTime" ? o = (s = e.value) == null ? void 0 : s.toISOString() : typeof ((a = e.value) == null ? void 0 : a.toString) == "function" ? o = e.value.toString() : o = e.value;
  } else
    o = e.formattedValue;
};
  constructor(t) {
    this.options = void 0, this.rowString = "", this.isEmpty = !0, this.options = t;
  }
  addValue(t) {
    this.isEmpty || (this.rowString += this.options.csvOptions.delimiter), typeof this.options.sanitizeCellValue == "function" ? this.rowString += this.options.sanitizeCellValue(t, this.options.csvOptions) : this.rowString += t, this.isEmpty = !1;
  }
  getRowString() {
    return this.rowString;
  }
}
  id: e,
  columns: t,
  getCellParams: n,
  csvOptions: r,
  ignoreValueFormatter: o
}) => {
    csvOptions: r
  });
  return t.forEach((a) => {
    const c = n(e, a.field);
      ignoreValueFormatter: o,
      csvOptions: r
    }));
  }), s.getRowString();
};
  const {
    columns: t,
    rowIds: n,
    csvOptions: r,
    ignoreValueFormatter: o,
    apiRef: s
    id: w,
    columns: t,
    getCellParams: s.current.getCellParams,
    ignoreValueFormatter: o,
    csvOptions: r
  })}\r
`, "").trim();
  if (!r.includeHeaders)
    return a;
  if (r.includeColumnGroupsHeaders) {
    let w = 0;
    const C = c.reduce((T, E) => {
      const O = s.current.getColumnGroupPath(E.field);
      return T[E.field] = O, w = Math.max(w, O.length), T;
    }, {});
    for (let T = 0; T < w; T += 1) {
        csvOptions: r,
      });
      f.push(E), c.forEach((O) => {
        E.addValue(I ? I.headerName || I.groupId : "");
      });
    }
  }
    csvOptions: r,
  });
`)}\r
`}${a}`.trim();
}
  const t = document.createElement("span");
  t.style.whiteSpace = "pre", t.style.userSelect = "all", t.style.opacity = "0px", t.textContent = e, document.body.appendChild(t);
  const n = document.createRange();
  n.selectNode(t);
  const r = window.getSelection();
  r.removeAllRanges(), r.addRange(n);
  try {
    document.execCommand("copy");
  } finally {
    document.body.removeChild(t);
  }
}
  navigator.clipboard ? navigator.clipboard.writeText(e).catch(() => {
}
  var t;
  return !!((t = window.getSelection()) != null && t.toString() || e && (e.selectionEnd || 0) - (e.selectionStart || 0) > 0);
}
  const n = t.ignoreValueFormatterDuringExport, r = (typeof n == "object" ? n == null ? void 0 : n.clipboardExport : n) || !1, o = t.clipboardCopyCellDelimiter, s = x.useCallback((a) => {
      return;
    let c = "";
    if (e.current.getSelectedRows().size > 0)
      c = e.current.getDataAsCsv({
        includeHeaders: !1,
        delimiter: o,
        shouldAppendQuotes: !1,
        escapeFormulas: !1
      });
    else {
          csvOptions: {
            delimiter: o,
            shouldAppendQuotes: !1,
            escapeFormulas: !1
          },
          ignoreValueFormatter: r
        });
      }
    }
  }, [e, r, o]);
  columnMenu: {
    open: !1
  }
      open: !0,
      field: a
    };
    (f.open !== c.open || f.field !== c.field) && (e.current.setState((g) => g.columnMenu.open && g.columnMenu.field === a ? g : (t.debug("Opening Column Menu"), J({}, g, {
      columnMenu: {
        open: !0,
        field: a
      }
    }))), e.current.hidePreferences());
  }, [e, t]), r = x.useCallback(() => {
    if (a.field) {
      let w = a.field;
        w = C[T + 1] || C[T - 1];
      }
      e.current.setColumnHeaderFocus(w);
    }
    const c = {
      open: !1,
      field: void 0
    };
      columnMenu: c
    })));
  }, [e, t]), o = x.useCallback((a) => {
    t.debug("Toggle Column Menu");
    !c.open || c.field !== a ? n(a) : r();
  }, [e, t, n, r]);
    showColumnMenu: n,
    hideColumnMenu: r,
    toggleColumnMenu: o
  }, "public"), Ot(e, "columnResizeStart", r), Ot(e, "virtualScrollerWheel", e.current.hideColumnMenu), Ot(e, "virtualScrollerTouchMove", e.current.hideColumnMenu);
  var o, s, a;
    apiRef: n,
    columnsToUpsert: t.columns,
    initialState: (o = t.initialState) == null ? void 0 : o.columns,
    columnVisibilityModel: t.columnVisibilityModel ?? ((a = (s = t.initialState) == null ? void 0 : s.columns) == null ? void 0 : a.columnVisibilityModel) ?? {},
    keepOnlyColumnsToUpsert: !0
  });
  return J({}, e, {
    columns: r,
    // In pro/premium, this part of the state is defined. We give it an empty but defined value
    // for the community version.
  });
};
  e.current.registerControlState({
    stateId: "visibleColumns",
    propModel: t.columnVisibilityModel,
    propOnChange: t.onColumnVisibilityModelChange,
    changeEvent: "columnVisibilityModelChange"
  });
    var ee, G;
        apiRef: e,
        columnsToUpsert: [],
        initialState: void 0,
        keepOnlyColumnsToUpsert: !1
      })
    })), (G = (ee = e.current).updateRenderContext) == null || G.call(ee), e.current.forceUpdate());
      apiRef: e,
      initialState: void 0,
      keepOnlyColumnsToUpsert: !1
    });
      });
    }
      return;
    }));
    const te = {
      oldIndex: G
    };
    e.current.publishEvent("columnIndexChange", te);
      hasBeenResized: !0
    });
      lookup: J({}, ee.lookup, {
      })
    }), e.current.getRootDimensions())), e.current.publishEvent("columnWidthChange", {
    });
  }, [e, n, o]), O = {
    getColumn: s,
    getAllColumns: a,
    getColumnIndex: f,
    getVisibleColumns: c,
    getColumnIndexRelativeToVisibleColumns: C,
    setColumnVisibilityModel: g,
    setColumnVisibility: w,
    setColumnWidth: E
    setColumnIndex: T
  };
    var re, Q;
    // Always export if the `exportOnlyDirtyModels` property is not activated
    t.columnVisibilityModel != null || // Always export if the model has been initialized
    // TODO v6 Do a nullish check instead to export even if the initial model equals "{}"
    Object.keys(((Q = (re = t.initialState) == null ? void 0 : re.columns) == null ? void 0 : Q.columnVisibilityModel) ?? {}).length > 0 || // Always export if the model is not empty
        const ie = {};
          ue === 1 / 0 && (ue = -1), ie[de] = ue;
      }
      columns: ee
    });
    var X;
    if (ee == null && G == null)
      apiRef: e,
      columnsToUpsert: [],
      initialState: G,
      columnVisibilityModel: ee,
      keepOnlyColumnsToUpsert: !1
    });
    var ee;
      const G = t.slots.columnsPanel;
      return /* @__PURE__ */ $.jsx(G, J({}, (ee = t.slotProps) == null ? void 0 : ee.columnsPanel));
    }
        return;
    }
  });
    n.info("Columns pipe processing have changed, regenerating the columns");
      apiRef: e,
      columnsToUpsert: [],
      initialState: void 0,
      keepOnlyColumnsToUpsert: !1
    });
  }, [e, n, o]);
  x.useEffect(() => {
      return;
    }
    if (n.info(`GridColumns have changed, new length ${t.columns.length}`), r.current === t.columns)
      return;
      apiRef: e,
      initialState: void 0,
      // If the user provides a model, we don't want to set it in the state here because it has it's dedicated `useEffect` which calls `setColumnVisibilityModel`
      columnsToUpsert: t.columns,
      keepOnlyColumnsToUpsert: !0
    });
  }, [n, e, o, t.columns]), x.useEffect(() => {
    t.columnVisibilityModel !== void 0 && e.current.setColumnVisibilityModel(t.columnVisibilityModel);
  }, [e, n, t.columnVisibilityModel]);
}
  return (t) => J({}, t, {
    columns: e
  });
}
  var n;
  return J({}, e, {
    density: ((n = t.initialState) == null ? void 0 : n.density) ?? t.density ?? "standard"
  });
  var c;
  e.current.registerControlState({
    stateId: "density",
    propModel: t.density,
    propOnChange: t.onDensityChange,
    changeEvent: "densityChange"
  });
  const o = {
        density: f
      })));
    })
  };
    var w;
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      t.density != null || // Always export if the `density` has been initialized
      ((w = t.initialState) == null ? void 0 : w.density) != null ? J({}, f, {
        density: g
      }) : f
    );
    return e.current.setState((w) => J({}, w, {
      density: g
    })), f;
  }, [e]);
    t.density && e.current.setDensity(t.density);
  }, [e, t.density]);
};
  const r = `${n}.${t}`;
  if ("download" in HTMLAnchorElement.prototype) {
    const o = URL.createObjectURL(e), s = document.createElement("a");
    s.href = o, s.download = r, s.click(), setTimeout(() => {
      URL.revokeObjectURL(o);
    });
    return;
  }
  throw new Error("MUI X: exportAs not supported.");
}
  apiRef: e,
  options: t
}) => {
  return t.fields ? t.fields.reduce((o, s) => {
    const a = n.find((c) => c.field === s);
    return a && o.push(a), o;
  apiRef: e
}) => {
  return o.unshift(...a), o.push(...c), r.size > 0 ? o.filter((g) => r.has(g)) : o;
    n.debug("Get data as CSV");
      apiRef: e,
      apiRef: e
    });
      columns: g,
      rowIds: w,
      csvOptions: {
      },
      ignoreValueFormatter: o,
      apiRef: e
    });
    n.debug("Export data as CSV");
      type: "text/csv"
    });
  }, [n, s]);
    getDataAsCsv: s,
    exportDataAsCsv: a
  }, "public");
        options: g.csvOptions
      }),
      componentName: "csvExport"
    }];
  }, []);
  let r = e.paginationModel;
  n && ((n == null ? void 0 : n.page) !== r.page || (n == null ? void 0 : n.pageSize) !== r.pageSize) && (r = n);
  return f !== r.page && (r = J({}, r, {
    page: f
  var I, M;
  e.current.registerControlState({
    stateId: "paginationModel",
    propModel: t.paginationModel,
    propOnChange: t.onPaginationModelChange,
    changeEvent: "paginationModelChange"
  });
    }));
    }));
      })
    }), "setPaginationModel"));
  }, [e, n, t.signature]);
    setPage: a,
    setPageSize: c,
    setPaginationModel: f
  }, "public");
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      t.paginationModel != null || // Always export if the `paginationModel` has been initialized
        })
    );
      })
  }, [e, t.autoPageSize, t.signature]);
  const w = () => {
    });
  }, C = x.useCallback(() => {
    if (!t.autoPageSize)
      return;
      return;
      return;
  }, [e]), E = x.useCallback(() => {
      top: 0
    });
      // replace items with the active items
    });
  }, [e, E]);
  x.useEffect(() => {
      return;
    }
      })
    }));
  }, [e, t.paginationModel, t.signature, t.pagination]), x.useEffect(() => {
          paginationMode: t.paginationMode,
          enabled: t.pagination === !0
        })
      });
    });
  }, [e, t.paginationMode, t.pagination]), x.useEffect(C, [C]);
};
  return new Promise((e) => {
    requestAnimationFrame(() => {
      e();
    });
  });
}
  const t = document.createElement("iframe");
  return t.style.position = "absolute", t.style.width = "0px", t.style.height = "0px", t.title = e || document.title, t;
}
  x.useEffect(() => {
  }, [e, n]);
      apiRef: e,
      options: {
        fields: O,
      }
  }), [e]), g = x.useCallback((O) => {
    const I = O({
      apiRef: e
    }, []);
    e.current.setRows(I);
    const I = J({
      copyStyles: !0,
      hideToolbar: !1,
      hideFooter: !1,
      includeCheckboxes: !1
    if (!M)
      return;
      const te = M.createElement("style");
    }
    I.bodyClassName && M.body.classList.add(...I.bodyClassName.split(" "));
    const ee = [];
    if (I.copyStyles) {
        if (ie.tagName === "STYLE") {
          const de = M.createElement(ie.tagName), ue = ie.sheet;
          if (ue) {
            let he = "";
            for (let ge = 0; ge < ue.cssRules.length; ge += 1)
              typeof ue.cssRules[ge].cssText == "string" && (he += `${ue.cssRules[ge].cssText}\r
`);
            de.appendChild(M.createTextNode(he)), M.head.appendChild(de);
          }
        } else if (ie.getAttribute("href")) {
          const de = M.createElement(ie.tagName);
          for (let ue = 0; ue < ie.attributes.length; ue += 1) {
            const he = ie.attributes[ue];
            he && de.setAttribute(he.nodeName, he.nodeValue || "");
          }
          ee.push(new Promise((ue) => {
            de.addEventListener("load", () => ue());
          })), M.head.appendChild(de);
        }
      }
    }
    process.env.NODE_ENV !== "test" && Promise.all(ee).then(() => {
      O.contentWindow.print();
    });
  }, [e, o, t]), w = x.useCallback((O) => {
      virtualization: f.current
    })), e.current.setRows(c.current), s.current = null, a.current = {}, c.current = [];
  }, [e]), T = {
    exportDataAsPrint: x.useCallback(async (O) => {
      if (r.debug("Export data as Print"), !e.current.rootElementRef.current)
        throw new Error("MUI X: No grid root element available.");
        const M = {
          page: 0,
        };
              // Using signature `DataGridPro` to allow more than 100 rows in the print export
              "DataGridPro",
              M
            )
          })
        }));
      }
      f.current = e.current.state.virtualization, e.current.setState((I) => J({}, I, {
        virtualization: J({}, I.virtualization, {
          enabled: !1,
          enabledForColumns: !1
        })
        });
  };
    var I;
      }),
      componentName: "printExport"
    }];
  }, []);
  var o, s;
  return J({}, e, {
    filter: J({
    visibleRowsLookup: {}
  });
  return e.current.applyStrategyProcessor("visibleRowsLookupCreation", {
    tree: t.rows.tree,
    filteredRowsLookup: t.filter.filteredRowsLookup
  });
}
}
  e.current.registerControlState({
    stateId: "filter",
    propModel: t.filterModel,
    propOnChange: t.onFilterModelChange,
    changeEvent: "filterModelChange"
  });
  const r = x.useCallback(() => {
      return J({}, G, {
      });
    }), e.current.publishEvent("filteredRowsSet");
    r(), e.current.forceUpdate();
      items: ee
    }), "upsertFilterItem");
      items: ee
    }), "upsertFilterItems");
      items: ee
    }), "deleteFilterItem");
        var ue;
        if (Q.value !== void 0)
          return !(Array.isArray(Q.value) && Q.value.length === 0);
        const ie = (ue = e.current.getColumn(Q.field).filterOperators) == null ? void 0 : ue.find((he) => he.value === Q.operator);
        return !(typeof (ie == null ? void 0 : ie.requiresFilterValue) > "u" ? !0 : ie == null ? void 0 : ie.requiresFilterValue);
      });
      let X;
        operator: re.filterOperators[0].value
        operator: re.filterOperators[0].value
      }, e)], e.current.setFilterModel(J({}, G, {
        items: X
      }));
    }
  }, [e, n, t.disableMultipleColumnsFiltering]), g = x.useCallback(() => {
    n.debug("Hiding filter panel"), e.current.hidePreferences();
    }), "changeLogicOperator");
    }));
      isRowMatchingFilters: ee,
    });
    return J({}, G, {
    });
  }, [t.disableMultipleColumnsFiltering, t.filterMode, t.disableEval, e]), E = {
    unstable_applyFilters: s,
    deleteFilterItem: f,
    upsertFilterItem: a,
    upsertFilterItems: c,
    setFilterModel: C,
    hideFilterPanel: g,
    setQuickFilterValues: w,
    ignoreDiacritics: t.ignoreDiacritics,
    getFilterState: T
  };
    return ee.items.forEach((te) => {
      delete te.fromInput;
    }), // Always export if the `exportOnlyDirtyModels` property is not activated
    t.filterModel != null || // Always export if the model has been initialized
      filter: {
        filterModel: ee
      }
    var G;
    }));
    var ee;
      const G = t.slots.filterPanel;
      return /* @__PURE__ */ $.jsx(G, J({}, (ee = t.slotProps) == null ? void 0 : ee.filterPanel));
    }
  }, [t.slots.filterPanel, (q = t.slotProps) == null ? void 0 : q.filterPanel]), {
    getRowId: M
      isRowMatchingFilters: G
      passingFilterItems: null,
      passingQuickFilterValues: null
    for (let ie = 0; ie < te.length; ie += 1) {
      const de = te[ie], ue = M ? M(de) : de.id;
      G(de, void 0, X);
      ee[ue] = he;
    }
    const re = "auto-generated-group-footer-root";
      filteredRowsLookup: ee,
      filteredChildrenCountLookup: {},
      filteredDescendantCountLookup: {}
    };
    n.debug("onColUpdated - GridColumns changed, applying filters");
      items: ee
    }));
    })), e.current.forceUpdate();
  }, [e]);
    e.current.unstable_applyFilters();
    t.filterModel !== void 0 && e.current.setFilterModel(t.filterModel);
  }, [e, n, t.filterModel]);
  focus: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  },
  tabIndex: {
    cell: null,
    columnHeader: null,
    columnHeaderFilter: null,
    columnGroupHeader: null
  }
      tabIndex: {
        cell: {
        },
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      },
      focus: {
        cell: {
        },
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      }
      tabIndex: {
        columnHeader: {
        },
        columnHeaderFilter: null,
        cell: null,
        columnGroupHeader: null
      },
      focus: {
        columnHeader: {
        },
        columnHeaderFilter: null,
        cell: null,
        columnGroupHeader: null
      }
    }))), e.current.forceUpdate();
      tabIndex: {
        columnHeader: null,
        columnHeaderFilter: {
        },
        cell: null,
        columnGroupHeader: null
      },
      focus: {
        columnHeader: null,
        columnHeaderFilter: {
        },
        cell: null,
        columnGroupHeader: null
      }
    }))), e.current.forceUpdate();
      tabIndex: {
        columnGroupHeader: {
        },
        columnHeader: null,
        columnHeaderFilter: null,
        cell: null
      },
      focus: {
        columnGroupHeader: {
        },
        columnHeader: null,
        columnHeaderFilter: null,
        cell: null
      }
    })), e.current.forceUpdate();
      pagination: t.pagination,
      paginationMode: t.paginationMode
    if (!X)
      return;
    const te = e.current.unstable_getCellColSpanInfo(X.id, q);
    e.current.setCellFocus(X.id, re.field);
  }, [e, t.pagination, t.paginationMode]), w = x.useCallback(({
  }) => {
  }, [e]), T = x.useCallback(({
  }, [e]), E = x.useCallback(({
      return;
      focus: {
        cell: null,
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      }
    })));
    r.current = null;
    if (!e.current.unstable_applyPipeProcessors("canUpdateFocus", !0, {
    }))
      return;
      return;
    }
      return;
      focus: {
        cell: null,
        columnHeader: null,
        columnHeaderFilter: null,
        columnGroupHeader: null
      }
      return;
          pagination: t.pagination,
          paginationMode: t.paginationMode
      }
      e.current.setState((q) => J({}, q, {
        focus: {
          },
          columnHeader: null,
          columnHeaderFilter: null,
          columnGroupHeader: null
        }
      }));
    }
      return;
      pagination: t.pagination,
      paginationMode: t.paginationMode
    });
      return;
      tabIndex: {
        cell: {
          field: q[0].field
        },
        columnGroupHeader: null,
        columnHeader: null,
        columnHeaderFilter: null
      }
    }));
    setCellFocus: a,
    setColumnHeaderFocus: c,
    setColumnHeaderFilterFocus: f
    getColumnGroupHeaderFocus: g
  };
    };
  currentColIndex: e,
  firstColIndex: t,
  lastColIndex: n,
  isRtl: r
}) => {
  if (r) {
    if (e < n)
      return e + 1;
  } else if (!r && e > t)
    return e - 1;
  return null;
  currentColIndex: e,
  firstColIndex: t,
  lastColIndex: n,
  isRtl: r
}) => {
  if (r) {
    if (e > t)
      return e - 1;
  } else if (!r && e < n)
    return e + 1;
  return null;
};
  var c, f;
  if (!((c = o[t]) != null && c[n]))
    return t;
  let a = s.indexOf(t) + (r === "down" ? 1 : -1);
  for (; a >= 0 && a < s.length; ) {
    a += r === "down" ? 1 : -1;
  }
  return t;
}
    });
    e.current.setColumnHeaderFocus(M, I);
    });
    e.current.setColumnHeaderFilterFocus(M, I);
    });
    const {
    var I;
    const M = I.currentTarget.querySelector(`.${se.columnHeaderTitleContainerContent}`);
      return;
    switch (I.key) {
      case "ArrowDown": {
        break;
      }
      case "ArrowRight": {
          lastColIndex: q,
          isRtl: r
        });
        ee !== null && f(ee, I);
        break;
      }
      case "ArrowLeft": {
          lastColIndex: q,
          isRtl: r
        });
        ee !== null && f(ee, I);
        break;
      }
      case "ArrowUp": {
        break;
      }
      case "PageDown": {
        break;
      }
      case "Home": {
        break;
      }
      case "End": {
        f(q, I);
        break;
      }
      case "Enter": {
        break;
      }
      case " ":
        break;
      default:
    }
      return;
    switch (I.key) {
      case "ArrowDown": {
        break;
      }
      case "ArrowRight": {
          lastColIndex: q,
          isRtl: r
        });
        break;
      }
      case "ArrowLeft": {
          lastColIndex: q,
          isRtl: r
        });
        break;
      }
      case "ArrowUp": {
        break;
      }
      case "PageDown": {
        break;
      }
      case "Home": {
        break;
      }
      case "End": {
        break;
      }
      case " ":
        break;
      default:
    }
    if (M === null)
      return;
    const {
    } = M, {
    let X = !0;
    switch (I.key) {
      case "ArrowDown": {
        break;
      }
      case "ArrowUp": {
        break;
      }
      case "ArrowRight": {
        break;
      }
      case "ArrowLeft": {
        break;
      }
      case "PageDown": {
        break;
      }
      case "Home": {
        break;
      }
      case "End": {
        break;
      }
      case " ":
        break;
      default:
        X = !1;
    }
    X && I.preventDefault();
      return;
      event: I,
      cell: M
    }))
      return;
      return;
    let G = !0;
    switch (I.key) {
      case "ArrowDown": {
        break;
      }
      case "ArrowUp": {
        break;
      }
      case "ArrowRight": {
          lastColIndex: ee,
          isRtl: r
        });
        break;
      }
      case "ArrowLeft": {
          lastColIndex: ee,
          isRtl: r
        });
        break;
      }
      case "Tab": {
        break;
      }
      case " ": {
          break;
          break;
        break;
      }
      case "PageDown": {
        break;
      }
      case "PageUp": {
        break;
      }
      case "Home": {
        break;
      }
      case "End": {
        break;
      }
      default:
        G = !1;
    }
    G && I.preventDefault();
    event: I
  var T, E;
  e.current.registerControlState({
    stateId: "paginationRowCount",
    propModel: t.rowCount,
    propOnChange: t.onRowCountChange,
    changeEvent: "rowCountChange"
  });
    setRowCount: x.useCallback((O) => {
          rowCount: O
        })
      })));
    }, [e, n, o])
  };
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      t.rowCount != null || // Always export if the `rowCount` has been initialized
        pagination: J({}, O.pagination, {
          rowCount: I
        })
      }) : O
    );
    var M;
        rowCount: I
      })
    })), O;
  }, [e]);
  const w = x.useCallback((O) => {
    t.paginationMode === "client" || !c.current || O.pageSize !== c.current && (c.current = O.pageSize, o === -1 && e.current.setPage(0));
  }, [t.paginationMode, c, o, e]);
  Ot(e, "paginationModelChange", w), x.useEffect(() => {
    t.paginationMode === "client" ? e.current.setRowCount(r) : t.rowCount != null && e.current.setRowCount(t.rowCount);
  }, [e, t.paginationMode, r, t.rowCount]);
  const C = s.hasNextPage === !1;
  x.useEffect(() => {
    C && o === -1 && e.current.setRowCount(a.pageSize * a.page + r);
  }, [e, r, C, o, a]);
  e.current.registerControlState({
    stateId: "paginationMeta",
    propModel: t.paginationMeta,
    propOnChange: t.onPaginationMetaChange,
    changeEvent: "paginationMetaChange"
  });
  const s = {
    setPaginationMeta: x.useCallback((g) => {
          meta: g
        })
      })));
    }, [e, n, r])
  };
    var T, E;
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      t.paginationMeta != null || // Always export if the `paginationMeta` has been initialized
      ((E = (T = t.initialState) == null ? void 0 : T.pagination) == null ? void 0 : E.meta) != null ? J({}, g, {
        pagination: J({}, g.pagination, {
          meta: w
        })
      }) : g
    );
    var C;
    return e.current.setState((T) => J({}, T, {
      pagination: J({}, T.pagination, {
        meta: w
      })
    })), g;
  }, [e]);
    t.paginationMeta && e.current.setPaginationMeta(t.paginationMeta);
  }, [e, t.paginationMeta]);
  return J({}, e, {
    pagination: J({}, e.pagination, {
      paginationModel: n,
      rowCount: r,
      meta: o,
      enabled: t.pagination === !0,
      paginationMode: t.paginationMode
    })
  });
  var n;
  return J({}, e, {
    preferencePanel: ((n = t.initialState) == null ? void 0 : n.preferencePanel) ?? {
      open: !1
    }
  });
  var c;
    e.current.setState((f) => {
      if (!f.preferencePanel.open)
        return f;
      n.debug("Hiding Preferences Panel");
      return e.current.publishEvent("preferencePanelClose", {
      }), J({}, f, {
        preferencePanel: {
          open: !1
        }
      });
    });
        open: !0,
        openedPanelValue: f,
        labelId: g
      })
    })), e.current.publishEvent("preferencePanelOpen", {
      openedPanelValue: f
    });
  }, [n, e]);
    showPreferences: o,
    hidePreferences: r
  }, "public");
    var w;
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      ((w = t.initialState) == null ? void 0 : w.preferencePanel) != null || // Always export if the panel is opened
      g.open ? J({}, f, {
        preferencePanel: g
      }) : f
    );
      preferencePanel: g
    })), f;
  }, [e]);
  switch (e.type) {
    case "boolean":
      return !1;
    case "date":
    case "dateTime":
    case "number":
      return;
    case "singleSelect":
      return null;
    case "string":
    default:
      return "";
  }
  const [n, r] = x.useState({}), o = x.useRef(n), s = x.useRef({}), {
    processRowUpdate: a,
    onProcessRowUpdateError: c,
    cellModesModel: f,
    if (!e.current.isCellEditable(X))
      return;
    const X = J({}, G, {
    });
      return;
    const X = J({}, G, {
    });
        return;
      let X;
        const te = J({}, G, {
          reason: X
        });
      }
    } else if (G.isEditable) {
      let X;
      if (!e.current.unstable_applyPipeProcessors("canStartEditing", !0, {
        cellParams: G,
        editMode: "cell"
      }))
        return;
        const re = J({}, G, {
          reason: X,
        });
      }
    }
  }, [e]), O = x.useCallback((G) => {
    const {
      field: X,
      reason: te
    } = G, re = {
      field: X
    };
    const {
      field: X,
      reason: te
    } = G;
    let re;
    const Q = te === "escapeKeyDown";
    e.current.stopCellEditMode({
      field: X,
      ignoreModifications: Q,
      cellToFocusAfter: re
    });
    var X;
    if (G) {
      const {
        id: te,
        field: re
    }
  };
      api: e.current
    const te = J({}, o.current);
    if (X !== null)
      te[G] = J({}, te[G], {
      });
    else {
      te[G] = Q, Object.keys(te[G]).length === 0 && delete te[G];
    }
    e.current.setState((te) => {
      const re = J({}, te.editRows);
      return X !== null ? re[G] = J({}, re[G], {
        editRows: re
      });
    }), e.current.forceUpdate();
    const {
      field: X
    }, te));
    const {
      field: X,
      deleteValue: te,
      initialValue: re
    const ie = e.current.getColumn(X), de = !!ie.preProcessEditCellProps && te;
    let ue = {
      error: !1,
      isProcessingProps: de
    };
      props: ue,
        isProcessingProps: !1
      }));
    }
    const {
      field: X
    }, te));
    const {
      field: X,
      ignoreModifications: te,
      cellToFocusAfter: re = "none"
    } = G;
    const Q = () => {
    };
    if (te) {
      Q();
      return;
    }
      error: ie,
      isProcessingProps: de
    if (ie || de) {
      });
      return;
    }
    if (a) {
      const he = (ge) => {
      };
      try {
        Promise.resolve(a(ue, ge, {
        })).then((fe) => {
          e.current.updateRows([fe]), Q();
        }).catch(he);
      } catch (ge) {
        he(ge);
      }
    } else
      e.current.updateRows([ue]), Q();
  }), q = x.useCallback(async (G) => {
    var ge, fe;
    const {
      field: X,
      value: te,
      debounceMs: re,
      unstable_skipValueParser: Q
    } = G;
    let de = te;
      value: de,
      changeReason: re ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
      he = J({}, he, {
        isProcessingProps: !0
        row: ie,
        props: he,
        hasChanged: pe
      }));
    }
      isProcessingProps: !1
      return e.current.getRow(G);
    const {
      value: Q
    return X.valueSetter ? X.valueSetter(Q, re, X, e) : J({}, re, {
    });
    getCellMode: M,
  }, ee = {
    setCellEditingEditCellValue: q,
  };
      Object.entries(te).forEach(([re, Q]) => {
        var de, ue;
          id: ie,
          field: re
          id: ie,
          field: re
        }, Q));
      });
    });
  const [n, r] = x.useState({}), o = x.useRef(n), s = x.useRef({}), a = x.useRef({}), c = x.useRef(void 0), f = x.useRef(null), {
    onProcessRowUpdateError: g,
    onRowModesModelChange: w
    if (!e.current.isCellEditable(ie))
  }, [e]), O = x.useCallback((Q) => {
      return;
    const ie = e.current.getRowParams(Q.id), de = J({}, ie, {
      field: Q.field,
    });
  }, [e]), I = x.useCallback((Q) => {
    f.current = Q;
      var ie;
      if (((ie = f.current) == null ? void 0 : ie.id) !== Q.id) {
          return;
        const de = e.current.getRowParams(Q.id), ue = J({}, de, {
          field: Q.field,
        });
      }
    }));
  }, [e, O]);
  x.useEffect(() => () => {
    clearTimeout(c.current);
  }, []);
        return;
      let ie;
          e.current.setCellFocus(Q.id, he);
        }
      }
      if (ie) {
          return;
        const de = J({}, e.current.getRowParams(Q.id), {
          reason: ie,
          field: Q.field
        });
      }
    } else if (Q.isEditable) {
      let ie;
      if (!e.current.unstable_applyPipeProcessors("canStartEditing", !0, {
        cellParams: Q,
        editMode: "row"
      }))
        return;
        const ue = e.current.getRowParams(Q.id), he = J({}, ue, {
          field: Q.field,
          reason: ie
        });
      }
    }
    const {
      field: ie,
      reason: de
    } = Q, ue = {
      fieldToFocus: ie
    };
    const {
      reason: ie,
      field: de
    } = Q;
    let ue;
    const he = ie === "escapeKeyDown";
    e.current.stopRowEditMode({
      ignoreModifications: he,
      field: de,
      cellToFocusAfter: ue
    });
  }, [e]);
    rowId: Q,
    editMode: t.editMode
      api: e.current
    const ie = J({}, o.current);
    e.current.setState((ie) => {
      const de = J({}, ie.editRows);
        editRows: de
      });
    }), e.current.forceUpdate();
    e.current.setState((de) => {
      const ue = J({}, de.editRows);
      return ie !== null ? ue[Q] = J({}, ue[Q], {
        editRows: ue
      });
    }), e.current.forceUpdate();
    const {
    }, ie));
    const {
      fieldToFocus: ie,
      deleteValue: de,
      initialValue: ue
      const we = be.field;
        return pe;
      const ce = e.current.getColumn(we);
        value: Ce,
        error: !1,
        isProcessingProps: ce.editable && !!ce.preProcessEditCellProps && de
      }, pe;
    }, {});
      Promise.resolve(pe.preProcessEditCellProps({
        row: he,
        props: fe[be],
        hasChanged: _e !== we
      })).then((ce) => {
            isProcessingProps: !1
          }));
        }
      });
    });
  }), ee = x.useCallback((Q) => {
    const {
    }, ie));
    const {
      ignoreModifications: ie,
      field: de,
      cellToFocusAfter: ue = "none"
    } = Q;
    const he = () => {
    };
    if (ie) {
      he();
      return;
    }
      return;
    }
      });
      return;
    }
      const we = (_e) => {
      };
      try {
        })).then((_e) => {
          e.current.updateRows([_e]), he();
        }).catch(we);
      } catch (_e) {
        we(_e);
      }
    } else
      e.current.updateRows([be]), he();
    const {
      field: ie,
      value: de,
      debounceMs: ue,
      unstable_skipValueParser: he
    } = Q;
    let pe = de;
    ge.valueParser && !he && (pe = ge.valueParser(de, fe, ge, e));
      value: pe,
      changeReason: ue ? "debouncedSetEditCellValue" : "setEditCellValue"
    });
      const ce = [];
      if (ge.preProcessEditCellProps) {
        we = J({}, we, {
          isProcessingProps: !0
          row: fe,
          props: we,
          hasChanged: Ce,
          otherFieldsProps: Be
            _e(!1);
            return;
          }
            isProcessingProps: !1
        });
        ce.push(tt);
      }
        if (Ce === ie)
          return;
        const Be = e.current.getColumn(Ce);
        if (!Be.preProcessEditCellProps)
          return;
        Ne = J({}, Ne, {
          isProcessingProps: !0
          row: fe,
          props: Ne,
          hasChanged: !1,
        })).then((ot) => {
            _e(!1);
            return;
          }
          ot = J({}, ot, {
            isProcessingProps: !1
        });
        ce.push(rt);
      }), Promise.all(ce).then(() => {
      });
    });
  }, [e, T, q]), X = x.useCallback((Q) => {
      return e.current.getRow(Q);
    let de = J({}, a.current[Q], ie);
      const ge = e.current.getColumn(ue);
      ge != null && ge.valueSetter ? de = ge.valueSetter(he.value, de, ge, e) : de[ue] = he.value;
    }), de;
  }, [e]), te = {
    stopRowEditMode: ee
  }, re = {
    getRowWithUpdatedValuesFromRowEditing: X
  };
    Array.from(ie).forEach((de) => {
      var fe;
      const ue = n[de] ?? {
        id: ge
        id: ge
      }, ue));
    });
  editRows: {}
  const n = x.useRef({}), {
    isCellEditable: r
    if (!T) {
      E();
      return;
    }
    if (n.current[w] || (n.current[w] = {}), n.current[w][C]) {
      const [I] = n.current[w][C];
      clearTimeout(I);
    }
    const O = () => {
      const [I] = n.current[w][C];
      clearTimeout(I), E(), delete n.current[w][C];
      E(), delete n.current[w][C];
    }, T);
  };
  x.useEffect(() => {
    const w = n.current;
    return () => {
      Object.entries(w).forEach(([C, T]) => {
        Object.keys(T).forEach((E) => {
          const [O] = w[C][E];
          clearTimeout(O), delete w[C][E];
        });
      });
    };
  }, []);
  const a = x.useCallback((w, C) => {
    if (n.current[w]) {
      if (!C)
        Object.keys(n.current[w]).forEach((T) => {
          const [, E] = n.current[w][T];
          E();
        });
      else if (n.current[w][C]) {
        const [, T] = n.current[w][C];
        T();
      }
    }
  }, []), c = x.useCallback((w) => {
    const {
      id: C,
      field: T,
      debounceMs: E
    } = w;
    return new Promise((O) => {
      s(C, T, E, async () => {
          O(I);
        }
      });
    });
    var E;
  }, [e]), g = {
    isCellEditable: o,
    setEditCellValue: c,
    getRowWithUpdatedValues: f,
    runPendingEditCellValueMutation: a
  };
  const r = !!t.unstable_dataSource;
    rows: r ? [] : t.rows,
    getRowId: t.getRowId,
    loading: t.loading,
    rowCount: t.rowCount
  }), J({}, e, {
      apiRef: n,
      rowCountProp: t.rowCount,
      loadingProp: r ? !0 : t.loading,
      previousTree: null,
      previousTreeDepths: null
    })
  });
  if (process.env.NODE_ENV !== "production")
    try {
      Object.freeze(t.rows);
    } catch {
    }
    const X = e.current.getRowNode(G);
    } : null;
    cache: G,
  }) => {
    const X = () => {
      r.current = Date.now(), e.current.setState((re) => J({}, re, {
          apiRef: e,
          rowCountProp: t.rowCount,
          loadingProp: t.loading,
        })
      })), e.current.publishEvent("rowsSet"), e.current.forceUpdate();
    };
      X();
      return;
    }
    const te = t.throttleRowsMs - (Date.now() - r.current);
    if (te > 0) {
      s.start(te, X);
      return;
    }
    X();
    n.debug(`Updating all rows, new length ${G.length}`);
      rows: G,
      getRowId: t.getRowId,
      loading: t.loading,
      rowCount: t.rowCount
    }), X = e.current.caches.rows;
      throttle: !0
    });
  }, [n, t.getRowId, t.loading, t.rowCount, f, e]), g = x.useCallback((G) => {
      throw new Error(["MUI X: You cannot update several rows at once in `apiRef.current.updateRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join(`
`));
      getRowId: t.getRowId,
      previousCache: e.current.caches.rows
    });
    f({
      cache: X,
      throttle: !0
    });
      updates: X,
      getRowId: t.getRowId,
      previousCache: e.current.caches.rows,
    });
    f({
      cache: te,
      throttle: !1
    });
  }, [t.getRowId, f, e]), w = x.useCallback((G) => {
        loading: G
      })
    })), e.current.caches.rows.loadingPropBeforePartialUpdates = G);
  }, [t.loading, e, n]), C = x.useCallback(() => {
      rowToIndexMap: X
    const X = e.current.getRowNode(G);
    if (!X)
      throw new Error(`MUI X: No row with id #${G} found.`);
    if (X.type !== "group")
      throw new Error("MUI X: Only group nodes can be expanded or collapsed.");
    const te = J({}, X, {
    });
    e.current.setState((re) => J({}, re, {
      rows: J({}, re.rows, {
        tree: J({}, re.rows.tree, {
          [G]: te
        })
      })
    })), e.current.forceUpdate(), e.current.publishEvent("rowExpansionChange", te);
    skipAutoGeneratedRows: G = !0,
    applySorting: X,
    applyFiltering: te
  }) => {
    let Q;
    if (X) {
        return [];
      Q = [];
        const he = ie[ue];
      }
    } else
    if (te) {
    }
    return Q;
    const X = e.current.getRowNode(G);
    if (!X)
      throw new Error(`MUI X: No row with id #${G} found.`);
      throw new Error("MUI X: The row reordering do not support reordering of grouped rows yet.");
    if (X.type !== "leaf")
      throw new Error("MUI X: The row reordering do not support reordering of footer or grouping rows.");
    e.current.setState((te) => {
        return te;
      const ie = [...Q];
        rows: J({}, te.rows, {
          tree: J({}, te.rows.tree, {
              children: ie
            })
          })
        })
      });
    }), e.current.publishEvent("rowsSet");
      throw new Error(["MUI X: You cannot replace rows using `apiRef.current.unstable_replaceRows` on the DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock this feature."].join(`
`));
      return;
      throw new Error("`apiRef.current.unstable_replaceRows` is not compatible with tree data and row grouping");
      de.has(pe) || (delete re[pe], delete Q[pe], delete te[pe]);
      const be = {
        id: fe,
        depth: 0,
        type: "leaf",
        groupingKey: null
      };
      re[fe] = ge, Q[fe] = fe, te[fe] = be, de.add(fe);
    }
      children: ie
    });
    const ue = ie.filter((he) => {
      var ge;
      return ((ge = te[he]) == null ? void 0 : ge.type) === "leaf";
    });
    e.current.caches.rows.dataRowIdToModelLookup = re, e.current.caches.rows.dataRowIdToIdLookup = Q, e.current.setState((he) => J({}, he, {
      rows: J({}, he.rows, {
        dataRowIdToModelLookup: re,
        dataRowIdToIdLookup: Q,
        dataRowIds: ue,
        tree: te
      })
    })), e.current.publishEvent("rowsSet");
    getRow: a,
    setLoading: w,
    getRowId: c,
    getRowModels: C,
    getRowsCount: T,
    getAllRowIds: E,
    updateRows: g,
    getRowNode: I,
    getRowIndexRelativeToVisibleRows: O,
    getRowGroupChildren: M
    n.info("Row grouping pre-processing have changed, regenerating the row tree");
    let G;
    e.current.caches.rows.rowsBeforePartialUpdates === t.rows ? G = J({}, e.current.caches.rows, {
      updates: {
        type: "full",
      }
      rows: t.rows,
      getRowId: t.getRowId,
      loading: t.loading,
      rowCount: t.rowCount
    }), f({
      cache: G,
      throttle: !1
    });
      return;
    }
    e.current.setState((G) => {
      });
      return J({}, G, {
            rowCountProp: t.rowCount
          })
        })
      });
    }), e.current.publishEvent("rowsSet"), e.current.forceUpdate();
  }, [e, t.rowCount]);
  const ee = x.useRef(!0);
  x.useEffect(() => {
    var re;
    if (ee.current) {
      ee.current = !1;
      return;
    }
    let G = !1;
    t.rowCount !== o.current && (G = !0, o.current = t.rowCount);
      rows: J({}, Q.rows, {
        loading: t.loading
      })
    })), e.current.caches.rows.loadingPropBeforePartialUpdates = t.loading, e.current.forceUpdate()), te || (e.current.setState((Q) => J({}, Q, {
      rows: J({}, Q.rows, {
        totalRowCount: Math.max(t.rowCount || 0, Q.rows.totalRowCount),
        totalTopLevelRowCount: Math.max(t.rowCount || 0, Q.rows.totalTopLevelRowCount)
      })
    })), e.current.caches.rows.rowCountPropBeforePartialUpdates = t.rowCount, e.current.forceUpdate()), !G) || (n.debug(`Updating all rows, new length ${(re = t.rows) == null ? void 0 : re.length}`), f({
        rows: t.rows,
        getRowId: t.getRowId,
        loading: t.loading,
        rowCount: t.rowCount
      }),
      throttle: !1
    }));
  }, [t.rows, t.rowCount, t.getRowId, t.loading, n, f, e]);
  const t = {
      children: e
    })
  };
  for (let n = 0; n < e.length; n += 1) {
    const r = e[n];
    t[r] = {
      id: r,
      depth: 0,
      type: "leaf",
      groupingKey: null
    };
  }
  return {
    tree: t,
    treeDepths: {
      0: e.length
    },
    dataRowIds: e
  };
  previousTree: e,
  actions: t
}) => {
  const n = J({}, e), r = {};
  for (let a = 0; a < t.remove.length; a += 1) {
    const c = t.remove[a];
    r[c] = !0, delete n[c];
  }
  for (let a = 0; a < t.insert.length; a += 1) {
    const c = t.insert[a];
    n[c] = {
      id: c,
      depth: 0,
      type: "leaf",
      groupingKey: null
    };
  }
  let s = [...o.children, ...t.insert];
    children: s
  }), {
    tree: n,
    treeDepths: {
      0: s.length
    },
    dataRowIds: s
  };
  previousTree: e.previousTree,
  actions: e.updates.actions
};
}
  var T;
  const n = x.useCallback((E) => ({
    field: E,
    colDef: e.current.getColumn(E)
  }), [e]), r = x.useCallback((E) => {
    const O = e.current.getRow(E);
    if (!O)
    return {
      id: E,
      columns: e.current.getAllColumns(),
      row: O
    };
    cellMode: I,
    colDef: M,
  }) => {
      id: E,
      field: O,
      colDef: M,
      cellMode: I,
      isEditable: !1,
      api: e.current
    };
  }, [e]), s = x.useCallback((E, O) => {
      rowNode: I,
      hasFocus: M !== null && M.field === O && M.id === E,
    });
  }, [e, t.unstable_listView, (T = t.unstable_listColumn) == null ? void 0 : T.field]), a = x.useCallback((E, O) => {
    if (!I)
  }, [e]), c = x.useCallback((E, O) => {
    if (!O || !O.valueGetter)
    const I = E[O.field];
    return O.valueGetter(I, E, O, e);
  }, [e]), f = x.useCallback((E, O) => {
    id: E,
    field: O
  }) : null, [e]), w = {
    getCellValue: a,
    getCellParams: s,
    getRowValue: c,
    getRowFormattedValue: f,
    getRowParams: r,
    getRowElement: g,
    getColumnHeaderParams: n,
  }, C = {
    getCellParamsForRow: o
  };
}
    t.rowSelection && fe(...pe);
  e.current.registerControlState({
    stateId: "rowSelection",
    propModel: s,
    propOnChange: t.onRowSelectionModelChange,
    changeEvent: "rowSelectionChange"
  });
  const {
    checkboxSelection: c,
    disableRowSelectionOnClick: f,
    let pe = fe;
    const be = a.current ?? fe, we = e.current.isRowSelected(fe);
    if (we) {
      if (ce === Ce)
        return;
      ce > Ce ? pe = _e[Ce + 1] : pe = _e[Ce - 1];
    }
    a.current = fe, e.current.selectRowRange({
      startId: be,
      endId: pe
    }, !we);
  }, [e]), T = x.useCallback((fe) => {
      throw new Error(["MUI X: `rowSelectionModel` can only contain 1 item in DataGrid.", "You need to upgrade to DataGridPro or DataGridPremium component to unlock multiple selection."].join(`
`));
      rowSelection: t.rowSelection ? fe : []
    })), e.current.forceUpdate());
      return !1;
    return !((pe == null ? void 0 : pe.type) === "footer" || (pe == null ? void 0 : pe.type) === "pinnedRow");
    var we, _e, ce, Ce, Ne, Be;
    if (e.current.isRowSelectable(fe))
      if (a.current = fe, be) {
        n.debug(`Setting selection for row ${fe}`);
          tt.push(rt);
        };
      } else {
        n.debug(`Toggling selection for row ${fe}`);
        const rt = (gt) => {
        }, ot = (gt) => {
        };
      }
    n.debug("Setting selection for several rows");
    const we = fe.filter((Ce) => e.current.isRowSelectable(Ce));
    let _e;
    if (be) {
      if (pe) {
        if (_e = new Set(we), o) {
          const Ne = (Be) => {
            _e.add(Be);
          };
          we.forEach((Be) => {
          });
        }
      } else
        _e = /* @__PURE__ */ new Set();
      if (_e.size === Object.keys(Ce).length && Array.from(_e).every((Ne) => Ce[Ne] === Ne))
        return;
    } else {
      const Ce = (Be) => {
        _e.add(Be);
      }, Ne = (Be) => {
        _e.delete(Be);
      };
      we.forEach((Be) => {
      });
    }
    (_e.size < 2 || g) && e.current.setRowSelectionModel(Array.from(_e));
    var we, _e;
    if (!w || !o || fe.length === 0)
      return fe;
    const pe = new Set(fe), be = (ce) => {
      pe.add(ce);
    };
    for (const ce of fe)
    return Array.from(pe);
    startId: fe,
    endId: pe
  }, be = !0, we = !1) => {
    if (!e.current.getRow(fe) || !e.current.getRow(pe))
      return;
    n.debug(`Expanding selection from row ${fe} to row ${pe}`);
    e.current.selectRows(tt, be, we);
    selectRow: I,
    setRowSelectionModel: T,
    isRowSelected: E,
    isRowSelectable: O
    selectRows: M,
  };
    var Be;
      return;
    let Ce = !1;
    pe.forEach((tt) => {
      var rt;
      if (ce(tt)) {
        if (t.keepNonExistentRowsSelected)
          return;
        delete _e[tt], Ce = !0;
        return;
      }
      if (!((rt = t.rowSelectionPropagation) != null && rt.parents))
        return;
          delete _e[tt], Ce = !0;
          return;
        }
      }
    });
    const Ne = w && ((Be = t.rowSelectionPropagation) == null ? void 0 : Be.parents) && Object.keys(_e).length > 0;
    if (Ce || Ne && !fe) {
      const tt = Object.values(_e);
      Ne ? e.current.selectRows(tt, !0, !0) : e.current.setRowSelectionModel(tt);
    }
    _e ? e.current.selectRow(fe, we ? !0 : !ce, !0) : e.current.selectRow(fe, !ce, !1);
  }, [e, g, c]), q = x.useCallback((fe, pe) => {
    var _e;
    if (f)
      return;
    const be = (_e = pe.target.closest(`.${se.cell}`)) == null ? void 0 : _e.getAttribute("data-field");
      return;
    if (be) {
      const ce = e.current.getColumn(be);
        return;
    }
    var be;
    g && pe.shiftKey && ((be = window.getSelection()) == null || be.removeAllRanges());
    g && pe.nativeEvent.shiftKey ? C(fe.id) : e.current.selectRow(fe.id, fe.value, !g);
  }, [e, C, g]), ee = x.useCallback((fe) => {
    e.current.selectRows(pe, fe.value);
  }, [e, t.checkboxSelectionVisibleOnly, t.pagination, t.paginationMode]), G = x.useCallback((fe, pe) => {
        if (be && be.id !== fe.id) {
          pe.preventDefault();
          const we = e.current.isRowSelected(be.id);
          if (!g) {
            e.current.selectRow(be.id, !we, !0);
            return;
          }
          const _e = e.current.getRowIndexRelativeToVisibleRows(be.id), ce = e.current.getRowIndexRelativeToVisibleRows(fe.id);
          let Ce, Ne;
          _e > ce ? we ? (Ce = ce, Ne = _e - 1) : (Ce = ce, Ne = _e) : we ? (Ce = _e + 1, Ne = ce) : (Ce = _e, Ne = ce);
          e.current.selectRows(tt, !we);
          return;
        }
      }
      if (pe.key === " " && pe.shiftKey) {
        return;
      }
      String.fromCharCode(pe.keyCode) === "A" && (pe.ctrlKey || pe.metaKey) && (pe.preventDefault(), M(e.current.getAllRowIds(), !0));
    }
    if (!t.rowSelection) {
      e.current.setRowSelectionModel([]);
      return;
    }
    if (s === void 0)
      return;
    if (!o || !w || s.length === 0) {
      e.current.setRowSelectionModel(s);
      return;
    }
    const fe = e.current.getPropagatedRowSelectionModel(s);
    if (fe.length !== s.length || !fe.every((pe) => s.includes(pe))) {
      e.current.setRowSelectionModel(fe);
      return;
    }
    e.current.setRowSelectionModel(s);
  });
  const X = s != null;
  x.useEffect(() => {
    if (X || !t.rowSelection)
      return;
    if (O) {
      const pe = fe.filter((be) => O(be));
      pe.length < fe.length && e.current.setRowSelectionModel(pe);
    }
  }, [e, O, X, t.rowSelection]), x.useEffect(() => {
    if (!t.rowSelection || X)
      return;
    !g && fe.length > 1 && e.current.setRowSelectionModel([]);
  }, [e, g, c, X, t.rowSelection]), x.useEffect(() => {
  }, []);
  const {
    classes: t
  } = e;
  return x.useMemo(() => mt({
    cellCheckbox: ["cellCheckbox"],
    columnHeaderCheckbox: ["columnHeaderCheckbox"]
  const n = {
    classes: t.classes
      cellClassName: r.cellCheckbox,
      headerClassName: r.columnHeaderCheckbox,
      headerName: e.current.getLocaleText("checkboxSelectionHeaderName")
  }, [e, r, t.columns, t.checkboxSelection]);
  var r, o;
  const n = t.sortModel ?? ((o = (r = t.initialState) == null ? void 0 : r.sorting) == null ? void 0 : o.sortModel) ?? [];
  return J({}, e, {
    sorting: {
      sortedRows: []
    }
  });
  e.current.registerControlState({
    stateId: "sortModel",
    propModel: t.sortModel,
    propOnChange: t.onSortModelChange,
    changeEvent: "sortModelChange"
  });
        sort: q
      });
    }
    return {
    };
      if (t.sortingMode === "server")
          })
        });
      });
        })
      });
    }), e.current.publishEvent("sortedRowsSet"), e.current.forceUpdate();
    getSortedRows: g,
    getRowIdFromRowIndex: w,
    setSortModel: c,
    sortColumn: f,
    applySorting: a
  }, "public");
    return (
      // Always export if the `exportOnlyDirtyModels` property is not activated
      t.sortModel != null || // Always export if the model has been initialized
        sorting: {
        }
    );
    }));
  }, [e]);
      return;
  }, [f, t.disableColumnSorting]), I = x.useCallback(({
  }, [f, t.disableColumnSorting]), M = x.useCallback(() => {
    }
  }, [e]);
    e.current.applySorting();
    t.sortModel !== void 0 && e.current.setSortModel(t.sortModel);
  }, [e, t.sortModel]);
};
  const {
    containerSize: t,
    scrollPosition: n,
    elementSize: r,
    elementOffset: o
  } = e, s = o + r;
  if (r > t)
    return o;
  if (s - t > n)
    return s - t;
  if (o < n)
    return o;
}
      return !1;
    let O = {};
      let M;
      }
        containerSize: w.viewportOuterSize.width,
        scrollPosition: Math.abs(s.current.scrollLeft),
        elementSize: M,
      });
    }
        containerSize: w.viewportInnerSize.height,
        scrollPosition: s.current.scrollTop,
      });
    }
      const w = n ? -1 : 1;
    }
    top: s.current.scrollTop,
    left: s.current.scrollLeft
  } : {
    top: 0,
    left: 0
  }, [s]);
    scroll: f,
    scrollToIndexes: c,
  }, "public");
};
}
  let n, r;
  const o = () => {
    n = void 0, e(...r);
  };
  function s(...a) {
    r = a, n === void 0 && (n = setTimeout(o, t));
  }
  return s.clear = () => {
    clearTimeout(n), n = void 0;
  }, s;
}
  autoHeight: !1,
  autoPageSize: !1,
  autosizeOnMount: !1,
  checkboxSelection: !1,
  checkboxSelectionVisibleOnly: !1,
  clipboardCopyCellDelimiter: "	",
  columnBufferPx: 150,
  columnHeaderHeight: 56,
  disableAutosize: !1,
  disableColumnFilter: !1,
  disableColumnMenu: !1,
  disableColumnReorder: !1,
  disableColumnResize: !1,
  disableColumnSelector: !1,
  disableColumnSorting: !1,
  disableDensitySelector: !1,
  disableEval: !1,
  disableMultipleColumnsFiltering: !1,
  disableMultipleColumnsSorting: !1,
  disableMultipleRowSelection: !1,
  disableRowSelectionOnClick: !1,
  disableVirtualization: !1,
  filterDebounceMs: 150,
  filterMode: "client",
  hideFooter: !1,
  hideFooterPagination: !1,
  hideFooterRowCount: !1,
  hideFooterSelectedRowCount: !1,
  ignoreDiacritics: !1,
  ignoreValueFormatterDuringExport: !1,
  // TODO v8: Update to 'select'
  indeterminateCheckboxAction: "deselect",
  keepColumnPositionIfDraggedOutside: !1,
  keepNonExistentRowsSelected: !1,
  loading: !1,
  logger: console,
  logLevel: process.env.NODE_ENV === "production" ? "error" : "warn",
  pageSizeOptions: [25, 50, 100],
  pagination: !1,
  paginationMode: "client",
  resetPageOnSortFilter: !1,
  resizeThrottleMs: 60,
  rowBufferPx: 150,
  rowHeight: 52,
  rowPositionsDebounceMs: 166,
  rows: [],
  rowSelection: !0,
  rowSpacingType: "margin",
  showCellVerticalBorder: !1,
  showColumnVerticalBorder: !1,
  sortingMode: "client",
  sortingOrder: ["asc", "desc", null],
  throttleRowsMs: 0,
  unstable_rowSpanning: !1,
  virtualizeColumnsWithAutoRowHeight: !1
  width: 0,
  height: 0
  isReady: !1,
  hasScrollX: !1,
  hasScrollY: !1,
  scrollbarSize: 0,
  headerHeight: 0,
  groupHeaderHeight: 0,
  headerFilterHeight: 0,
  rowWidth: 0,
  rowHeight: 0,
  columnsTotalWidth: 0,
  leftPinnedWidth: 0,
  rightPinnedWidth: 0,
  headersTotalHeight: 0,
  topContainerHeight: 0,
  bottomContainerHeight: 0
  return J({}, e, {
  });
  const n = e.length;
});
    headerHeight: g,
    headerFilterHeight: w,
    headersTotalHeight: C,
    leftPinnedWidth: T,
    rightPinnedWidth: E
  }, [e]), M = x.useCallback(() => {
      return;
    };
      return 0;
    if (t.getRowHeight) {
    }
    var ge, fe;
    if (f.current)
      return;
      width: c - T - E,
    };
    if (t.autoHeight)
        width: o.current.width,
        height: ee + G + X.height
      }, re = {
      };
    else {
      te = {
        width: o.current.width,
        height: o.current.height
      }, re = {
        width: Math.max(0, te.width - T - E),
        height: Math.max(0, te.height - ee - G)
      };
      const pe = X, be = re, we = pe.width > be.width, _e = pe.height > be.height;
    }
      width: c,
      height: ee + X.height + G
    }, ue = {
      isReady: !0,
      root: o.current,
      viewportOuterSize: te,
      viewportInnerSize: re,
      contentSize: X,
      minimumSize: de,
      hasScrollX: Q,
      headerHeight: g,
      headerFilterHeight: w,
      rowWidth: ie,
      columnsTotalWidth: c,
      leftPinnedWidth: T,
      rightPinnedWidth: E,
      headersTotalHeight: C,
      topContainerHeight: ee,
      bottomContainerHeight: G
    }, he = e.current.state.dimensions;
    resize: M,
  };
      return;
    }
}
  const n = (r, o) => e.style.setProperty(r, o);
  n("--DataGrid-hasScrollX", `${Number(t.hasScrollX)}`), n("--DataGrid-hasScrollY", `${Number(t.hasScrollY)}`), n("--DataGrid-scrollbarSize", `${t.scrollbarSize}px`), n("--DataGrid-rowWidth", `${t.rowWidth}px`), n("--DataGrid-columnsTotalWidth", `${t.columnsTotalWidth}px`), n("--DataGrid-leftPinnedWidth", `${t.leftPinnedWidth}px`), n("--DataGrid-rightPinnedWidth", `${t.rightPinnedWidth}px`), n("--DataGrid-headerHeight", `${t.headerHeight}px`), n("--DataGrid-headersTotalHeight", `${t.headersTotalHeight}px`), n("--DataGrid-topContainerHeight", `${t.topContainerHeight}px`), n("--DataGrid-bottomContainerHeight", `${t.bottomContainerHeight}px`), n("--height", `${t.rowHeight}px`);
}
  return {
    rowHeight: Math.floor(o * n),
    headerHeight: Math.floor(e.columnHeaderHeight * n),
    groupHeaderHeight: Math.floor((e.columnGroupHeaderHeight ?? e.columnHeaderHeight) * n),
    headerFilterHeight: Math.floor((e.headerFilterHeight ?? e.columnHeaderHeight) * n),
    leftPinnedWidth: r.left.reduce((s, a) => s + a.computedWidth, 0),
    rightPinnedWidth: r.right.reduce((s, a) => s + a.computedWidth, 0)
  };
}
  if (t !== void 0)
    return t;
  if (e === null)
    return 0;
  if (n !== void 0)
    return n;
  o.style.width = "99px", o.style.height = "99px", o.style.position = "absolute", o.style.overflow = "scroll", o.className = "scrollDiv", e.appendChild(o);
  const s = o.offsetWidth - o.clientWidth;
}
  return e.width === t.width && e.height === t.height;
}
  observe() {
  }
  unobserve() {
  }
  disconnect() {
  }
  n.current.caches.rowsMeta = {
    heights: /* @__PURE__ */ new Map()
  };
  return J({}, e, {
    rowsMeta: {
      currentPageTotalHeight: a * r,
      positions: Array.from({
        length: a
      }, (c, f) => f * r),
      pinnedTopRowsTotalHeight: 0,
      pinnedBottomRowsTotalHeight: 0
    }
  });
  const {
    getRowHeight: n,
    getRowSpacing: r,
    getEstimatedRowHeight: o
    return q === void 0 && (q = {
      content: w,
      spacingTop: 0,
      spacingBottom: 0,
      detail: 0,
      autoHeight: !1,
      needsFirstMeasurement: !0
    if (!n)
    else {
      }));
          })) : q;
        }
      } else
    }
    if (r) {
      }));
    } else
    c.current = !1;
      const te = T(X);
      const te = T(X);
      const te = T(X), re = te.content + te.spacingTop + te.spacingBottom + te.detail;
    }, 0);
    c.current || (a.current = 1 / 0);
      pinnedBottomRowsTotalHeight: q
    };
      rowsMeta: G
    })), ee && e.current.updateDimensions(), f.current = !0;
    var q;
    var q;
    s.clear(), E();
    var q;
        return;
      e.current.unstable_storeRowHeightMeasurement(G, ee);
    }
    f.current || requestAnimationFrame(() => {
      e.current.requestPipeProcessorsApplication("rowHeight");
    });
    E();
  }, [E]);
    unstable_getRowHeight: O,
    hydrateRowsMeta: E,
    rowHasAutoHeight: I,
    getRowHeightEntry: C,
    getLastMeasuredRowIndex: M
  };
  const t = x.useCallback((o = {}) => e.current.unstable_applyPipeProcessors("exportState", {}, o), [e]), n = x.useCallback((o) => {
    e.current.unstable_applyPipeProcessors("restoreState", {
      callbacks: []
    }, {
      stateToRestore: o
    }).callbacks.forEach((a) => {
      a();
    }), e.current.forceUpdate();
  }, [e]);
    exportState: t,
    restoreState: n
  }, "public");
  const t = x.useRef({}), n = (c, f) => {
  }, r = () => {
    t.current = {};
  }, o = x.useCallback(({
    rowId: c,
    minFirstColumn: f,
    columns: g
  }) => {
        apiRef: e,
        lookup: t.current,
        rowId: c,
        minFirstColumnIndex: f,
        columns: g
      });
    }
  }, [e]), s = {
    unstable_getCellColSpanInfo: n
  }, a = {
    resetColSpan: r,
    calculateColSpan: o
  };
};
  const {
    apiRef: t,
    lookup: n,
    columnIndex: r,
    rowId: o,
    minFirstColumnIndex: s,
    maxLastColumnIndex: a,
    columns: c
  if (!w || w === 1)
      spannedByColSpan: !1,
      cellProps: {
        colSpan: 1,
      }
    }), {
      colSpan: 1
    };
  for (let T = 1; T < w; T += 1) {
    const E = r + T;
    if (E >= s && E < a) {
      const O = c[E];
        spannedByColSpan: !0,
        rightVisibleCellIndex: Math.min(r + w, f - 1),
        leftVisibleCellIndex: r
      });
    }
      spannedByColSpan: !1,
      cellProps: {
        colSpan: w,
        width: C
      }
    });
  }
  return {
    colSpan: w
  };
}
  e[t] || (e[t] = {}), e[t][n] = r;
}
    if (n[e.field] !== void 0)
      throw new Error(["MUI X: columnGroupingModel contains duplicated field", `column field ${e.field} occurs two times in the grouping model:`, `- ${n[e.field].join(" > ")}`, `- ${t.join(" > ")}`].join(`
`));
    n[e.field] = t;
    return;
  }
  const {
    groupId: r,
    children: o
  } = e;
  o.forEach((s) => {
  });
  if (!e)
    return {};
  const t = {};
  return e.forEach((n) => {
  }), t;
  for (let f = 0; f < s; f += 1) {
      if (g.length === 0)
        return [{
          groupId: w
        }];
      const C = g[g.length - 1], T = C.columnFields[C.columnFields.length - 1];
        groupId: w
      }] : [...g.slice(0, g.length - 1), {
        groupId: w
      }];
    }, []);
  }
  return o;
  let t = {};
  return e.forEach((n) => {
      return;
    const {
      groupId: r,
      children: o
    if (!r)
      throw new Error("MUI X: An element of the columnGroupingModel does not have either `field` or `groupId`.");
    process.env.NODE_ENV !== "production" && (o || console.warn(`MUI X: group groupId=${r} has no children.`));
    const a = J({}, s, {
      groupId: r
    if (c[r] !== void 0 || t[r] !== void 0)
      throw new Error(`MUI X: The groupId ${r} is used multiple times in the columnGroupingModel.`);
    t = J({}, t, c, {
      [r]: a
    });
  }), J({}, t);
  if (!t.columnGroupingModel)
    return e;
    var g;
  }));
  return J({}, e, {
    columnGrouping: {
      lookup: s,
      unwrappedGroupingModel: a,
      headerStructure: c,
      maxDepth: f
    }
  });
    getColumnGroupPath: n,
    getAllGroupDetails: r
  }, "public");
  const s = x.useCallback(() => {
    e.current.setState((f) => {
      var w;
      return J({}, f, {
        columnGrouping: J({}, f.columnGrouping, {
        })
      });
    });
  }, [e, t.columnGroupingModel]), a = x.useCallback((c) => {
    var E, O;
      var I;
    }));
      columnGrouping: {
        unwrappedGroupingModel: w,
        headerStructure: C,
        maxDepth: T
      }
    }));
  }, [e]);
  Ot(e, "columnIndexChange", s), Ot(e, "columnsChange", () => {
    a(t.columnGroupingModel);
  }), Ot(e, "columnVisibilityModelChange", () => {
    a(t.columnGroupingModel);
  }), x.useEffect(() => {
    a(t.columnGroupingModel);
  }, [a, t.columnGroupingModel]);
};
  let e, t;
  const n = new Promise((r, o) => {
    e = r, t = o;
  });
  return n.resolve = e, n.reject = t, n;
}
  if (t !== void 0 && e.changedTouches) {
    for (let n = 0; n < e.changedTouches.length; n += 1) {
      const r = e.changedTouches[n];
      if (r.identifier === t)
        return {
          x: r.clientX,
          y: r.clientY
        };
    }
    return !1;
  }
  return {
    x: e.clientX,
    y: e.clientY
  };
}
  let o = e;
  return r === "Right" ? o += t - n.left : o += n.right - t, o;
}
  return n === "Left" ? e - t.left : t.right - e;
}
  return e === "Right" ? "Left" : "Right";
}
  const n = e.classList.contains(se["columnSeparator--sideRight"]) ? "Right" : "Left";
}
  e.preventDefault(), e.stopImmediatePropagation();
}
  return x.useEffect(() => {
    t.current && r === !1 && (t.current.resolve(), t.current = void 0);
  }), () => {
    if (!t.current) {
      if (n() === !1)
        return Promise.resolve();
    }
    return t.current;
  };
}
  if (e.length < 4)
    return e;
  const n = e.slice();
  n.sort((c, f) => c - f);
  const r = n[Math.floor(n.length * 0.25)], o = n[Math.floor(n.length * 0.75) - 1], s = o - r, a = s < 5 ? 5 : s * t;
  return n.filter((c) => c > r - a && c < o + a);
}
  const r = {}, o = e.current.rootElementRef.current;
  return o.classList.add(se.autosizing), n.forEach((s) => {
    if (t.includeHeaders) {
      if (T) {
      }
    }
  }), o.classList.remove(se.autosizing), r;
}
  columnResize: {
    resizingColumnField: ""
  }
});
  return {
    colDef: void 0,
    initialColWidth: 0,
    initialTotalWidth: 0,
    previousMouseClickEvent: void 0,
    columnHeaderElement: void 0,
    headerFilterElement: void 0,
    groupHeaderElements: [],
    cellElements: [],
    leftPinnedCellsAfter: [],
    rightPinnedCellsBefore: [],
    fillerLeft: void 0,
    fillerRight: void 0,
    leftPinnedHeadersAfter: [],
    rightPinnedHeadersBefore: []
  };
}
      const te = X;
      let re;
    }), o.cellElements.forEach((X) => {
      const te = X;
      let re;
    });
    const ee = e.current.unstable_applyPipeProcessors("isColumnPinned", !1, o.colDef.field);
    }), o.leftPinnedHeadersAfter.forEach((X) => {
    }), o.rightPinnedHeadersBefore.forEach((X) => {
    }));
        return;
      }
    }
    if (o.colDef) {
      e.current.setColumnWidth(o.colDef.field, o.colDef.width), r.debug(`Updating col ${o.colDef.field} with new width: ${o.colDef.width}`);
      o.groupHeaderElements.forEach((q) => {
      });
    }
    c.start(0, () => {
    });
    var G;
    const ee = e.current.unstable_applyPipeProcessors("isColumnPinned", !1, o.colDef.field);
      return;
    }
    const q = {
      element: o.columnHeaderElement,
      colDef: o.colDef,
    };
      return;
      return;
    }
      element: o.columnHeaderElement,
      colDef: o.colDef,
      width: q
    };
      return;
    q != null && (f.current = q.identifier);
    r.debug(`Start Resize on col ${ee.field}`), e.current.publishEvent("columnResizeStart", {
    G.addEventListener("touchmove", E), G.addEventListener("touchend", T);
    }, 100), o.columnHeaderElement && (o.columnHeaderElement.style.pointerEvents = "unset");
  }, [e, o, C, w, E, T]), I = x.useCallback(({
  }) => {
      })
    })), e.current.forceUpdate();
  }, [e]), M = x.useCallback(() => {
        resizingColumnField: ""
      })
    })), e.current.forceUpdate();
      return;
      return;
    q.resizable !== !1 && e.current.autosizeColumns(J({}, t.autosizeOptions, {
      disableColumnVirtualization: !1,
      columns: [q.field]
    }));
    var ee;
      return;
    });
    try {
        width: G[X.field],
        computedWidth: G[X.field],
        flex: 0
      }));
            de.width += ie, de.computedWidth += ie;
          });
        }
      }
          const re = X.width;
          e.current.publishEvent("columnWidthChange", {
            element: e.current.getColumnHeaderElement(X.field),
            colDef: X,
            width: re
          });
        }
      });
    } finally {
    }
    t.autosizeOnMount && Promise.resolve().then(() => {
      e.current.autosizeColumns(t.autosizeOptions);
    });
  }, "touchstart", O, {
    passive: !0
};
  e && (e.style[t] = `${parseInt(e.style[t], 10) + n}px`);
}
  return e.firstRowIndex >= t.firstRowIndex && e.lastRowIndex <= t.lastRowIndex ? null : e.firstRowIndex >= t.firstRowIndex && e.lastRowIndex > t.lastRowIndex ? {
    firstRowIndex: t.lastRowIndex,
    lastRowIndex: e.lastRowIndex
  } : e.firstRowIndex < t.firstRowIndex && e.lastRowIndex <= t.lastRowIndex ? {
    firstRowIndex: e.firstRowIndex,
    lastRowIndex: t.firstRowIndex - 1
  } : e;
}
  return e.firstRowIndex !== 0 || e.lastRowIndex !== 0;
}
  if (!e)
    return null;
  let r = e[t.field];
  const o = t.rowSpanValueGetter ?? t.valueGetter;
  return o && (r = o(r, e, t, n)), r;
  spannedCells: {},
  hiddenCells: {},
  hiddenCellOriginMap: {}
  firstRowIndex: 0,
  lastRowIndex: 0
      for (let w = o.firstRowIndex; w < o.lastRowIndex; w += 1) {
        const C = n[w];
          continue;
        if (T == null)
          continue;
        const I = [];
        if (w === o.firstRowIndex) {
              [g.field]: !0
          }
        }
            [g.field]: O
          };
        });
        let M = w + 1;
            [g.field]: !0
            [g.field]: O
        }
        });
      }
      a = {
        firstRowIndex: Math.min(a.firstRowIndex, o.firstRowIndex),
        lastRowIndex: Math.max(a.lastRowIndex, o.lastRowIndex)
      };
    }
  }), {
    spannedCells: c,
    hiddenCells: f,
    processedRange: a
  };
  if (e.pagination) {
    return r > 0 && (o = r - 1), {
      firstRowIndex: 0,
      lastRowIndex: Math.min(o, n)
    };
  }
  return {
    firstRowIndex: 0,
  };
  var T;
  if (!t.unstable_rowSpanning)
    return J({}, e, {
    });
  const r = e.rows.dataRowIds || [], o = e.columns.orderedFields || [], s = e.rows.dataRowIdToModelLookup, a = e.columns.lookup, c = !!e.filter.filterModel.items.length || !!((T = e.filter.filterModel.quickFilterValues) != null && T.length);
  if (!r.length || !o.length || !s || !a || c)
    return J({}, e, {
    });
    id: E,
    model: s[E]
  })), g = o.map((E) => a[E]), {
    hiddenCells: w,
    hiddenCellOriginMap: C
  return J({}, e, {
    rowSpanning: {
      hiddenCells: w,
      hiddenCellOriginMap: C
    }
  });
    const {
      range: c,
      rows: f
      pagination: t.pagination,
      paginationMode: t.paginationMode
    });
      return;
      firstRowIndex: s.firstRowIndex,
      lastRowIndex: Math.min(s.lastRowIndex, c.lastRowIndex + 1)
    }, n.current);
      return;
      hiddenCells: w,
      hiddenCellOriginMap: C,
      processedRange: T
    n.current = T;
      rowSpanning: {
        hiddenCells: w,
        hiddenCellOriginMap: C
      }
    }));
  }, [e, n, t.pagination, t.paginationMode]), o = x.useCallback(() => {
  }, [e, r]);
    }));
  }, [e, o, t.unstable_rowSpanning]);
  listViewColumn: t.unstable_listColumn ? J({}, t.unstable_listColumn, {
  }) : void 0
});
  const n = () => {
    e.current.setState((s) => s.listViewColumn ? J({}, s, {
      listViewColumn: J({}, s.listViewColumn, {
      })
    }) : s);
  }, r = x.useRef(null);
  Ot(e, "viewportInnerSizeChange", (s) => {
    r.current !== s.width && (r.current = s.width, n());
    const s = t.unstable_listColumn;
    s && e.current.setState((a) => J({}, a, {
      listViewColumn: J({}, s, {
      })
    }));
  }, [e, t.unstable_listColumn]), x.useEffect(() => {
  }, [t.unstable_listView, t.unstable_listColumn]);
}
}
  const {
    classes: t,
    headerAlign: n,
    isDragging: r,
    isLastColumn: o,
    showLeftBorder: s,
    showRightBorder: a,
    groupId: c,
    pinnedPosition: f
    draggableContainer: ["columnHeaderDraggableContainer"],
    titleContainer: ["columnHeaderTitleContainer", "withBorderColor"],
    titleContainerContent: ["columnHeaderTitleContainerContent"]
  };
};
  var te;
  const {
    groupId: t,
    width: n,
    depth: r,
    maxDepth: o,
    fields: s,
    height: a,
    colIndex: c,
    hasFocus: f,
    isLastColumn: g,
    pinnedOffset: w
    headerName: M = t ?? "",
  } = I;
    groupId: t,
    headerName: M,
    depth: r,
    maxDepth: o,
    fields: s,
    colIndex: c,
    isLastColumn: g
    classes: C.classes,
    depth: r,
    isDragging: !1
  x.useLayoutEffect(() => {
    if (f) {
      const Q = E.current.querySelector('[tabindex="0"]') || E.current;
      Q == null || Q.focus();
    }
  }, [O, f]);
  const ee = x.useCallback(
    (re) => (Q) => {
    },
    // For now this is stupid, because renderParams change all the time.
    // Need to move it's computation in the api, such that for a given depth+columnField, I can get the group parameters
  ), G = x.useMemo(() => ({
    onKeyDown: ee("columnGroupHeaderKeyDown"),
    onFocus: ee("columnGroupHeaderFocus"),
    onBlur: ee("columnGroupHeaderBlur")
    ref: E,
    columnMenuOpen: !1,
    colIndex: c,
    height: a,
    isResizing: !1,
    sortDirection: null,
    hasFocus: !1,
    isDraggable: !1,
    width: n,
    columnMenuIconButton: null,
    columnTitleIconButtons: null,
    resizable: !1,
    "aria-colspan": s.length,
    "data-fields": `|-${s.join("-|-")}-|`,
    style: X
  }, G));
}
  name: "MuiDataGrid",
  slot: "ColumnHeaderRow",
  overridesResolver: (e, t) => t.columnHeaderRow
})({
  display: "flex"
  const {
    visibleColumns: t,
    sortColumnLookup: n,
    filterColumnLookup: r,
    columnHeaderTabIndexState: o,
    columnGroupHeaderTabIndexState: s,
    columnHeaderFocus: a,
    columnGroupHeaderFocus: c,
    headerGroupingMaxDepth: f,
    columnVisibility: g,
    hasOtherElementInTabSequence: w
    firstColumnIndex: 0,
    lastColumnIndex: t.length
  const Q = (ge) => {
    const {
    } = ge || {}, pe = fe.firstColumnIndex, be = fe.lastColumnIndex;
    return {
      renderedColumns: t.slice(pe, be),
      firstColumnToRender: pe,
      lastColumnToRender: be
    };
    return /* @__PURE__ */ $.jsxs(x.Fragment, {
      children: [_e && /* @__PURE__ */ $.jsx("div", {
        role: "presentation",
        style: {
          width: Ce
        }
      }), fe, _e && /* @__PURE__ */ $.jsx("div", {
        role: "presentation",
        className: et(se.filler, be && se["filler--borderBottom"])
        header: !0,
        pinnedRight: we,
        borderBottom: be,
        borderTop: !1
      })]
    });
  }, ie = (ge, fe = {}) => {
    const {
      renderedColumns: pe,
      firstColumnToRender: be
    } = Q(ge), we = [];
    for (let _e = 0; _e < pe.length; _e += 1) {
        filterItemsCounter: r[ce.field] && r[ce.field].length,
        headerHeight: q,
        isDragging: ce.field === C,
        colDef: ce,
        colIndex: Ce,
        isResizing: E === ce.field,
        hasFocus: tt,
        tabIndex: Be,
        pinnedPosition: rt,
        pinnedOffset: ot,
        isLastUnpinned: nt,
        isSiblingFocused: gt,
        showLeftBorder: Et,
        showRightBorder: Tt
      }, fe), ce.field));
    }
    role: "row",
    "aria-rowindex": f + 1,
    ownerState: I,
    className: se["row--borderBottom"],
    children: [te && ie({
      renderContext: te
    }, {
      disableReorder: !0
    }), ie({
    }), re && ie({
      renderContext: re
    }, {
      disableReorder: !0,
    })]
  }), ue = ({
    depth: ge,
    params: fe
  }) => {
    var ut, Et;
    const pe = Q(fe);
    if (pe.renderedColumns.length === 0)
      return null;
    const {
      firstColumnToRender: be,
      lastColumnToRender: we
      groupId: Tt,
      columnFields: At
      groupId: Tt,
      columnFields: At
      columnFields: Tt.columnFields.filter((At) => g[At] !== !1)
    })).filter((Tt) => Tt.columnFields.length > 0), ot = rt[0].columnFields.indexOf(ce), gt = rt[0].columnFields.slice(0, ot).reduce((Tt, At) => {
      return Tt + (vt.computedWidth ?? 0);
    }, 0);
    let nt = be;
    const Ft = rt.map(({
      groupId: Tt,
      columnFields: At
    }, vt) => {
      const Xe = c !== null && c.depth === ge && At.includes(c.field), Oe = s !== null && s.depth === ge && At.includes(s.field) ? 0 : -1, Ie = {
        fields: At,
        colIndex: nt
      nt += At.length;
      let zt = vt;
        groupId: Tt,
        width: Ie.width,
        fields: Ie.fields,
        colIndex: Ie.colIndex,
        depth: ge,
        isLastColumn: vt === rt.length - 1,
        maxDepth: f,
        hasFocus: Xe,
        tabIndex: Oe,
        pinnedPosition: pt,
        pinnedOffset: yt,
      }, vt);
    });
  };
  return {
    leftRenderContext: te,
    rightRenderContext: re,
    visibleColumns: t,
    getColumnHeadersRow: de,
    getColumnsToRender: Q,
    getColumnGroupHeadersRows: () => {
      if (f === 0)
        return null;
      const ge = [];
      for (let fe = 0; fe < f; fe += 1)
          role: "row",
          "aria-rowindex": fe + 1,
          ownerState: I,
          children: [te && ue({
            depth: fe,
            params: {
              renderContext: te,
              maxLastColumn: te.lastColumnIndex
            }
          }), ue({
            depth: fe,
            params: {
            }
          }), re && ue({
            depth: fe,
            params: {
              renderContext: re,
              maxLastColumn: re.lastColumnIndex
            }
          })]
        }, fe));
      return ge;
    },
    isDragging: !!C,
    getInnerProps: () => ({
      role: "rowgroup"
    })
  };
  const {
    classes: t
  } = e;
  return mt({
    root: ["columnHeaders"]
  name: "MuiDataGrid",
  slot: "ColumnHeaders",
  overridesResolver: (e, t) => t.columnHeaders
})({
  display: "flex",
  flexDirection: "column",
  borderTopLeftRadius: "var(--unstable_DataGrid-radius)",
  borderTopRightRadius: "var(--unstable_DataGrid-radius)"
  const {
    className: r
    className: et(a.root, r),
    ownerState: s
  }, o, {
    role: "presentation",
    ref: n
  }));
  const {
    visibleColumns: r,
    sortColumnLookup: o,
    filterColumnLookup: s,
    columnHeaderTabIndexState: a,
    columnGroupHeaderTabIndexState: c,
    columnHeaderFocus: f,
    headerGroupingMaxDepth: g,
    columnVisibility: w,
    columnGroupsHeaderStructure: C,
    hasOtherElementInTabSequence: T
    getInnerProps: O,
    getColumnGroupHeadersRows: I
    visibleColumns: r,
    sortColumnLookup: o,
    filterColumnLookup: s,
    columnHeaderTabIndexState: a,
    columnGroupHeaderTabIndexState: c,
    columnHeaderFocus: f,
    headerGroupingMaxDepth: g,
    columnVisibility: w,
    columnGroupsHeaderStructure: C,
    hasOtherElementInTabSequence: T
  });
    ref: n,
  }));
});
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  columnGroupHeaderFocus: u.shape({
    depth: u.number.isRequired,
    field: u.string.isRequired
  }),
  columnGroupHeaderTabIndexState: u.shape({
    depth: u.number.isRequired,
    field: u.string.isRequired
  }),
  columnGroupsHeaderStructure: u.arrayOf(u.arrayOf(u.shape({
    columnFields: u.arrayOf(u.string).isRequired,
    groupId: u.string
  }))).isRequired,
  columnHeaderFocus: u.shape({
    field: u.string.isRequired
  }),
  columnHeaderTabIndexState: u.shape({
    field: u.string.isRequired
  }),
  columnMenuState: u.shape({
    field: u.string,
    open: u.bool.isRequired
  }).isRequired,
  columnVisibility: u.object.isRequired,
  filterColumnLookup: u.object.isRequired,
  hasOtherElementInTabSequence: u.bool.isRequired,
  headerGroupingMaxDepth: u.number.isRequired,
  sortColumnLookup: u.object.isRequired,
  visibleColumns: u.arrayOf(u.object).isRequired
});
  return null;
}
  return null;
}
    ref: n,
    children: o
  }));
  const {
    sortingOrder: n
  return a ? /* @__PURE__ */ $.jsx(a, J({}, r)) : null;
  let {
    native: t
  toolbar: null,
  disableMultipleColumnsFiltering: !0,
  disableMultipleColumnsSorting: !0,
  throttleRowsMs: void 0,
  hideFooterRowCount: !1,
  pagination: !0,
  checkboxSelectionVisibleOnly: !1,
  disableColumnReorder: !0,
  keepColumnPositionIfDraggedOutside: !1,
  signature: "DataGrid",
  unstable_listView: !1
    props: e,
    theme: t,
    name: "MuiDataGrid"
    slots: n.slots
  return x.useMemo(() => J({}, n, s, {
    localeText: r,
    slots: o
  hooks: {
    useCellAggregationResult: () => null
  }
  var s;
    privateApiRef: o,
    props: r,
      className: r.className,
      style: r.style,
      sx: r.sx
    }, r.forwardedProps, (s = r.slotProps) == null ? void 0 : s.root, {
      ref: n
    }))
  });
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The ref object that allows Data Grid manipulation. Can be instantiated with `useGridApiRef()`.
   */
  apiRef: u.shape({
    current: u.object.isRequired
  }),
  /**
   * The label of the Data Grid.
   */
  "aria-label": u.string,
  /**
   * The id of the element containing a label for the Data Grid.
   */
  "aria-labelledby": u.string,
  /**
   * If `true`, the Data Grid height is dynamic and follows the number of rows in the Data Grid.
   * @default false
   * @deprecated Use flex parent container instead: https://mui.com/x/react-data-grid/layout/#flex-parent-container
   * @example
   * <div style={{ display: 'flex', flexDirection: 'column' }}>
   *   <DataGrid />
   * </div>
   */
  autoHeight: u.bool,
  /**
   * If `true`, the pageSize is calculated according to the container size and the max number of rows to avoid rendering a vertical scroll bar.
   * @default false
   */
  autoPageSize: u.bool,
  /**
   * If `true`, columns are autosized after the datagrid is mounted.
   * @default false
   */
  autosizeOnMount: u.bool,
  /**
   * The options for autosize when user-initiated.
   */
  autosizeOptions: u.shape({
    columns: u.arrayOf(u.string),
    disableColumnVirtualization: u.bool,
    expand: u.bool,
    includeHeaders: u.bool,
    includeOutliers: u.bool,
    outliersFactor: u.number
  }),
  /**
   * Controls the modes of the cells.
   */
  cellModesModel: u.object,
  /**
   * If `true`, the Data Grid will display an extra column with checkboxes for selecting rows.
   * @default false
   */
  checkboxSelection: u.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: u.object,
  /**
   * The character used to separate cell values when copying to the clipboard.
   * @default '\t'
   */
  clipboardCopyCellDelimiter: u.string,
  /**
   * Column region in pixels to render before/after the viewport
   * @default 150
   */
  columnBufferPx: u.number,
  /**
   * Sets the height in pixels of the column group headers in the Data Grid.
   * Inherits the `columnHeaderHeight` value if not set.
   */
  columnGroupHeaderHeight: u.number,
  columnGroupingModel: u.arrayOf(u.object),
  /**
   * Sets the height in pixel of the column headers in the Data Grid.
   * @default 56
   */
  columnHeaderHeight: u.number,
  /**
   * Set of columns of type [[GridColDef]][].
   */
  columns: u.arrayOf(u.object).isRequired,
  /**
   * Set the column visibility model of the Data Grid.
   * If defined, the Data Grid will ignore the `hide` property in [[GridColDef]].
   */
  columnVisibilityModel: u.object,
  /**
   * Set the density of the Data Grid.
   * @default "standard"
   */
  density: u.oneOf(["comfortable", "compact", "standard"]),
  /**
   * If `true`, column autosizing on header separator double-click is disabled.
   * @default false
   */
  disableAutosize: u.bool,
  /**
   * If `true`, column filters are disabled.
   * @default false
   */
  disableColumnFilter: u.bool,
  /**
   * If `true`, the column menu is disabled.
   * @default false
   */
  disableColumnMenu: u.bool,
  /**
   * If `true`, resizing columns is disabled.
   * @default false
   */
  disableColumnResize: u.bool,
  /**
   * If `true`, hiding/showing columns is disabled.
   * @default false
   */
  disableColumnSelector: u.bool,
  /**
   * If `true`, the column sorting feature will be disabled.
   * @default false
   */
  disableColumnSorting: u.bool,
  /**
   * If `true`, the density selector is disabled.
   * @default false
   */
  disableDensitySelector: u.bool,
  /**
   * If `true`, `eval()` is not used for performance optimization.
   * @default false
   */
  disableEval: u.bool,
  /**
   * If `true`, multiple selection using the Ctrl/CMD or Shift key is disabled.
   * The MIT DataGrid will ignore this prop, unless `checkboxSelection` is enabled.
   * @default false (`!props.checkboxSelection` for MIT Data Grid)
   */
  disableMultipleRowSelection: u.bool,
  /**
   * If `true`, the selection on click on a row or cell is disabled.
   * @default false
   */
  disableRowSelectionOnClick: u.bool,
  /**
   * If `true`, the virtualization is disabled.
   * @default false
   */
  disableVirtualization: u.bool,
  /**
   * Controls whether to use the cell or row editing.
   * @default "cell"
   */
  editMode: u.oneOf(["cell", "row"]),
  /**
   * Use if the actual rowCount is not known upfront, but an estimation is available.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Applicable only with `paginationMode="server"` and when `rowCount="-1"`
   */
  estimatedRowCount: u.number,
  /**
   * Unstable features, breaking changes might be introduced.
   * For each feature, if the flag is not explicitly set to `true`, the feature will be fully disabled and any property / method call will not have any effect.
   */
  experimentalFeatures: u.shape({
    warnIfFocusStateIsNotSynced: u.bool
  }),
  /**
   * The milliseconds delay to wait after a keystroke before triggering filtering.
   * @default 150
   */
  filterDebounceMs: u.number,
  /**
   * Filtering can be processed on the server or client-side.
   * Set it to 'server' if you would like to handle filtering on the server-side.
   * @default "client"
   */
  filterMode: u.oneOf(["client", "server"]),
  /**
   * Set the filter model of the Data Grid.
   */
  filterModel: u.shape({
    items: u.arrayOf(u.shape({
      field: u.string.isRequired,
      id: u.oneOfType([u.number, u.string]),
      operator: u.string.isRequired,
      value: u.any
    })).isRequired,
    logicOperator: u.oneOf(["and", "or"]),
    quickFilterExcludeHiddenColumns: u.bool,
    quickFilterLogicOperator: u.oneOf(["and", "or"]),
    quickFilterValues: u.array
  }),
  /**
   * Forwarded props for the Data Grid root element.
   * @ignore - do not document.
   */
  forwardedProps: u.object,
  /**
   * Function that applies CSS classes dynamically on cells.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {string} The CSS class to apply to the cell.
   */
  getCellClassName: u.func,
  /**
   * Function that returns the element to render in row detail.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {React.JSX.Element} The row detail element.
   */
  getDetailPanelContent: u.func,
  /**
   * Function that returns the estimated height for a row.
   * Only works if dynamic row height is used.
   * Once the row height is measured this value is discarded.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {number | null} The estimated row height value. If `null` or `undefined` then the default row height, based on the density, is applied.
   */
  getEstimatedRowHeight: u.func,
  /**
   * Function that applies CSS classes dynamically on rows.
   * @param {GridRowClassNameParams} params With all properties from [[GridRowClassNameParams]].
   * @returns {string} The CSS class to apply to the row.
   */
  getRowClassName: u.func,
  /**
   * Function that sets the row height per row.
   * @param {GridRowHeightParams} params With all properties from [[GridRowHeightParams]].
   * @returns {GridRowHeightReturnValue} The row height value. If `null` or `undefined` then the default row height is applied. If "auto" then the row height is calculated based on the content.
   */
  getRowHeight: u.func,
  /**
   * Return the id of a given [[GridRowModel]].
   * Ensure the reference of this prop is stable to avoid performance implications.
   * It could be done by either defining the prop outside of the component or by memoizing it.
   */
  getRowId: u.func,
  /**
   * Function that allows to specify the spacing between rows.
   * @param {GridRowSpacingParams} params With all properties from [[GridRowSpacingParams]].
   * @returns {GridRowSpacing} The row spacing values.
   */
  getRowSpacing: u.func,
  /**
   * If `true`, the footer component is hidden.
   * @default false
   */
  hideFooter: u.bool,
  /**
   * If `true`, the pagination component in the footer is hidden.
   * @default false
   */
  hideFooterPagination: u.bool,
  /**
   * If `true`, the selected row count in the footer is hidden.
   * @default false
   */
  hideFooterSelectedRowCount: u.bool,
  /**
   * If `true`, the diacritics (accents) are ignored when filtering or quick filtering.
   * E.g. when filter value is `cafe`, the rows with `café` will be visible.
   * @default false
   */
  ignoreDiacritics: u.bool,
  /**
   * If `true`, the Data Grid will not use `valueFormatter` when exporting to CSV or copying to clipboard.
   * If an object is provided, you can choose to ignore the `valueFormatter` for CSV export or clipboard export.
   * @default false
   */
  ignoreValueFormatterDuringExport: u.oneOfType([u.shape({
    clipboardExport: u.bool,
    csvExport: u.bool
  }), u.bool]),
  /**
   * If `select`, a group header checkbox in indeterminate state (like "Select All" checkbox)
   * will select all the rows under it.
   * If `deselect`, it will deselect all the rows under it.
   * Works only if `checkboxSelection` is enabled.
   * @default "deselect"
   * @deprecated `select` will be the default behavior from v8 onwards
   */
  indeterminateCheckboxAction: u.oneOf(["deselect", "select"]),
  /**
   * The initial state of the DataGrid.
   * The data in it will be set in the state on initialization but will not be controlled.
   * If one of the data in `initialState` is also being controlled, then the control state wins.
   */
  initialState: u.object,
  /**
   * Callback fired when a cell is rendered, returns true if the cell is editable.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @returns {boolean} A boolean indicating if the cell is editable.
   */
  isCellEditable: u.func,
  /**
   * Determines if a row can be selected.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @returns {boolean} A boolean indicating if the row is selectable.
   */
  isRowSelectable: u.func,
  /**
   * If `true`, the selection model will retain selected rows that do not exist.
   * Useful when using server side pagination and row selections need to be retained
   * when changing pages.
   * @default false
   */
  keepNonExistentRowsSelected: u.bool,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: u.bool,
  /**
   * Set the locale text of the Data Grid.
   * You can find all the translation keys supported in [the source](https://github.com/mui/mui-x/blob/HEAD/packages/x-data-grid/src/constants/localeTextConstants.ts) in the GitHub repository.
   */
  localeText: u.object,
  /**
   * Pass a custom logger in the components that implements the [[Logger]] interface.
   * @default console
   */
  logger: u.shape({
    debug: u.func.isRequired,
    error: u.func.isRequired,
    info: u.func.isRequired,
    warn: u.func.isRequired
  }),
  /**
   * Allows to pass the logging level or false to turn off logging.
   * @default "error" ("warn" in dev mode)
   */
  logLevel: u.oneOf(["debug", "error", "info", "warn", !1]),
  /**
   * Nonce of the inline styles for [Content Security Policy](https://www.w3.org/TR/2016/REC-CSP2-20161215/#script-src-the-nonce-attribute).
   */
  nonce: u.string,
  /**
   * Callback fired when any cell is clicked.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellClick: u.func,
  /**
   * Callback fired when a double click event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellDoubleClick: u.func,
  /**
   * Callback fired when the cell turns to edit mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStart: u.func,
  /**
   * Callback fired when the cell turns to view mode.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onCellEditStop: u.func,
  /**
   * Callback fired when a keydown event comes from a cell element.
   * @param {GridCellParams} params With all properties from [[GridCellParams]].
   * @param {MuiEvent<React.KeyboardEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellKeyDown: u.func,
  /**
   * Callback fired when the `cellModesModel` prop changes.
   * @param {GridCellModesModel} cellModesModel Object containing which cells are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onCellModesModelChange: u.func,
  /**
   * Callback called when the data is copied to the clipboard.
   * @param {string} data The data copied to the clipboard.
   */
  onClipboardCopy: u.func,
  /**
   * Callback fired when a click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderClick: u.func,
  /**
   * Callback fired when a contextmenu event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   */
  onColumnHeaderContextMenu: u.func,
  /**
   * Callback fired when a double click event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderDoubleClick: u.func,
  /**
   * Callback fired when a mouse enter event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderEnter: u.func,
  /**
   * Callback fired when a mouse leave event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderLeave: u.func,
  /**
   * Callback fired when a mouseout event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOut: u.func,
  /**
   * Callback fired when a mouseover event comes from a column header element.
   * @param {GridColumnHeaderParams} params With all properties from [[GridColumnHeaderParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnHeaderOver: u.func,
  /**
   * Callback fired when a column is reordered.
   * @param {GridColumnOrderChangeParams} params With all properties from [[GridColumnOrderChangeParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnOrderChange: u.func,
  /**
   * Callback fired while a column is being resized.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnResize: u.func,
  /**
   * Callback fired when the column visibility model changes.
   * @param {GridColumnVisibilityModel} model The new model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnVisibilityModelChange: u.func,
  /**
   * Callback fired when the width of a column is changed.
   * @param {GridColumnResizeParams} params With all properties from [[GridColumnResizeParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onColumnWidthChange: u.func,
  /**
   * Callback fired when the density changes.
   * @param {GridDensity} density New density value.
   */
  onDensityChange: u.func,
  /**
   * Callback fired when the Filter model changes before the filters are applied.
   * @param {GridFilterModel} model With all properties from [[GridFilterModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onFilterModelChange: u.func,
  /**
   * Callback fired when the menu is closed.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuClose: u.func,
  /**
   * Callback fired when the menu is opened.
   * @param {GridMenuParams} params With all properties from [[GridMenuParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onMenuOpen: u.func,
  /**
   * Callback fired when the pagination meta has changed.
   * @param {GridPaginationMeta} paginationMeta Updated pagination meta.
   */
  onPaginationMetaChange: u.func,
  /**
   * Callback fired when the pagination model has changed.
   * @param {GridPaginationModel} model Updated pagination model.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPaginationModelChange: u.func,
  /**
   * Callback fired when the preferences panel is closed.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelClose: u.func,
  /**
   * Callback fired when the preferences panel is opened.
   * @param {GridPreferencePanelParams} params With all properties from [[GridPreferencePanelParams]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onPreferencePanelOpen: u.func,
  /**
   * Callback called when `processRowUpdate` throws an error or rejects.
   * @param {any} error The error thrown.
   */
  onProcessRowUpdateError: u.func,
  /**
   * Callback fired when the Data Grid is resized.
   * @param {ElementSize} containerSize With all properties from [[ElementSize]].
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onResize: u.func,
  /**
   * Callback fired when a row is clicked.
   * Not called if the target clicked is an interactive element added by the built-in columns.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowClick: u.func,
  /**
   * Callback fired when the row count has changed.
   * @param {number} count Updated row count.
   */
  onRowCountChange: u.func,
  /**
   * Callback fired when a double click event comes from a row container element.
   * @param {GridRowParams} params With all properties from [[RowParams]].
   * @param {MuiEvent<React.MouseEvent>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowDoubleClick: u.func,
  /**
   * Callback fired when the row turns to edit mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<React.KeyboardEvent | React.MouseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStart: u.func,
  /**
   * Callback fired when the row turns to view mode.
   * @param {GridRowParams} params With all properties from [[GridRowParams]].
   * @param {MuiEvent<MuiBaseEvent>} event The event that caused this prop to be called.
   */
  onRowEditStop: u.func,
  /**
   * Callback fired when the `rowModesModel` prop changes.
   * @param {GridRowModesModel} rowModesModel Object containing which rows are in "edit" mode.
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowModesModelChange: u.func,
  /**
   * Callback fired when the selection state of one or multiple rows changes.
   * @param {GridRowSelectionModel} rowSelectionModel With all the row ids [[GridSelectionModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onRowSelectionModelChange: u.func,
  /**
   * Callback fired when the sort model changes before a column is sorted.
   * @param {GridSortModel} model With all properties from [[GridSortModel]].
   * @param {GridCallbackDetails} details Additional details for this callback.
   */
  onSortModelChange: u.func,
  /**
   * Callback fired when the state of the Data Grid is updated.
   * @param {GridState} state The new state.
   * @param {MuiEvent<{}>} event The event object.
   * @param {GridCallbackDetails} details Additional details for this callback.
   * @ignore - do not document.
   */
  onStateChange: u.func,
  /**
   * Select the pageSize dynamically using the component UI.
   * @default [25, 50, 100]
   */
  pageSizeOptions: u.arrayOf(u.oneOfType([u.number, u.shape({
    label: u.string.isRequired,
    value: u.number.isRequired
  })]).isRequired),
  pagination: u.oneOf([!0]),
  /**
   * The extra information about the pagination state of the Data Grid.
   * Only applicable with `paginationMode="server"`.
   */
  paginationMeta: u.shape({
    hasNextPage: u.bool
  }),
  /**
   * Pagination can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle the pagination on the client-side.
   * Set it to 'server' if you would like to handle the pagination on the server-side.
   * @default "client"
   */
  paginationMode: u.oneOf(["client", "server"]),
  /**
   * The pagination model of type [[GridPaginationModel]] which refers to current `page` and `pageSize`.
   */
  paginationModel: u.shape({
    page: u.number.isRequired,
    pageSize: u.number.isRequired
  }),
  /**
   * Callback called before updating a row with new values in the row and cell editing.
   * @template R
   * @param {R} newRow Row object with the new values.
   * @param {R} oldRow Row object with the old values.
   * @param {{ rowId: GridRowId }} params Additional parameters.
   * @returns {Promise<R> | R} The final values to update the row.
   */
  processRowUpdate: u.func,
  /**
   * If `true`, the page is set to 0 after each sorting or filtering.
   * This prop will be removed in the next major version and resetting the page will become the default behavior.
   * @default false
   */
  resetPageOnSortFilter: u.bool,
  /**
   * The milliseconds throttle delay for resizing the grid.
   * @default 60
   */
  resizeThrottleMs: u.number,
  /**
   * Row region in pixels to render before/after the viewport
   * @default 150
   */
  rowBufferPx: u.number,
  /**
   * Set the total number of rows, if it is different from the length of the value `rows` prop.
   * If some rows have children (for instance in the tree data), this number represents the amount of top level rows.
   * Only works with `paginationMode="server"`, ignored when `paginationMode="client"`.
   */
  rowCount: u.number,
  /**
   * Sets the height in pixel of a row in the Data Grid.
   * @default 52
   */
  rowHeight: u.number,
  /**
   * Controls the modes of the rows.
   */
  rowModesModel: u.object,
  /**
   * The milliseconds delay to wait after measuring the row height before recalculating row positions.
   * Setting it to a lower value could be useful when using dynamic row height,
   * but might reduce performance when displaying a large number of rows.
   * @default 166
   * @deprecated
   */
  rowPositionsDebounceMs: u.number,
  /**
   * Set of rows of type [[GridRowsProp]].
   * @default []
   */
  rows: u.arrayOf(u.object),
  /**
   * If `false`, the row selection mode is disabled.
   * @default true
   */
  rowSelection: u.bool,
  /**
   * Sets the row selection model of the Data Grid.
   */
  rowSelectionModel: u.oneOfType([u.arrayOf(u.oneOfType([u.number, u.string]).isRequired), u.number, u.string]),
  /**
   * Sets the type of space between rows added by `getRowSpacing`.
   * @default "margin"
   */
  rowSpacingType: u.oneOf(["border", "margin"]),
  /**
   * Override the height/width of the Data Grid inner scrollbar.
   */
  scrollbarSize: u.number,
  /**
   * If `true`, vertical borders will be displayed between cells.
   * @default false
   */
  showCellVerticalBorder: u.bool,
  /**
   * If `true`, vertical borders will be displayed between column header items.
   * @default false
   */
  showColumnVerticalBorder: u.bool,
  /**
   * Overridable components props dynamically passed to the component at rendering.
   */
  slotProps: u.object,
  /**
   * Overridable components.
   */
  slots: u.object,
  /**
   * Sorting can be processed on the server or client-side.
   * Set it to 'client' if you would like to handle sorting on the client-side.
   * Set it to 'server' if you would like to handle sorting on the server-side.
   * @default "client"
   */
  sortingMode: u.oneOf(["client", "server"]),
  /**
   * The order of the sorting sequence.
   * @default ['asc', 'desc', null]
   */
  sortingOrder: u.arrayOf(u.oneOf(["asc", "desc"])),
  /**
   * Set the sort model of the Data Grid.
   */
  sortModel: u.arrayOf(u.shape({
    field: u.string.isRequired,
    sort: u.oneOf(["asc", "desc"])
  })),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: u.oneOfType([u.arrayOf(u.oneOfType([u.func, u.object, u.bool])), u.func, u.object]),
  /**
   * If `true`, the Data Grid will auto span the cells over the rows having the same value.
   * @default false
   */
  unstable_rowSpanning: u.bool,
  /**
   * If `true`, the Data Grid enables column virtualization when `getRowHeight` is set to `() => 'auto'`.
   * By default, column virtualization is disabled when dynamic row height is enabled to measure the row height correctly.
   * For datasets with a large number of columns, this can cause performance issues.
   * The downside of enabling this prop is that the row height will be estimated based the cells that are currently rendered, which can cause row height change when scrolling horizontally.
   * @default false
   */
  virtualizeColumnsWithAutoRowHeight: u.bool
};
  d: "M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z"
}), "Edit");
        }
      field: "actions",
      headerName: "",
      width: 80,
      sortable: !1,
      filterable: !1,
    {
    }
}
  { label: "One time", value: "one_time" },
  { label: "Monthly", value: "month" },
  { label: "Yearly", value: "year" }
];
  x.useEffect(() => {
  }, [t, e]);
    try {
        return;
      }
        productId: t.id,
        currency: w,
        interval: g
        name: o,
        description: a,
        currency: w,
        interval: g
      }), M("Product created successfully.")), await r();
    } finally {
      E(!1);
    }
  }
    /* @__PURE__ */ $.jsxs("div", { children: [
    ] }),
      /* @__PURE__ */ $.jsx(
        {
          label: "Description",
          value: a,
          multiline: !0,
          minRows: 3,
        }
      ),
      /* @__PURE__ */ $.jsx(
        {
          label: "Price",
          value: f,
          required: !0
        }
      ),
        /* @__PURE__ */ $.jsx(
          {
            labelId: "billing-label",
            label: "Billing",
            value: g,
          }
        )
      ] }),
      /* @__PURE__ */ $.jsx(
        {
          label: "Currency",
          value: w,
          inputProps: { maxLength: 3, style: { textTransform: "uppercase" } }
        }
      )
    ] }),
    ] })
  ] }) });
}
    () => [
      { label: "MRR", value: "$3,840", change: 12 },
      { label: "Active subscribers", value: "482", change: 8 },
      { label: "Conversion rate", value: "6.4%", change: -2 }
    ],
    []
  ), g = x.useMemo(
    () => Array.from({ length: 12 }).map((C, T) => ({
      date: `2024-${String(T + 1).padStart(2, "0")}-01`,
      amount: Math.round(2e3 + Math.random() * 1500)
    })),
    []
  );
  x.useEffect(() => {
  }, []);
    try {
      o(!0);
      n(C);
    } catch (C) {
      console.error("Failed to load products", C);
    } finally {
      o(!1);
    }
  }
  async function w() {
  }
    ] }) }),
        ] }),
      ] }),
        /* @__PURE__ */ $.jsxs(
          {
            direction: { xs: "column", sm: "row" },
            justifyContent: "space-between",
            alignItems: { xs: "flex-start", sm: "center" },
            spacing: 2,
            children: [
              ] }),
              /* @__PURE__ */ $.jsx(
                {
                  variant: "contained",
                  onClick: () => {
                    f(null), a(!0);
                  },
                  children: "New product"
                }
              )
            ]
          }
        ),
        /* @__PURE__ */ $.jsx(
          {
            products: t,
            loading: r,
            onEdit: (C) => {
              f(C), a(!0);
            }
          }
        )
      ] })
    ] }) }),
    /* @__PURE__ */ $.jsx(
      {
        open: s,
        product: c,
        onClose: () => a(!1),
        onUpdated: async () => {
        }
      }
    )
  ] });
}
  return x.useEffect(() => {
    async function c() {
      const {
      a(g), o(!1), !g && n.pathname !== "/login" && t("/login");
    }
    c();
    });
    return () => {
      f.subscription.unsubscribe();
    };
}
  palette: {
    mode: "light",
    primary: {
      main: "#6054d0"
    },
    secondary: {
      main: "#f48fb1"
    }
  }
});
      /* @__PURE__ */ $.jsx(
        {
          path: "/",
        }
      ),
      /* @__PURE__ */ $.jsx(
        {
          path: "/dashboard",
        }
      ),
    ] })
  ] });
}
);
